#!/bin/sh
# Tycho start-up script for use in Ptolemy installations \
	exec itkwish "$0" "$@"

# Master initialization file for Tycho.
# Sourcing this file will open one or more tycho editors, depending
# on the command-line arguments.  If no command-line arguments are given,
# then a console window is opened.
#
# Mpte that this script is intended for use in installations
# which may include the full Tycho installations and Ptolemy.
# Although it can be invoked directly from the command line, it
# is usually passed to a Tcl-enabled binary chosen from a shell
# script.
#
# @Authors: Edward A. Lee, Christopher Hylands
#
# @Version: @(#)pttycho	1.2   02/25/98
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY


# FIXME: this is for debugging only, and should go away
proc ::tycho::_announce { msg } {
    global tyDebug
    if [info exists tyDebug] {
	puts $msg
	flush stdout
	update
    }
}

# We don't use the toplevel window called ".", so withdraw it.

if [info exists tk_version] {
    wm withdraw .
    tk appname tycho
}

# Check for Itcl2.1 first, since Itcl2.0 does not have [file join . . .]
if {${itcl::version} < 2.1} {
    error "Tycho must be run under Itcl2.1 or later, as Itcl2.0 does
    not have the tcl7.5 'file join' command, which is used for portability.
    If you are running tycho standalone, then you need an Itcl2.1 itkwish
    binary, so you should check your path for a different itkwish binary.
    If you are running tycho with Ptolemy, then you need to install
    Itcl2.1 and recompile tysh."
    exit 3
}

# Currently we check this variable to workaround a bug
if {$tcl_platform(platform) == "macintosh"} {
    set tyDebug 1
    set tyMacBug 1
}

########################################################################
# If the environment variable TYCHO is set, use that to determine
# where the tycho libraries are.  Otherwise, use PTOLEMY.  If neither
# is set, try to find a user named ptolemy.  If all this fails, issue
# an error message.
#
global ::env ::tk_library ::tk_version
global ::ptolemy ::PTOLEMY
global ::tycho ::TYCHO

if [info exist env(TYCHO)] {
    set tycho $env(TYCHO)
    set TYCHO $env(TYCHO)
}

if [info exist env(PTOLEMY)] {
    set ptolemy $env(PTOLEMY)
    set PTOLEMY $env(PTOLEMY)
    if {![info exists tycho]} {
	set tycho [file join $ptolemy tycho]
	set TYCHO [file join $ptolemy tycho]
    }
}

if {![info exists tycho]} {
    # Neither environment variable is set.
    # See whether there is a ~ptolemy or ~ptdesign user, in that order,
    # that has tycho installed.
    if [file exists [glob [file join ~ptolemy tycho]]] {
	set tycho [glob [file join ~ptolemy tycho]]
	set TYCHO $tycho
    } {
	if [file exists [glob [file join ~ptdesign tycho]]] {
	    set tycho [glob [file join ~ptdesign tycho]]
	    set TYCHO $tycho
	}
    }
}

if {![info exists tycho] || ![file exists $tycho]} {
    # All of the above failed, give up
    error {To run tycho, set your environment variable TYCHO to the tycho home}
}

# If the ptolemy variables are not yet set, set them relative to tycho.
if {![info exists ptolemy]} {
    set ptolemy [file join $tycho ..]
    set PTOLEMY $ptolemy
}

::tycho::_announce "TYCHO=$TYCHO"

# Note that it is NOT normally acceptable to rely on the TCL_LIBRARY
# and TK_LIBRARY environment variables, because most other tcl
# apps rely on them.  We have to set them here.  However, if Tycho
# is distributed without Ptolemy, we don't know where the libraries
# are, so we have no choice but to rely on the previously set values
# of these variables.  In this case, we assume that we are running
# under itkwish, and therefore the initialization files have already
# been sourced.

if [file isdirectory [file join $PTOLEMY tcltk itcl lib]] {
    
    if { [info exists tk_version] } {
 	if [file isdirectory [file join $PTOLEMY tcltk itcl lib itcl tcl]] {
 	    # Check the environment variables here, rather
 	    # than just overriding them.
 	    if ![info exists env(TCL_LIBRARY)] {
 		set env(TCL_LIBRARY) [file join $PTOLEMY \
 			tcltk itcl lib itcl tcl]
 	    }
 	    if ![info exists env(TK_LIBRARY)] {
 		set env(TK_LIBRARY) [file join $PTOLEMY \
 			tcltk itcl lib itcl tk]
 	    }
 	    set tk_library $env(TK_LIBRARY)
 	    uplevel #0 { 
 		if [catch {
 		    source [file join $PTOLEMY \
 			    tcltk itcl lib itcl tcl init.tcl]
 		    source [file join $PTOLEMY \
 			    tcltk itcl lib itcl tk tk.tcl]
 		    source [file join $PTOLEMY \
 			    tcltk itcl lib itcl itcl itcl.tcl]
 		    source [file join $PTOLEMY \
 			    tcltk itcl lib itcl itk itk.tcl]
 		    source [file join $PTOLEMY \
 			    tcltk itcl lib itcl iwidgets iwidgets.tcl]
 		} errMsg ] {
 		    puts "Error sourcing Ptolemy tcltk files:\n\
 			    $errMsg\n\n This sort of thing could happen if\
 			    you are using a itkwish that is a later\n\
 			    release than the itkwish in your\
 			    Ptolemy installation.\n Or it could mean trouble\
 			    with your Ptolemy tcltk installation.\n\
 			    Continuing. . ."
 		}
 	    }
 	}
    }
}

# Make sure that the tycho path is in the auto_path
if { [lsearch -exact $auto_path $tycho] == -1 } {
    lappend auto_path $tycho
}

# Load the "basic" package
package require tycho.kernel.basic

# Convert command-line arguments into tychofeatures
eval ::tycho::processCommandLine $argv

# Execute the startup procedure
::tycho::start
