##########################################################################
# @Version: @(#)DragDropper.itcl	1.14 07/29/98
# @Author: H. John Reekie
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### DragDropper
#
# The DragDropper is an interactor specialized for "drag-drop"
# type interactions. This is any interaction that starts by clicking
# on one item and ends with the mouse over another item.
#
# <p><b>Options</b>
#
# See also: <a href="Interactor.html">Interactor</a>.
#
# <dl>
# <dt><dd>
# <dl>
# <dt><b>-activatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>. This command should
# be set by the client to perform an action needed when the first
# item is clicked-on.
#
# <dt><b>-deactivatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>. This command
# is executed when the mouse is released. It is set by the client
# to perform the "drop" action. If the mouse is not over a suitable
# target item, the client will already have been informed by a null
# second argument to the *-dragcommand* script.
#
# <dt><b>-dragcommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>. This command
# is executed each time the mouse is moved. It should be used by the
# client to move or change the shape of something. If the mouse
# is currently over a suitable target item (as set by the *-targettag*
# option, the second argument is that item; if not, the second argument
# is null).
#
# <dt><b>-startwhen</b>
# <dd>The mode that controls the way the drag-dropper starts the
# drag-drop sequence. If <b>outside</b>, then the drag-drop
# sequence starts when the cursor moves <b>-sourcehalo</b>
# pixels outside the bounding box of a source item. If
# <b>distance</b>, the drag-drop sequence starts when the
# cursor moves that distance in either axis. The default is
# <b>outside</b>.
#
# <dt><b>-sourcehalo</b>
# <dd>The distance from a source item needed for the mouse to be
# considered no longer over the item.
#
# <dt><b>-sourcepredicate</b>
# <dd>If not null, this script that is executed when the mouse moves
# over an item to which the DragDropper has been bound. If it
# returns 1, then the DragDropper continues with the drag-drop
# sequence (the default if this script is null). If it returns
# zero, the DragDropper does nothing. This can be used to provide
# dynamic control over what the DragDropper considers a suitable
# source item.
#
# <dt><b>-targethalo</b>
# <dd>The distance from a target item needed for the item to be
# considered under the mouse. This is mainly used for thin items
# like lines. By default, this is zero.
#
# <dt><b>-targetpredicate</b>
# <dd>If not null, this script that is executed when the mouse moves
# over an item that has one of the tags given by <b>-targettags</b>.
# If it returns 1, then the DragDropper continues with the drag-drop
# sequence (the default if this script is null). If it returns
# zero, the DragDropper does nothing. This can be used to provide
# dynamic control over what the DragDropper considers a suitable
# target item.
#
# <dt><b>-targettags</b>
# <dd>The tags of suitable target items. Any item with one of these tags
# is highlighted and passed to *-dragcommand* when the mouse moves
# within *-targethalo* pixels of it.
#
# </dl></dl>
#
# <p><b>Bugs</b>: The <i>DragDropper</i> will not work with
# cascaded interactors. This would be useful, for example, for
# gridding and bounding, and must be fixed.
#
# <p><b>Enhancements</b> (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/interactors.html">How interactors work</a>
# <li><a href="../internals/interactors.html">An overview of
#                    interactor classes</a>
# <li><a href="../internals/index.html">Programmer's guide</a>
# <li><a href="index.html">Class documentation index</a>
# </ul>
#
class ::tycho::DragDropper {
    inherit ::tycho::Follower

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c
	eval $this configure $args
    }
    destructor {}

    ###################################################################
    ####                            options                        ####

    # The distance from the mouse to be considered no longer over it
    public variable sourcehalo 0

    # The source item predicate
    public variable sourcepredicate {}

    # The starting mode
    public variable startwhen "outside"

   # The distance from the mouse to be considered under it
    public variable targethalo 0

    # The target item predicate
    public variable targetpredicate {}

    # The tags of target items
    public variable targettags {}

    ###################################################################
    ####                         public methods                    ####

    # Activate the drag-dropper on the current item
    method activate {t x y args}

    # Bind to a tag or item
    method bind {tagOrID args}

    # Start interaction sequence
    method click {x y args}

    # Continue interaction sequence
    method drag {x y}

    # Move mouse over a bound item
    method enter {}

    # Move mouse away from a bound item
    method leave {}

    # Test if the mouse is over the current item
    method overcurrent {x y}

    # Test if the mouse is over a target item
    method overtarget {x y}

    # Terminate interaction sequence
    method release {}

    ###################################################################
    ####                     private variables                     ####

    # A flag that disables the drag-drop sequence
    private variable _disabled 0

    # A flag that enables movement
    private variable _moving 0

    # The target item
    private variable _droptarget ""

    # The start x coordinate
    private variable _startx

    # The start y coordinate
    private variable _starty
}

#######################################################################
#### activate
#
# Activate the dragdropper on an item object. If the drag-drop sequence
# is disabled, this method does nothing. Otherwise it makes bindings
# for mouse motion and release events, and calls <b>-activatecommand</b>
# if it is not null.
# 
body ::tycho::DragDropper::activate {t x y args} {
    if !$_disabled {
        eval chain $t $x $y $args
    }
}

#######################################################################
#### bind 
#
# ``Bind'' a drag-dropper to a tag type. This overrides the superclass
# method to add bindings for entering and leaving the terminal.
#
body ::tycho::DragDropper::bind {t args} {
    # First do the superclass thing
    eval chain $t $args

    # Add bindings for Enter
    $slate bind $t <Enter> "$this enter"
    $slate bind $t <Leave> "$this leave"
}

#######################################################################
#### click
#
# Start the interaction. The client
# usually sets *-activatecommand* to make something useful happen.
#
body ::tycho::DragDropper::click {x y args} {
    # Set state indicating no movement
    set _moving 0

    # Remember starting position
    set _startx $x
    set _starty $y
}

#######################################################################
#### drag
#
# Continue an interaction sequence. If the mouse is still over the
# source item, do nothing. Otherwise, if the mouse is over a suitable
# target item, highlight that item and pass it to the *-dragcommand*
# option. If not, delete a previous highlight and pass null to
# *-dragcommand*.
#
body ::tycho::DragDropper::drag {x y} {
    # See if we have starting moving yet
    if !$_moving {
	if { $startwhen == "outside" } {
	    if [overcurrent $x $y] {
		return
	    }
	} else {
	    if { abs($x-$_startx) > $sourcehalo \
		    || abs($y-$_starty) > $sourcehalo } {
		return
	    }
	}
	set _moving 1
    }

    # See if we overlap any suitable target items
    set item [overtarget $x $y]

    # Adjust highlighting
    if { $_droptarget != "" && $item == "" } {
        $slate unhighlight $_droptarget
    }
    if { $item != "" && $_droptarget == "" } {
        $slate highlight $item
    }
    set _droptarget $item

    # Call -dragcommand
    if { $dragcommand != "" } {
	uplevel \#0 $dragcommand [list $_droptarget] $x $y
    }
}

#######################################################################
#### enter
#
# Move over a bound item. If -sourcepredicate is not null, evaluate
# it and if it returns true, highlight the item and enable the rest
# of the drag-drop sequence. If -sourcepredicate is null, highlight
# the item and enable the rest of the drag-drop sequence.
#
body ::tycho::DragDropper::enter {} {
    set item [$slate find withtag current]
    if { $sourcepredicate != "" } {
        if ![uplevel #0 $sourcepredicate $item] {
            set _disabled 1
            return
        }
    }
    $slate highlight $item
}

#######################################################################
#### leave
#
# Move mouse away from a bound item. This reenables the drag-drop
# sequence if it was disabled.
#
body ::tycho::DragDropper::leave {} {
    # Always reenable the dragdropper
    set _disabled 0

    # Remove the highlight
    $slate unhighlight [$slate find withtag current]
}

#######################################################################
#### release
#
# Let go of the mouse.
#
body ::tycho::DragDropper::release {} {
    if { $_droptarget != "" } {
        $slate unhighlight $_droptarget
    }
    set _droptarget ""
}

#######################################################################
#### overcurrent
#
# See if the mouse is still over the current item. If the mouse
# has been clicked an a source item, then the current item
# will be the source item.
#
body ::tycho::DragDropper::overcurrent {x y} {
    foreach item [eval $slate find overlapping \
	    [::tycho::Rectangle::stretch $x $y $x $y $sourcehalo]] {
        if [$slate hastag $item "current"] {
            return 1
        }
    }
    return 0
}

#######################################################################
#### overtarget
#
# See if the mouse is over a suitable target item. Return the
# item if it is, null if not.
#
body ::tycho::DragDropper::overtarget {x y} {
    foreach item [eval $slate find overlapping \
	    [::tycho::Rectangle::stretch $x $y $x $y $targethalo]] {
	foreach tag $targettags {
	    if [$slate hastag $item $tag] {
                # OK, we're over an item that has the right
                # tag. Now perform an additional test with -targetpredicate
                if { $targetpredicate != "" } {
                    if [uplevel #0 $targetpredicate $item] {
                        return $item
                    }
                } else {
                    return $item
                }
	    }
	}
    }
    return {}
}
