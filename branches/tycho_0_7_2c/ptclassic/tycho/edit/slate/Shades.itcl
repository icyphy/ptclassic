##########################################################################
# A class for managing ``shades'' of colors. <i>Experimental</i>.
#
# @Version: @(#)Shades.itcl	1.12 07/29/98
# @Author: H. John Reekie
#
# @Copyright (c) 1990-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


## Shades
#
# A color class. Any object that needs a color can ask
# for a color object, and then query that object for
# color-related information, such as lighter and darker
# shades of that color.
#
# This object is a classic example of the ``flyweight''
# object paradigm, in which small objects are shared in
# order to avoid creating lots of them. In other words,
# only one instance of a Shades object exists for each 
# distinct color.
#
# Currently, this class is too simple. It needs to provide a better
# selection of colors (i.e. fewer but better colors) in a manner
# that is independent of the X color names.
#
# FIXME: This class needs to be merged with Color.itcl,
#
class ::tycho::Shades {
    inherit ::tycho::Object

    ###################################################################
    ## Public methods and procedures.


    ## new
    #
    # The procedure to use to create a color object. This
    # check is an object of the requested color exists, and
    # returns it if it does. Otherwise, it creates a new
    # object.
    #
    proc new {color} {
	#
	# If a color object of the right color exists, return it
	#
	if { [info exists colorobjects($color) ] } {
	    return $colorobjects($color)

	} elseif { ! [::tycho::lmember $colornames $color] } {
	    #
	    # The requested color is not valid, so return the
	    # default color object. The default color is currently
	    # hard-wired into here, but perhaps it should be
	    # read from the options database?
	    #
	    if { $defaultcolorobject == "" } {
		#
		# Find the default color and make sure it's valid
		#
		set defaultcolor "background"  ;# read from options db?
		if { ! [::tycho::lmember $colornames $defaultcolor] } {
		    set defaultcolor [lhead $colornames]
		}

		#
		# Create the default color object if necessary
		#
		if { ! [info exists colorobjects($defaultcolor)] } {
		    set defaultcolorobject \
			    [namespace current]::[::tycho::Shades \
			    [::tycho::autoName shades]]
		    $defaultcolorobject color $defaultcolor
		    set colorobjects($defaultcolor) $defaultcolorobject
		}
	    }
	    return $defaultcolorobject

	} else {
	    #
	    # Otherwise, create the color object, record it, and return it
	    #
	    set object [namespace current]::[::tycho::Shades \
		    [::tycho::autoName shades]]
	    $object color $color
	    set colorobjects($color) $object
	}
    }

    ## destructor
    #
    # The destructor of a color returns an error, because we
    # never really want to delete colors. The error is an empty
    # string, in the hope that whoever tried to delete the color
    # object just ignores it. I expect this it totally bogus, and
    # think maybe this should be fixed...
    #
    destructor {
	error ""
    }

    ## colors
    #
    # Return a list of the available colors.
    #
    proc colors {} {
	return $colornames
    }

    ## light, gloss, matt, dark
    #
    # Return a color shade. In decreasing brightness, they are
    # light, gloss, matt, and dark. In general, gloss and matt
    # should be used for solid colors, while light and dark are
    # really only for 3D shading effects.
    #
    method light {} { return $light }
    method gloss {} { return $gloss }
    method matt  {} { return $matt }
    method dark  {} { return $dark }



    ###################################################################
    ## Restricted access.

    ## colorobjects
    #
    # An array of color objects, used to avoid duplicating
    # objects.
    #
    common colorobjects


    ## defaultcolorobject
    #
    # The default color object, returned when an invalid color
    # is requested.
    #
    common defaultcolorobject ""


    ## color
    #
    # Set the color of a color object. This is a private method,
    # to a) prevent anyone from changing the color, and b) to make
    # the constructor sufficiently useless that color objects are
    # are created only through the procedure Shades::new.
    #
    private method color {color} {

	switch -exact $color {

	    "background" {
		set light "grey93"
		set gloss "grey88"
		set matt  "grey85"
		set dark  "grey75"
	    }

	    "lightgrey" {
		set light "grey100"
		set gloss "grey90"
		set matt  "grey80"
		set dark  "grey70"
	    }

	    "grey" {
		set light "grey90"
		set gloss "grey80"
		set matt  "grey70"
		set dark  "grey50"
	    }

	    "darkgrey" {
		set light "grey70"
		set gloss "grey60"
		set matt  "grey50"
		set dark  "grey30"
	    }

	    default {
		set light ${color}1
		set gloss ${color}2
		set matt  ${color}3
		set dark  ${color}4
	    }
	}
    }


    ## light, gloss, matt, dark
    #
    # Different shades of the color, for access later by the client.
    #
    private variable light
    private variable gloss
    private variable matt
    private variable dark


    ## colornames
    #
    # Legal colors. First line are manufactured shades of grey,
    # other lines are color shades found using showrgb. These
    # should probably be found dynamically.
    #
    common colornames {
	background lightgrey grey darkgrey
	antiquewhite aquamarine azure bisque blue
	brown burlywood cadetblue chartreuse
	chocolate coral cornsilk cyan darkgoldenrod
	darkolivegreen darkorange darkorchid
	darkseagreen darkslategray deeppink
	deepskyblue dodgerblue firebrick gold
	goldenrod green honeydew hotpink indianred
	ivory khaki lavenderblush lemonchiffon
	lightblue lightcyan lightgoldenrod lightpink
	lightsalmon lightskyblue lightsteelblue
	lightyellow magenta maroon mediumorchid
	mediumpurple mistyrose navajowhite olivedrab
	orange orangered orchid palegreen
	paleturquoise palevioletred peachpuff pink
	plum purple red rosybrown royalblue salmon
	seagreen seashell sienna skyblue slateblue
	slategray snow springgreen steelblue tan
	thistle tomato turquoise violetred wheat
	yellow
    }
}
