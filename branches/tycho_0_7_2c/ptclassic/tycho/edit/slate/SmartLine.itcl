#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes Picture] == "" } {
	uplevel #0 {source $tychoslate/Picture.itcl}
    }
}

##########################################################################
## SmartLine
#
# A line item that understands how to place itself given its start and end
# points and their directions. The directions are specified as compass
# directions: "n", "s", "e", or "w". Although there are presently
# no facilities for user adjustment of line placement, this class
# has been designed to support this extension.
#
# When a line is drawn, it is first rotated so that its start is in
# the "east" direction. Lines with the end pointing "north" are
# flipped about the horizontal axis so that there are three types
# of line (going by the direction of the end point): "east," "west,"
# and "south." Each of these has a number of different shapes, depending
# on the relative positions of the start and end points; each shape
# is represented by a state of a finite-state machine. Each shape is
# such that it can be drawn with no conditionals (and is therefore
# as efficient as possible to generate). Transitions
# between states occur when the _x_ or _y_ coordinates (of the end-point,
# relative to the start point) meets some condition that requires
# a different line shape. If _x_ or _y_ changes, the line may go through
# several states before reaching an acceptable one -- this makes the
# transitions simple to code. When a new line is created, it starts in
# state 0, and may pass through several states before settling on an
# acceptable line shape.
#
# <a href="../internals/east.fsm>State machine for the _East_ line</a>.
#
# <a href="../internals/west.fsm>State machine for the _West_ line</a>.
#
# <a href="../internals/south.fsm>State machine for the _South_ line</a>.
#
# <a href="../internals/howtoread.html>Reading <i>Picture</i> documentation</a>.
#
class ::tycho::SmartLine {
    inherit ::tycho::Picture

    # Create a new item
    proc construct {id canvas slate tags x0 y0 x1 y1 args}

    ###################################################################
    ####                            options                        ####

    # The "alpha" parameter of the line
    common _alpha

    # The position of the arrow: none, first, last, both
    common _arrow

    # The "beta" parameter of the line
    common _beta

    # The direction of the end of the line
    common _end

    # The color of the line
    common _fill

    # Enable "smoothing"
    common _smoothing

    # The direction of the start of the line
    common _start

    ###################################################################
    ####                     option update procs                   ####

    # Update the *-alpha* option
    proc _alpha {id canvas slate alpha}

    # Update the *-arrow* option
    proc _arrow {id canvas slate arrow}

    # Update the *-beta* option
    proc _beta {id canvas slate beta}

    # Update the *-end* option
    proc _end {id canvas slate end}

    # Update the *-fill* option
    proc _fill {id canvas slate fill}

    # Update the *-smoothing* option
    proc _smoothing {id canvas slate smoothing}

    # Update the *-start* option
    proc _start {id canvas slate start}

    ###################################################################
    ####                         public procs                      ####

    # Set or get the lines's coordinates
    proc coords {id canvas slate args}

    ###################################################################
    ####                         picture components                ####

    # The segmented line
    common segments
    
    ###################################################################
    ####                         protected variables               ####

    # The virtual "method" table
    common methodtable

    # Default values of this item's options
    common optiondefault

    # SmartLines are shaped like... lines
    common shape "line"

    ###################################################################
    ####                        private procs                      ####

    # Redraw the line
    proc redraw {id canvas slate}

    # Auto-route an "east" line
    proc route_e {id state x y}

    # Auto-route a "west" line
    proc route_w {id state x y}

    # Auto-route a "south" line
    proc route_s {id state x y}

    # Figure the best state for a "east" line
    proc state_e {id state x y}

    # Figure the best state for a "west" line
    proc state_w {id state x y}

    # Figure the best state for a "south" line
    proc state_s {id state x y}

    ###################################################################
    ####                      private variables                    ####

    # The current state of the line
    private common state

    # An array saying how to normalize a line
    private common rotate
	array set rotate {
		n-n e n-s w n-e s n-w n
		s-n w s-s e s-e n s-w s
		e-n n e-s s e-e e e-w w
		w-n s w-s n w-e w w-w e
	}

    private common normalize
	array set normalize {
		n {[expr -($y)] $x}
		s {$y [expr -($x)]}
		e {$x $y}
		w {[expr -$x] $y}
	}

    # An array saying how to "un-normalize" a line
    private common unnormalize
	array set unnormalize {
		n {$y [expr -($x)]}
		s {[expr -($y)] $x}
		e {$x $y}
		w {[expr -$x] $y}
	}

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::Picture::methodtable]

    set methodtable(_alpha)		::tycho::SmartLine::_alpha
    set methodtable(_arrow)		::tycho::SmartLine::_arrow
    set methodtable(_beta)		::tycho::SmartLine::_beta
    set methodtable(_end)		::tycho::SmartLine::_end
    set methodtable(_fill)      ::tycho::SmartLine::_fill
    set methodtable(_smoothing)	::tycho::SmartLine::_smoothing
    set methodtable(_start)		::tycho::SmartLine::_start

    set methodtable(construct)   ::tycho::SmartLine::construct
    set methodtable(coords)      ::tycho::SmartLine::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::Picture::optiondefault]

    set optiondefault(-alpha)		12
    set optiondefault(-arrow)       end
    set optiondefault(-beta)		30
    set optiondefault(-end)			"e"
    set optiondefault(-fill)		black
    set optiondefault(-smoothing)	off
    set optiondefault(-start) 		"e"
}


##########################################################################
## -arrow option configuration
#
body ::tycho::SmartLine::_arrow {id canvas slate arrow} {
    set _arrow($id) $arrow
    $canvas itemconfigure $segments($id) -arrow $arrow
}

##########################################################################
## -end option configuration
#
body ::tycho::SmartLine::_end {id canvas slate end} {
    set _end($id) $end
	redraw $id $canvas $slate
}

##########################################################################
## -fill option configuration
#
body ::tycho::SmartLine::_fill {id canvas slate fill} {
    set _fill($id) $fill
    $canvas itemconfigure $segments($id) -fill $fill
}

##########################################################################
## -smoothing option configuration
#
body ::tycho::SmartLine::_smoothing {id canvas slate smoothing} {
    set _smoothing($id) $smoothing
    $canvas itemconfigure $segments($id) -smoothing $smoothing
}

##########################################################################
## -start option configuration
#
body ::tycho::SmartLine::_start {id canvas slate start} {
    set _start($id) $start
	redraw $id $canvas $slate
}

##########################################################################
#### construct
#
body ::tycho::SmartLine::construct {id canvas slate tags x0 y0 x1 y1 args} {
    # Initialize the options
    foreach {option value} [concat [array get optiondefault] $args] {
		set _[string trimleft $option -]($id) $value
    }

    # Create the primary component for the outline coordinates.
    # This is a transparent line.
    set primary($id) [$canvas create line $x0 $y0 $x1 $y1 \
    	-outline "" -tags $tags]

	# Call redraw to do the work
	redraw $id $canvas $slate
}

##########################################################################
#### coords
#
# Set or read the SmartLine's coordinates
#
body ::tycho::SmartLine::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
		return [$canvas coords $primary($id)]
    }

    # Move the primary
    set coords $args
    eval $canvas coords $primary($id) $coords

	# Start in state 0
	set state($id) 0
	
	# Call redraw to do the work
	redraw $id $canvas $slate
}


    ##################################################################
    ##################################################################
    ####                       private procs                      ####

##########################################################################
#### redraw
#
# Redraw the line.
#
body ::tycho::SmartLine::redraw {id canvas slate} {
	set flipped 0
	
    # Get the coordinates
    assign x0 y0 x1 y1 [$canvas coords $primary($id)]

	# "Normalize" the line
	set a [expr $x1 - $x0]
	set b [expr $y1 - $y0]

	set type $rotate($start($id)-$end($id))
	assign x y "$normalize($start($id))"
	
	# Swap north-south if needed
	if { $type == "n" } {
		set flipped 1
		set type "s"
		set y [expr -$y]
	}

	# Get the relative coordinates
	set state($id) [state_$type $state($id) $x $y]
	set coords     [route_$type $state($id) $x $y]
	
	# Swap north-south again if needed
	if { $flipped } {
		set temp $coords
		set coords {}
		foreach {x y} $temp {
			lappend coords $x [expr -$y]
		}
		set type "n"
	}

	# Rotate back to correct orientation
	set temp $coords
	set coords {}
	foreach {x y} $temp {
		eval lappend coords "$unnormalize($start($id))"
	}

	# Redraw the line
	eval $canvas coords $segments($id) $coords
}

##########################################################################
#### route_e
#
# Route an "east" line given its state and the
# relative positions of its end points.
#
body ::tycho::SmartLine::route_e {id state x y} {
	set a $alpha($id)
	set b $beta($id)
	
	switch -exact $state {
		"0" {
			return [list 0 0 $x $y]
		}
		"1" -
		"2" {
			set xi [expr $x / 2]
			return [list 0 0 $xi 0 $xi $y $x $y]
		}
		"3" -
		"4" {
			set yi [expr $y / 2]
			set x0 [expr $a]
			set x1 [expr $x - $a]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
		"5" -
			set yi [expr $y - $b]
			set x0 [expr $a]
			set x1 [expr $x - $a]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
		"6" {
			set yi [expr $y + $b]
			set x0 [expr $a]
			set x1 [expr $x - $a]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
		"7" {
			set yi [expr $b]
			set x0 [expr $a]
			set x1 [expr $x - $a]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
		"8" {
			set yi [expr - $b]
			set x0 [expr $a]
			set x1 [expr $x - $a]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
	}
}


##########################################################################
#### route_w
#
# Route a "west" line given its state and the
# relative positions of its end points.
#
body ::tycho::SmartLine::route_w {id state x y} {
	set a $alpha($id)
	set b $beta($id)
	
	switch -exact $state {
		"0" -
		"1" {
			set xi [expr $x + $a]
			return [list 0 0 $xi 0 $xi $y $x $y]
		}
		"2" -
		"3" {
			set xi [expr $a]
			return [list 0 0 $xi 0 $xi $y $x $y]
		}
		"4" {
			set x0 [expr $a]
			set x1 [expr $y + $a]
			set yi [expr $b]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
		"5" {
			set x0 [expr $a]
			set x1 [expr $y + $a]
			set yi [expr - $b]
			return [list 0 0 $x0 0 $x0 $yi $x1 $yi $x1 $y $x $y]
		}
	}
}

##########################################################################
#### route_s
#
# Route a "south" line given its state and the
# relative positions of its end points.
#
body ::tycho::SmartLine::route_n {id state x y} {
	set a $alpha($id)
	set b $beta($id)
	
	switch -exact $state {
		"0" {
			return [list 0 0 $x 0 $x $y]
		}
		"1" -
		"3" {
			set xi [expr $a]
			set yi [expr $y - $a]
		}
		"2" {
			set xi [expr $x + $b]
			set yi [expr $y - $a]
		}
		"4" {
			set xi [expr $a]
			set yi [expr - $b]
		}
		"5" {
			set xi [expr $a]
			set yi [expr $y - $a]
		}
		"6" {
			set xi [expr $a]
			set yi [expr - $a]
		}
	}
	return [list 0 0 $xi 0 $xi $yi $x $yi $x $y]
}

##########################################################################
#### state_e
#
# Figure the next state of an "east" line given the start state and the
# relative positions of its end points. Like all of the other line types,
# this state machine may pass through several transitions before settling
# on an acceptable state.
#
body ::tycho::SmartLine::state_e {id state x y} {
	set a $alpha($id)
	set b $beta($id)
	
	while { 1 } {
		switch -exact $state {
			"0" {
				if     { $y < 0 }  { set state 1 }
				elseif { $y > 0 }  { set state 2 }
				elseif { $x < $a } { set state 5 }
				else break
			}
			"1" {
				if     { $x < 2 * $a } { set state 3 }
				elseif { $y >= 0 }     { set state 0 }
				else break
			}
			"2" {
				if     { $x < 2 * $a } { set state 4 }
				elseif { $y <= 0 }     { set state 0 }
				else break
			}
			"3" {
				if     { $y > -2 * $b } { set state 5 }
				elseif { $x > 2 * $a }  { set state 1 }
				else break
			}
			"4" {
				if     { $x > 2 * $a } { set state 2 }
				elseif { $y < 2 * $b } { set state 6 }
				else break
			}
			"5" {
				if     { $x > 0 } { set state 7 }
				elseif { $y > 0 } { set state 8 }
				else break
			}
			"6" {
				if     { $y > 2 * $b } { set state 4 }
				elseif { $x > 0 }      { set state 8 }
				else break
			}
			"7" {
				if     { $y > 0 }       { set state 6 }
				elseif { $y < -2 * $b } { set state 3 }
				elseif { $x > 2 * $a }  { set state 1 }
				else break
			}
			"8" {
				if     { $y < 0 }      { set state 5 }
				elseif { $y > 2 * $b } { set state 4 }
				elseif { $x > 2 * $a } { set state 2 }
				else break
			}
			default {
				error "Invalid state $state"
			}
		}
	}
	return $state
}

##########################################################################
#### state_w
#
# Figure the next state of a "west" line given the start state and the
# relative positions of its end points. Like all of the other line types,
# this state machine may pass through several transitions before settling
# on an acceptable state.
#
body ::tycho::SmartLine::state_w {id state x y} {
	set a $alpha($id)
	set b $beta($id)
	
	while { 1 } {
		switch -exact $state {
			"0" {
				if     { $y < 0 } { set state 1 }
				elseif { $x < 0 } { set state 2 }
				else break
			}
			"1" {
				if     { $y > 0 } { set state 0 }
				elseif { $x < 0 } { set state 3 }
				else break
			}
			"2" {
				if     { $y < $b } { set state 4 }
				elseif { $x > 0 }  { set state 0 }
				else break
			}
			"3" {
				if     { $y > -$b } { set state 5 }
				elseif { $x > 0 }   { set state 1 }
				else break
			}
			"4" {
				if     { $y < 0 }  { set state 5 }
				elseif { $y > $b } { set state 2 }
				else break
			}
			"5" {
				if     { $y < -$b } { set state 3 }
				elseif { $y > 0 }   { set state 4 }
				else break
			}
		}
	}
	return $state
}

##########################################################################
#### state_s
#
# Figure the next state of a "south" line given the start state and the
# relative positions of its end points. Like all of the other line types,
# this state machine may pass through several transitions before settling
# on an acceptable state.
#
body ::tycho::SmartLine::state_s {id state x y} {
	set a $alpha($id)
	set b $beta($id)
	
	while { 1 } {
		switch -exact $state {
			"0" {
				if     { $y < $a } { set state 1 }
				elseif { $x < $a } { set state 5 }
				else break
			}
			"1" {
				if     { $y > $a }      { set state 0 }
				elseif { $x < $a + $b } { set state 2 }
				else break
			}
			"2" {
				if     { $x > $a + $b } { set state 1 }
				elseif { $x < $a - $b } { set state 3 }
				elseif { $y > 0 }       { set state 6 }
				else break
			}
			"3" {
				if     { $y > 0 }       { set state 4 }
				elseif { $x > $a - $b } { set state 2 }
				else break
			}
			"4" {
				if     { $y < 0 }       { set state 3 }
				elseif { $y > $a + $b } { set state 5 }
				elseif { $x > $a - $b } { set state 6 }
				else break
			}
			"5" {
				if     { $y < $a + $b } { set state 4 }
				elseif { $x > $a }      { set state 0 }
				else break
			}
			"6" {
				if     { $x > $a + $b } { set state 1 }
				elseif { $y < 0 }       { set state 2 }
				elseif { $x < $a - $b } { set state 4 }
				elseif { $y > $a + $b } { set state 5 }
				else break
			}
		}
	}
	return $state
}

