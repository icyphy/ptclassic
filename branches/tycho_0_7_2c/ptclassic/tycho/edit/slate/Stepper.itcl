##########################################################################
# @Version: @(#)Stepper.itcl	1.18 07/29/98
# @Author: H. John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Stepper
#
# An interactor that quantized the mouse movement. In its default
# mode of operation, the interactor quantizes movement to the option
# *-stepsize*. Setting the *-gridded* option to true will, however,
# cause movement to be quantized such that the _cursor position_
# is a multiple of the step size. Stepper inherits from
# <a href="Follower.html">Follower</a>, which provides non-quantized
# movement, and is related to <a href="Bounder.html">Bounder</a>,
# which constrains the region of movement.
#
# <p><b>Options</b>
#
# See also: <a href="Interactor.html">Interactor</a>.
#
# <dl>
# <dt><dd>
# <dl>
# <dt><b>-gridded</b>
# <dd>If true, the cursor movement is quantized to a
# grid with size given by the <code>-stepsize</code> option. For
# example, suppose <code>-stepsize</code> were 10 and the start position
# of the cursor was (15,15).  In gridded mode, the interactor would move
# the cursor to say (20,20) and then (30,20), while in non-gridded mode
# (the default), the interactor would move it to say (25,25) and then
# (35,25).
#
# <dt><b>-stepsize</b>
# <dd>The quantization step size. The default is 12.
#
# </dl></dl>
#
# <p><b>Bugs</b> The gridded mode may not work correctly in the
# presence of scrollbars.
#
# <p><b>Enhancements</b> (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/interactors.html">How interactors work</a>
# <li><a href="../internals/index.html">Programmer's guide</a>
# <li><a href="index.html">Class documentation index</a>
# </ul>
#
class ::tycho::Stepper {
    inherit ::tycho::Follower

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c
	eval $this configure $args
    }
    destructor {}

    ###################################################################
    ####                            options                        ####

    # Make movement snap to a grid
    public variable gridded 0
    
    # The size of steps
    public variable stepsize 12
    
    ###################################################################
    ####                         public methods                    ####

    # Start interaction sequence
    method click {x y args} {}

    # Continue interaction sequence
    method drag {x y} {}

    ###################################################################
    ####                   protected variables                     ####

    # The output position of the cursor
    protected variable actualX
    protected variable actualY
}

#######################################################################
#### click
#
# Start the interaction. The behavior of this method depends on whether
# the *-gridded* option is set. If not (the default), the ``actual'' and
# variables are initialized to the current coordinates,
# which causes subsequent _movements_ to be quantized to the step size.
# If  *-gridded* option is set, the ``actual'' variables
# are initialized to the nearest grid point,
# which causes the _cursor_ position to be quantized to a multiple
# of the step size.
#
body ::tycho::Stepper::click {x y args} {
    # Initialize the "actual" variables according to mode
    if { $gridded } {
        set actualX [roundTo $x $stepsize]
        set actualY [roundTo $y $stepsize]
    } else {
        set actualX $x
        set actualY $y
    }
    
    # Forward the click
    eval chain $actualX $actualY $args
}

#######################################################################
#### drag
#
# Continue an interaction sequence. If the mouse has moved more than
# step size (if not in gridded mode) or over a grid line (if in gridded
# mode) in either axis, then forward the drag command to the cascaded
# interactor with some multiple of the step size as the movement.
#
body ::tycho::Stepper::drag {x y} {
    # By default, we don't move in either axis
    set moveX 0
    set moveY 0
    
    # The difference between where we were and where we are
    set deltaX [expr $x - $actualX]
    set deltaY [expr $y - $actualY]
    
    # A fudge factor to make snapping "feel" more natural
    set threshold [expr 3 * $stepsize / 4]
    
    # If we have moved far enough in the x axis, quantize the movement
    if { $deltaX >= $threshold } {
        set moveX [::tycho::roundTo $deltaX $stepsize]
    } elseif { $deltaX <= -$threshold } {
        set moveX [::tycho::roundTo $deltaX $stepsize]
    } else {
        set moveX 0
    }
    
    # Same in the y axis
    if { $deltaY >= $threshold } {
        set moveY [::tycho::roundTo $deltaY $stepsize]
    } elseif { $deltaY <= -$threshold } {
        set moveY [::tycho::roundTo $deltaY $stepsize]
    } else {
        set moveY 0
    }
    
    # As long as we have moved in at least one axis, forward the movement
    if { $moveX != 0  || $moveY != 0 } {
        set actualX [expr $actualX + $moveX]
        set actualY [expr $actualY + $moveY]
        
        chain $actualX $actualY
    }
}
