# Definitions for slate tests.
#
# @Author: John Reekie
# 
# @Version: @(#)defs.itcl	1.9 07/29/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

############################################################################
#### Define a proc that can be used to create a new canvas
#
proc _icanvas {} {
    catch {itcl::delete object .s}
    ::tycho::icanvas .s
    pack .s
    wm deiconify .
    raise .
}

############################################################################
#### Define a proc that can be used to create a new slate
#
proc _slate {} {
    catch {itcl::delete object .s}
    ::tycho::slate .s
    pack .s
    wm deiconify .
    raise .
}

############################################################################
#### Define a proc that does an update and then waits
#
proc _update {} {
    global SHORTTIME
    update idletasks
    if { [::info exists SHORTTIME] } {
        after $SHORTTIME
    }
}

############################################################################
#### Define a proc that creates a clean slate
#
proc _clean {} {
    if { [::info commands .s] == "" } {
	_slate
    }
    .s delete all
    raise .
}

############################################################################
#### Define a proc that creates two items on the slate
#
proc _twoitems {} {
    global r f
    _clean
    set r [.s create rectangle 40 40 80 80 -fill blue -tags foo]
    set f [.s create Frame 140 140 180 180 -color green -tags bar]
}

############################################################################
#### Define a proc that creates a complex item with two
#### child items -- one a root and one not
#
proc _hieritem {} {
    global h i j
    _clean
    set h [.s create Frame 40 40 200 160 -color green]
    set i [.s createchild $h Frame 60 60 120 100 -color red -relief sunken]
    set j [.s createrootchild $h Frame 120 100 180 140 -color blue]
}

############################################################################
#### Define a proc to delete the last slate and close the main window
#
proc _done {} {
    _update
    catch {itcl::delete object .s}
    # wm iconify .
}


############################################################################
#### Define a proc to simulate an interaction sequence,
# calling Shape classes directly.
#
proc _interact {prefix tag xinc yinc n args} {
    set x 100
    set y 100
    eval ${prefix}click $tag .s.canvas .s $x $y $args
    update idletasks
    while { $n > 0 } {
	set x [expr $x + $xinc]
	set y [expr $y + $yinc]
	eval ${prefix}drag $tag .s.canvas .s $x $y
	update idletasks
	incr n -1
    }
    eval ${prefix}release $tag .s.canvas .s
    .s coords $tag
}

############################################################################
#### Define a proc to simulate an interaction sequence,
# calling via the slate.
#
proc _interactslate {prefix tag xinc yinc n args} {
    set x 100
    set y 100
    eval .s ${prefix}click $tag $x $y $args
    update idletasks
    while { $n > 0 } {
	set x [expr $x + $xinc]
	set y [expr $y + $yinc]
	eval .s ${prefix}drag $tag $x $y
	update idletasks
	incr n -1
    }
    eval .s ${prefix}release $tag
    .s coords $tag
}

############################################################################
#### Define a proc to return the final result of an interaction
#
proc _finally {prefix tag xinc yinc n args} {
    eval $prefix [.s coords $tag] \
	    [expr $xinc * $n] [expr $yinc * $n] $args
}

proc _finally2 {prefix tag xinc yinc n args} {
    eval $prefix [list [.s coords $tag]] \
	    [expr $xinc * $n] [expr $yinc * $n] $args
}

#######################################################################
#### _interaction
#
# Simulate a series of mouse interactions on an item. This
# procedure will work only if test Follower-2 passes. The
# optional args are passed to ::tycho::Interactor::event{}
# to get the correct event names.
#
# "tag" is the tag which is initiating the click (can also be an
# item id.) "id" is the ID of the item being moused on.
#
# The functionality of this proc is tested in the
# Follower-basic-1 test.
#
proc _interaction {tag id x y xinc yinc n args} {
    # Because the interactor bindings use the "current" item,
    # we have to fool them into thinking that there really
    # is a current item. To do so, add the current tag to a
    # canvas item (NB: Cannot add directly to a complex item
    # -- see the comment to addtag{} in IncrCanvas.
    if [string match {[A-Z]*} [.s type $id]] {
        .s addtag current withtag [.s primary $id]
    } else {
        .s addtag current withtag $id
    }

    # To simulate click, get bound script from the bound tag
    # and evaluate. Because the code looks at the "current" item,
    # manually add the tag here
    set script [.s bind $tag \
	    [eval ::tycho::Interactor::event Click $args]]
    regsub -all %x $script $x script
    regsub -all %y $script $y script
    uplevel #0 $script

    # Now repeatedly "drag" mouse. Note: get the script from
    # the item id not the tag.
    # Note also: the -modifiers option needs to be removed
    array set temp $args
    catch {unset temp(-modifiers)}
    set nomodifiers [array get temp]
    set i 0
    while { $i < $n } {
	incr i
	set x [expr $x + $xinc]
	set y [expr $y + $yinc]
	set script [.s bind $id \
		[eval ::tycho::Interactor::event Motion $nomodifiers]]
	regsub -all %x $script $x script
	regsub -all %y $script $y script
	uplevel #0 $script
    }

    # Eval the release event
    set script [.s bind $id \
	    [eval ::tycho::Interactor::event Release $nomodifiers]]
    regsub -all %x $script $x script
    regsub -all %y $script $y script
    uplevel #0 $script

    # Remove the "current" tag
    .s dtag current
}

