# Test the Follower interactor. These tests also test
# all features of the Interactor superclass.
#
# @Author: John Reekie
# 
# @Version: @(#)testFollower.itcl	1.10 07/29/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the test package is loaded
package require slate.test


############################################################################
#### Comments on these tests
#

#######################################################################
#### A proc to create two items and a follower
#
proc _followeditems {} {
    global i
    _twoitems
    if { [.s find withtag title] == "" } {
	.s create text 180 20 -text Follower -tags title
    }
    set i [.s interactor Follower]
}

#######################################################################
#### constructor
#
test Follower-constructor-1 {Create a follower} {
    _slate
    set i [.s interactor Follower]
    # Just test not null...
    expr {$i != ""}
} {1}

#######################################################################
#### Test basic interaction sequence: bind, activate, etc
# This is the actions of the _interaction procedure defined
# above.
#
test Follower-basic-1 {Basic interaction sequence test case} {
    _slate
    _followeditems

    # Bind to rectangle
    $i bind $r -button 1

    # To simulate click, get bound script and evaluate.
    # Because the code looks at the "current" item,
    # manually add the tag here
    .s addtag current withtag $r
    set script [.s bind $r <Button-1>]
    regsub -all %x $script 100 script
    regsub -all %y $script 100 script
    uplevel #0 $script

    # Now repeatedly "drag" mouse
    set x 100
    set y 100
    while { $x < 250 } {
	incr x
	incr y
	set script [.s bind $r <B1-Motion>]
	regsub -all %x $script $x script
	regsub -all %y $script $y script
	uplevel #0 $script
    }

    # Eval the release event
    set script [.s bind $r <ButtonRelease-1>]
    regsub -all %x $script $x script
    regsub -all %y $script $y script
    uplevel #0 $script

    # Test result: the coordinates of the rectangle,
    # the bound events
    set result [list [.s coords $r]]
    lappend result [.s bind $r]

    # Unbind
    $i unbind $r -button 1
    lappend result [.s bind $r]
    
    set result
} {{190.0 190.0 230.0 230.0} <Button-1> {}}

# As above but use the _interaction{} proc
test Follower-basic-2 {Basic interaction sequence, item id, button 1} {
    _followeditems

    # Bind follower to rectangle
    $i bind $r -button 1

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50 -button 1

    # Unbind
    $i unbind $r -button 1

    # Test result: the coordinates of the rectangle
    .s coords $r

} {90.0 90.0 130.0 130.0}

test Follower-basic-3 {Basic interaction sequence, item id, no button} {
    _followeditems

    # Bind follower to rectangle
    $i bind $r

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50

    # Unbind
    $i unbind $r

    # Test result: the coordinates of the rectangle
    .s coords $r

} {90.0 90.0 130.0 130.0}

test Follower-basic-4 {Basic interaction sequence, by tag, button 2} {
    _followeditems

    # Create follower and bind to tag
    $i bind foo -button 2

    # Simulate an interaction
    _interaction foo $r 100 100 1 1 50 -button 2

    # Unbind
    $i unbind foo -button 2

    # Test result: the coordinates of the rectangle
    .s coords foo

} {90.0 90.0 130.0 130.0}

test Follower-basic-5 {Basic interaction sequence, by tag, button 3, modifiers} {
    _followeditems

    # Create follower and bind to tag
    $i bind foo -button 2 -modifiers {shift alt}

    # Simulate an interaction
    _interaction foo $r 100 100 1 1 50 -button 2 -modifiers {shift alt}

    # Unbind
    $i unbind foo -button 2 -modifiers {shift alt}

    # Test result: the coordinates of the rectangle
    .s coords foo

} {90.0 90.0 130.0 130.0}

#######################################################################
#### -click/drag/releaseprefix
#
# Here, set the prefix options -- the item won't move, since
# the prefixes are being called instead. In those prefixes,
# just record the arguments to the prefix to check they're
# being called correctly.
# 
_followeditems
test Follower-prefix-1 {Test -click/drag/releaseprefix options} {
    # Bind follower to rectangle
    set i [.s interactor Follower \
	    -clickprefix {::tycho::apply {set a [list %0 %1 %2 %3 %4]}} \
	    -dragprefix  {::tycho::apply {set b [list %0 %1 %2]}} \
	    -releaseprefix {::tycho::apply {set c [list %0 %1 %2]}} \
	    ]
    $i bind $r -button 1

    # Simulate an interaction
    _interaction $r $r 100 100 10 10 5 -button 1

    # Test result: the coordinates of the rectangle _have not_ changed.
    # Get the arguments given to the prefix scripts.
    list [.s coords $r] $a $b $c

} [list {40.0 40.0 80.0 80.0} \
	[list $r 100 100 -button 1] [list $r 150 150] [list $r %1 %2]]
    
#######################################################################
#### -activate/drag/deactivatecommand
#
# Here, set the command options -- the item will still move, but
# the commands will also be called. In those commands,
# just record the arguments to the prefix to check they're
# being called correctly.
#
# Note that *activatecommand* has the target and coords appended,
# but not other arguments (as *-clickprefix* does).
#
_followeditems
test Follower-command-1 {Test -activate/drag/deactivatecommand options} {
    # Bind follower to rectangle
    set i [.s interactor Follower \
	    -activatecommand {::tycho::apply {set a [list %0 %1 %2 %3 %4]}} \
	    -dragcommand  {::tycho::apply {set b [list %0 %1 %2]}} \
	    -deactivatecommand {::tycho::apply {set c [list %0 %1 %2]}} \
	    ]
    $i bind $r -button 1

    # Simulate an interaction
    _interaction $r $r 100 100 5 5 10 -button 1

    # Unbind
    $i unbind $r -button 1

    # Test result: the coordinates of the rectangle _have_ changed.
    # Get the arguments given to the prefix scripts.
    list [.s coords $r] $a $b $c

} [list {90.0 90.0 130.0 130.0} \
	[list $r 100 100 %3 %4] [list $r 150 150] [list $r %1 %2]]

#######################################################################
#### activate
# See "basic" tests.

#######################################################################
#### bind
# See "basic" tests.

#######################################################################
#### cascade
#
# This test assumes that the Bounder interactor is functioning
# correctly.
#
test Follower-cascade-1 {Cascaded interactor} {
    _followeditems

    # Bind follower to rectangle
    set j [.s interactor Bounder -bounds {20 20 100 100}]
    $i bind $r -button 1
    $i cascade $j

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50 -button 1

    # Unbind
    $i unbind $r -button 1

    # Test result: the coordinates of the rectangle. It should
    # have stayed inside the 20 20 100 100 rectangle.
    .s coords $r

} {60.0 60.0 100.0 100.0}

#######################################################################
#### click
# See "basic" tests.

#######################################################################
#### deactivate
# See "basic" tests.

#######################################################################
#### debind
# FIXME FIXME

#######################################################################
#### disable
#
test Follower-disable-1 {Disable an interactor} {
    _followeditems

    # Bind follower to rectangle
    $i bind $r -button 1

    # Disable it
    $i disable

    # Test result: no binding on the item
    .s bind $r
} {}

#######################################################################
#### drag
# See "basic" tests.

#######################################################################
#### enable
#
test Follower-enable-1 {Disable and reenable a binding} {
    _followeditems

    # Bind follower to rectangle
    $i bind $r -button 1

    # Disable and reenable it
    $i disable
    $i enable 

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50 -button 1

    # Unbind
    $i unbind $r -button 1

    # Test result: the coordinates of the rectangle
    .s coords $r

} {90.0 90.0 130.0 130.0}


#######################################################################
#### rebind
# FIXME FIXME

#######################################################################
#### release
# See "basic" tests.

#######################################################################
#### target
#
# Test the target method
#
test Follower-target-1 {Target is null when not interacting} {
    _followeditems

    # Bind follower to rectangle
    $i bind $r -button 1

    # Target starts at null
    set result [list [$i target]]

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50 -button 1

    # Unbind
    $i unbind $r -button 1

    # Target ends at null
    lappend result [$i target]

} {{} {}}

test Follower-target-2 {Change target after activation} {
    _followeditems

    # Bind follower to rectangle. Give the interactor
    # a -activatecommand to change the target to the Frame
    $i bind $r -button 1
    $i configure -activatecommand "$i target $f"

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50 -button 1

    # Unbind
    $i unbind $r -button 1

    # Results: rectangle hasn't moved, Frame has
    list [.s coords $r] [.s coords $f]

} {{40.0 40.0 80.0 80.0} {190.0 190.0 230.0 230.0}}

#######################################################################
#### unbind
# See "basic" tests.

#######################################################################
#### uncascade
#
test Follower-uncascade-1 {Un-cascad an interactor} {
    _followeditems

    # Bind follower to rectangle
    set j [.s interactor Bounder -bounds {20 20 100 100}]
    $i bind $r -button 1

    # Cascade is and then uncascade it
    $i cascade $j
    $i uncascade

    # Simulate an interaction
    _interaction $r $r 100 100 1 1 50 -button 1

    # Unbind
    $i unbind $r -button 1

    # Test result: same as without having cascaded
    .s coords $r

} {90.0 90.0 130.0 130.0}
