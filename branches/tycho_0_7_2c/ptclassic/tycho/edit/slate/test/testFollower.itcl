# Test the Follower interactor. These tests also test
# all features of the Interactor superclass.
#
# @Author: John Reekie
# 
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source [file join $TYCHO kernel test testDefs.tcl]
} {}

if {[string compare test [info procs _slate]] == 1} then { 
    source [file join $TYCHO editors slate test defs.itcl]
} {}

if { ! [::info exists SHORTTIME] } {
    set SHORTTIME 50
}
#set VERBOSE 1

############################################################################
#### Comments on these tests
#

#######################################################################
#### _interaction
#
# Simulate a series of mouse interactions on an item. This
# procedure will work only if test Follower-2 passes. The
# optional args are passed to ::tycho::Interactor::event{}
# to get the correct event names.
#
proc _interaction {tag x y xinc yinc n args} {

    # To simulate click, get bound script and evaluate.
    # Because the code looks at the "current" item,
    # manually add the tag here
    .s addtag current withtag $tag
    set script [.s bind $r [eval ::tycho::Interactor::event Click $args]]
    regsub -all %x $script $x script
    regsub -all %y $script $y script
    uplevel #0 $script

    # Now repeatedly "drag" mouse
    set i 0
    while { $i < $n } {
	incr i
	set x [expr $x + $xinc]
	set y [expr $y + $yinc]
	set script [.s bind $r [eval ::tycho::Interactor::event Motion $args]]
	regsub -all %x $script $x script
	regsub -all %y $script $y script
	uplevel #0 $script
    }

    # Eval the release event
    set script [.s bind $r [eval ::tycho::Interactor::event Release $args]]]
    regsub -all %x $script $x script
    regsub -all %y $script $y script
    uplevel #0 $script
}

#######################################################################
#### constructor
#
test Follower-1 {Create a follower} {
    _slate
    set i [.s interactor Follower]
    # Just test not null...
    expr {$i != ""}
} {1}


#######################################################################
#### Test basic interaction sequence: bind, activate, etc
# This is the actions of the _interaction procedure defined
# above.
#
test Follower-2 {Basic interaction sequence on item id} {
    _twoitems

    # Create follower and bind to rectangle
    set i [.s interactor Follower]
    $i bind $r -button 1

    # To simulate click, get bound script and evaluate.
    # Because the code looks at the "current" item,
    # manually add the tag here
    .s addtag current withtag $r
    set script [.s bind $r <Button-1>]
    regsub -all %x $script 100 script
    regsub -all %y $script 100 script
    uplevel #0 $script

    # Now repeatedly "drag" mouse
    set x 100
    set y 100
    while { $x < 250 } {
	incr x
	incr y
	set script [.s bind $r <B1-Motion>]
	regsub -all %x $script $x script
	regsub -all %y $script $y script
	uplevel #0 $script
    }

    # Eval the release event
    set script [.s bind $r <ButtonRelease-1>]
    regsub -all %x $script $x script
    regsub -all %y $script $y script
    uplevel #0 $script

    # Test result: the coordinates of the rectangle,
    # the bound events
    set result [list [.s coords $r]]
    lappend result [.s bind $r]

    # Unbind
    $i unbind $r -button 1
    lappend result [.s bind $r]
    
    set result
} {{190.0 190.0 230.0 230.0} <Button-1> {}}

#######################################################################
#### activate

#######################################################################
#### bind
#
# For different buttons, make sure that bindings are created.
#

#######################################################################
#### cascade

#######################################################################
#### click

#######################################################################
#### deactivate

#######################################################################
#### debind target

#######################################################################
#### disable

#######################################################################
#### drag

#######################################################################
#### enable

#######################################################################
#### rebind

#######################################################################
#### release

#######################################################################
#### target

#######################################################################
#### unbind

#######################################################################
#### uncascade

#######################################################################
#### event
