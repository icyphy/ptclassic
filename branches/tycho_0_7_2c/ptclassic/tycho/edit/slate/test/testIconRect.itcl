# Test the IconRect item
#
# @Author: John Reekie
# 
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source [file join $TYCHO kernel test testDefs.tcl]
} {}

if {[string compare test [info procs _slate]] == 1} then { 
    source [file join $TYCHO editors slate test defs.itcl]
} {}

if { ! [::info exists SHORTTIME] } {
    set SHORTTIME 100
}
#set VERBOSE 1

############################################################################
#### Define a proc that creates a single IconRect on the slate
#
proc _rect {args} {
    global f
    _clean
    set f [.s create IconRect 100 100 \
	    -tags foo \
	    -text Hello \
            -fill blue \
	    -width 3 -outline magenta \
	    -graphics {rectangle 20 20 80 80; line 20 20 80 80; line 20 80 80 20}]
    eval .s itemconfigure $f $args
}

#######################################################################
#### Creation
#
_slate
test IconRect-construct-1 {Create a IconRect item and check coords} {
    _rect
    .s coords [.s primary $f]
} {70.0 80.0 130.0 120.0}

#######################################################################
#### Options
#
_slate
set i 0

### Defaults

set f [.s create IconRect 100 100]
update
foreach {opt val} {\
        -fill "" \
        -outline black \
        -shape point \
        -width 1 \
        -text NoName \
        -textanchor center \
        -graphics {} \
        -tags {} \
        -hsize 60 \
        -vsize 40 \
        -anchor center } {
    incr i
    test IconRect-options-$i "Check default option $opt" {
        .s itemcget $f $opt
    } $val
}
update
after $SHORTTIME

_clean
set f [.s create IconRect 140 140 180 180 \
        -fill magenta \
        -outline red \
        -width 4 \
        -tags foo \
        -text Foo \
        -textanchor s \
        -graphics {line 0 0 100 100} \
        -hsize 80 \
        -vsize 20 \
        -anchor nw]
update
foreach {opt val} {\
        -fill magenta \
        -outline red \
        -width 4 \
        -tags foo \
        -text Foo \
        -textanchor s \
        -graphics {line 0 0 100 100} \
	-hsize 80 \
        -vsize 20 \
        -anchor nw } {
    incr i
    test IconRect-options-$i "Check non-default option $opt" {
        .s itemcget $f $opt
    } $val
}
update
after $SHORTTIME

_rect
foreach {opt val} {-fill green -outline yellow -width 2} {
    incr i
    test LabeledRect-options-$i "Check change of option $opt" {
	.s itemconfigure $f $opt $val
        .s itemcget [.s primary $f] $opt
    } $val
    update idletasks
    after $SHORTTIME
}

#### -anchor
    
_rect -text Bar
set i 0
foreach a {n s e w nw sw ne se c} p {s n w e sw nw se ne n} {
    incr i
    test IconRect-anchor-$i "Check anchoring, graphics, $a" {
        .s itemconfigure $f -textanchor $a
        .s component $f label itemcget -anchor
    } $p
    update
    after $SHORTTIME
}

#### -hsize

_rect
test IconRect-hsize-1 {Test -hsize} {
    .s itemconfigure $f -hsize 100
    .s coords [.s primary $f]
} {50.0 80.0 150.0 120.0}
update
after $SHORTTIME

test IconRect-hsize-2 {Test invalid -hsize} {
    catch {.s itemconfigure $f -hsize 0} msg
    set msg
} {Invalid -hsize: 0}

#### -vsize

_rect
test IconRect-vsize-1 {Test -vsize} {
    .s itemconfigure $f -vsize 100
    .s coords [.s primary $f]
} {70.0 50.0 130.0 150.0}
update
after $SHORTTIME

test IconRect-vsize-2 {Test invalid -vsize} {
    catch {.s itemconfigure $f -vsize 0} msg
    set msg
} {Invalid -vsize: 0}


#######################################################################
#### Terminals
#
_rect
test IconRect-terminal-1 "Create a terminal and access as component" {
    .s call $f terminal input-1 Terminal 0 0 \
            -anchor {50 0} \
            -direction {0 -1} \
            -length 20 \
            -type input \
            -style doublearrow
    # Test: just make sure we get something
    expr { [.s component $f input-1] != "" }
} {1}
update
after $SHORTTIME
after $SHORTTIME

test IconRect-terminal-2 "Create a terminal and get coordinates" {
    .s call $f terminal input-2 Terminal 0 0 \
            -anchor {0 50} \
            -direction {-1 0} \
            -length 30 \
            -type input \
            -style blob -fill blue
    # Test: get the two ends of both terminals
    list \
            [.s aspect [.s component $f input-1] origin terminal] \
            [.s aspect [.s component $f input-2] origin terminal]
} {{100.0 80.0 100.0 60.0} {70.0 100.0 40.0 100.0}}
update
after $SHORTTIME

test IconRect-terminal-3 "Resize and check terminals have moved" {
    .s itemconfigure $f -hsize 100 -vsize 100
   # Test: get the two ends of both terminals
    list \
            [.s aspect [.s component $f input-1] origin terminal] \
            [.s aspect [.s component $f input-2] origin terminal]
} {{100.0 50.0 100.0 30.0} {50.0 100.0 20.0 100.0}}
update
after $SHORTTIME


