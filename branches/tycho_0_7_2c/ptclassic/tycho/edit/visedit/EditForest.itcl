# A viewer and editor window for a forest (set of trees) data structure.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditForest
# A forest is a data structure that includes any number of trees. A
# tree is a data structure with nodes that are either a root or have
# exactly one parent, and that have any number of children. This class
# provides a top-level window to interactively build, view, and edit such a
# data structure. Data stored on the nodes of the trees are arbitrary
# Tcl strings, although particular fields can be inserted to control
# the format (see the documentation for
# <a href="EditForestWidget.html"><code>EditForestWidget</code></a>.
# <p>
# Menu commands for adding new nodes, deleting nodes, and editing
# the name or contents of the nodes are provided.
# <p>
# Here is an example of how to use the EditForest:
# <tcl><pre>
#     catch {delete object .f}
#     ::tycho::EditForest .f -file &#92
#          $TYCHO/editors/visedit/test/sample.fst
#     .f centerOnScreen
# </pre></tcl>
#
class ::tycho::EditForest {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Clear the display, discarding the current forest.
    method clear {}

    # Give the canvas the focus.
    method focusin {}
 
    # Open a help window.
    method help {}

    # Append the specified data to the existing forest.
    method insertData {data}

    # Find the node in the forest identified by "name".
    # FIXME: Implement this.
    method  {name}

    # Specify whether or not modifications are allowed in the displayed text.
    method setReadOnly {bool}

    ###################################################################
    ####                   protected methods                       ####

    # Return the text to be saved.
    protected method saveText {}
}

#######################################################################
#### constructor
#
body ::tycho::EditForest::constructor {args} {
    # The Forest
    itk_component add forest {
        ::tycho::EditForestWidget $itk_component(childsite).forest \
                -top $this
    } {
        keep -forest -readonly
        # FIXME: keep and rename
    }

    pack $itk_component(forest) -expand yes -fill both

    addMenu Edit left Window -underline 0

    addMenuItem Cut Edit -underline 0 -accelerator "C-w" \
	    -command "$this component forest cut"
    
    addMenuItem Copy Edit -underline 1 -accelerator "M-w" \
	    -command "$this component forest copy"
    
    addMenuItem Paste Edit -underline 0 -accelerator "C-y" \
	    -command "$this component forest paste"
    
    addMenuSeparator Edit

    addMenuItem {Edit Node} Edit -underline 0 -accelerator "e" \
	    -command "$this component forest edit"

    addMenuItem {New Root} Edit -underline 4 -accelerator "r" \
	    -command "$this component forest addRoot"

    addMenuItem {New Child} Edit -underline 4 -accelerator "c" \
	    -command "$this component forest addChild"

    eval itk_initialize $args
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### clear
# Clear the display, discarding the current forest.
#
body ::tycho::EditForest::clear {} {
    if [getReadOnly] {bell; return}
    [component forest forest] clear
    component forest redraw
}

###################################################################
#### focusin
# Hand the focus to the canvas window.
#
body ::tycho::EditForest::focusin {} {
    $itk_component(forest) focusin
}
 
#######################################################################
#### help
# Open a help window.
#
body ::tycho::EditForest::help {} {
    hyperJump "\$TYCHO/editors/visedit/doc/usersGuides/EditForestHelp.html" {}
}

#######################################################################
#### insertData
# Append the specified data to the existing forest.
# The data should have the format of the <code>describe</code> method
# of the <code>::tycho::Forest</code> class.
#
body ::tycho::EditForest::insertData {data} {
    if [getReadOnly] {bell; return}
    set fst [component forest forest]
    foreach tree $data {
        foreach node $tree {
            eval $fst add $node
        }
    }
    component forest redraw
}

#####################################################################
#### setReadOnly
# Specify whether or not modifications are allowed in the displayed text.
# Note that this is independent of whether the associated file is readonly.
# It merely determines whether the buffer can be modified, not whether the
# file can be modified.  To control the file, use <code>toggleReadOnly</code>.
#
body ::tycho::EditForest::setReadOnly {bool} {
    ::tycho::File::setReadOnly $bool
    if [winfo exists $prefix] {
	if {$bool} {
            disableMenuItem {Cut} Edit
            disableMenuItem {Paste} Edit
            disableMenuItem {Edit Node} Edit
            disableMenuItem {New Root} Edit
            disableMenuItem {New Child} Edit
	} {
            enableMenuItem {Cut} Edit
            enableMenuItem {Paste} Edit
            enableMenuItem {Edit Node} Edit
            enableMenuItem {New Root} Edit
            enableMenuItem {New Child} Edit
	}
    }
}

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#######################################################################
#### saveText
# Return the text to be saved.
#
body ::tycho::EditForest::saveText {} {
    set fst [component forest forest]
    return [$fst describe]
}
