# Export an HTML file in various formats
#
# @Author: Christopher Hylands
#
# @Version: @(#)HTMLExport.itcl	1.6	06/10/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### HTMLExport
# The HTMLExport class contains methods that are used to export
# an HTML file in various formats.  This class is separate from HTML
# because the export functionality is not used everytime we view a HTML
# file, so it seems like overkill to load it in everytime.  Also,
# the export methods should be kept close to one another, and the HTML
# class is large enough as it is.  Another reason to keep this as a
# separate class is so that both the HTML viewer and the HTML editor can
# use its methods.
# 
# This class can generate PostScript and a Directed Acyclic Graph (DAG).
#
# To generate PostScript, this class uses the Netscape browser.
# Unfortunately, PostScript can only be generated under Unix, as 
# Netscape on the other platform does not understand the -remote option.
#
# <p>
# Here is an example of how to use the HTMLExport:
# <tcl><pre>
#     ::tycho::HTMLExport .h
#     set dagfile [::tycho::tmpFileName doc dag]
#     .h HTML2DAG [file join $TYCHO doc index.html] $dagfile
#     ::tycho::openContext $dagfile
#     .h HTML2PS index.html doc.ps
#     delete object .h
# </pre></tcl>
#
class ::tycho::HTMLExport {
    inherit ::tycho::Object
    ###################################################################
    ####                         public methods                    ####


    # Generate a DAGfile from indexfile.
    method HTML2DAG {indexfile DAGfile}

    # Generate a PostScript file from indexfile.
    method HTML2PS {indexfile PostScriptfile}

    # Given a HTML file, return a list of links.
    method HTMLLinks {HTMLfile {generateDAG {}} {depth 0}} 

    ###################################################################
    ####                      public procs                         ####

    # Get the HTML title from HTMLfile.
    proc getTitleFromFile {HTMLfile}

    # Generate a PostScript file for each HTML file.
    proc HTMLFileList2PS {filelist}

    # Concatenate multiple Netscape PostScript files into one file.
    proc NetscapePSConcat {outfile files}

    ###################################################################
    ####                   protected methods                       ####

    # Save the HTMLfile and link for our DAG.
    method addToDAG {HTMLfile link}

    ###################################################################
    ####                   private variables                       ####

    # An array of files and links, the indice is the file being linked to.
    protected variable DAGlist

    # A list of the files that we have seen so far.
    private variable filesSeen {}


}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####


#####################################################################
#### HTML2DAG
# Given a HTML file, generate a Directed Acyclic Graph (DAG) that 
# consists of all of the files that have links to them.
#
body ::tycho::HTMLExport::HTML2DAG {indexfile DAGfile} {
    set filesSeen {}

    puts "About to traverse all local files linked from\n $indexfile"
    puts " and generate $DAGfile"	
    flush stdout
    update

    # If the file exists and is not writable, then remove it,
    # it might be a link to the master tree.
    if {[file exists $DAGfile] && \
	    ! [file writable $DAGfile]} {
	file delete -force $DAGfile
    }
    set DAGfd [open $DAGfile w]
    puts $DAGfd "{configure -canvasheight 600} {configure -canvaswidth 800}"
    puts $DAGfd "{titleSet title {HTML links for \
           [getTitleFromFile $indexfile]\n\
            ([::tycho::simplifyPath $indexfile])}}"
 
    puts $DAGfd "{titleSet subtitle {created: [clock format [clock seconds]]}}"

    # Don't cd until after the output file is open
    cd [file dirname $indexfile]
    # Generate a DAG, start at depth 0, 
    HTMLLinks $indexfile 1 0
#    puts $DAGfd "\{add \{[::tycho::expandPath $indexfile]\} \
#	    \{label \{[::tycho::expandPath $indexfile]\}\} \{\}\}"


    foreach DAGitem [array names DAGlist] {
	set title [getTitleFromFile $DAGitem]
	if { $title == {} } {
	    set title [file tail $DAGitem]
	}
        # The DAG viewer can't deal with nodes that are named $TYCHO
        set shortPath [::tycho::simplifyPath $DAGitem]
	puts $DAGfd "\{add \{$DAGitem\} \{label \{$title\} \
	    link \{$shortPath \{\}\}\} \{$DAGlist($DAGitem)\}\}"
    }
    
    close $DAGfd
}

#####################################################################
#### HTML2PS
# This command is useful for generating PostScript from an HTML index file.
# Given a .html index file, produce a PostScript file that contains
# PostScript of all of the HTML files that the index file has links to.
#
# Typical Usage: 
# <tcl><pre>
# HTML2PS $TYCHO/doc/index.html index.ps
# </pre></tcl>
#
body ::tycho::HTMLExport::HTML2PS {indexfile PSfile} {
    set filesSeen {}

    puts "About to traverse all local files linked from\n $indexfile"
    puts " and generate $PSfile"	
    #flush stdout
    #update

    cd [file dirname $indexfile]
    HTMLLinks $indexfile

    #set filesSeen [linsert $filesSeen 0 $indexfile]
    puts "  Done ([llength $filesSeen] files seen)"
    #flush stdout
    #update

    set PSlist {}
    foreach tag $filesSeen {
        lappend PSlist "$tag.ps"
    }

    puts "About to remove old PostScript"
    #flush stdout
    #update

    eval file delete -force $PSlist
    
    puts "About to generate PostScript"
    #flush stdout
    #update
    HTMLFileList2PS $filesSeen

    puts "\nAbout to generate concat PostScript into one file"
    #flush stdout
    #update
    ::tycho::HTMLExport::NetscapePSConcat $PSfile $PSlist

    eval file delete -force $PSlist
}

#####################################################################
#### HTMLLinks
# Given a HTML file, return a list of the links
#
body ::tycho::HTMLExport::HTMLLinks {HTMLfile {generateDAG {}} {depth 0}} { 
    if {$depth > 100} {
        error "HTMLLinks reached a maximum depth of $depth\n\
                filesSeen was: $filesSeen"
    }

    set taglist {}
    # Read in the index file, generate list of links
    set fd [open $HTMLfile r]
    while {![eof $fd]} {
        set line [gets $fd]
        # FIXME: this could be fooled if the <A is not on the same line
        # as the HREF.
        if [regexp {<[Aa] [Hh][Rr][Ee][Ff]="([^\"]*)"} $line dummy tag ] {
            switch -regexp -- $tag \
                    {^/} { lappend taglist [::tycho::expandPath $tag]} \
                    {^\.\.} { lappend taglist [::tycho::expandPath [file dirname $HTMLfile]/$tag]} \
                    {^(http|mailto)} { lappend taglist $tag} \
                    default { lappend taglist [::tycho::expandPath $tag]}
        }
    }
    close $fd

    #puts "$HTMLfile: $taglist"

    foreach tag $taglist {
        # Only search tags that we have not seen, are .html files
        # and are not codeDoc files
        if { [lsearch $filesSeen $tag] == -1 && \
                [file extension $tag] == ".html" && \
                [file readable $tag] && \
                ![regexp {/codeDoc/} $tag] \
            } {
	    if { $generateDAG != {}} {
		addToDAG $HTMLfile $tag
	    }
            #puts "About to call HTMLLinks $tag"
            lappend filesSeen $tag
            incr depth
	    HTMLLinks $tag $generateDAG $depth 
            incr depth -1
        }
    }
    return $taglist
}

    ###################################################################
    ###################################################################
    ####                      public procedures                    ####

#####################################################################
#### getTitleFromFile
# Return the HTML title of a file, if it exist.
# If it does not contain a title, then return the empty string
#
body ::tycho::HTMLExport::getTitleFromFile {HTMLfile} {
    set fd [open $HTMLfile r]
    while {![eof $fd]} {
	set line [gets $fd]
        if [regexp -nocase {<title>(.*)} $line dummy tag ] {
	    close $fd
	    if [regexp -nocase {(.*)</title>} $tag dummy newtag ] {
		return $newtag
	    } else {
		return $tag
	    }
	}
    }
    close $fd
    return {}
}

#####################################################################
#### HTMLFileList2PS
# Use netscape to convert HTML to PostScript
# Typical Usage: 
# <tcl><pre>
# HTML2FileList2PS [glob $TYCHO/doc/*HTML]
# </pre></tcl>
#
body ::tycho::HTMLExport::HTMLFileList2PS {filelist} {
    global tcl_platform
    if { $tcl_platform(platform) != "unix" } {
	error "Sorry, generating PostScript from HTML currently only works\
		under Unix, netscape supports -remote only under Unix."
    }

    set numfiles [llength $filelist]	
    foreach file $filelist {
	# count down to 0 to give the user something to look at
	puts -nonewline " $numfiles" 
	incr numfiles -1
	flush stdout

	# If the file starts with 'http', then just open it
	# If the file starts with a slash '/', then prepend file://
	# If the file starts with anything else, then prepend file:///$PWD/
	switch -regexp -- $file \
		^http {set urlfile $file} \
		^/ {set urlfile "file://$file"} \
		default {set urlfile "file://[pwd]/$file"}
	
	# File to save as.  If we don't specify a absolute path,
        # then the PS file will end up in either the the directory where
        # netscape started, or the home directory
        switch -regexp -- $file \
                ^http {set printfile "[file tail $file].ps"} \
                ^/ {set printfile "$file.ps"} \
		default {set printfile "[pwd]/$file.ps"}

        #puts "$urlfile $printfile"
	if [catch {exec netscape -remote "openURL($urlfile)"} errMsg ] {
		puts "\nCall to netscape failed to \nopen `$urlfile',\n\
			 perhaPS netscape is not running?:\n $errMsg\n\
			 About to try starting netscape by hand."
		exec netscape &	 
		#FIXME: we should do this with the tcl clock command
		exec sleep 10

	}
	if [catch {exec netscape -remote "saveas($printfile,PostScript)"} \
		errMsg] {
		puts "Call to netscape to saveas `$printfile' failed:\n$errMsg"
	}
    }
}


#####################################################################
#### NetscapePSConcat
# Concatenate a bunch of PostScript files into one file.
# This probably only works with PostScript produced by netscape.
# Typical usage is:
# NetscapePSConcat out.ps [glob *.html]
#
body ::tycho::HTMLExport::NetscapePSConcat { outfile files} {
    # Flag that is set to true if we have the header
    set haveHeader 0
    # Page count
    set pageNum 1

    # The idea is that we read in the header of the first file and copy
    # it to the output.  Then we copy the body of the first file,
    # but skip the %%EOF
    # Then, for each successive file, we copy the body of the file
    # and increment the page count
    
    set outfd [open $outfile w]
    foreach infile $files {
        set sawEndProlog 0
        set infd [open $infile r]
        while {![eof $infd]} {
            set line [gets $infd]
            if !$haveHeader {
		# Print out the header
                puts $outfd $line
                if [regexp {%%EndProlog} $line] {
                    set haveHeader 1
                    set sawEndProlog 1
                }
            } elseif [regexp {%%EndProlog} $line] {
                set sawEndProlog 1
            } elseif $sawEndProlog {
                if {[regexp {%%Page} $line ]} {
                    puts $outfd "%%Page: $pageNum $pageNum"
                    incr pageNum
                } elseif {![regexp {%%EOF} $line ]} {
                    puts $outfd $line
                }
            }
        }
        close $infd
    }
    puts $outfd "%%EOF"
    close $outfd
}

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####


#####################################################################
#### addToDAG
# Save the HTMLfile and link for our DAG.
#
body ::tycho::HTMLExport::addToDAG {HTMLfile link} {
    lappend DAGlist($link) $HTMLfile
    #puts "--$HTMLfile, $DAGlist($link), $link--"
}


