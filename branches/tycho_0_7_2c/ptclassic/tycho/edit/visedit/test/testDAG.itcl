# Test suite for DirectedAcyclicGraphs that will work from within itclsh
#
# @Authors: Edward A. Lee, Christopher Hylands
#
# @Version: @(#)testDAG.itcl	1.1 03/25/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the required packages are loaded
package require tycho.util.tytest
package require tycho.edit.visedit

test DAG-1.1 {Build a DAG} {
    catch {delete object foo}
    ::tycho::DirectedAcyclicGraph foo
    foo add a {}
    foo add c {} a
    foo add d {} a
    foo add e {} {a d}
    foo verifyAll
    foo verifyAcyclic
    foo describe
} {{d {} a} {e {} {a d}} {a {} {}} {c {} a}}


# The graph below has a cycle in it.
test DAG-1.2 {Build a DAG with a cycle} {
    catch {delete object foo}
    ::tycho::DirectedAcyclicGraph foo
    foo add c {} a
    foo add d {} a
    foo add y {} a
    foo add e {} y
    foo add f {} e
    foo add a {}
    foo addArc e a
    foo verifyAll
    foo rename a x
    foo delete y
    set descr [foo describe]
    foo clear
    foo init $descr
    # The following repairs the cycle in the graph.
    foo verifyAcyclic 1
    foo describe
} {{d {} x} {x {} {}} {e {} x} {f {} e} {c {} x}}




