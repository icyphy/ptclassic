# Base class for Tycho objects that are neither windows nor widgets.
# 
# @Author: Edward A. Lee
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Object
# This is the base class for Tycho objects that are neither windows nor
# widgets. It provides a set of useful methods.
#
class ::tycho::Object {

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Open a file and go to its internal point identified by name.
    method hyperJump {file {point {}}}

    ###################################################################
    ####                         protected methods                 ####

    # Prevent destruction of this object while evaluating the arguments.
    protected method safeEval {args}

    ###################################################################
    ####                         private variables                 ####

    # If non-zero, disable destruction.
    private variable disableDestruction 0
}

#######################################################################
#### constructor
#
body ::tycho::Object::constructor {args} {
}

#######################################################################
#### destructor
# Destruction will succeed only if we are not within a <code>safeEval</code>
# call.  If we are, then destruction is canceled with a silent error, and
# scheduled to be attempted again after 1 second.
#
body ::tycho::Object::destructor {} {
    if $disableDestruction {
        # Schedule a future attempt at destruction.
        after 1000 "$this nextWindow; delete object $this"
        ::tycho::silentError
    }
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#####################################################################
#### hyperJump
# Open a file and go to its internal point identified by name. If the
# filename is the empty string, do nothing. Otherwise, the
# file is opened  with <code>::tycho::File::openContext</code>,
# which will choose an editor based on the filename extension.
# Invoke <code>seeFragment</code> to view the specified point within that
# file. The format for the <i>point</i> argument depends on the type of
# file being opened. For HTML files, it will normally be the name of an
# anchor in the file. For text files, it will normally be either "{line
# <i>linenumber</i>}" or "{range <i>start</i> <i>end</i>}", where
# <i>start</i> and <i>end</i> have the form
# <i>linenumber.characternumber</i>.
# 
body ::tycho::Object::hyperJump {file {point {}}} {
    if {$file != {}} {
        set obj [uplevel #0 [list ::tycho::File::openContext $file]]
        if {$point != {}} {
            # The seeFragment call is postponed to give time for the widget
            # to be created. The catch is in case it is immediately deleted.
            after 200 [list catch [list $obj seeFragment $point]]
        }
    }
}

#####################################################################
#####################################################################
####                   protected methods                         ####

#####################################################################
#### safeEval
# Prevent destruction of this object while evaluating the arguments.
# Destruction will be cancelled by invoking a silent error, and will
# be scheduled for another attempt in the future.
# <p>
# This method is a workaround for a defect in Itcl. If "update",
# "update idletasks", or "tkwait" is called directly or indirectly from
# within an Itcl method, and during the update the Itcl object is
# destroyed, then when update returns, you may get a catastrophic failure
# of the application (a core dump).
#
body ::tycho::Object::safeEval {args} {
    set disableDestruction 1
    set retval {}
    if [catch {set retval [eval $args]} msg] {
        global ::errorInfo
        set saveInfo $errorInfo
        set disableDestruction 0
        error $saveInfo
    }
    set disableDestruction 0
    return $retval
}
