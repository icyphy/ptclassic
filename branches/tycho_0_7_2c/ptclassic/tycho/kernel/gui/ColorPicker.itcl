# A color picker based on Tycho's hue-saturation-value color
# interface.
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

##########################################################################
#### pickcolor
# Bring up a color picker dialog to query for a color.
#
proc ::tycho::pickcolor {} {
    set name [autoName .color]
    uplevel #0 [list ::tycho::ColorPicker $name -text {} -title "Color Picker"]
    wm deiconify $name
}

##########################################################################
#### ColorPicker
# A color picker based on Tycho's hue-saturation-value color interface.
#
class ::tycho::ColorPicker {
    inherit ::tycho::Dialog

    constructor {args} {}
    destructor {}

    ##################################################################
    ####                     public methods                       ####

    # Refresh the color picker
    method refresh {}

    # Process a single click
    method click {widget}

    ##################################################################
    ####                   protected methods                      ####


    ##################################################################
    ####                   protected variables                    ####

    ##################################################################
    ####                    private variables                     ####
}

######################################################################
#
body ::tycho::ColorPicker::constructor {args} {
    # Frame for displaying colors
    itk_component add colors {
	frame $itk_component(hull).colors -relief raised -borderwidth 2

    } {
	keep -cursor
    }
    pack $itk_component(colors) -side top -anchor nw\
	    -expand yes -fill x -after $itk_component(top) \
            -ipadx 12 -ipady 12

    # Frame for displaying the color sample
    itk_component add sample {
	frame $itk_component(hull).sample -relief raised -borderwidth 2

    } {
	keep -cursor
    }
    pack $itk_component(sample) -side bottom \
	    -expand yes -fill x -after $itk_component(top) \
            -ipadx 12 -ipady 6

    # Color swatches will have their bindtags set to respond
    # to the tag "swatch." Set up the bindings for them
    bind swatch <ButtonPress-1> "\[winfo toplevel %W\] click %W"

    # Make a grid of swatches, increase saturation from top to
    # The text samples
    itk_component add black {
        label $itk_component(sample).black \
                -text "Black text" \
                -foreground black \
                -font [::tycho::font Times 36 Bold] \
                -anchor e
    } {
        keep -cursor
    }
    itk_component add white {
        label $itk_component(sample).white \
                -text "White text" \
                -foreground white \
                -font [::tycho::font Times 36 Bold] \
                -anchor w
    } {
        keep -cursor
    }
    pack $itk_component(black) \
            -side top -expand yes -fill x -padx 12
    pack $itk_component(white) \
            -side top -expand yes -fill x -padx 12

    # Add the close button
    set bbox [component bbox]
    $bbox add close \
            -text "Close" \
            -command "destroy $itk_component(hull)" \
            -column 1
    $bbox default close

    # Process any unevaluated arguments.
    eval itk_initialize $args

    # Load the colors
    refresh
}

    ##################################################################
    ##################################################################
    ####                     public methods                       ####

######################################################################
#### click
# Process a single click. The argument is the widget that got the click.
#
body ::tycho::ColorPicker::click {widget} {
    set bg [$widget cget -bg]
    $itk_component(sample) configure -bg $bg
    $itk_component(black) configure -bg $bg
    $itk_component(white) configure -bg $bg
}

######################################################################
#### refresh
# Redraw the colors.
#
body ::tycho::ColorPicker::refresh {} {
    set colors $itk_component(colors)

    # If colors already exists, delete
    foreach f [winfo children $colors] {
        destroy $f
    }

    # Draw the greys
    set i 0
    set r 0
    label $colors.l -text grey
    grid $colors.l -row 0 -column 0 -columnspan 3
    frame $colors.0
    grid $colors.0 -row 1 -column 0 -columnspan 3
    set v 0
    set k 0
    foreach max {50 100} {
        set l 0
        while {$v <= $max} {
            set rgb [::tycho::color -hsv grey $v]
            frame $colors.0.$k$l -width 25 -height 25 -bg $rgb
            grid $colors.0.$k$l -row $k -column $l
            bindtags $colors.0.$k$l {swatch Frame all}
            incr l
            incr v 5
        }
        incr k
    }
    incr r 2
    grid rowconfigure $colors $r -minsize 6
    incr r
    incr i

    # Get hues, etc. Could be faster...
    set hues [::tycho::ColorManager::hue]
    set sats [::tycho::ColorManager::saturation]
    set vals [::tycho::ColorManager::value]

    # Make into three columns
    while { $hues != "" } {
        set hs [lrange $hues 0 2]
        set hues [lreplace $hues 0 2]
        set j 0
        # This is a single row
        foreach h $hs {
            set k 0

            # Create the label and the containing frame
            label $colors.l$i$j -text $h
            grid $colors.l$i$j -row $r -column $j
            frame $colors.$i$j
            grid $colors.$i$j -row [expr $r+1] -column $j -padx 8 -pady 2

            # bottom, increase brightness from left to right
            foreach s $sats {
                set l 0
                foreach v $vals {
                    set rgb [::tycho::color -hsv $h $s $v]
                    frame $colors.$i$j.$k$l -width 25 -height 25 -bg $rgb
                    grid $colors.$i$j.$k$l -row $k -column $l
                    bindtags $colors.$i$j.$k$l {swatch Frame all}
 
                    incr l
                }
                incr k
            }
            incr j
        }
        incr r 2
        grid rowconfigure $colors $r -minsize 6
        incr r
        incr i
    }
}

