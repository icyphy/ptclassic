# Definition of a menu bar widget
# 
# @Author: Farhana Sheikh
# @Contributors: Edward A. Lee, John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### MenuSupport
# This class defines functionality that supports a simple interface
# for creating, deleting, enabling, and disabling menus.
#
class ::tycho::MenuSupport {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Add a menu entry to a menu
    method add {name inMenu args}

    # Add a separator to a menu
    method addSeparator {inMenu args}

    # Delete a menu or menu entry
    method delete {name}

    # Disable an entry or an entire menu
    method disable {name}

    # Enable an entry or an entire menu
    method enable {name}

    # Get an option of a menu entry
    method entrycget {name option}

    # Set options of a menu entry
    method entryconfigure {name args}

    # Insert a menu entry before the specified entry
    method insert {name before args}

    # Insert a separator before the specified entry
    method insertSeparator {before}

    # Get an option of a menu
    method menucget {name option}

    # Set options of a menu
    method menuconfigure {name args}

    ###################################################################
    ####                      protected methods                    ####

    # Delete submenus within a menu
    protected method deleteSubMenus {menu}


    ##########################################################################
    ####                         protected variables                      ####

    # Each menu and menu entry has a type
    protected variable itemtype

    # Each menu has an access path
    protected variable menupath

    # Each entry is contained in a menu
    protected variable entrypath
}


#######################################################################
#### constructor
#
body ::tycho::MenuSupport::constructor {args} {
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
body ::tycho::MenuSupport::destructor {} {
}

###################################################################
###################################################################
####                      public methods                       ####


#####################################################################
#### add
#
# Add a menu entry to the end of a menu. The method takes the name of
# the menu entry, the name of the menu in which the menu entry is to be
# added and other menu entry options. By default, the created entry
# is a "command" type entry, which executes the specified command when
# the entry is selected. The *-type* option can be used to choose
# a different type of entry. Some common options are:
#
# <ul>
# <li>*-type* _type_: Select the type of entry. Can be _command_
# (the default), _cascade_ (for sub-menus), _radiobutton_, or
# _checkbutton_.
# <li>*-command* _command_: The command to be executed when the entry is
# selected.
# <li>*-underline* _index_: Underline the character of the entry name
# specified by _index_.
# <li>*-accelerator* _string_: Display _string_ next to the entry name.
# </ul>
#
# Any other options understood by the *add* method of the Tk menu widget
# can be given, except for *-menu* and *-label*. If there is already
# an entry with the specified name, this method does nothing. If creating a
# submenu, then the options apply only to the entry itself; to alter
# the options of the sub-menu from the defaults, use menuconfigure{}.
#
body ::tycho::MenuSupport::add {name inMenu args} {
    # Check if the menu exists
    if { ! [::info exists menupath($inMenu)] } {
	error "Menu $inMenu does not exist"
    }

    # Check if the entry already exists
    if { [::info exists entrypath($name)] } {
	return
	# error "Menu entry $name already exists"
    }

    # Read the "type" option
    if { [set t [lsearch -exact $args -type]] == -1 } {
	set type "command"
    } else {
	set type [lindex $args [expr $t+1]]
	set args [lreplace $args $t [expr $t+1]]
    }

    # Create a sub-menu
    if { $type == "cascade" } {
	set entrypath($name) $menupath($inMenu)
	set menupath($name) [menu $menupath($inMenu).[string tolower \
		[join $name ""]] -tearoff 0]
	set itemtype($name) "cascade"

	eval $menupath($inMenu) add cascade $args \
		-label [list $name] \
		-menu $menupath($name)
    } else {
	# Create some other type of menu entry
	set entrypath($name) $menupath($inMenu)
	set itemtype($name) $type

	eval $menupath($inMenu) add $type $args -label [list $name]
    }
}


#####################################################################
#### addSeparator
# Add a separator to the end of the specified menu. The first argument
# is the name of the menu. The remaining arguments are passed
# unchanged to the Tk <i>menu</i> <code>add separator</code> command.
#
body ::tycho::MenuSupport::addSeparator {inMenu args} {
    # Check if the menu exists
    if { ! [::info exists menupath($inMenu)] } {
	error "Menu $inMenu does not exist"
    }

    eval $menupath($inMenu) add separator $args
}

#####################################################################
#### delete
# Delete a menu or a menu entry. If the specified menu or entry
# does not exist, nothing happens.
#
body ::tycho::MenuSupport::delete {name} {
    # Check validity
    if { ! [::info exists itemtype($name)] } {
	error "$name is not a menu or menu entry"
    }

    # If it's a menu, delete it
    if { [::info exists menupath($name)] } {
	# Delete nested submenus
	deleteSubMenus $menupath($name)

	# Delete and forget the menu
	destroy $menupath($name)
	unset menupath($name)
    }

    # Remove the entry from the menu
    $entrypath($name) delete $name
    unset itemtype($name)
    unset entrypath($name)
}


#####################################################################
#### deleteSubMenus
# Delete submenus from the given menu.
#
body ::tycho::MenuSupport::deleteSubMenus {menu} {
    set lastindex [$menu index end]
    set i 0
    while { $i <= $lastindex } {
	if { [$menu type $i] == "cascade" } {
	    $this delete [$menu entrycget $i -label]
	}
	incr i
    }
}


#####################################################################
#### disable
# Disable a menu or a menu entry. Signal an error if the menu or entry
# does not exist.
#
body ::tycho::MenuSupport::disable {name} {
    # Check validity
    if { ! [::info exists entrytype($name)] } {
	error "$name is not a menu or menu entry"
    }

    # Disable the menu entry
    $entrypath($name) entryconfigure $name -state disabled
}


#####################################################################
#### enable
# Enable a menu or a menu entry. Signal an error if the menu or entry
# does not exist.
#
body ::tycho::MenuSupport::enable {name} {
    # Check validity
    if { ! [::info exists entrytype($name)] } {
	error "$name is not a menu or menu entry"
    }

    # Enable the menu entry
    $entrypath($name) entryconfigure $name -state normal
}


#####################################################################
#### entrycget
# Get a configuration option of a menu entry.
#
body ::tycho::MenuSupport::entrycget {name option} {
    # Check validity
    if { ! [::info exists entrypath($name)] } {
	error "$name is not a menu entry"
    }

    # Get the option
    $entrypath($name) entrycget $name $option
}

#####################################################################
#### entryconfigure
# Get or configure options of a menu entry.
#
body ::tycho::MenuSupport::entryconfigure {name args} {
    # Check validity
    if { ! [::info exists entrypath($name)] } {
	error "$name is not a menu entry"
    }
    
    # Get or set the option(s)
    eval $entrypath($name) entryconfigure $name $args
}

#####################################################################
#### insert
# Insert an entry before the specified entry. An error is flagged
# if the specified entry does not exist.
#
body ::tycho::MenuSupport::insert {name before args} {
    # Check if the entry to insert before exists
    if { ! [::info exists entrypath($before)] } {
	error "Entry $before does not exist"
    }

    # Check if the new entry already exists
    if { [::info exists entrypath($name)] } {
	error "Menu entry $name already exists"
    }

    # Read the "type" option
    if { [set t [lsearch -exact $args -type]] == -1 } {
	set type "command"
    } else {
	set type [lindex $args [expr $t+1]]
	set args [lreplace $args $t [expr $t+1]]
    }

    # Create a sub-menu
    if { $type == "cascade" } {
	set entrypath($name) $entrypath($before)
	set menupath($name) [menu $entrypath($before).[string tolower \
		[join $name ""]] -tearoff 0]
	set itemtype($name) "cascade"

	eval $entrypath($before) insert $before cascade $args \
		-label [list $name] \
		-menu $menupath($name)
    } else {
	# Create some other type of menu entry
	set entrypath($name) $entrypath($before)
	set itemtype($name) $type

	eval $entrypath($before) insert $before $type $args -label [list $name]
    }
}

#####################################################################
#### insertSeparator
# Insert a separator before the specified entry. An error is flagged
# if the specified entry does not exist.
#
body ::tycho::MenuSupport::insertSeparator {before} {
    # Check if the entry exists
    if { ! [::info exists entrypath($before)] } {
	error "Entry $before does not exist"
    }

    $entrypath($before) insert $before separator
}

#####################################################################
#### menucget
# Get a configuration option of a menu.
#
body ::tycho::MenuSupport::menucget {name option} {
    # Check validity
    if { ! [::info exists menupath($name)] } {
	error "$name is not a menu"
    }
    
    # Get the option
    $menupath($name) cget $option
}

#####################################################################
#### menuconfigure
# Get or configure options of a menu.
#
body ::tycho::MenuSupport::menuconfigure {name args} {
    # Check validity
    if { ! [::info exists menupath($name)] } {
	error "$name is not a menu"
    }
    
    # Get or set the option(s)
    eval $menupath($name) configure $args
}
