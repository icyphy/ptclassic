# Microsoft VC++ nmake file for VC 5.0
# Based on config-nt4.mk, but modified by hand
# **** It is _VERY_ unlikely that this makefile works ****

# Version: $Id$

# Copyright (c) 1997-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#		       
# This file is based on the Tcl8.0 win/makefile.vc, which is 

# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# Copyright (c) 1995-1996 Sun Microsystems, Inc.p

# BUGS:
# ptbin.mk.vc: The version string is not properly set.
# src/kernel/Clock.cc: We don't have gettimeofday or select(), so
#	some stars will not work.
# src/kernel/expandPath: We don't have a pwd.h, so file name expansion
#       will not work.

# See $PTOLEMY/doc/html/nt/index.html for more information.

# Programmer:  Christopher Hylands

# --------------------------- -----------------------------------------
# |  Please see the file ``config-default.mk'' in this directory!    |
# --------------------------------------------------------------------
!include <ntwin32.mak>
!include  $(ROOT)\mk\config-default.mk.vc
PTOLEMY=d:\temp\ptolemy

# TMPDIR  = location where .obj files should be stored during build
#
# TOOLS32 = location of VC++ 32-bit development tools. Note that the
#	    VC++ 2.0 header files are broken, so you need to use the
#	    ones that come with the developer network CD's, or later
#	    versions of VC++.
#
# TOOLS16 = location of VC++ 1.5 16-bit tools, needed to build thunking
#	    library.  This information is optional; if the 16-bit compiler
#	    is not available, then the 16-bit code will not be built.  
#	    Tcl will still run without the 16-bit code, but...
#		A. Under Windows 3.X you will any calls to the exec command
#	           will return an error.
#		B. A 16-bit program to test the behavior of the exec
#		   command under NT and 95 will not be built.
#
TMPDIR		= .
TOOLS32		= d:\Progra~1\DevStudio\Vc
TOOLS16		= d:\Progra~1\DevStudio\Vc

# Set this to the appropriate value of /MACHINE: for your platform
MACHINE	= IX86

# Comment the following line to compile with symbols
#NODEBUG=1


INCLUDE		= $(TOOLS32)\include

LIBSUFFIX 	= dll
LIBNONSHAREDSUFFIX = lib



# Under NT, build a static ptcl first

# Get the g++ definitions for shared libraries; we override some below.
# Comment the next line out if you don't want shared libraries.
#include $(ROOT)\mk\config-g++.shared.mk

#
# Programs to use
#
RANLIB = true
# Use gcc everywhere including in octtools
cc32		= $(TOOLS32)\bin\cl.exe
link32		= $(TOOLS32)\bin\link.exe
rc32		= $(TOOLS32)\bin\rc.exe
include32	= -I$(TOOLS32)\include

cc16		= $(TOOLS16)\bin\cl.exe
link16		= $(TOOLS16)\bin\link.exe
rc16		= $(TOOLS16)\bin\rc.exe
include16	= -I$(TOOLS16)\include

CPLUSPLUS = $(cc32) -I$(ROOT)\src\compat\nt.vc -I$(ROOT)\src\compat\cfront -I$(TCL_INCDIR)
CC =		$(CPLUSPLUS)

#TCL_CFLAGS	= $(cdebug) $(cflags) $(cvarsdll) $(include32) \
#			$(TCL_INCLUDES) $(TCL_DEFINES)
CON_CFLAGS	= $(cdebug) $(cflags) $(cvars) $(include32) -DCONSOLE
DOS_CFLAGS	= $(cdebug) $(cflags) $(include16) -AL 
DLL16_CFLAGS	= $(cdebug) $(cflags) $(include16) -ALw

######################################################################
# Link flags
######################################################################

!IFDEF NODEBUG
ldebug = /RELEASE
!ELSE
ldebug = -debug:full -debugtype:cv
!ENDIF

# declarations common to all linker options
lcommon = /NODEFAULTLIB /RELEASE /NOLOGO

# declarations for use on Intel i386, i486, and Pentium systems
!IF "$(MACHINE)" == "IX86"
DLLENTRY = @12
lflags   = $(lcommon) -align:0x1000 /MACHINE:$(MACHINE)
!ELSE
lflags   = $(lcommon) /MACHINE:$(MACHINE)
!ENDIF

conlflags = $(lflags) -subsystem:console #-entry:mainCRTStartup
guilflags = $(lflags) -subsystem:windows -entry:WinMainCRTStartup
dlllflags = $(lflags) -entry:_DllMainCRTStartup$(DLLENTRY) -dll

!IF "$(MACHINE)" == "PPC"
libc = libc.lib
libcdll = crtdll.lib
!ELSE
libc = libci.lib oldnames.lib
libcdll = msvcrt.lib oldnames.lib
!ENDIF

baselibs   = kernel32.lib $(optlibs) advapi32.lib user32.lib
winlibs    = $(baselibs) gdi32.lib comdlg32.lib winspool.lib

guilibs	   = $(libc) $(winlibs)
conlibs	   = $(libc) $(baselibs)
guilibsdll = $(libcdll) $(winlibs)
conlibsdll = $(libcdll) $(baselibs)

######################################################################
# Compile flags
######################################################################

!IFDEF NODEBUG
OPTIMIZER = -Ox
!ELSE
OPTIMIZER = -Z7 -Od -WX
!ENDIF

# declarations common to all compiler options
ccommon = -c -W3 -nologo -YX -Dtry=__try -Dexcept=__except

!IF "$(MACHINE)" == "IX86"
cflags = $(ccommon) -D_X86_=1
!ELSE
!IF "$(MACHINE)" == "MIPS"
cflags = $(ccommon) -D_MIPS_=1
!ELSE
!IF "$(MACHINE)" == "PPC"
cflags = $(ccommon) -D_PPC_=1
!ELSE
!IF "$(MACHINE)" == "ALPHA"
cflags = $(ccommon) -D_ALPHA_=1
!ENDIF
!ENDIF
!ENDIF
!ENDIF

cvars      = -DWIN32 -D_WIN32
cvarsmt    = $(cvars) -D_MT
cvarsdll   = $(cvarsmt) -D_DLL


PTLANG = ptlang

# In config-$PTARCH.mk, we set the following variables.  We need to 
# use only the following variables so that we can use them elsewhere, say
# for non-optimized compiles.
# OPTIMIZER - The setting for the optimizer, usually -O2.
# MEMLOG    - Formerly used to log memory allocation and deallocation.
# WARNINGS  - Flags that print warnings.
# ARCHFLAGS - Architecture dependent flags, useful for determining which
#	      OS we are on.  Often of the form -DPTSOL2_4.
# LOCALCCFLAGS - Other architecture dependent flags that apply to all releases
#	      of the OS for this architecture for c++
# LOCALCFLAGS - Other architecture dependent flags that apply to all releases
#	      of the OS for this architecture for c++
# USERFLAGS - Ptolemy makefiles should never set this, but the user can set it.

OPTIMIZER =	#-O2
# -Wsynth is new in g++-2.6.x
# Under gxx-2.7.0 -Wcast-qual will drown you with warnings from libg++ includes
WARNINGS =	#-Wall -Wsynth #-Wcast-qual 
LOCALCCFLAGS =	/DPTNT /DPT_NT4VC /DPT_NO_TIMER $(GCC_270_OPTIONS)\
		/DPT_NO_ITCL /PT_USE_RAND /PT_NO_GETTIMEOFDAY /PT_NO_SELECT \
		/DPT_NO_PWD /DPT_SYS_NERR_STDLIB \
		/Dfar=ptfar -Dstrcasecmp=stricmp \
		/nologo /D__WIN32__ \
		$(cflags) $(cvarsdll) $(include32)

GPPFLAGS =	$(OPTIMIZER) $(MEMLOG) $(WARNINGS) \
			$(ARCHFLAGS) $(LOCALCCFLAGS) $(USERFLAGS)
# If you are not using gcc, then you might have problems with the WARNINGS flag
LOCALCFLAGS =	$(LOCALCCFLAGS)
CFLAGS =	$(OPTIMIZER) $(MEMLOG) $(WARNINGS) \
			$(ARCHFLAGS) $(LOCALCFLAGS) $(USERFLAGS)

#TCL_VERSION_NUM=76i
#TK_VERSION_NUM=42i
#ITCL_VERSION_NUM=22

TCL_ROOT=d:\Progra~1\Tcl

TCL_VERSION_NUM=80
TK_VERSION_NUM=42i
ITCL_VERSION_NUM=22

# Combined -L and -l options to link with tcl library.
#TCL_LIBSPEC= c:\Itcl2.2\tcl7.6\win\Tcl76i.lib
#TCL_LIBSPEC=-L$(TCL_ROOT)\Bin -ltcl$(TCL_VERSION_NUM)
#TCL_LIBSPEC=-L\usr\local\lib -ltcl8.0
TCL_LIBSPEC=$(TCL_ROOT)/lib/tcl80vc.lib
TCL_LIBSPEC=$(PTOLEMY)\tcltk\bin.$(PTARCH)\tcl80.lib
TCL_LIBDEP= $(TCL_ROOT)/lib/tcl80vc.lib

TCL_INCDIR=$(TCL_ROOT)\include

# Directory containing Tk include files
#TK_INCDIR=$(TCL_ROOT)\itk\include
TK_INCDIR=$(TCL_ROOT)\include

# Combined -L and -l options to link with tk library.  Can add
# addtional -L and\or -l options to support tk extensions.
#TK_LIBSPEC=-L$(TCL_ROOT)\itcl.$(PTARCH)\lib\itcl -ltk$(TK_VERSION_NUM) #-lXpm
TK_LIBSPEC=-L$(TCL_ROOT)\lib -ltk8.0vc.lib

# Directory containing itcl include files
#ITCL_INCDIR=$(TCL_ROOT)\$(ITCL_VERSION)\include
#ITCL_INCDIR=$(TCL_ROOT)\include
#ITCL_LIBSPEC= c:\Itcl2.2\itcl\win\Itcl22.lib 
ITCL_LIBSPEC=

ITCL_INCDIR=

# Libraries used during creation of dlls
KERNEL_DLLDEP =	$(ROOT)/src/kernel/libptolemy.lib

#
# Variables for the linker
#
# system libraries (libraries from the environment) for c++ files
SYSLIBS=$(SHARED_COMPILERDIR_FLAG) $(SHARED_SYSLIBS)

# system libraries for linking .o files from C files only
CSYSLIBS=$(SHARED_COMPILERDIR_FLAG)

# Ask ld to strip symbolic information, otherwise, expect a 32Mb pigiRpc
# -s conflicts with purelink, so if you are using purelink comment this out.
LINKSTRIPFLAGS=-Wl,-s

# Can't use -static here, or we won't be able to find -ldl, and
# dynamic linking will not work.
LINKFLAGS=-L$(LIBDIR) $(SHARED_LIBRARY_R_LIST) $(LINKSTRIPFLAGS) 
# link flags if debugging symbols are to be left
LINKFLAGS_D=-L$(LIBDIR) $(SHARED_LIBRARY_R_LIST)

# These are the additional flags that we need when we are compiling code
# which is to be dynamically linked into Ptolemy.  -shared is necessary
# with gcc-2.7.0
INC_LINK_FLAGS = -shared $(SHARED_COMPILERDIR_FLAG)


# Flag that gcc expects to create statically linked binaries.
# Binaries that are shipped should be statically linked.
# Note that cc uses -Bstatic
CC_STATIC =

#
# Directories to use
#
X11_INCSPEC =	-I\usr\openwin\include
X11_LIBDIR =	\usr\openwin\lib
X11_LIBSPEC =	-L$(X11_LIBDIR)  -lX11

# Variables for Pure Inc tools (purify, purelink, quantify)
COLLECTOR =

PURELINK =	#purelink $(COLLECTOR) -hardlink=yes
PURIFY =	#purify -automount-prefix=\tmp_mnt:\vol -best-effort
QUANTIFY =	#quantify


PURECOV = 	#purecov

#
# Variables for miscellaneous programs
#
# Used by xv
#XV_RAND= RAND="-DNO_RANDOM -Drandom=rand"
XV_INSTALL =

# -DATT is needed so we don't try and include sys\dir.h
# -R$(X11LIB_DIR) is need so we can find the X libs at runtime,
#	otherwise, we will need to set LD_LIBRARY_PATH
XV_CC =		gcc -traditional $(X11_INCSPEC) \
		-DSVR4 -DSYSV -DDIRENT -DATT -DNO_BCOPY \
		$(X11_LIBSPEC) -R$(X11_LIBDIR)

XV_RAND = 	-DNO_RANDOM

# Under sol2, xmkmf is not compatible with gcc, so we don't use it
XMKMF =		rm -f Makefile; cp Makefile.std Makefile

# Used by tcltk to build the X pixmap extension
XPM_DEFINES =	#-DZPIPE $(X11_INCSPEC)


# Build gthreads
INCLUDE_GTHREADS =	no

# Include the PN domain.
INCLUDE_PN_DOMAIN =	no
INCLUDE_IPUS_DOMAIN = no

INCLUDE_MATLAB = no
INCLUDE_MATHEMATICA=no

