# Makefile for compiling the Tcl/Java interface
#
# @Author: Christoper Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

# This makefile is an autoconf makefile, not a standard Ptolemy makefile

# This file is a makefile for the Tcl/Java interface.
# If it has the name "makefile.in"
# then it is a template for a makefile;  to generate the actual makefile,
# run "./configure", which is a configuration script generated by the
# "autoconf" program (constructs like "@foo@" will get replaced in the
# actual makefile.

## start of tcl.mk.in ##
SHELL = 	/bin/sh

# Don't set srcdir or VPATH in this file or you will override the values
# in the makefile that includes this file.
#srcdir =	@srcdir@
#VPATH =		@srcdir@

# Location of Tcl and Tk files
TCL_SRC_DIR =		@TCL_SRC_DIR@
TCL_INCLUDE_DIR =	@TCL_INCLUDE_DIR@
TCL_LIB_DIR =		@TCL_LIB_DIR@

TCL_SHLIB_SUFFIX =	@TCL_SHLIB_SUFFIX@
TCL_SHLIB_LD =		@TCL_SHLIB_LD@

TCL_CFLAGS =		@TCL_CFLAGS@

# String to pass to linker to pick up the Tcl library from its
# installed directory.
TCL_LIB_SPEC =		@TCL_LIB_SPEC@

TK_INCLUDE_DIR =	@TK_INCLUDE_DIR@
TK_LIB_DIR =		@TK_LIB_DIR@

LIB_INSTALL_DIR =	$(TCL_LIB_DIR)
# Flags to pass to cc, such as "-Wl,-R,/usr/local/tcl/lib", that tell the
# run-time dynamic linker where to look for shared libraries such as
# libtcl.so.  Used when linking applications.  Only works if there
# is a variable "LIB_INSTALL_DIR" defined in the Makefile.
TCL_LD_SEARCH_FLAGS =	@TCL_LD_SEARCH_FLAGS@

TK_SRC_DIR =		@TK_SRC_DIR@

# -I switch(es) to use to make all of the X11 include files accessible:
TK_XINCLUDES =		@TK_XINCLUDES@

# String to pass to linker to pick up the Tk library from its
# installed directory.
TK_LIB_SPEC =		@TK_LIB_SPEC@

# Additional libraries to use when linking Tk.
TK_LIBS =		@TK_LIBS@

CC =			@TCL_CC@
AC_FLAGS =		@DEFS@ @TCL_SHLIB_CFLAGS@ 

# configure substitutes the stuff inside @..@ above this line

LIBS = 		$(TK_LIB_SPEC) $(TCL_LIB_SPEC) $(TK_LIBS)

TCL_INCLUDES = \
	-I$(TCL_INCLUDE_DIR) \
	-I$(TK_INCLUDE_DIR) \
	$(TK_XINCLUDES)

CFLAGS =	$(TCL_CFLAGS) $(AC_FLAGS) $(INCLUDE) $(OTHERCFLAGS)
## end of tcl.mk.in ##

srcdir =	@srcdir@
VPATH =		@srcdir@

# Where's the root of the java distribution?
JAVAHOME = 	@JAVAHOME@

# What's the java compiler binary?
JAVAC = 	$(JAVAHOME)/bin/javac

# What's the java header program?
JAVAH = 	$(JAVAHOME)/bin/javah

# Directory that contains architecture dependent include files
# Usually $(JAVAHOME)/include/solaris or something similar
JAVA_ARCH_INCLUDE = @JAVA_ARCH_INCLUDE@

JAVA_INCLUDES = \
	-I$(JAVAHOME)/include \
	-I$(JAVA_ARCH_INCLUDE)

TCL_CFLAGS =		@TCL_CFLAGS@

# Location of Tcl and Tk files
TCL_INCLUDE_DIR =	@TCL_INCLUDE_DIR@
TCL_LIB_DIR =		@TCL_LIB_DIR@

TCL_SHLIB_SUFFIX =	@TCL_SHLIB_SUFFIX@
TCL_SHLIB_LD =		@TCL_SHLIB_LD@

TCL_CFLAGS =		@TCL_CFLAGS@

# String to pass to linker to pick up the Tcl library from its
# installed directory.
TCL_LIB_SPEC =		@TCL_LIB_SPEC@

TK_INCLUDE_DIR =	@TK_INCLUDE_DIR@
TK_LIB_DIR =		@TK_LIB_DIR@

LIB_INSTALL_DIR =	$(TCL_LIB_DIR)

LIB_RUNTIME_DIR = 	$(TCL_LIB_DIR)

# Flags to pass to cc, such as "-Wl,-R,/usr/local/tcl/lib", that tell the
# run-time dynamic linker where to look for shared libraries such as
# libtcl.so.  Used when linking applications.  Only works if there
# is a variable "LIB_INSTALL_DIR" defined in the Makefile.
TCL_LD_SEARCH_FLAGS =	@TCL_LD_SEARCH_FLAGS@


# -I switch(es) to use to make all of the X11 include files accessible:
TK_XINCLUDES =		@TK_XINCLUDES@

# String to pass to linker to pick up the Tk library from its
# installed directory.
TK_LIB_SPEC =		@TK_LIB_SPEC@

# Additional libraries to use when linking Tk.
TK_LIBS =		@TK_LIBS@

CC =			@TCL_CC@
AC_FLAGS =		@DEFS@ @TCL_SHLIB_CFLAGS@ 

# configure substitutes the stuff inside @..@ above this line

LIBS = 		$(TK_LIB_SPEC) $(TCL_LIB_SPEC) $(TK_LIBS)

TCL_INCLUDES = \
	-I$(TCL_INCLUDE_DIR) \
	-I$(TK_INCLUDE_DIR) \
	$(TK_XINCLUDES)

# To build under hppa, try something like:
# make OTHERCFLAGS="-DTCLEXECFIX -Dexecenv=javaexecenv -D_INT32_T -D_UINT32_T -D_INT16_T -D_UINT16_T -D_INT8_T -D_UINT8_T -Dint32_t=long"

CFLAGS =	$(TCL_CFLAGS) $(AC_FLAGS) $(INCLUDE) $(OTHERCFLAGS)


LIB =		libjtk$(TCL_SHLIB_SUFFIX)
VERSION =	0.4

INCLUDE = \
	-I./ \
	-I$(srcdir) \
	$(JAVA_INCLUDES) \
	$(TCL_INCLUDES)

# This provides a workaround for the 'exec' bug.  It's a brain-dead
# replacement for the 'exec' command.  It's basically a 'system("cmd string");'
# and nothing more. Probably only works under Unix, but maybe Dos?
OTHERCFLAGS= -DTCLEXECFIX

SRCS = 		tclJava.c tcl_classes.c tkJava.c
HDRS =		tcl_classes.h

EXTRA_SRCS =	makefile.in README TclTest.tcl license.terms \
		tkcon.tcl tkcon.zip zipbrowser.tcl

# Checkjunk should ignore these
MISC_FILES =	doc tcl

# Sub directories to run make in.
DIRS =		#doc tcl

OBJS =		tclJava.o tcl_classes.o tkJava.o

# `make realclean` removes these files
REALCLEAN_STUFF = makefile

LIBPATH = \
	-L$(TCL_LIB_DIR) \
	-L$(TK_LIB_DIR)

CLASSPATH=.
CLASSES.tcl = \
	tcl.Command \
	tcl.Interp \
	tcl.Result \
	tcl.Tcl_BreakException \
	tcl.Tcl_ContinueException \
	tcl.Tcl_ControlException \
	tcl.Tcl_ErrorException \
	tcl.Tcl_ResultCodeException \
	tcl.Tcl_ReturnException \
	tcl.Tcl_UserException \
	tcl.Value \
	tcl.TkApplication

JSRCS = \
	TclTest.java \
	tcl/Command.java \
        tcl/Interp.java \
	tcl/Tcl_BreakException.java \
	tcl/Tcl_ContinueException.java \
	tcl/Tcl_ControlException.java \
	tcl/Tcl_ErrorException.java \
	tcl/Tcl_ResultCodeException.java \
	tcl/Tcl_ReturnException.java \
	tcl/Tcl_UserException.java \
        tcl/Value.java \
        tcl/TkApplication.java

TCL_JCLASSES = \
        tcl/Command.class \
        tcl/Interp.class \
        tcl/Result.class \
	tcl/Tcl_BreakException.class \
	tcl/Tcl_ContinueException.class \
	tcl/Tcl_ControlException.class \
	tcl/Tcl_ErrorException.class \
	tcl/Tcl_ResultCodeException.class \
	tcl/Tcl_ReturnException.class \
	tcl/Tcl_UserException.class \
        tcl/Value.class \
        tcl/TkApplication.class

JCLASSES = $(TCL_JCLASSES) \
	Callback1.class \
	Callback2.class \
	TclTest.class \
	Thrower.class \
	facCalc.class \
	zipCallback.class

all: $(LIB) tcl TclTest.class

$(LIB) : $(OBJS)
	$(TCL_SHLIB_LD) $(OBJS) -o $@ $(TCL_LD_SEARCH_FLAGS) $(LIBS)

install: $(LIBDIR)/$(LIB)

tcl_classes.c: $(TCL_JCLASSES)
	$(JAVAH) -o tcl_classes.c -stubs $(CLASSES.tcl)

tcl_classes.h: $(TCL_JCLASSES)
	$(JAVAH) -o tcl_classes.h $(CLASSES.tcl)

TclTest.java: $(LIB)

# Stuff to clean
CRUD = tcl_* *.class *.o $(LIB) tcl/*.class *~ doc/*~ tcl/*~

tclJava.c: tcl_classes.h
tkJava.c: tcl_classes.h
tclJava.o: tclJava.c tcl_classes.h
tkJava.o: tkJava.c tcl_classes.h

depend:
	@echo "no dependencies in this directory"

## start of tycommon.mk ##

##############
# Java rules

.SUFFIXES: .class .java
.java.class:
	rm -f `basename .java`.class
	CLASSPATH=$(CLASSPATH) $(JAVAC) $(JFLAGS) $<

# Build all the Java class files.
jclass:	$(JSRCS) $(JCLASS) 

# Build the Java documentation.
javadocs: doc/codeDoc/tree.html
jhtml: doc/codeDoc/tree.html
doc/codeDoc/tree.html:	$(JSRCS) 
	@if [ "$(JSRCS)" = "" ]; then \
		echo "No java sources, so we don't run javadoc";\
	else \
	if [ ! -d doc/codeDoc ]; then mkdir -p doc/codeDoc; fi; \
	rm -f doc/codeDoc/*.html; \
	CLASSPATH=$(CLASSPATH):$(JAVAHOME)/lib/classes.zip $(JAVADOC) $(JDOCFLAGS) -d doc/codeDoc $(JSRCS); \
	for x in doc/codeDoc/*.html; do \
		echo "Fixing paths in $$x"; \
		sed -e 's|<a href="java|<a href="$(JAVAHTMLDIR)/java|g' \
		-e 's|<img src="images/|<img src="$(JAVAHTMLDIR)/images/|g' \
			$$x > $$x.bak; \
		mv $$x.bak $$x; \
	done; \
	fi

## end of tycommon.mk ##

makefile: $(srcdir)/makefile.in
	(cd ../..; ./config.status)
