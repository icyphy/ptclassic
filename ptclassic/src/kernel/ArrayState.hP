#ifndef _<T>ArrayState_h
#define _<T>ArrayState_h 1

#include "State.h"
#include "<T>State.h"
#include "KnownState.h"


/**************************************************************************
Version identification:
$Id$

 Copyright (c) 1990 The Regents of the University of California.
                       All Rights Reserved.

 Programmer:  I. Kuroda and J. T. Buck
 Date of creation: 6/8/90
 Revisions:

 State  with <T> type

**************************************************************************/

///////////////////////////////////////////
// class  <T>ArrayState
///////////////////////////////////////////

class <T>ArrayState : public State
{
protected:
	int	nElements;
	<C>	*val;
public:
	// Constructor
	<T>ArrayState () {nElements = 0; val = 0;}

	// Constructor
	<T>ArrayState (int size) { val = new <C> [nElements = size];}

	// Constructor
	<T>ArrayState (int size, <C>& fill_value) 
				{ val = new <C> [nElements = size];
				<C> * top = &(val[nElements]);
				<C> * t = val;
				while (t < top) *t++ = fill_value; }

	// Destructor
	~<T>ArrayState () {delete[nElements] val;}

	// Assignment operator
	<T>ArrayState &	operator = (<T>ArrayState & v) {
				if (this != &v) {
				delete[nElements] val;
				val  = new <C> [nElements = v.nElements];
				<C>* top = &(val[nElements]);
				<C>* t = val;
				<C>* u = v.val;
				while (t < top) *t++ = *u++;
				}
				return *this;
			}

	// Size
	int size() { return nElements;}

	// Array element 
	<C> & operator [] (int n) {
				return val[n];
			}

	// The type
	char* type() { return "<T>Array";}

        // the value as a string
        StringList currentValue() { 
		StringList s; 
		s =  "\n";
		for(int i = 0; i<size(); i++) 
		{s = i; s = " "; s = val[i]; s= "\n";} 
		return s;}

	// Parse initValue to set Value
	void initialize();

	// Parse element
	ParseToken evalExpression(Tokenizer&, Block*);

	// clone method
	virtual State* clone() {return new <T>ArrayState;}
};

#endif
