#ifndef _<T>ArrayState_h
#define _<T>ArrayState_h 1

#ifdef __GNUG__
#pragma interface
#endif

#include "State.h"

/**************************************************************************
Version identification:
$Id$

 Copyright (c) 1990 The Regents of the University of California.
                       All Rights Reserved.

 Programmer:  I. Kuroda and J. T. Buck
 Date of creation: 6/8/90
 Revisions:

 State  with <T> type

**************************************************************************/

///////////////////////////////////////////
// class  <T>ArrayState
///////////////////////////////////////////

class <T>ArrayState : public State
{
public:
	// Constructor
	<T>ArrayState () {nElements = 0; val = 0;}

	// Constructor
	<T>ArrayState (int size) { val = new <C> [nElements = size];}

	// Constructor, with fill value
	<T>ArrayState (int size, <C>& fill_value) ;

	// Destructor
	~<T>ArrayState () ;

	// Assignment operator
	<T>ArrayState &	operator = (const <T>ArrayState & v) ;

	// Size
	int size() const; // { return nElements;}

	// Array element 
	<C> & operator [] (int n) {
				return val[n];
			}

	// Cast to pointer to data
	operator <C>* () { return val; }

	// The type
	const char* type() const;

        // the value as a string
        StringList currentValue() const;

	// class identification
	int isA(const char*) const;
	const char* className() const;
	int isArray() const;

	// extend/truncate the array size
	void resize(int);

	// Parse initValue to set Value
	void initialize();

	// Parse element
	ParseToken evalExpression(Tokenizer&);

	// clone method
	State* clone() const; // {return new <T>ArrayState;}
protected:
	int	nElements;
	<C>	*val;
};

#endif
