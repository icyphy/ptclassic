# Makefile for Ptolemy library and main module for interpreter
# Version identification:
# $Id$
# Copyright (c) 1990 The Regents of the University of California.
#                       All Rights Reserved.
# Date of creation: 3/19/90
#
# If this file's name is "make.template" and there is no makefile in
# this directory, do
#	cp make.template makefile
#	make depend
# This will add the dependencies to the makefile.

# Root of Ptolemy directory
ROOT=../..
# Where we are
VPATH = ../../src/kernel
# get configuration info
CONFIG=$(ROOT)/config-$(ARCH).mk
include $(CONFIG)

# Rule for compiling with C++ programs
.SUFFIXES: .cc
.cc.o:
	$(GNU) $(GPPFLAGS) -c  $<

# need gcc, not cc, to build gnulib3a
CC = gcc

# Library name
LIB=libptolemy.a

# Library sources.  CCS_WITH_H_FILES includes all .cc files with a
# corresponding .h file with the same root.

CCS_WITH_H_FILES=\
 Animate.cc \
 AutoForkNode.cc \
 Block.cc \
 Code.cc \
 ComplexArrayState.cc \
 ComplexState.cc \
 Connect.cc \
 DataStruct.cc \
 Display.cc \
 Domain.cc \
 DynamicGalaxy.cc \
 Error.cc \
 FixSample.cc \
 FixState.cc \
 FixArrayState.cc \
 FloatArrayState.cc \
 FloatState.cc \
 FloatVecData.cc \
 Fraction.cc \
 GalIter.cc \
 Galaxy.cc \
 Geodesic.cc \
 Histogram.cc \
 ImageData.cc \
 IntArrayState.cc \
 IntState.cc \
 IntVecData.cc \
 InterpGalaxy.cc \
 InterpUniverse.cc \
 Interpreter.cc \
 KnownBlock.cc \
 KnownState.cc \
 KnownTarget.cc \
 Linker.cc \
 NamedObj.cc \
 Packet.cc \
 Particle.cc \
 PriorityQueue.cc \
 Scheduler.cc \
 Star.cc \
 State.cc \
 StringList.cc \
 StringState.cc \
 Target.cc \
 Tokenizer.cc \
 Universe.cc \
 UserOutput.cc \
 WormConnect.cc \
 Wormhole.cc \
 logNew.cc

# The complete list of .cc files used in the library
LIBCCSRCS=$(CCS_WITH_H_FILES) \
 checkConnect.cc \
 expandPath.cc \
 RanGen.cc \
 hashstring.cc

# .c sources used in the library.
# (depending on particular configuration, CONSTRUCTOR_HACK may be empty)
LIBCSRCS=$(CONSTRUCTOR_HACK)

LIBSRCS = $(LIBCCSRCS) $(LIBCSRCS)
# All sources.
SRCS=$(LIBSRCS) interpmain.cc

# Header files.  When adding a new header, add it here only if there is
# no corresponding .cc file; otherwise add the .cc file to CCS_WITH_H_FILES.
HDRS= $(CCS_WITH_H_FILES:.cc=.h) \
 Attribute.h \
 CircularBuffer.h \
 ComplexSubset.h \
 ConstIters.h \
 Linker.sysdep.h \
 Output.h \
 ParticleQueue.h \
 ParticleStack.h \
 Plasma.h \
 dataType.h \
 isa.h \
 miscFuncs.h \
 type.h

# Library objects
LIBOBJS=$(LIBCCSRCS:.cc=.o) $(LIBCSRCS:.c=.o)

all:	makefile $(LIB) interpmain.o

$(LIB):	$(LIBOBJS)
	rm -f $(LIB)
	ar cq $(LIB) $(LIBOBJS)
	ranlib $(LIB)

# "make install" puts things in the official place
install:	makefile $(LIBDIR)/$(LIB) $(LIBDIR)/interpmain.o

$(LIBDIR)/$(LIB):	$(LIB)
		rm -f $(LIBDIR)/$(LIB)
		cp $(LIB) $(LIBDIR)
		ranlib $(LIBDIR)/$(LIB)

$(LIBDIR)/interpmain.o:	interpmain.o
		rm -f $(LIBDIR)/interpmain.o
		cp interpmain.o $(LIBDIR)

# "make clean" removes .o files and other cruft
clean:
		rm -f *.o core *~ *.bak *#

# "make sources" will do SCCS get on anything where SCCS file is newer.
sources:	$(SRCS) $(HDRS) make.template XDomain.ccP

depend:
		cd $(VPATH); \
		$(DEPEND) $(SRCS) | cat make.template - > makefile.n; \
		mv -f makefile.n makefile

makefile:	make.template
		cd $(VPATH); make -f make.template sources depend
		if [ ! -f makefile ]; then ln -s $(VPATH)/makefile makefile; fi
		@echo makefile remade -- you must rerun make.
		exit 1

# Need to define LIBDIR for the interpreter
Interpreter.o:	Interpreter.cc
		$(GNU) $(GPPFLAGS) -DHELPDIR=\"$(HELPDIR)\" -c $(VPATH)/Interpreter.cc

# Commands to make some sources from templates

FloatState.h FloatState.cc : ScalarState.hP ScalarState.ccP
	cd $(VPATH); genclass -2 Float val double val ScalarState;\
	sed 's/"Float"/"FLOAT"/' Float.double.ScalarState.h > FloatState.h;\
	sed 's/"Float"/"FLOAT"/;s/"double"/"float"/' Float.double.ScalarState.cc > FloatState.cc;\
	rm Float.double.ScalarState.h;\
	rm Float.double.ScalarState.cc

IntState.h IntState.cc : ScalarState.hP ScalarState.ccP
	cd $(VPATH); genclass -2 Int val int val ScalarState;\
	sed 's/"Int"/"INT"/' Int.int.ScalarState.h > IntState.h;\
	sed 's/"Int"/"INT"/' Int.int.ScalarState.cc > IntState.cc;\
	rm Int.int.ScalarState.h;\
	rm Int.int.ScalarState.cc


FloatArrayState.h FloatArrayState.cc : ArrayState.hP ArrayState.ccP
	cd $(VPATH); genclass -2 Float val double val ArrayState; \
	mv Float.double.ArrayState.h FloatArrayState.h; \
	sed 's/"FloatARRAY/"FLOATARRAY/' \
		Float.double.ArrayState.cc > FloatArrayState.cc; \
	rm Float.double.ArrayState.cc

IntArrayState.h IntArrayState.cc : ArrayState.hP ArrayState.ccP
	cd $(VPATH); genclass -2 Int val int val ArrayState; \
	mv Int.int.ArrayState.h IntArrayState.h; \
	sed 's/"IntARRAY/"INTARRAY/' Int.int.ArrayState.cc > IntArrayState.cc; \
	rm Int.int.ArrayState.cc

# Don't add anything after the next line; makedepend will zap it.
# DO NOT DELETE THIS LINE -- make depend depends on it.

