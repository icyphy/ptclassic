# Makefile for Ptolemy library and main module for interpreter
# Version identification:
# @(#)make.template	2.84	08/25/97
# Copyright (c) 1990-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
# Date of creation: 3/19/90
#
# If this file's name is "make.template" and there is no makefile in
# this directory, do
#	cp make.template makefile
#	make depend
# This will add the dependencies to the makefile.

# Root of Ptolemy directory
ROOT=../..
# Where we are
VPATH = ../../src/kernel
# get configuration info
CONFIG=$(ROOT)/mk/config-$(PTARCH).mk
include $(CONFIG)

# Library name
# Build a non-shared libptolemy.a for faster startup time
# It would be nice if we built both
#LIB=libptolemy.$(LIBSUFFIX)
LIBNONSHARED=	libptolemy.$(LIBNONSHAREDSUFFIX)

# No extra directories to include
INCL = $(PTCOMPAT_INCSPEC)

# Library sources.  CCS_WITH_H_FILES includes all .cc files with a
# corresponding .h file with the same root.

CCS_WITH_H_FILES=\
 AutoFork.cc \
 AutoForkNode.cc \
 Block.cc \
 Clock.cc \
 Cluster.cc \
 ComplexArrayState.cc \
 ComplexState.cc \
 ComplexSubset.cc \
 PortHole.cc \
 DFPortHole.cc \
 DataFlowStar.cc \
 DataStruct.cc \
 Display.cc \
 DoubleLink.cc \
 Domain.cc \
 DynDFPortHole.cc \
 DynDFStar.cc \
 DynamicGalaxy.cc \
 Error.cc \
 EventHorizon.cc \
 FileMessage.cc \
 FileParticle.cc \
 Fix.cc \
 FixArrayState.cc \
 FixState.cc \
 FlagArray.cc \
 FloatArrayState.cc \
 FloatState.cc \
 FloatVecData.cc \
 Fraction.cc \
 GalIter.cc \
 Galaxy.cc \
 Geodesic.cc \
 GraphUtils.cc \
 HashTable.cc \
 Histogram.cc \
 IntArrayState.cc \
 IntState.cc \
 IntVecData.cc \
 InterpGalaxy.cc \
 InterpUniverse.cc \
 IntervalList.cc \
 InvokeInterp.cc \
 KnownBlock.cc \
 KnownState.cc \
 KnownTarget.cc \
 Linker.cc \
 Matrix.cc \
 MatrixParticle.cc \
 Message.cc \
 NamedObj.cc \
 Particle.cc \
 ParticleQueue.cc \
 ParticleVector.cc \
 Plasma.cc \
 PrecisionState.cc \
 PriorityQueue.cc \
 ProfileTimer.cc \
 PtGate.cc \
 PtThread.cc \
 Scheduler.cc \
 Scope.cc \
 SimControl.cc \
 Star.cc \
 State.cc \
 StringArrayState.cc \
 StringList.cc \
 StringMessage.cc \
 StringParticle.cc \
 StringState.cc \
 SubMatrix.cc \
 Target.cc \
 TimeVal.cc \
 Tokenizer.cc \
 Universe.cc \
 Wormhole.cc \
 checkConnect.cc \
 logNew.cc \
 miscFuncs.cc \
 paths.cc \
 ptsignals.cc \
 pt_fstream.cc \
 textAnimate.cc

# The complete list of .cc files used in the library
SRCS=$(CCS_WITH_H_FILES) \
 expandPath.cc \
 subCharByString.cc \
 RanGen.cc \
 hashstring.cc

# Header files.  When adding a new header, add it here only if there is
# no corresponding .cc file; otherwise add the .cc file to CCS_WITH_H_FILES.

HDRS= $(CCS_WITH_H_FILES:.cc=.h) \
 Attribute.h \
 CircularBuffer.h \
 CompiledUniverse.h \
 ConstIters.h \
 InfString.h \
 Linker.sysdep.h \
 ParticleStack.h \
 PtCondition.h \
 SimAction.h \
 dataType.h \
 ieee.h \
 isa.h \
 type.h

# Library objects
OBJS=$(SRCS:.cc=.o)


all:	makefile $(LIBNONSHARED)

# "make install" puts things in the official place
install:	makefile $(LIBDIR)/$(LIBNONSHARED) $(FLUSH_CACHE)
ifdef FLUSH_CACHE
	# FLUSH_CACHE is defined for hppa
	rm -f $(LIBDIR)/$(FLUSH_CACHE)
	ln $(FLUSH_CACHE) $(LIBDIR)	
endif

EXTRA_SRCS=XDomain.ccP ArrayState.ccP ArrayState.hP ScalarState.ccP ScalarState.hP flush_cache.s

# Commands to make some sources from templates

FloatState.h:	ScalarState.hP
	cd $(VPATH); genclass -2 Float val double val ScalarState;\
	sed 's/"Float"/"FLOAT"/' Float.double.ScalarState.h > FloatState.h
	rm Float.double.ScalarState.*

FloatState.cc:	ScalarState.ccP
	cd $(VPATH); genclass -2 Float val double val ScalarState;\
	sed 's/"Float"/"FLOAT"/' Float.double.ScalarState.cc > FloatState.cc
	rm Float.double.ScalarState.*

IntState.h:	ScalarState.hP
	cd $(VPATH); genclass -2 Int val int val ScalarState;\
	sed 's/"Int"/"INT"/' Int.int.ScalarState.h > IntState.h
	rm Int.int.ScalarState.*

IntState.cc:	ScalarState.ccP
	cd $(VPATH); genclass -2 Int val int val ScalarState;\
	sed 's/"Int"/"INT"/' Int.int.ScalarState.cc > IntState.cc;\
	rm Int.int.ScalarState.*


FloatArrayState.h FloatArrayState.cc : ArrayState.hP ArrayState.ccP
	cd $(VPATH); genclass -2 Float val double val ArrayState; \
	mv Float.double.ArrayState.h FloatArrayState.h; \
	sed 's/"FloatARRAY/"FLOATARRAY/' \
		Float.double.ArrayState.cc > FloatArrayState.cc; \
	rm Float.double.ArrayState.cc

IntArrayState.h IntArrayState.cc : ArrayState.hP ArrayState.ccP
	cd $(VPATH); genclass -2 Int val int val ArrayState; \
	mv Int.int.ArrayState.h IntArrayState.h; \
	sed 's/"IntARRAY/"INTARRAY/' Int.int.ArrayState.cc > IntArrayState.cc; \
	rm Int.int.ArrayState.cc

# For dynamic linking on the hppa
ifdef FLUSH_CACHE
$(FLUSH_CACHE):
	$(HP_AS) $(VPATH)/`basename $(FLUSH_CACHE) .o`.s
endif
include $(ROOT)/mk/common.mk

# Don't add anything after the next line; makedepend will zap it.
# DO NOT DELETE THIS LINE -- make depend depends on it.
