# Test suite for knownlist commands.  Note that these can only be partially
# tested because the knownlists depend on the context.  These tests assume
# the SDF domain is present.
#
# @Author: Edward A. Lee
#
# @Version: @(#)testKnown.itcl	1.4   04/04/97
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source $TYCHO/kernel/test/testDefs.tcl
} {}

# Uncomment this to get a full report, or set in your Tcl shell window.
# set VERBOSE 1

# Set the following to avoid endless calls to exit.
set reallyExit 0

######################################################################
#### knownDomains
# The returned list depends on the executable we are running, so we
# just check that there is at least one domain, SDF.

test known-1 {check knownDomains} {
    namespace ::pitcl {
        if {[lsearch -exact [knownDomains] SDF] >= 0} {
            list OK
        } {
            list NOT_OK
        }
    }
} {OK}

######################################################################
#### knownBlocks
# The returned list depends on the executable we are running, so we
# just check that there is at least one star.

test known-2 {check knownBlocks} {
    namespace ::pitcl {
        addUniverse .x SDF
        if {[lsearch -exact [knownBlocks] Ramp] >= 0} {
            list OK
        } {
            list NOT_OK
        }
    }
} {OK}

######################################################################
#### knownUniverses
# The returned list depends on what we've done so far, so
# just check that at least the universe we created above is present.

test known-3 {check knownUniverses} {
    namespace ::pitcl {
        if {[lsearch -exact [knownUniverses] .x] >= 0} {
            list OK
        } {
            list NOT_OK
        }
    }
} {OK}

######################################################################
#### knownTargets
# The returned list depends on what's linked in, so
# just check that at least the default SDF target is present.

test known-4 {check knownTargets} {
    namespace ::pitcl {
        if {[lsearch -exact [knownTargets] default-SDF] >= 0} {
            list OK
        } {
            list NOT_OK
        }
    }
} {OK}


doneTests
