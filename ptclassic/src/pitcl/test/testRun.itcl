# Test suite for commands that run applications in pitcl.
#
# @Author: Edward A. Lee
#
# @Version: @(#)testRun.itcl	1.2   04/04/97
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source $TYCHO/kernel/test/testDefs.tcl
} {}

# Uncomment this to get a full report, or set in your Tcl shell window.
# set VERBOSE 1

# Set the following to avoid endless calls to exit.
set reallyExit 0

# FIXME: Check initializations out of order. e.g. begin, run, init.

######################################################################
#### setup
# Create a simple universe.

test run-0 {create a test universe} {
    namespace ::pitcl {
        addUniverse x SDF
        addBlock a WaveForm
        addBlock b Ramp
        addBlock c Add
        # FIXME: Make this a non-graphical test
        addBlock d XMgraph
        connect .x.a.output .x.c.input
        connect .x.b.output .x.c.input
        connect .x.c.output .x.d.input
    }
} {}

######################################################################
#### run

test run-1 {Check the run command} {
    ::pitcl::run .x 10
    ::pitcl::wrapup .x
} {}

######################################################################
#### getSchedule
# NOTE: This test is *extremely* sensitive to the exact format of the
# returned schedule.

test run-2 {Check the getSchedule command} {
    ::pitcl::getSchedule
} {{
  { scheduler "Simple SDF Scheduler" }
  { fire x.a }
  { fire x.b }
  { fire x.c }
  { fire x.d }
}
}

test run-3 {Check the getSchedule command on an uninitialized universe} {
    ::pitcl::addUniverse .y SDF
    catch {::pitcl::getSchedule .y} msg
    list $msg
} {{No schedule.  Run init to create a schedule}}

test run-4 {Check the getSchedule command on a star} {
    catch {::pitcl::getSchedule .x.a} msg
    list $msg
} {{getSchedule supported only for universes, and .x.a is not a universe.}}

######################################################################
#### incremental run

test run-5 {reset the universe, then list blocks} {
    namespace ::pitcl {
        reset .x
        blocks .x
    }
} {a b c d}

# NOTE: This test is *extremely* sensitive to the exact format of the
# returned schedule.
test run-6 {Check getSchedule after init} {
    catch {::pitcl::getSchedule} msg
    list $msg
} {{No schedule.  Run init to create a schedule}}

test run-7 {Check the init method} {
    ::pitcl::init .x
} {}

test run-8 {Check the begin method} {
    ::pitcl::begin .x
} {}

test run-9 {Check the cont method} {
    ::pitcl::cont .x 10
} {}

test run-10 {Check the wrapup method} {
    ::pitcl::wrapup .x
} {}

# FIXME: wormhole test.
test run-0 {create a test universe} {
    namespace ::pitcl {
        defWormhole ymw SDF DE {} {
            addBlock z BlackHole
            galaxyPort in z.input
        }
        defWormhole zmw SDF SDF {loop-SDF} {
            addBlock e Ramp
            galaxyPort out e.output
        }
        addUniverse y SDF
        addBlock y ymw
        addBlock b Const
        addBlock c Add
        addBlock z zmw
        connect .y.z.out .y.c.input
        connect .y.b.output .y.c.input
        connect .y.c.output .y.y.in
    }
} {}



doneTests
