dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run to configure the
dnl	Makefile in this directory.
AC_INIT(../src/common/tcl/lang/InternalRep.java)
# SCCS: @(#) configure.in 1.9 97/10/21 16:19:35


#--------------------------------------------------------------------
#	Locate which java tool to build.  If the --with-build option
#	is used, that overides everthing.  Otherwise look for TclBlend
#	first then tclBlend.
#--------------------------------------------------------------------

AC_ARG_WITH(build, [  --with-build=DIR       select which system to build],
	TCLJAVA=$withval, TCLJAVA=NONE)

if test $TCLJAVA != "NONE"; then
    if test $TCLJAVA != "jacl" && test $TCLJAVA != "tclblend"; then 
	AC_MSG_ERROR(Cannot build '${TCLJAVA}': use 'jacl' or 'tclblend')
    fi
fi

echo "$srcdir"
if test $TCLJAVA = "NONE"; then 
    if test -f $srcdir/../src/native/tcl/lang/Interp.java; then
	TCLJAVA=tclblend
    elif test -f $srcdir/../src/java/tcl/lang/Interp.java; then 
	TCLJAVA=jacl
    else
	AC_MSG_ERROR(Cannot find source files to build either Jacl or TclBlend)
    fi
fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where Java is;  if
#	not, check to see if the JAVA_HOME environment variable is set;
#       if it is not, look for javac on the path.
#--------------------------------------------------------------------

AC_ARG_WITH(java, [  --with-java=DIR           use Java binaries from DIR, defaults to the value of the JAVA_HOME environment variable],
    JAVA_DIR=$withval, JAVA_DIR=$JAVA_HOME)

if test ! -d "$JAVA_DIR"; then
    AC_MSG_WARN(['${JAVA_DIR}' is not a directory, so we search for the java compiler.])
    AC_PATH_PROG(JAVAC, javac)
    if test -x "$JAVAC"; then	
	JAVABIN=`dirname $JAVAC`
	JAVA_DIR=`dirname $JAVABIN`
    else
        AC_MSG_WARN([ Failed to find javac, perhaps Java is not installed?])
    fi

    # The default location that we look for the JDK.  This should probably
    # be a list that includes /usr/local/jdk and /opt/jdk
    DEFAULT_JDK=/opt/jkd1.1.4
    if test ! -d "$JAVA_DIR"; then
	AC_MSG_WARN(['${JAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])
	if test -d "$DEFAULT_JDK"; then
	    JAVA_DIR=`cd $DEFAULT_JDK; pwd`	
	else
			    AC_MSG_ERROR([
Java directory $DEFAULT_JDK doesn't exist.
Try --with-java=DIR, or set the JAVA_HOME environment variable.])
	fi	
    fi	
fi

#
# Check that we have the javac that corresponds with JAVA_DIR in our path
#
AC_MSG_CHECKING([for the java compiler in $JAVA_DIR/bin])
if test -f $JAVA_DIR/bin/javac; then
    AC_MSG_RESULT($JAVA_DIR/bin/javac)
    AC_MSG_CHECKING([that you have the right javac in your path.])
    AC_PATH_PROG(JAVAC, javac)
    if test "$JAVA_DIR/bin/javac" = "$JAVAC"; then
	AC_MSG_RESULT([  You have the right javac in your path, $JAVA_DIR/bin/javac == $JAVAC])
    else
	AC_MSG_WARN([$JAVA_DIR/bin/java is not the same as $JAVAC.
Be sure that you don't have a mismatch in JDK versions.])
    fi
else
    AC_MSG_ERROR([
  Cannot find $JAVA_DIR/bin/javac.
  Try --with-java=DIR, or set the JAVA_HOME environment variable.]) 
fi

#
# If we are compiling tclBlend, then we need to:
# 1. Check that we have native threads if we are under Solaris.
# 2. Find the platform dependent include files
# 3. Find the platform dependent libraries
#
if test $TCLJAVA = "tclblend"; then
    #
    # Check to see that we can find the right pieces
    #
    if test ! -f $JAVA_DIR/include/StubPreamble.h; then
	AC_MSG_ERROR([There's no StubPreamble.h in $JAVA_DIR/include.
Try --with-java=DIR, or set the JAVA_HOME environment variable.])
    fi

    #
    # Platform dependent checks go here
    #
    case "`uname -s" in
	HP-UX) ;;
	Linux) ;;
	SunOS) 
	    if test ! -d $JAVA_DIR/include/native_threads; then
		AC_MSG_ERROR(['${JAVA_DIR}/include/native_threads'
does not exist.
You must install the Solaris JDK Native Threads Pack to use tclBlend.
See http://www.javasoft.com/products/jdk/1.1/index.html.])
	    fi
	    ;;
	*);;
    esac

    #
    # Find the proper platform include directory
    #
    case "`uname -s" in
	HP-UX) TMP_JAVA_ARCH_INCLUDE=$JAVA_DIR/include/hp-ux;;
	Linux) TMP_JAVA_ARCH_INCLUDE=$JAVA_DIR/include/linux;;
	SunOS) TMP_JAVA_ARCH_INCLUDE=$JAVA_DIR/include/solaris;;
	    *)TMP_JAVA_ARCH_INCLUDE=$JAVA_DIR/include/idontknow;;
    esac
    #
    # User specified Java architecture, used to find the jdk include files
    #
    AC_ARG_WITH(javaarchinclude, [  --with-javaarchinclude=DIR        use Java arch dependent includes from DIR],
	JAVA_ARCH_INCLUDE=$withval, JAVA_ARCH_INCLUDE="$TMP_JAVA_ARCH_INCLUDE")
    if test ! -d $JAVA_ARCH_INCLUDE; then
	AC_MSG_ERROR(Java directory $JAVA_ARCH_INCLUDE doesn't exist)
    fi
    AC_MSG_CHECKING([for the java jni_md.h include file])
    if test -f $JAVA_ARCH_INCLUDE/jni_md.h; then
	AC_MSG_RESULT($JAVA_ARCH_INCLUDE/jni_md.h)
    else
	AC_MSG_ERROR([There's no jni_md.h in $JAVA_ARCH_INCLUDE/include;
use the --with-javaarchinclude= configure flag to specify the location
of the architecture dependent include files in the JDK.])
    fi

    case "`uname -s" in
	HP-UX) TMP_JAVA_ARCH_LIB=$JAVA_DIR/lib/PA_RISC/green_threads
	    JAVA_ARCH_LIB_CHK=libjava.sl
	    ;;
	Linux) TMP_JAVA_ARCH_LIB=$JAVA_DIR/lib/linux/green_threads
	    JAVA_ARCH_LIB_CHK=libjava.so
	    ;;
	SunOS) TMP_JAVA_ARCH_LIB=$JAVA_DIR/lib/sparc/native_threads
	    JAVA_ARCH_LIB_CHK=libjava.so
	    ;;
	*)TMP_JAVA_ARCH_LIB=$JAVA_DIR/lib/idontknow;;
    esac

    #
    # User specified Java architecture, used to find the jdk shared libs
    #
    AC_ARG_WITH(javaarchlib, [  --with-javaarchlib=DIR        use Java architecture dependent libraries from DIR],
	JAVA_ARCH_LIB=$withval, JAVA_ARCH_LIB="$TMP_JAVA_ARCH_LIB")
    if test ! -d $JAVA_ARCH_LIB; then
	AC_MSG_ERROR(Java directory $JAVA_ARCH_LIB doesn't exist)
    fi
    AC_MSG_CHECKING([for the java $JAVA_ARCH_LIB_CHK library file])
    if test -f $JAVA_ARCH_LIB/$JAVA_ARCH_LIB_CHK; then
	AC_MSG_RESULT($JAVA_ARCH_LIB/$JAVA_ARCH_LIB_CHK)
    else
	AC_MSG_ERROR([There's no $JAVA_ARCH_LIB_CHK in $JAVA_ARCH_LIB.
Use the --with-javaarchlib= configure flag to specify the location of the
architecture dependent library files in the JDK.])
    fi
fi
# End of tclBlend section

#--------------------------------------------------------------------
# 	TclJAVA Specific Substitutions
#--------------------------------------------------------------------
TCLJAVA_VERSION=1.0b1
TCLJAVA_MAJOR_VERSION=1
TCLJAVA_MINOR_VERSION=0b1

#--------------------------------------------------------------------
#	If the TCLJAVA variable equals tclblend then we need to
#	some variables from the tclConfig.sh
#--------------------------------------------------------------------

if test $TCLJAVA = "tclblend"; then

    #--------------------------------------------------------------------
    #	See if there was a command-line option for where Tcl is;  if
    #	not, assume that its top-level directory is a sibling of ours.
    #--------------------------------------------------------------------
    
    AC_ARG_WITH(tcl, [  --with-tcl=DIR          use Tcl 8.0 binaries from DIR],
    	TCL_BIN_DIR=$withval, TCL_BIN_DIR=`cd $srcdir/../../tcl8.0/unix; pwd`)
    if test ! -d $TCL_BIN_DIR; then
        AC_MSG_ERROR(Tcl directory $TCL_BIN_DIR doesn't exist)
    fi
    TCL_SRC_DIR=`cd $TCL_BIN_DIR; make topDirName`


    #--------------------------------------------------------------------
    #	Read in configuration information generated by Tcl for shared
    #	libraries, and arrange for it to be substituted into our
    #	Makefile.
    #--------------------------------------------------------------------

    file=$TCL_BIN_DIR/tclConfig.sh
    . $file
    CC=$TCL_CC
    SHLIB_CFLAGS=$TCL_SHLIB_CFLAGS
    SHLIB_LD=$TCL_SHLIB_LD
    SHLIB_LD_LIBS=$TCL_SHLIB_LD_LIBS
    SHLIB_SUFFIX=$TCL_SHLIB_SUFFIX
    SHLIB_VERSION=$TCL_SHLIB_VERSION
    TCL_LIBS=$TCL_LIBS
    TCL_VERSION=$TCL_VERSION


    AC_SUBST(CC)
    AC_SUBST(SHLIB_CFLAGS)
    AC_SUBST(SHLIB_LD)
    AC_SUBST(SHLIB_LD_LIBS)
    AC_SUBST(SHLIB_SUFFIX)
    AC_SUBST(SHLIB_VERSION)
    AC_SUBST(TCL_BUILD_LIB_SPEC)
    AC_SUBST(TCL_LIBS)
    AC_SUBST(TCL_VERSION)
    AC_SUBST(TCL_SRC_DIR)
    AC_SUBST(TCL_BIN_DIR)
    AC_SUBST(JAVA_ARCH_INCLUDE)
    AC_SUBST(JAVA_ARCH_LIB)
    AC_SUBST(TCL_LD_SEARCH_FLAGS)
fi

AC_SUBST(JAVA_DIR)
AC_SUBST(TCLJAVA_VERSION)
AC_SUBST(TCLJAVA_MAJOR_VERSION)
AC_SUBST(TCLJAVA_MINOR_VERSION)
AC_SUBST(TCLJAVA)
AC_OUTPUT(Makefile)
