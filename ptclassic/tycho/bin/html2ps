# Convert html files to postscript by using netscape
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#####################################################################
#### html2ps
# Use netscape to convert html to PostScript
# Typical Usage: 
# <tcl><pre>
# html2ps [glob $TYCHO/doc/*html]
# </pre></tcl>
#
proc html2ps {filelist} {
    foreach file $filelist {
	# If the file starts with 'http', then just open it
	# If the file starts with a slash '/', then prepend file://
	# If the file starts with anything else, then prepend file:///$PWD/
	switch -regexp -- $file \
		^http {set urlfile $file} \
		^/ {set urlfile "file://$file"} \
		default {set urlfile "file://[pwd]/$file"}
	
	# File to save as.  If we don't specify a absolute path,
        # then the ps file will end up in either the the directory where
        # netscape started, or the home directory
        switch -regexp -- $file \
                ^http {set printfile "[file tail $file].ps"} \
                ^/ {set printfile "$file.ps"} \
		default {set printfile "[pwd]/$file.ps"}

        #puts "$urlfile $printfile"
	exec netscape -remote "openURL($urlfile)"
	exec netscape -remote "saveas($printfile,PostScript)"
    }
}

#####################################################################
#### htmlLinks
# Given a html file, return a list of the links
#
proc htmlLinks {htmlfile {depth 0}} { 
    global filesSeen
    
    if {$depth > 100} {
        error "htmlLinks reached a maximum depth of $depth\n\
                filesSeen was: $filesSeen"
    }

    set taglist {}
    # Read in the index file, generate list of links
    set fd [open $htmlfile r]
    while {![eof $fd]} {
        set line [gets $fd]
        # FIXME: this could be fooled if the <A is not on the same line
        # as the HREF.
        if [regexp {<[Aa] [Hh][Rr][Ee][Ff]="([^\"]*)"} $line dummy tag ] {
            switch -regexp -- $tag \
                    {^/} {lappend taglist [::tycho::expandPath $tag]} \
                    {^..} {lappend taglist [::tycho::expandPath [file dirname $htmlfile]/$tag]} \
                    default {lappend taglist [::tycho::expandPath $tag]}
        }
    }
    close $fd
    #puts "$htmlfile: $taglist"
    foreach tag $taglist {
        # Only search tags that we have not seen, are .html files
        # and are not codeDoc files
        if { [lsearch $filesSeen $tag] == -1 && \
                [file extension $tag] == ".html" && \
                [file readable $tag] && \
                ![regexp {/codeDoc/} $tag] \
            } {
            #puts "About to call htmlLinks $tag"
            lappend filesSeen $tag
            incr depth
            htmlLinks $tag $depth
            incr depth -1
        }
    }
    return $taglist
}

#####################################################################
#### htmlDir2ps
# This command is useful for generating postscript from an html index file.
# Given a .html index file, produce a postscript file that contains
# postscript of all of the html files that the index file has links to.
#
# Typical Usage: 
# <tcl><pre>
# htmlDir2ps $TYCHO/doc/index.html index.ps
# </pre></tcl>
#
proc htmlDir2ps {indexfile psfile} {
    global filesSeen
    set filesSeen {}

    if {[info command psConcat] == ""} {
        global TYCHO
        source $TYCHO/doc/lib/psConcat.tcl
    }

    puts "About to traverse all local files linked from $indexfile"
    flush stdout
    update

    cd [file dirname $indexfile]
    htmlLinks $indexfile

    set filesSeen [linsert $filesSeen 0 $indexfile]
    puts "  Done([llength $filesSeen] files seen)"
    flush stdout
    update

    set pslist {}
    foreach tag $filesSeen {
        lappend pslist "$tag.ps"
    }

    puts "About to remove old PostScript"
    flush stdout
    update

    eval ::tycho::rm -f $pslist


    html2ps $filesSeen
    
    puts "About to generate postscript"
    flush stdout
    update

    psConcat $psfile $pslist
}

htmlDir2ps $TYCHO/doc/index.html $TYCHO/doc/tycho.ps
