#! /bin/csh -f
# tycho - Ptolemy Tycho Brahe Graphical Interface
#
# Authors: Edward Lee, Christopher Hylands
# Version: $Id$
#
# Copyright (c) 1994-%Q% The Regents of the University of California.
# All rights reserved.
# See the file $TYCHO/copyright for copyright notice,
# limitation of liability, and disclaimer of warranty provisions.

# This script starts up tycho.  Most of the confusion occurs because 
# tycho can be shipped as part of Ptolemy, or standalone

# If you add to this script, make sure that you don't make it dependent
# on Ptolemy.


set usagestring = "Usage: $0 [-debug] [-ptiny|-ptrim|-pigi|-bin tychobin] [-nowelcome] [-noconsole] [-bak] [file...]"

set argError = "Usage: $0 -ptiny, -ptrim, -pigi and -bin xxx are mutually exclusive"

if ( ! $?DISPLAY ) then
	echo "${0}: Your DISPLAY environment variable must be set"
	exit 1
endif

while ($#argv)
	switch ($argv[1])
		case -help:
			echo "$usagestring"
			echo " -debug         Bring up in debug mode"
			echo " -ptiny         Smaller version, fewer domains"
			echo " -ptrim         Small version, more domains"
			echo " -pigi         Big version, many domains"
			echo " -bin tychobin  Run the binary 'tychobin'"
			echo " -bak           Run a .bak binary"
			echo " -nowelcome     No welcome window"
			echo " -noconsole     No console window"
			echo " -bak           Run a .bak binary"
			echo " files...       Files to open"
			exit 0
		case -debug:
			set tychodebug
			breaksw
		case -ptiny:
			if ( $?selectPtolemy ) then
				echo $argError
				exit 2
			endif
			set selectPtolemy
			set tychoptiny
			breaksw
		case -ptrim:
			if ( $?selectPtolemy ) then
				echo $argError
				exit 2
			endif
			set selectPtolemy
			set tychoptrim
			breaksw
		case -pigi:
			if ( $?selectPtolemy ) then
				echo $argError
				exit 2
			endif
			set selectPtolemy
			set tychopigi
			breaksw
		case -bin:
			if ( $?selectPtolemy ) then
				echo $argError
				exit 2
			endif
			set selectPtolemy
			set prog = $argv[2]
			shift
			breaksw
		case -bak:
			set tychobak
			breaksw
		case -nowelcome:
			set nowelcome
			breaksw
		case -noconsole:
			set noconsole
			breaksw
		case -*:
			echo Bad option: $argv[1]
			echo "$usagestring"
			exit 1
			breaksw
		case *:
			if (! $?filename) then
			    set filename=$1
			else
			    set filename="$filename $1"
			endif
			breaksw
	endsw
	shift
end

if ( ! $?TYCHO ) then
	if ( $?PTOLEMY ) then
		setenv TYCHO $PTOLEMY/tycho
	else
		setenv TYCHO ~ptolemy/tycho
	endif
endif

if ( ! -d $TYCHO) then
	echo "The directory $TYCHO does not exist!  Cannot find Tycho."
	exit 2
endif

if ( ! $?selectPtolemy) then
	# We did not select Ptolemy, so we just assume that itkwish
	# is in the users path.  Bad idea?  One alternative would be
	# to see if $PTOLEMY is set and then check for 
	# $PTOLEMY/bin.$PTARCH/itkwish
	if ( $?tychodebug ) then
		set prog = (itkwish.purify -f $TYCHO/kernel/Tycho.tcl)
	else
		set prog = (itkwish -f $TYCHO/kernel/Tycho.tcl)
	endif
else
	# We selected Ptolemy

	if ( ! $?PTOLEMY ) setenv PTOLEMY ~ptolemy

	if ( ! -r $PTOLEMY/bin/ptsetup.csh ) then
		echo "Can't find $PTOLEMY/bin/ptsetup.csh"
		echo "Are you sure Ptolemy is installed?"
		exit 2
	endif

	# Set the commonly used environment variables
	source $PTOLEMY/bin/ptsetup.csh

	# We need to set these if we are running a prebuilt Ptolemy
	# binary that could be located anywhere.
	# However, itkwish need not have these set
	# FIXME: Hardwired in tk4.0
	#	   $PTOLEMY/tycho/kernel/Lib.tcl
	setenv TCL_LIBRARY $PTOLEMY/tcltk/tcl/lib/tcl
	setenv TK_LIBRARY $PTOLEMY/tcltk/tk/lib/tk

	# To get tcl/tk man pages before corresponding unix man pages,
	# and to guess about a reasonable manpath if none is set.
	if (! $?MANPATH ) then
	    setenv MANPATH $PTOLEMY/tcltk/tk/man:$PTOLEMY/tcltk/tcl/man:$PTOLEMY/doc/man:/usr/local/man:/usr/man
	else
	    setenv MANPATH $PTOLEMY/tcltk/tk/man:$PTOLEMY/tcltk/tcl/man:$PTOLEMY/doc/man:$MANPATH
	endif

	# For now, look for the executable in obj.$PTARCH, rather than bin.$ARCH
	set bindir = $PTOLEMY/obj.$PTARCH

	if ( ! $?prog ) then
		if ( "$progname" == "tysh.ptiny" || $?tychoptiny ) then
		    set prog = $PTOLEMY/obj.$PTARCH/tycho/tysh/tysh.ptiny
		else
			if ( "$progname" == "tysh.ptrim" || $?tychoptrim ) then
			    set prog = $PTOLEMY/obj.$PTARCH/tycho/tysh/tysh.ptrim
			else 
				if ( "$progname" == "tysh.pigi" || $?tychopigi ) then
				    set prog = $PTOLEMY/obj.$PTARCH/tycho/tysh/tysh
				else
				    set tychoedit
				    set prog = ($PTOLEMY/tcltk/itcl.$PTARCH/bin/itkwish -f $TYCHO/kernel/Tycho.tcl)
				endif
			endif
		endif
		if ( ! $?tychoedit && $?tychodebug ) then
		    # There is no debug version of itkwish yet.
		    set prog = $prog.debug
		endif
		if ( $?tychobak ) then
			if ( -d ${PTOLEMY}/lib.${PTARCH}.bak ) then
				if ( $?S_LD_LIB_PATH ) then
					# S_LD_LIB_PATH is set by ptsetup.csh
					# if this script was called and
					# and LD_LIBRARY_PATH was not set.
					# If this was the case, then we
					# setup user to use the backup
					# libraries, if they exist.
					setenv LD_LIBRARY_PATH ${PTOLEMY}/lib.${PTARCH}.bak:/usr/lib:${PTX11DIR}/lib
				else
					# The user set LD_LIBRARY_PATH, so we
					# stick lib.$PTARCH.bak in front
					# anyway, just to be sure that we get
					# good libraries.
					# This might be a mistake, since if
					# LD_LIBRARY_PATH is set, we should
					# assume the user knows what they
					# want to do
					setenv LD_LIBRARY_PATH ${PTOLEMY}/lib.${PTARCH}.bak:${LD_LIBRARY_PATH}
				endif
			else
				echo "Warning: Can't find ${PTOLEMY}/lib.${PTARCH}.bak"
			endif
		    set prog = $prog.bak
		endif
	endif
endif # !?selectPtolemy

if ( "$1" =~ "-*" ) then
    echo "${0}: Bad option: $1"
    exit 1
endif

# Add in options that are passed directly to Tycho.
if ( $?nowelcome ) set prog = ($prog -nowelcome)
if ( $?noconsole ) set prog = ($prog -noconsole)

# If neither tyedit or selectPtolemy are set then we are just running itkwish
if (! -x $prog[1] && ($?tyedit || $?selectPtolemy)) then
	echo "Program does not exist: $prog"
else
    if (! $?filename) then
	$prog
    else
	$prog $filename
    endif
endif
