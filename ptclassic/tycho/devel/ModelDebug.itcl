# A shell for accessing and monitoring a model object.
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#
#######################################################################
#### ModelDebug
# The <i>ModelDebug</i> class subclasses the <i>TclShell</i> class
# to provide a shell for accessing and watching the internals
# of any subclass of Model.
#
# Currently the facilities are very primitive -- later on I want this
# class to be much more intelligent about the access it provides to
# a model.
#
class ::tycho::ModelDebug {
    inherit ::tycho::TclShell

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                             options                              ####

    # The model I'm debugging
    itk_option define -model model Model ""

    ##########################################################################
    ####                         public methods                           ####

    # Tell me about a change
    method notify {subscriber command index args}

    ##########################################################################
    ####                         protected methods                        ####

    # Evaluate a command in the model's context. Return the result.
    protected method evalCommand {com}

    ##########################################################################
    ####                         protected variables                      ####


    ##########################################################################
    ####                         private variables                        ####

    # The model I'm debugging.
    private variable theLastModel ""

    # Partially entered command.
    private variable partialCommand ""
}


###################################################################
#### -model configuration
#
configbody ::tycho::ModelDebug::model {
    if { $theLastModel != "" } {
	$theLastModel unsubscribe $this
    }
    set theLastModel $itk_option(-model)
    if { $itk_option(-model) != "" } {
	$itk_option(-model) subscribe $this all "$this notify %0 %1 %2 %3"
    }
    displayer configure -title "Debug: [$itk_option(-model) cget -modelname]"
}

###################################################################
#
body ::tycho::ModelDebug::constructor {args} {
    # Change the color of the answer text to distinguish from
    # other consoles
    configure -answerforeground orangered3

    # Eval args
    eval itk_initialize $args
}

#########################################################################
#########################################################################
####                       public methods                            ####

#########################################################################
#### notify
# Notify a change from the model. This just prints to the console.
#
body ::tycho::ModelDebug::notify {subscriber command index moreargs} {
    displayResult [concat [list $subscriber $command $index] $moreargs]
}

#########################################################################
#########################################################################
####                       protected methods                         ####

#########################################################################
#### evalCommand
# Evaluate a command in the model's context and return the result.
# This enables command that are typed in the console to be
# executed "inside" the model.
#
body ::tycho::ModelDebug::evalCommand {com} {
    # To be sure a prompt gets printed even if an error occurs,
    # catch errors here. To get this right, we have to perform some
    # hoop-jumping bogosity with scoping.
    set model $itk_option(-model)
    set class [$model info class]
    if {[catch {@scope $class \
	    [list eval $model $class::evalInSpecificContext $com]} retval] \
	    != 0} {
	tkerror $retval
    }
    return $retval
}
