##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### MultiGraph
#
# The _MultiGraph_ model is a directed graph in which each edge is named.
# Edges are thus uniquely determined by the start and end vertices
# _and_ the name given to the edge. This makes MultiGraph suitable
# for applications where there can be multiple edges between
# vertices, such as finite-state-machine. In comparison, in the
# superclass, <a href="Digraph.html">Digraph</a>, an edge is
# uniquely determined by the vertices it connects.
#
# Here are some examples of its use; see <a 
# href="AbstractGraph">AbstractGraph</a> for examples of
# the basics of graph construction. First, create a graph
# that contains two vertices, with edges labelled A or B:
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::MultiGraph [::tycho::autoName graph]]
#     $graph configureLink edge -label {}
#     $graph read string {
#         vertex a
#         vertex b
#         vertex c
#         edge A a b -label x/y
#         edge B a b -label u/v
#         edge A b a -label x/y
#     }
# </tcl></pre>
#
# Display a TIM representation of the graph
# <pre><tcl>
#     $graph describe
# </tcl></pre>
#
# Find edges between a and b:
# <pre><tcl>
#     $graph edges * a b
# </tcl></pre>
#
# Change the label of an edge and query it again:
# <pre><tcl>
#     $graph edgeconfigure A a b -label p/q
#     $graph edgecget A a b -label
# </tcl></pre>
#
# Delete that edge, recording the deletion:
# <pre><tcl quiet>
#     $graph record edgedelete A a b
#     $graph describe
# </tcl></pre>
#
# Undo the deletion:
# <pre><tcl quiet>
#     $graph undo
#     $graph describe
# </tcl></pre>
#
#
class ::tycho::MultiGraph {
    inherit ::tycho::Digraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Add an edge and attributes to the graph
    method edge {name vertex1 vertex2 args}

    # Return all attributes of an edge
    method edgeattrs {name vertex1 vertex2}

    # Get an attribute or attributes of an edge
    method edgecget {name vertex1 vertex2 attribute}

    # Configure the edge with one or more attributes
    method edgeconfigure {name vertex1 vertex2 args}

    # Remove an edge from the graph
    method edgedelete {name vertex1 vertex2}

    # Return edges matching a pair of connection patterns
    method edges {{name *} {pattern1 *} {pattern2 *}}
}

########################################################################
#### constructor
#
body ::tycho::MultiGraph::constructor {args} {
	# Give the edge entity a label
	configureEntity edge -named 1

    # Evaluate options
    eval configure $args
}

########################################################################
#### edge
#
# Add a new edge to the graph, and return the inverse command.
# By default, this method just adds a link between the
# two named edges.  Flag an error if the edge
# already exists, but not if any of the connected vertices do not exist. 
#
body ::tycho::MultiGraph::edge {name vertex1 vertex2 args} {
	_verifynot edge [list $name $vertex1 $vertex2]

	# Record the edge
	set inverse [_link edge [list $name $vertex1 $vertex2] $args]

	# Add links to the adjacency matrix
    _adjacencyadd $vertex1 $vertex2
    
    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}

########################################################################
#### edgeattrs
#
# Return a list containing the attributes of the edge as a flat
# attribute-value list. An error will result if the edge does
# not exist.
#
body ::tycho::MultiGraph::edgeattrs {vertex1 vertex2} {
	_verify edge [list $name $vertex1 $vertex2]
    _attributes edge [list $name $vertex1 $vertex2]
}

########################################################################
#### edgecget
#
# Get an attribute of an edge. An error will occur if the edge does not
# exist or the attribute does not exist.
#
body ::tycho::MultiGraph::edgecget {vertex1 vertex2 attribute} {
	_verify edge [list $name $vertex1 $vertex2]
    _cget edge [list $name $vertex1 $vertex2] $attribute
}

########################################################################
#### edgeconfigure
#
# Configure the edge and return the inverse command. An error will
# occur if the edge does not exist. The argument list
# is a flat list of attribute-value pairs.
#
body ::tycho::MultiGraph::edgeconfigure {vertex1 vertex2 args} {
	_verify edge [list $name $vertex1 $vertex2]
    _configure edge [list $name $vertex1 $vertex2] $args
}

########################################################################
#### edgedelete
#
# Remove an edge from the graph, and return the inverse command. This
# default method works for simple directed graphs.
#
body ::tycho::MultiGraph::deleteedge {vertex1 vertex2} {
	_verify edge [list $name $vertex1 $vertex2]

	# Delete it from the adjacency list
	_adjacencydelete $vertex1 $vertex2

    # Clear any cached structural information
    catch {unset _cache}

	# Delete the data and return the inverse command
	_delete edge [list $name $vertex1 $vertex2]
}

########################################################################
#### edges
#
# Return a list containing the edges of the graph with source and target
# vertex names that match the given patterns. The result is a flat list
# of source-target pairs. If no arguments are supplied, return all edges.
# To test for the presence of a single edge, provide its source and 
# target vertices as the arguments and compare the result with the empty
# list.
#
body ::tycho::MultiGraph::edges {{name *} {pattern1 *} {pattern2 *}} {
    set result {}
    foreach quad [array names _info \
    		[list edge * * [list $name $pattern1 $pattern2]]] {
		eval lappend result [lindex $quad 3]
    }
    return $result
}
