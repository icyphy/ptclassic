##########################################################################
# Version: $Id$
# Author: John Reekie, Christopher Hylands
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### PackageData
#
# The <i>PackageData</i> class contains information on the packages
# currently installed in Tycho. It is the key data structure created
# and manipulated by the <i>PackageInstaller</i> and related
# classes. There is generally only one instance of this class
# in a Tycho installation.
#
# Note that this model is generated automatically and is _not_
# user-editable. Each package provides a configuration file
# that _is_ user-editable, from which the _PackageData_ model
# is generated.
#
# Installation of packages relies on the concept of _features_.
# A feature is an application-wide facility of resource that
# individual packages may need or choose to rely on. A package
# can declare that it includes support for certain features,
# and dependencies between packages can be qualified by the
# feature that the dependency represents. The list of features
# is quite small, and is fixed -- that is, individual packages
# cannot choose to add new features in an _ad-hoc_ manner.
# The list of features is:
#
# <dl>
# <dt><b>gui</b>
# <dd>
# Tycho has access to a user interface.
#
# <dt><b>network</b>
# <dd>
# Tycho has access to the network.
#
# <dt><b>java</b>
# <dd>
# Java is running in the same process as Tycho.
#
# <dt><b>safe</b>
# <dd>
# Tycho is running in a safe interpreter... - ?
#
# <dt><b>always</b>
# <dd>
# This is a psuedo-feature, used to mark mandatory package
# dependencies.
#
# <dt><b>optional</b>
# <dd>
# This is a psuedo-feature, used to mark optional package
# dependencies.
#
# </dl>
#
# The <i>PackageData</i> model has the following types:

# <dl>
# <dt><b>package</b> _name_
# <dd>
# A package. Each installed package is represented by a package item.
# The package name must have no spaces, and must include the full
# namespace path of the package (usually <code>::tycho:</code>).
# Packages have the following attributes:
#
#   <dl>
#   <dt><b>-description</b> _string_
#   <dd>
#   An HTML description of the package. This is displayed in the
#   help viewer.
#
#   <dt><b>-directory</b> _path_
#   <dd>
#   The directory in which the package is installed. If an absolute
#   path, the package is installed in that directory; if a relative
#   path, the package is installed in the directory relative to
#   the Tycho root. The path cannot be a network (URL-style) path.
#
#   <dt><b>-installed</b> _boolean_
#   <dd>
#   A flag indicating whether or not a particular package has been
#   installed. The default is false.
#
#   <dt><b>-label</b> _string_
#   <dd>
#   A label used to display this package in the package installer.
#
#   <dt><b>-requires</b> <b>{</b> ?_feature_? ?_feature_? ... <b>}</b>
#   <dd>
#   A list of features required by this package.
#
#   <dt><b>-quality</b> _quality-level
#   <dd>
#   The quality level of the package. This is used to control package
#   inclusion: a package will not be included if its quality level
#   is not at least as high as the level specified to the
#   traversal routine.
#
#   <dt><b>-version</b> _major.minor_
#   <dd>
#   The installed version of the package. Meaningless if the package
#   has not been installed.
#
#   </dl>
#
# <dt><b>dependency</b> _name_
# <dd>
# A dependency between two packages. The dependency expresses
# the fact that a package (the source package) uses, or might use,
# facilities implemented in another package (the target package).
# There can be multiple dependencies between packages -- for example,
# this is useful in implementing version control. The _name_ is
# arbitrary -- its only requirement is that it be unique. Dependencies
# have the following attributes:
#
#   <dl>
#   <dt><b>-enabled</b> _boolean_
#   <dd>
#   A flag saying whether this dependency is enabled. The default is
#   true. If false, the dependency will not be followed.
#
#   <dt><b>-from</b> _package_
#   <dd>
#   The source package.  This attribute must be supplied.
#
#   <dt><b>-fromversion</b> _major.minor_
#   <dd>
#   The version of the source package that this dependency represents.
#   If there are multiple dependencies between packages, then
#   this particular dependency applies to version numbers between
#   the given version and the next later one. The default is 0.0.
#
#   <dt><b>-propagate</b> _feature_
#   <dd>
#   The feature that this dependency represents. The <b>always</b>
#   feature means that the source package always depends on the
#   target package. The <b>optional</b> feature indicates that the
#   source package may use facilities in the target package,
#   provided that the target package is installed manually. Any other
#   feature indicates that the source package depends on the target
#   package only if that feature of the source package has been
#   requested by the installer, or by a request propagated from
#   an upstream package. The default is <b>always</b>.
#
#   <dt><b>-to</b> _package_
#   <dd>
#   The target package. This attribute must be supplied.
#
#   <dt><b>-toversion</b> _major.minor_
#   <dd>
#   The version of the target package that this dependency represents.
#   If there are multiple dependencies between packages, then
#   this particular dependency applies to version numbers between
#   the given version and the next earlier one. A value of ""
#   means "any version." The default is "".
#
#   </dl>
#
# </dl>
#
# Here is an example of querying a package database. Normally, the
# package data is generated from Tycho package index files, but for
# the sake of an example we will create an artificial dataset:
# <pre><tcl>
#     catch {delete object packages}
#     set packages [::tycho::PackageData [::tycho::autoName packages]]
#     $packages parse {
#        package ::tycho::Foo \
#            -label {The Foo package} \
#            -version 1.0 \
#            -requires {gui network}
#
#        package ::tycho::Bar \
#            -label {The Bar package} \
#            -version 2.0 \
#            -requires {gui}
#
#        package ::tycho::Baz \
#            -label {The Bar package} \
#            -version 2.0
#
#        dependency FooBar-1 \
#            -from ::tycho::Foo \
#            -to ::tycho::Bar
#
#        dependency FooBaz-1 \
#            -from ::tycho::Foo \
#            -to ::tycho::Baz \
#            -feature gui
#     }
#     $packages describe
# </tcl></pre>
#
# Get the known packages:
# <tcl><pre>
#     $packages packages
# </pre></tcl>
#
# Get the packages that need to be installed if the 1.0 "Foo" package
# is installed with the "gui" feature.
# <tcl><pre>
#     $packages dependson ::tycho::Foo -version 1.0 -propagate gui
# </pre></tcl>
#
class ::tycho::PackageData {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####


    # Add a dependency
    method dependency {from to args}

    # Find a dependency, matching on version numbers
    method dependencyid {from fromversion to toversion}

    # Get an attribute or attributes of an dependency
    method depcget {id {attribute {}}}

    # Configure a dependency
    method depconfigure {id args}

    # Remove a dependency from the graph
    method depdelete {id}

    # Get a list of known dependencies, matching on version numbers
    method dependencies {{sourceversion *} {targetversion *}}

    # Find all packages that the listed packages depend on
    method dependson {package args}

    # Add a package
    method package {name args}

     # Get an attribute or attributes of a package
    method pkgcget {name {attribute {}}}

    # Configure the package with one or more attributes
    method pkgconfigure {name args}

    # Remove a package
    method pkgdelete {name}

    # Get a list of known packages
    method packages {}
}

########################################################################
#### constructor
#
body ::tycho::PackageData::constructor {args} {
    # Evaluate options
    eval configure $args

    # Define the package type
    type define package \
	    -leafonly 1 \
	    -description "" \
	    -directory {$TYCHO} \
	    -installed 0 \
	    -label "" \
            -quality 0 \
	    -version 0.0

    # Define the dependency type
    type define dependency \
	    -leafonly 1 \
	    -enabled 1 \
	    -from "" \
	    -fromversion 0.0 \
	    -propagate always \
	    -to "" \
	    -toversion 0.0
}
