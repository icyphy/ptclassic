# The class representing files on a local file system
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceWELD
#
# The ResourceWELD class provides a resource interface to the 
# <a href="http://www-cad.eecs.berkeley.edu/Respep/Research/weld/index.html">
# WELD (Web-based Electronic Design)</a> server. Currently, it
# only supports the streamable resource interface, saving and
# loading files as string objects on the server.
#
class ::tycho::ResourceWELD {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Close the resource
    method close {}

    # Return the content type of the resource
    method contenttype {}

    # Return the end of file status
    method eof {}

    # Flush buffered output to a streamable resource 
    method flush {}

    # Read a string from a streamable resource 
    method gets {{varName {}}}

    # Test if the file is currently open
    method isopen {}

    # Open the resource
    method open {{mode "r"}}

    # Write a string to a streamable resource 
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return 1 if this resource is streamable
    method streamable {}

    # Write a string to a streamable resource
    method write {data}

    ###################################################################
    ####                           public procs                    ####

    # Change the permissions of a resource
    proc chmod {path permissions}

    # Delete a resource
    proc delete {path}

    # Return a directory listing
    proc dirlist {path}

    # Test if a given resource exists
    proc exists {path}

    # Create a new directory
    proc mkdir {path}

    # Create a new resource object
    proc new {path}

    # Query properties of a file
    proc query {path option}

    # Source the file as Tcl
    proc source {path}

    # Get the status of a resource
    proc stat {path varName}

    # Return the type of a given file
    proc type {path}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected variables                ####

    ###################################################################
    ####                          private variables                ####
    
    # The Java object representing the WELD server directory
    private common javaDirectory ""

    # The Java object representing an object on the WELD server
    private variable javaFile ""

    # True if the file is open
    private variable fileIsOpen 0

    ###################################################################
    ####                        class initialization               ####

    # Create the Weld Java directory object
    set javaDirectory \
	    [uplevel #0 \
	    ::java::new weld.persistent.TclWeldDirectory \
	    [::tycho::autoName weldDir]]
}


#######################################################################
#### constructor
#
body ::tycho::ResourceWELD::constructor {args} {
    eval configure $args

    # Create the Weld file object
    set javaFile \
	    [uplevel #0 \
	    ::java::new weld.persistent.TclWeldFile \
	    [::tycho::autoName weldFile]]
    ::puts "$javaDirectory $javaFile"
}

#######################################################################
#### destructor
#
body ::tycho::ResourceWELD::destructor {} {
    if [isopen] {
	close
    }
    # FIXME: ::java::delete is not implemented yet
    # ::java::delete $javaFile
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::ResourceWELD::close {} {
    if { $fileid != "" } {
	::close $fileid
    }
    set fileIsOpen 0
}

#####################################################################
#### contenttype
# Return the content type of the open file.
body ::tycho::ResourceWELD::contenttype {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    # For now, just return "text/plain". Later on, look at the
    # file extension and/or contents.
    return "text/plain"
}

#####################################################################
#### flush
body ::tycho::ResourceWELD::flush {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::flush $fileid
}

#####################################################################
#### eof
body ::tycho::ResourceWELD::eof {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    $javaFile eof
}

#####################################################################
#### gets
body ::tycho::ResourceWELD::gets {{varName {}}} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    if { $varName == "" } {
	$javaFile gets
    } else {
	upvar $varName v
	set v [$javaFile gets]
	llength $v
    }
}

#####################################################################
#### open
body ::tycho::ResourceWELD::open {{mode "r"}} {
    set wrl [path]
    if { ! [exists $wrl] } {
	error "File $wrl does not exist"
    }

    set fileIsOpen 1
    $javaFile open $mode
}

#####################################################################
#### isopen
body ::tycho::ResourceWELD::isopen {} {
    return $fileIsOpen
}

#####################################################################
#### puts
body ::tycho::ResourceWELD::puts {string} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    $javaFile puts $string
}

#####################################################################
#### read
body ::tycho::ResourceWELD::read {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    $javaFile read
}

#####################################################################
#### streamable
body ::tycho::ResourceWELD::streamable {} {
    return 1
}

#####################################################################
#### write
body ::tycho::ResourceWELD::write {data} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    $javaFile write $data
}


#########################################################################
#########################################################################
####                          public procedures                      ####

#####################################################################
#### chmod
body ::tycho::ResourceWELD::chmod {path permissions} {
    error "Not implemented"
}

#####################################################################
#### delete
body ::tycho::ResourceWELD::delete {path} {
    error "Not implemented"
}

#####################################################################
#### dirlist
# Get a "listing" of files in a "directory." This parses
# the received index text to extract names from it. The
# list is sorted, with directory names ending in "/",
# in a similar fashion to ls -F.
#
body ::tycho::ResourceWELD::dirlist {path} {
    # If a non-existent directory, return nothing
    if { ! [exists $path] } {
	return {}
    }
    # If for some reason it's not a directory, return it
    if { ! [query $path isdirectory] } {
	return [list $path]
    }
    $javaDirectory dirlist [::tycho::url path $path]
}

#####################################################################
#### exists
body ::tycho::ResourceWELD::exists {path} {
    $javaDirectory exists [::tycho::url path $path]
}

#####################################################################
#### mkdir
body ::tycho::ResourceWELD::mkdir {path} {
    error "Not implemented"
}

#####################################################################
#### new
body ::tycho::ResourceWELD::new {path} {
    uplevel #0 ::tycho::ResourceWELD [::tycho::autoName resourcefile]
}

#####################################################################
#### query
body ::tycho::ResourceWELD::query {path option} {
    switch -exact -- $option {
	"executable" {
	    # FIXME: Do directories need to be executable to read them?
	    if [query $path isdirectory] {
		return 1
	    } else {
		return 0
	    }
	}
	"exists" {
	    exists $path
	}
	"isdirectory" {
	    $javaDirectory isdirectory [::tycho::url path $path]
	}
	"isfile" {
	    # A URL is a file if it exists and is not a directory
	    if [exists $path] {
		return [expr { ! [query $path isdirectory] }]
	    }
	    return 0
	}
	"readable" {
	    exists $path
	}
	"isremote" {
	    return 1
	}
	"writable" {
	    # FIXME: for now
	    return 0
	}
	default {
	    error "Unknown option \"$option\" on $path"
	}
    }
}

#####################################################################
#### source
body ::tycho::ResourceWELD::source {path} {
    error "Not implemented"
}

#####################################################################
#### stat
body ::tycho::ResourceWELD::stat {path varName} {
    error "Not implemented"
}
