# Definition of a scrollable slate view based on the scrolled canvas by
# by Mark Ulferts and Sue Yockey.
# 
# @Author: Farhana Sheikh
# @Contributors: Mark Ulferts and Sue Yockey
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME: KNOWN BUGS:
#
# 1. If the window is resized from the left, the user is can scroll
#    to negative coordinates.  Need a fix in scrollSlate method.
# 2. Update this code to reflect more efficient code (see iwidgets 2.1)


#######################################################################
# options
#
option add *SlateView.autoResize 1 widgetDefault
option add *SlateView.height 230 widgetDefault
option add *SlateView.hscrollMode static widgetDefault
option add *SlateView.scrollMargin 2 widgetDefault
option add *SlateView.vscrollMode static widgetDefault
option add *SlateView.width 200 widgetDefault

########################################################################
#### SlateView
# This class defines a class for a scrollable slate.  It inherits from the
# the abstract View class.
# The design of this class is based on the scrolled canvas by 
# Mark Ulferts and Sue Yockey.  Instead of using the canvas, we use 
# our in-house slate and we do not inherit from the labeled widget.
#
# FIXME: Fill in the documentation here
#
# A Help menu contains pointers to key Tycho documentation
# <p>
# Here is an example:
# <tcl><pre>
# tycho::Displayer .d
# tycho::SlateView .d.sv
# .d.sv insertInDisplay 
# wm deiconify .d
# </pre></tcl>
#
class ::tycho::SlateView {
    inherit ::tycho::View

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    # Margin between edges of the slate and the bounding box containing
    # all items on the slate
    itk_option define -automargin autoMargin AutoMargin 10

    # Allow the scrollbars to adjust automatically when new widgets added
    itk_option define -autoresize autoResize AutoResize 1

    # Height of slate view
    itk_option define -height height Height 30

    # Dynamic or static horizontal scrollbars (if dynamic, scrollbar
    # disappears when not required).
    itk_option define -hscrollmode hscrollMode HScrollMode static

    # Size of space between the scroll bars and the slate 
    itk_option define -scrollmargin scrollMargin ScrollMargin 2

    # Dynamic or static vertical scrollbars
    itk_option define -vscrollmode vscrollMode VScrollMode static

    # Width of slate view
    itk_option define -width width Width 30

    ###################################################################
    ####                         public methods                    ####

    # Set up my menus and menuitems
    method addMyMenus {}

    # Get a handle to the slate drawing surface
    method childsite {} {return $childsite}
 
    # Get help on using the slate view
    # method help {}

    # Insert the slate view in its Displayer
    method insertInDisplay {}
 
    # Print the contents of the slate view
    # method print {}
    
    # Redraw the contents of the slate view
    # method redraw {}

    # Save the contents of the slate view to a file
    # method save {filename}

    # Scroll the slate
    method scrollSlate {wid first last}

    # Quit for slate view
    method quit {}

    # Zoom the contents of the slate view
    # method zoom {inOrOut}

    #####################################################################
    ####                        slate methods                        ####

    # Refer to slate documentation for details
    # The following methods are wrappers around the slate methods

    method addtag {args} {
	eval "$itk_component(slateview) addtag $args"
    }

    method bbox {args} {
	return [eval "$itk_component(slateview) bbox $args"]
    }

    method bind {args} {
	return [eval "$itk_component(slateview) bind $args"]
    }

    method create {args} {
	return [eval "$itk_component(slateview) create $args"]
	$this configure -autoresize $itk_option(-autoresize)
    }

    method delete {args} {
	eval "$itk_component(slateview) delete $args"]
	$this configure -autoresize $itk_option(-autoresize)
    }

    method find {args} {
	return [eval "$itk_component(slateview) find $args"]
    }

    method lower {args} {
	eval "$itk_component(slateview) lower $args"
    }

    method move {args} {
	eval "$itk_component(slateview) move $args"
	$this configure -autoresize $itk_option(-autoresize)
     }

    method raise {args} {
	eval "$itk_component(slateview) raise $args"
    }

    method roots {args} {
	return [eval "$itk_component(slateview) roots $args"]
    }

    method xview {args} {
	eval "$itk_component(slateview) xview $args"
    }

    method yview {args} {
	eval "$itk_component(slateview) yview $args"
    }

    ###################################################################
    ####                       protected methods                   ####

    # Update the filler when size of slate changes
    protected method updateFiller {}

    # Set up for an update of the filler
    protected method configureFiller {}

    ###################################################################
    ####                      protected variables                  ####

    # Vertical scroll mode
    protected variable vmode off

    # Horizontal scroll mode
    protected variable hmode off

    # flag to indicate whether reconfigure is pending
    protected variable reconfigPlanned ""

    ###################################################################
    ####                         private methods                   ####

    # Calculate the width of the filler so that horizontal scrollbar
    # does not extend beyond the slate
    private method fillerWidth {} {return $width}

    # Enable or disable the horizontal scrollbar
    private method horizontalScrollbarDisplay {mode}

    # Enable or disable the vertical scrollbar
    private method verticalScrollbarDisplay {mode} 

    ###################################################################
    ####                       private variables                   ####

    # Initialization flag
    private variable initialized 0
}

#######################################################################
#### -autoresize configuration
# Automatically adjusts the scrolled region to be the bounding
# box covering all the items in the slate.  As new items are
# added or removed, the scrollbars adjust accordingly.
# 
configbody ::tycho::SlateView::autoresize {

    # if autoresizing is on, then cover all items in the bounding box.
    if {$itk_option(-autoresize)} {
	set slatebbox [$itk_component(slateview) bbox all]
	
	if {$slatebbox != {}} {
	    set marg $itk_option(-automargin)
	    set slatebbox [lreplace $slatebbox 0 0 \
		    [expr [lindex $slatebbox 0] - $marg]]
	    set slatebbox [lreplace $slatebbox 1 1 \
		    [expr [lindex $slatebbox 1] - $marg]]
	    set slatebbox [lreplace $slatebbox 2 2 \
		    [expr [lindex $slatebbox 2] + $marg]]
	    set slatebbox [lreplace $slatebbox 3 3 \
		    [expr [lindex $slatebbox 3] + $marg]]
	}
	$itk_component(slateview) configure -scrollregion $slatebbox
    }
}

#######################################################################
#### -height configuration
# Set the height of scrolled slate
#
configbody ::tycho::SlateView::height {

    # get the height specified height and set it
    set pixels [winfo pixels $itk_component(hull) $itk_option(-height)]
    component hull configure -height $pixels
}

#######################################################################
#### -hscrollmode configuration
# Enable or disable the display and change the mode of the 
# horizontal scrollbar 
#
configbody ::tycho::SlateView::hscrollmode {

    # Check mode and display scrollbar accordingly
    switch $itk_option(-hscrollmode) {
	static {
	    horizontalScrollbarDisplay on
	}
	dynamic -
	none {
	    horizontalScrollbarDisplay off
	}
	default {
	    error "Bad hscrolloption \"$itk_option(-hscrollmode)\": \
		    should be static, dynamic, or none."
	}
    }
}

#######################################################################
#### -scrollmargin configuration
# Size of margin between scrolled region and scrollbar 
# 
configbody ::tycho::SlateView::scrollmargin {

    if {$initialized} {
	# Set the distance between the slate and the scrollbars
	set pixels [winfo pixels $itk_component(hmargin) \
		$itk_option(-scrollmargin)]
	set itk_option(-scrollmargin) $pixels

	# if the horizontal scrollbar is mapped then set the margin
	if {$hmode == "on"} {
	    $itk_component(hmargin) configure -width 1 -height $pixels
	}

	# if the vertical scrollbar is mapped then set the margin
	if {$vmode == "on"} {
	    $itk_component(vmargin) configure -width $pixels -height 1
	}

	# Set the filler size appropriately
	$itk_component(filler) configure -width [fillerWidth] -height 1
    }
}

#######################################################################
#### -vscrollmode configuration
# Enable or disable the display and change the mode of the 
# vertical scrollbar 
# 
configbody ::tycho::SlateView::vscrollmode {
    
    # Check mode and display scrollbar accordingly
    switch $itk_option(-vscrollmode) {
	static {
	    verticalScrollbarDisplay on
	}
	
	dynamic -
	none {
	    verticalScrollbarDisplay off
	}
	
	default {
	    error "Bad vscrolloption \"$itk_option(-vscrollmode)\": \
		    should be static, dynamic, or none."
	}
    }
	    
}

#######################################################################
#### -width configuration
# Set the width of scrolled slate
# 
configbody ::tycho::SlateView::width {

    # get the width specified width and set it
    set pixels [winfo pixels $itk_component(hull) $itk_option(-width)]
    component hull configure -width $pixels
}

#######################################################################
#### constructor
#
body ::tycho::SlateView::constructor {args} {
    
    component hull configure -borderwidth 0
    pack propagate $itk_component(hull) no

    # create frames to hold the scrollbars and the slate
    itk_component add main {
	frame $itk_interior.main
    } {
	keep -background -cursor
    }
    pack $itk_component(main) -fill both -expand true
  
    # frame for horizontal scrollbar and some filler
    itk_component add bottom {
	frame $itk_component(main).bottom
    } {
	keep -background -cursor
    }
    pack $itk_component(bottom) -fill x -side bottom 

    # frame for horizontal margin between scrolled area and scrollbar
    itk_component add hmargin {
	frame $itk_component(main).hmargin
    } {
	keep -background -cursor
    }
    pack $itk_component(hmargin) -side bottom
    
    # create frames to hold the slate and the vertical scrollbar
    itk_component add top {
	frame $itk_component(main).top
    } {
	keep -background -cursor
    }
    pack $itk_component(top) -fill both -expand true

    # create frame around the slate 
    itk_component add slateFrame {
	frame $itk_component(top).slateFrame
    } {
	keep -background -cursor -borderwidth -relief \
		-highlightthickness -highlightcolor
	rename -highlightbackground -background background Background
    }
    
    # create a basic slate
    itk_component add slateview {
	::tycho::slate $itk_component(slateFrame).slateview  \
		-height 30 \
		-width 30 \
		-scrollregion "0 0 30 30" \
		-borderwidth 3 \
		-relief sunken \
		-yscrollcommand \
		[code $this scrollSlate $itk_component(top).vsb] \
		-xscrollcommand \
		[code $this scrollSlate $itk_component(bottom).hsb]
    } {
	keep -cursor
    }
    pack $itk_component(slateview) -expand true -fill both -side left
    set itk_interior $itk_component(slateview)

    # create frame for vertical margin between scrolled area and 
    # scrollbar
    itk_component add vmargin {
	frame $itk_component(top).vmargin
    } {
	keep -background -cursor
    }

    # create vertical scrollbar
    itk_component add vsb {
	scrollbar $itk_component(top).vsb \
		-orient vertical \
		-relief sunken \
		-command [code $itk_component(slateview) yview]
    } {
	keep -activebackground -background -highlightcolor \
		-troughcolor -cursor 
    }
    pack $itk_component(vsb) -side right -fill y
    pack $itk_component(vmargin) -side right
    pack $itk_component(slateFrame) -fill both -expand yes -side left

    # create horizontal scrollbar
    itk_component add hsb {
	scrollbar $itk_component(bottom).hsb \
		-orient horizontal \
		-relief sunken \
		-command [code $itk_component(slateview) xview]
    } {
	keep -activebackground -background -highlightcolor \
		-troughcolor -cursor
    }
    pack $itk_component(hsb) -side left -fill x -expand true

    # create filler frame and figure out its width
    itk_component add filler {
	frame $itk_component(bottom).filler -width [fillerWidth]
    } {
	keep -background -cursor
    }
    pack $itk_component(filler) -side right

    # evaluate specified options
    eval itk_initialize $args

    ::bind $itk_component(hmargin) <Configure> [code $this configureFiller]
    ::bind $itk_component(vsb) <Configure> [code $this configureFiller]
    ::bind $itk_component(vmargin) <Configure> [code $this configureFiller]
    ::bind $itk_component(hsb) <Configure> [code $this configureFiller]

    set initialized 1
    configure -scrollmargin $itk_option(-scrollmargin)
}

#######################################################################
#### destructor
#
body ::tycho::SlateView::destructor {} {

    if {$reconfigPlanned != ""} {
	after cancel $reconfigPlanned
    }
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### addMyMenus
# Add menus specific to a slate
#
body ::tycho::SlateView::addMyMenus {} {

    # Add File menu
    $myMenubar addMenu File left {} -underline 0

    # Add commands to the existing File menu which is standard on
    # the displayer
    $myMenubar addMenuItem {Open} File \
	    -command {error "Sorry not implemented yet"} \
	    -state normal 
    $myMenubar addMenuItem {Save} File \
	    -command {error "Sorry not implemented yet"} \
	    -state normal 
    $myMenubar addMenuItem {Save As...} File \
	    -command {error "Sorry not implemented yet"} \
	    -state normal 

    $myMenubar addMenuSeparator File

    $myMenubar addMenuItem {Close} File \
	    -command {error "Sorry not implemented yet"} \
	    -state normal
    $myMenubar addMenuItem {Quit} File \
	    -command "$this quit" \
	    -state normal 
}

#######################################################################
#### childSite
# This method returns the path name of the child site widget which is
# just the slate drawing surface.
# 
body ::tycho::SlateView::childsite {} {

    return $itk_component(slateview)
}

#########################################################################
#### focusin
# Grab the focus.
#
body ::tycho::View::focusin {} {
    focus $itk_component(slateview)
}

#######################################################################
#### insertInDisplay
# Insert view in the display
#
body ::tycho::SlateView::insertInDisplay {} {
    
    # Initialize my displayer and menus, and register with the
    # displayer.
    $this setup

    # set up menus
    #    addMyMenus

    # insert the view into the displayer
    $myDisplayer setView $viewLabel bottom

    # grab focus each time we enter the slate widget
    ::bind $itk_component(slateview) <Enter> \
	    "$myDisplayer configure \
	    -menubar [$myDisplayer menubar $viewLabel]; \
	    focus %W"
}

#######################################################################
#### scrollSlate
# Performs scrolling and display of scrollbars based on total and
# maximum frame size as well as the current -vscrollmode and 
# -hscrollmode settings.  The arguments to the method are 
# the widget id, either vsb or hsb, the first automatic scroll
# parameter and the last automatic scroll parameter.
#
body ::tycho::SlateView::scrollSlate {wid first last} {

    # Set the scrollbar parameters
    $wid set $first $last

    if {$wid == $itk_component(vsb)} {
	if {$itk_option(-vscrollmode) == "dynamic"} {
	    if {($first == 0) && ($last == 1)} {
		if {$vmode != "off"} {
		    verticalScrollbarDisplay off
		}
	    } else {
		if {$vmode != "on"} {
		    verticalScrollbarDisplay on
		}
	    }
	}
    } elseif {$wid == $itk_component(hsb)} {
	if {$itk_option(-hscrollmode) == "dynamic"} {
	    if {($first == 0) && ($last == 1)} {
		if {$hmode != "off"} {
		    horizontalScrollbarDisplay off
		} 
	    } else {
		if {$hmode != "on"} {
		    horizontalScrollbarDisplay on
		}
	    }
	}
    }
}

#######################################################################
#### quit
# Quit from slate view
#
body ::tycho::SlateView::quit {} {

    # Remove binding to enter event
    ::bind $itk_component(slateview) <Enter> {}
    
    # Remove myself from my displayer
    $myDisplayer removeView $viewLabel
}
    ###################################################################
    ###################################################################
    ####                      protected  methods                   ####

#######################################################################
#### configureFiller
# Set up to do an update of the filler if one is not already planned
#
body ::tycho::SlateView::configureFiller {} {
    if {$reconfigPlanned == ""} {
	set reconfigPlanned [after idle [code $this updateFiller]]
    }
}

#######################################################################
#### updateFiller
# Update the width of the filler following a configure even on a 
# scrollbar or margin
#
body ::tycho::SlateView::configureFiller {} {
    
    $itk_component(filler) config -width [fillerWidth] -height 1
    $this configure -autoresize 1
    set reconfigPlanned ""
}
	


    ###################################################################
    ###################################################################
    ####                      private methods                      ####

#######################################################################
#### fillerWidth
# Figures out the width of the filler frame based on the vertical
# scrollbar width and the scrollmargin
# 
body ::tycho::SlateView::fillerWidth {} {

    if {$vmode == "on"} {
	# figure out the width and return it. 
	set width [expr [winfo reqwidth $itk_component(vsb)] + \
		[winfo reqwidth $itk_component(vmargin)]]
	return $width
    } else {
	return 1
    }
}

#######################################################################
#### horizontalScrollbarDisplay
# Enable or disable display of horizontal scrollbar.  The argument
# to this method is the mode which is either on or off.
#
body ::tycho::SlateView::horizontalScrollbarDisplay {mode} {

    switch $mode {
	on {
	    set hmode on

	    $itk_component(hmargin) configure \
		    -width $itk_option(-scrollmargin) \
		    -height 1
	    pack $itk_component(hsb) -side left -fill x -expand yes
	}
	off {
	    set hmode off

	    pack forget $itk_component(hsb)
	    
	    $itk_component(hmargin) configure -width 1 -height 1
	    $itk_component(filler) configure -width 1 -height 1
	}
	default {
	    error "Invalid argument \"$mode\": should be on or off."
	}
    }
}

#######################################################################
#### verticalScrollbarDisplay
# Enable or disable display of vertical scrollbar.  The single argument
# to this method is the mode which can be on or off.
#
body ::tycho::SlateView::verticalScrollbarDisplay {mode} {

    switch $mode {
	on {
	    set vmode on
	    $itk_component(vmargin) configure \
		    -width $itk_option(-scrollmargin) \
		    -height 1

	    pack forget $itk_component(slateFrame)
	    pack forget $itk_component(vmargin)
	   
	    pack $itk_component(vsb) -side right -fill y
	    pack $itk_component(vmargin) -side right
	    pack $itk_component(slateFrame) -fill both -expand yes -side left
	}
	off {
	    set vmode off

	    pack forget $itk_component(vsb)
	    
	    $itk_component(vmargin) configure -width 1 -height 1
	    $itk_component(filler) configure -width 1 -height 1
	}
	default {
	    error "Invalid argument \"$mode\": should be on or off."
	}
    }
}



