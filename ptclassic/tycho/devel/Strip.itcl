##########################################################################
# A picture that displays a strip of rectangles.
# 
# @Author: John Reekie, Farhana Sheikh
# @Version: $Id$
# 
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

##########################################################################
#### Strip
#
# A strip of rectangles, such as used in bar charts, Gantt charts,
# and on on.
#
# FIXME: Add an orient option and modify to deal with vertical
# strips.
#
class ::tycho::Strip {
    inherit ::tycho::Primitive

    ## constructor
    #
    constructor {s c x0 y0 x1 y1 args} {}


    ###################################################################
    ####                            options                        ####

    # The value at the low end of the strip
    public variable from 0 {
	recompute
#	redraw ; FIXME
    }

    # The value at the high end of the strip
    public variable to 100 {
	recompute
#	redraw ; FIXME
    }

    ###################################################################
    ####                         public methods                    ####

    # Add a box to the strip
    method addBox {name low high args} {}

    # Add several boxes to the strip
    method addBoxes {args} {}

    # Add labels to the boxes
    method addLabels {args} {}

    # Get a configuration option of a box
    method cgetBox {name option} {}

    # Configure options of a box
    method configureBox {name args} {}

    # Delete a box
    method deleteBox {name} {}

    # Get or set the coordinates of the strip.
    method coords {args} {}

    # Get the name of the box at a specified pixel position on the strip
    method getBox {pos} {}

    # Change the position of a box
    method moveBox {name low high} {}


    ###################################################################
    ####                         protected variables               ####

    # The font to use for the box labels
    protected variable labelfont ""
    
    # An array containing the box labels
    protected variable labels
    
    # An array mapping values to positions, to save recomputing
    protected variable positions

    # The distance between high and low pixel positions
    protected variable length 0

    # The difference between the from and to values
    protected variable range 0

    # The ratio of the length to the range
    protected variable convertRatio 1

    ###################################################################
    ####                         private methods                   ####

    # Recompute internal numeric parameters
    private method recompute {} {}
}



## addBox name low high {option value}+
#
# Add a box to the strip. This is fairly slow: if possible,
# use the addBoxes method instead.
#
body ::tycho::Strip::addBox {name low high args} {
    # Get the coordinates of the strip
    assign x0 y0 x1 y1 [$canvas coords $component(primary)]

    # Calculate the positions of the box, reusing cached ones
    # if possible
    if { [info exists positions($low)] } {
	set left $positions($low)
    } else {
	set left [expr $x0 + (($low-$from) * $convertRatio)]
	set positions($low) $left
    }
    if { [info exists positions($high)] } {
	set right $positions($high)
    } else {
	set right [expr $x0 + (($high-$from) * $convertRatio)]
	set positions($high) $right
    }

    # Create the box
    eval $this component create $name rectangle $left $y0 $right $y1 $args
}


## addBoxes args
#
# Add boxes to the strip. Each argument is a list of the form
#
#     name low high args
#
# where args is a list of arguments given to the canvas.
#
body ::tycho::Strip::addBoxes {args} {
    # Get the coordinates of the strip
    assign x0 y0 x1 y1 [$canvas coords $component(primary)]

    # This code works by creating a list of canvas items. Initialize it.
    set itemlist {}

    # For each argument, calculate the positions and add the
    # rectangle item and its label to the item list.
    foreach list $args {
	# Extract information from the list
	set name [lindex $list 0]
	set low  [lindex $list 1]
	set high [lindex $list 2]
	set opts [lrange $list 3 end]

	# Calculate the positions of the box, reusing cached ones
	# if possible
	if { [info exists positions($low)] } {
	    set left $positions($low)
	} else {
	    set left [expr $x0 + (($low-$from) * $convertRatio)]
	    set positions($low) $left
	}
	if { [info exists positions($high)] } {
	    set right $positions($high)
	} else {
	    set right [expr $x0 + (($high-$from) * $convertRatio)]
	    set positions($high) $right
	}

	# Append the name and the item args to the item list
	lappend itemlist \
		$name \
		[concat "rectangle" $left $y0 $right $y1 $opts]
    }

    # Create the rectangles.
    eval $this create components $itemlist
}


## addLabels args
#
# Add labels to boxes. The arguments are an alternating
# list of box names and labels.
#
body ::tycho::Strip::addLabels {args} {

    # This code works by creating a list of canvas items. Initialize it.
    set itemlist {}

    set itemlist {}
    foreach {name label} $args {
	# Remember the label
	set labels($name) $label
	assign x0 y0 [$canvas coords $component($name)]
	lappend itemlist $name.label \
		[list "text" $x0 $y0 -anchor nw -text $label -font $labelfont]
    }

    # Create the labels
    eval $this create untagged $itemlist

    # Now, go through the labels just created and delete any
    # that don't fit!
    foreach {name label} $args {
	if { [lindex [$canvas coords $component($name.label)] 2] \
		> [lindex [$canvas coords $component($name)] 2 ] } {
	    $canvas delete $component($name.label)
	    unset component($name.label)
	}
    }
}


## cgetBox name -option
#
# Get a configuration option of a box.
#
body ::tycho::Strip::cgetBox {name option} {
    eval $canvas itemcget $component($name) $option
}


## configureBox name args
#
# Set configuration options of a box.
#
body ::tycho::Strip::configureBox {name args} {
    eval $canvas itemconfigure $component($name) $args
}


## constructor
#
body ::tycho::Strip::constructor {s c x0 y0 x1 y1 args} {
    # Set the slate and canvas variables.
    set slate  $s
    set canvas $c

    # Get and remember the font for the ticks
    set labelfont [.tychoFonts findFont {helvetica 9 medium r}]
	
    # Create the primary component defining the coordinates
    $this component create "primary" line $x0 $y0 $x1 $y1 -fill ""
    
    # Initialize options
    eval configure $args

    # If the conversion variables have not been computed,
    # then do it now
    if { $range == 0 } {
	recompute
    }
}


## coords
## coords x0 y0 x1 y1
#
# Query or set the coordinates of the object. Most of the work
# is done by the superclass' routine; we just have to intercept
# it here to make sure that the conversion parameters are
# recomputed.
#
# FIXME: Doesn't check label size
#
body ::tycho::Strip::coords {args} {
    if { $args == "" } {
	return [$canvas coords $component(primary)]
    } else {
	eval ::tycho::Primitive::coords $args
	recompute
    }
}


## deleteBox name
#
# Remove a box.
#
body ::tycho::Strip::deleteBox {name} {
    component delete $name
    catch {component delete $name.label}
}


## getBox xposition
#
# Return the label of the box at the specified canvas coordinate.
# If there is none, return the empty string.
#
# Currently, this is a little dumb, and assumes that there
# is only one item returned when it queries the canvas. Later
# on, this should probably be made more robust.
#
body ::tycho::Strip::getBox {xposition} {
    set y1 [lindex [$canvas coords $component(primary)] 3]

    # This is where we'll check the canvas
    set x [expr $xposition]
    set y [expr $y1-1]

    # Get the first item at this position which a) has my tag
    # b) is a rectangle and c) is not the primary component.
    foreach b [$canvas find overlapping $x $y $x $y] {
	if { [string compare $thistag [lindex [$canvas gettags $b] 0]] == 0 \
		&& [string compare [$canvas type $b] rectangle] == 0 \
		&& $b != $component(primary) } {
	    
	    # OK, we have the item, now we have to find out which
	    # component it is. Scan the component array.
	    foreach {name item} [array get component] {
		if { $item == $b } {
		    return $name
		}
	    }
	}
    }

    # If we get to here, there is no box, so return null
    return ""
}


## moveBox name low high
#
# Move a box from its current position to a new one.
#
body ::tycho::Strip::moveBox {name low high} {
    # Get the coordinates of the strip
    assign x0 y0 x1 y1 [$canvas coords $component(primary)]

    # Calculate the positions of the box, reusing cached ones
    # if possible
    if { [info exists positions($low)] } {
	set left $positions($low)
    } else {
	set left [expr $x0 + (($low-$from) * $convertRatio)]
	set positions($low) $left
    }
    if { [info exists positions($high)] } {
	set right $positions($high)
    } else {
	set right [expr $x0 + (($high-$from) * $convertRatio)]
	set positions($high) $right
    }

    # Move the box
    $canvas coords $component($name) $left $y0 $right $y1
}


## recompute
#
# Recompute conversion parameters.
#
body ::tycho::Strip::recompute {} {
    # Remove cached conversion data
    catch {unset positions}
    
    # Set the range and conversion variables
    assign x0 y0 x1 y1 [$canvas coords $component(primary)]
    set length [expr $x1 - $x0]
    set range [expr $to - $from]
    set convertRatio [expr $length / $range]
}
