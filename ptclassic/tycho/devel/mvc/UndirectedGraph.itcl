##########################################################################
# Version: $Id$
# Author: Edward A. Lee, John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### UndirectedGraph
#
# The _UndirectedGraph_ is a general undirected graph. It extends the
# _AbstractGraph_ superclass with concrete methods to add and delete
# vertices and edges. Because it is undirected, the ordering of
# the vertices in method dealing with edges is immaterial. Internally,
# the class replicates edges in order to make the graph "undirected."
#
# <b>Note</b>: At present, this class does nothing other than build
# a graph. It is intended to be extended with graph algorithms
# (depth-first search, breadth-first search, connected components,
# spanning tree, and so on) if and when it becomes necessary. (So far,
# all graph manipulation in Tycho has used directed graphs.)
#
class ::tycho::UndirectedGraph {
    inherit ::tycho::AbstractGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Return adjacent vertices
    method adjacent {vertex}

    # Add an edge and options to the graph
    method connect {vertex1 vertex2 args}

    # Remove an edge from the graph
    method disconnect {vertex1 vertex2}

    # Configure the edge with one or more options
    method edgeconfigure {vertex1 vertex2 args}

    # Return the number of edges in the graph
    method numberofedges {}
}

########################################################################
#### constructor
#
body ::tycho::UndirectedGraph::constructor {args} {
    # Evaluate options
    eval configure $args
}

########################################################################
#### adjacent
#
# Return adjacent vertices. An empty list will be returned
# if the vertex does not exist.
#
body ::tycho::UndirectedGraph::adjacent {vertex} {
    set result {}
    foreach e [array names _edges $vertex^*] {
    	lappend result [lindex [split $e "^"] 1]
    }
    return $result
}

########################################################################
#### connect
#
# Add a new edge to the graph, and return the inverse command.
# The edge is specified by two vertices; additional arguments are a
# flat option-value list for the edge. Flag an error if the edge
# already exists, but not if the two vertices do not exist. 
#
body ::tycho::UndirectedGraph::connect {vertex1 vertex2 args} {
    if { [::info exists _edge($vertex1^$vertex2)] } {
	error "Edge ($vertex1, $vertex2) already exists in $dataname"
    }
    set modified 1

    # Record the edge
    set _adjacency($vertex1^$vertex2) 1
    set _adjacency($vertex2^$vertex1) 1
    set _edges($vertex1^$vertex2) 1
    set _edges($vertex2^$vertex1) 1

    # Record its options
    array set temp [concat $edgeoptions $args]
    set options [array get temp]
    set _edgeoptions($vertex1^$vertex2) $options
    set _edgeoptions($vertex2^$vertex1) $options
    
    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return [list disconnect $vertex1 $vertex2]
}

########################################################################
#### disconnect
#
# Remove an edge from the graph, and return the inverse command. Flag an
# error if the edge does not exist.
#
body ::tycho::UndirectedGraph::disconnect {vertex1 vertex2} {
    if { ! [::info exists _edge($vertex1^$vertex2)] } {
	error "Edge ($vertex1, $vertex2) unknown in $dataname"
    }
    set modified 1

    # Remember the inverse
    set inverse [list connect $vertex1 $vertex2 \
	    $_edgeoptions($vertex1^vertex2)]

    # Delete the edge(s)
    unset _edges($vertex1^$vertex2)
    unset _edges($vertex2^$vertex1)
    
    # Delete the options(s)
    unset _edgeoptions($vertex1^$vertex2)
    unset _edgeoptions($vertex2^$vertex1)
    
    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}

########################################################################
#### edgeconfigure
#
# Configure the edge and return the inverse command. This method 
# overrides the default superclass method to duplicate options for
# both "directions."
#
body ::tycho::UndirectedGraph::edgeconfigure {vertex1 vertex2 args} {
    eval [list chain $vertex1 $vertex2] $args
    eval [list chain $vertex2 $vertex1] $args
}

########################################################################
#### numberofedges
#
# Return the number of edges in the graph. This method overrides the
# superclass method because edges in the undirected graph are
# "duplicated".
#
body ::tycho::UndirectedGraph::numberofedges {} {
    return [expr [array size _edges] / 2]
}
