##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of 'California'.
#  rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### preference
#
# The procedural interface to the preferences. This proc assumes
# that there is an instance of the WidgetPreferences class
# named tychoPreferences.
# Forms of this command are:
# <ul>
# <li>*add* _group_ _preference_ _value_ ?_option_ _value? ... : Add
# a preference to a group. The options are any legal options of
# the add{} method of the _TypedData_ class.
# <li>*create* _group_ ?_inherits_? ... : Create a new
# preference group. The _inherits_ arguments are groups from this
# one can :inherit" preferences.
# <li>*groups*: Return the names of the current groups.
# <li>*inherit* _group_ _preference_ ?_value_? : Add
# a preference to a group, getting all inherited options from an 
# existing entry. If the value is not supplied, it defaults to 
# "UNKNOWN."
# <li>*names* _group_: Return the names of the preferences within
# the specified group.
# <li>*subscribe* _group_ _widget_ ?_option preference_? ...: Subscribe widget
# options to entries. The widget is updated immediately with the
# subscribed-to preferences. Note that the regular subscription
# mechanism is still directly available by calling the
# ``tychoPreferences'' object directly.
# <li>*unsubscribe* _group_ _widget_ ?_preference_? ...: Unsubscribe
# a widget from the specified preferences. If there are no arguments,
# unsubscribe it from all options.
#
proc ::tycho::preference {command {group {}} args} {
	switch -exact $command {
	"add" {
		# Add a preference to a group
		set preference [lindex $args 0]
		set value [lindex $args 1]
		set args [lreplace $args 0 1]

		eval tychoPreferences add $group.$preference $value $args
	}
	"create" {
		# Create a new preference group with dependencies
		tychoPreferences add _$group -depends $args
	}
	"groups" {
		# Return the names of all groups.
		set result {}
		foreach i [tychoPreferences indexes _*] {
			lappend result [string range $i 1 end]
		}
		return $result
	}
	"names" {
		# Return the names of preferences in a group
		return [tychoPreferences indexes $group.*]
	}
	"inherit" {
		# Add a preference to a group but inherit from another group
		set preference [lindex $args 0]
		if { $args != "" } {
			set value [lindex $args 1]
		} else {
			set value "UNKNOWN"
		}

		# Get the anti-dependent
		set dependson [tychoPreferences dependson $preference]
		if { $dependson == "" } {
			error "Cannot inherit a value for $preference in $group"
		}

		# Get the parameters of the antidependent and add a new entry
		eval tychoPreferences add $group.$preference [list $value] \
				[tychoPreferences entrycget $dependson]

		# Add the link
		tychoPreferences link $dependson $group.$preference
	}
	"subscribe" {
		# Subscribe configuration options to preferences. If this
		# is too slow, a widgetsubscribe{} method could be added to
		# WidgetPreferences and that called instead.
		set widget [lindex $args 0]
		set args [lreplace $args 0 0]

		# First do all subscriptions
		foreach {option entry} $args {
			tychoPreferences subscribe $widget $group.$entry \
				[list tychoPreferences widgetnotify %0 $option $group.$entry]
		}
		
		# Collect current values
		set arglist {}
		foreach {option entry} $args {
			set value [tychoPreferences get $group.$entry]
			
			# Translate if necessary
			switch -exact [tychoPreferences cget $group.$entry -type] {
				"font" {
					set value [::tycho::font $value]
				}
				"color" {
					set value [::tycho::color $value]
				}
			}
			lappend arglist $option $value
		}

		# Update the widget now
		eval $subscriber configure $arglist
	}
	"unsubscribe" {
		# Unsubscribe from preferences.  If this
		# is too slow, a widgetunsubscribe{} method could be added to
		# WidgetPreferences and that called instead.
		set widget [lindex $args 0]
		set args [lreplace $args 0 0]

		if { $args == "" } {
			tychoPreferences unsubscribe $widget
		} else {
			foreach entry $args {
				tychoPreferences unsubscribe $widget $group.$entry
			}
		}
	}
	default {
		error "Unknown command $command"
	}
	return ""
}


##########################################################################
#### WidgetPreferences
#
# The _WidgetPreferences_ class adds a "defaulting" mechanism to
# the _TypedData_ superclass. Each entry can have zero or more
# dependents: when a value is changed, the subscribers of all
# dependents which do not have the value "UNKNOWN" are also updated.
# Conversely, an entry can have zero or one anti-dependence links;
# if an entry's value is retreived with get{}, and
# that entry has the value "UNKNOWN," its anti-dependence link is
# followed until a value that is not UNKNOWN is found.
#
# This class assumes that once initialized, the set of entries does not
# change. As a result, it does not allow entries to be deleted.
# It automatically creates links in the inherit{} method; links can
# also be created explicitly by the link{} method.
#
# The class also assumes, for simplicity, that the only operation that
# can reliably be undone is assign{}. Since the only interface to
# the class is through the <code>::tycho::preferences</code> method,
# this shouldn't be a problem.
#
class ::tycho::WidgetPreferences {
	inherit ::tycho::TypedData

	constructor {args} {}
	destructor {}

	####################################################################

	# Flag error on attempt to delete an entry
	method delete {index}

	# Get an entry, following anti-dependence links if needed
	method get {index}

	# Find  an entry on which a given entry can "depend"
	method dependson {index}

	# "Inherit" a data entry by following links at top level
	method inherit {index {data UNKNOWN}}

	# Add a dependence link between entries
	method link {from to}

	# Notify a widget by configuring an option
	method widgetnotify {widget option entry}

	####################################################################
	
	# The dependence links
	protected variable _dependence
	
	# The anti-dependence link
	protected variable _antidependence
}


########################################################################
#### constructor
#
body ::tycho::WidgetPreferences::constructor {args} {
	# Unless overridden, notify by calling the notify method
	configure -notifyscript {eval %0 notify [list %1] %2}

	# Evaluate options
	eval configure $args
}

########################################################################
#### delete
#
# Flag an error if an attempt is made to delete an entry.
#
body ::tycho::DataArray::delete {index} {
	error "Cannot delete entry from $dataname"
}

########################################################################
#### dependson
#
# Find an entry on which a given entry can "depend." The entry does
# not exist yet, so there is no error-checking. Return a null
# string if none is found.
#
body ::tycho::DataArray::dependson {index} {
	set result ""
	set index [split $index "."]
	set root [lindex $index 0]
	set tail [join [lrange $index 1 end] "."]
	
	# Try the immediate antidependents
	foreach p [entrycget $root -depends] {
		if { [::info exists _value($p.tail)] } {
			return $p.tail
		}
	}
	
	# That didn't work, so try a recursive call
	foreach p [entrycget $root -depends] {
		set result [dependson $p.$tail]
		if { $result != "" } {
			return $result
		}
	}
	
	# Failed to find one
	return ""
}

########################################################################
#### get
#
# Get the value of an entry. Flag an error if the entry does
# not exist. If the value is "UNKNOWN," follow the antidependence
# link until data is found or the links stop.
#
body ::tycho::TypedData::get {index} {
	if { ! [::info exists $_value($index)] } {
		error "Data $index does not exist in $dataname"
	}

	set value $_value($index)

	# Follow anti-dependence links if necessary to find known data
	while { $value == "UNKNOWN" } {
		# If we ran out of links, return "UNKNOWN"
		if { ! [::info exists _antidependence($index)] } {
			return "UNKNOWN"
		}
		set index $_antidependence($index)
		set value _value($index)
	}
	return $value
}

########################################################################
#### link
#
# Add a dependence link to the array. This operation
# is not undoable or publishable.
#
# FIXME: Have I got the sense of "dependence" and "antidependence"
# the wrong way around?
#
body ::tycho::TypedData::link {from to} {
	if { ! [::info exists $_value($from)] } {
		error "Data $from does not exist in $dataname"
	}
	if { ! [::info exists $_value($to)] } {
		error "Data $to does not exist in $dataname"
	}
	lappend _dependence($from) $to
	lappend _antidependence($to) $from
}

########################################################################
#### widgetnotify
#
# Instead of calling the subscriber directly, preferences are
# updated via this method, which ensures that the correct data
# is given to the subscriber widgets.
#
body ::tycho::WidgetPreferences::widgetnotify {widget option entry} {
	# Get the current value
	set value [get $entry]
	
	# If it's "UNKNOWN," do nothing
	if { $value == "UNKNOWN" } {
		return
	}
	
	# If the datum is a color or font, translate into a system-dependent form
	switch -exact $_optns($entry@-type) {
		"font" {
			set value [::tycho::font $value]
		}
		"color" {
			set value [::tycho::color $value]
		}
	}

	# Update the subscriber (we have already checked that it exists)
	$subscriber configure $option $value
}
