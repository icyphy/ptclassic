# Test suite for the NewInterchange class.
#
# @Authors: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source [file join $TYCHO kernel test testDefs.tcl]
} {}

############################################################################
# constructor{}
#
test NewInterchange-constructor-1 {Create NewInterchange object} {
    catch {delete object ic}
    ::tycho::NewInterchange ic -errorname foo
} {ic}


########################################################################
########################################################################
##### Data access methods

########################################################################
#### newtype{}, typecget{}, typeconfigure{}
#
catch {delete object ic}
test NewInterchange-newtype-1 {Define a type: special option defaults} {
    ::tycho::NewInterchange ic -errorname Tester
    ic newtype foo
    # Check default values
    set result {}
    foreach {opt val} \
            {-valued 0 -ordered 0 -leafonly 0 -strict 1 -nonroot 0 -rootonly 0} {
        lappend result [ic typecget foo $opt]
    }
    set result
} {0 0 0 1 0 0}

catch {delete object ic}
test NewInterchange-newtype-2 {Define a type: set special options} {
    ::tycho::NewInterchange ic -errorname Tester
    # Check by setting nonsense values
    ic newtype foo \
            -valued a -ordered b -leafonly c -strict d -nonroot e -rootonly f
    set result {}
    foreach {opt val} \
            {-valued a -ordered b -leafonly c -strict d -nonroot e -rootonly f} {
        lappend result [ic typecget foo $opt]
    }
    set result
} {a b c d e f}

catch {delete object ic}
test NewInterchange-newtype-3 {Define a type: other options} {
    ::tycho::NewInterchange ic -errorname Tester
    ic newtype foo -foo Foo -bar Bar
    list [ic typecget foo -foo] [ic typecget foo -bar]
} {Foo Bar}

catch {delete object ic}
test NewInterchange-newtype-4 {Configure a type: special options} {
    ::tycho::NewInterchange ic -errorname Tester
    ic newtype foo
    # Check by setting nonsense values
    ic typeconfigure foo \
            -valued a -ordered b -leafonly c -strict d -nonroot e -rootonly f
    set result {}
    foreach {opt val} \
            {-valued a -ordered b -leafonly c -strict d -nonroot e -rootonly f} {
        lappend result [ic typecget foo $opt]
    }
    set result
} {a b c d e f}

catch {delete object ic}
test NewInterchange-newtype-5 {Define a type: other options} {
    ::tycho::NewInterchange ic -errorname Tester
    ic newtype foo -foo Foo -bar Bar
    ic typeconfigure foo -foo zaz -bar baz
    list [ic typecget foo -foo] [ic typecget foo -bar]
} {zaz baz}

########################################################################
#### add{}, value{}, clear{}, exists{}
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype root -color red -rootonly 1
ic newtype branch -color brown -nonroot 1
ic newtype leaf -color green -nonroot 1 -leafonly 1 -valued 1

test NewInterchange-add-1 {Add root items} {
    ic add root Bo
    ic add root Peep -color pink
    list \
            [ic itemcget root Bo] [ic itemcget root Peep] \
            [ic exists root Bo] [ic exists branch Peep] [ic exists root Sheep]
} {{-color red} {-color pink} 1 0 0}

test NewInterchange-add-2 {Add non-root items} {
    ic add {root branch} {Bo Bo}
    ic add {root leaf} {Peep Peep} Hello -color blue
    list \
            [ic itemcget {root branch} {Bo Bo} ] \
            [ic value {root leaf} {Peep Peep} ] \
            [ic itemcget {root leaf} {Peep Peep} ] \
            [ic exists {root branch} {Bo Bo} ] \
            [ic exists {root leaf} {Peep Peep} ] \
            [ic exists {root leaf} {Bo Bo} ] \
            [ic exists {root leaf} {Bo Peep} ]
		
} {{-color brown} Hello {-color blue} 1 1 0 0}

test NewInterchange-exists-1 {Test for existence} {
    list \
            [ic exists root Bo] \
            [ic exists root Peep] \
            [ic exists branch Peep] \
            [ic exists root Sheep] \
            [ic exists {root branch} {Bo Bo} ] \
            [ic exists {root leaf} {Peep Peep} ] \
            [ic exists {root leaf} {Bo Bo} ] \
            [ic exists {root leaf} {Bo Peep} ]
    
} {1 1 0 0 1 1 0 0}

test NewInterchange-clear-1 {Clear data} {
    ic clear
    list \
            [ic exists root Bo] \
            [ic exists root Peep] \
            [ic exists branch Peep] \
            [ic exists root Sheep] \
            [ic exists {root branch} {Bo Bo} ] \
            [ic exists {root leaf} {Peep Peep} ] \
            [ic exists {root leaf} {Bo Bo} ] [ic exists {root leaf} {Bo Peep} ]
		
} {0 0 0 0 0 0 0 0}

test NewInterchange-add-3 {Add using nested syntax} {
    ic clear
    ic add root Bo {
        branch Bo
    }
    ic add root Peep {
        -color pink
        leaf Peep Hello -color blue
    }
    list \
            [ic itemcget root Bo] \
            [ic itemcget root Peep] \
            [ic itemcget {root branch} {Bo Bo} ] \
            [ic value {root leaf} {Peep Peep} ] \
            [ic itemcget {root leaf} {Peep Peep} ] \
            [ic exists root Bo] \
            [ic exists root Peep] \
            [ic exists branch Peep] \
            [ic exists root Sheep] \
            [ic exists {root branch} {Bo Bo} ] \
            [ic exists {root leaf} {Peep Peep} ] \
            [ic exists {root leaf} {Bo Bo} ] \
            [ic exists {root leaf} {Bo Peep} ]

} {{-color red} {-color pink} {-color brown} Hello {-color blue} 1 1 0 0 1 1 0 0}

########################################################################
#### assign{}, value{}
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype valued -valued 1
ic newtype nonvalued -valued 0

test NewInterchange-assign-1 {Assign a value} {
    ic add valued Bo Hello
    set result [ic value valued Bo]
    ic assign valued Bo Goodbye
    lappend result [ic value valued Bo] 
    set result
} {Hello Goodbye}

########################################################################
#### delete{}
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype root -color red -rootonly 1
ic newtype branch -color brown -nonroot 1
ic newtype leaf -color green -nonroot 1 -leafonly 1 -valued 1
ic add root Bo {
    branch Bo
}
ic add root Peep {
    -color pink
    leaf Peep Hello -color blue
}

test NewInterchange-delete-1 {Delete leaf} {
    set result [list [ic delete {root branch} {Bo Bo} ]]
    lappend result [ic exists root Bo] [ic exists {root branch} {Bo Bo} ]
} {{-color brown} 1 0}

test NewInterchange-delete-2 {Delete root -- leaf stays} {
    set result [list [ic delete root Peep]]
    lappend result [ic exists root Peep] [ic exists {root leaf} {Peep Peep} ]
} {{-color pink} 0 1}

########################################################################
#### get
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype foo -color red -valued 1
ic newtype bar
ic add foo a A {
    foo b B -color blue
    foo c C
    bar x
}
ic add foo f F
ic add bar y

test NewInterchange-get-1 {Get root items} {
    ic get foo
} {a {A -color red} f {F -color red}}

test NewInterchange-get-2 {Get root items again} {
    ic get bar
} {y {}}

test NewInterchange-get-3 {Get nested items} {
    ic get {foo foo} a
} {c {C -color red} b {B -color blue}}

########################################################################
#### itemcget{}, itemconfigure{}
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype foo -color red -font Times -valued 1
ic add foo a A {
    foo b B -color blue -font Lucida
    foo c C
}

test NewInterchange-itemcget-1 {Get options of root item} {
    list [ic itemcget foo a -color] [ic itemcget foo a -font] 
} {red Times}

test NewInterchange-itemcget-2 {Get options of nested item} {
    list \
	    [ic itemcget {foo foo} {a b} -color] \
	    [ic itemcget {foo foo} {a b} -font]
} {blue Lucida}

test NewInterchange-itemconfigure-1 {Configure options of root item} {
    ic itemconfigure foo a -color pink -font Zap
    list [ic itemcget foo a -color] [ic itemcget foo a -font] 
} {pink Zap}

test NewInterchange-itemconfigure-2 {Configure options of nested item} {
    ic itemconfigure {foo foo} {a b} -color yellow -font Magic
    list \
	    [ic itemcget {foo foo} {a b} -color] \
	    [ic itemcget {foo foo} {a b} -font]
} {yellow Magic}

########################################################################
#### names
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype foo -color red -valued 1
ic newtype bar
ic add foo a A {
    foo b B -color blue
    foo c C
    bar x
}
ic add foo f F
ic add bar y

test NewInterchange-names-1 {Get root items} {
    ic names foo
} {a f}

test NewInterchange-names-2 {Get root items again} {
    ic names bar
} {y}

test NewInterchange-names-3 {Get nested items} {
    ic names {foo foo} a
} {c b}

########################################################################
#### itemcget
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype foo -color red -font Times -valued 1
ic add foo a A {
    foo b B -color blue -font Lucida
    foo c C
}

test NewInterchange-itemcget-1 {Get options of root item} {
    ic itemcget foo a
} {-color red -font Times}

test NewInterchange-itemcget-2 {Get options of nested item} {
    ic itemcget {foo foo} {a b}
} {-color blue -font Lucida}

########################################################################
#### sort
#

########################################################################
#### value
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype foo -color red -font Times -valued 1
ic add foo a A {
    foo b B -color blue -font Lucida
    foo c C
}

test NewInterchange-value-1 {Get value of root item} {
    ic value foo a
} {A}

test NewInterchange-value-2 {Get value of nested item} {
    ic value {foo foo} {a b}
} {B}


########################################################################
########################################################################
##### I/O related methods

########################################################################
#### annotation
#

########################################################################
#### defineModelOptions
#

########################################################################
#### describe{}
#
catch {delete object ic}
::tycho::NewInterchange ic -errorname Tester
ic newtype root -color red -rootonly 1
ic newtype branch -color brown -nonroot 1
ic newtype leaf -color green -nonroot 1 -leafonly 1 -valued 1
ic add root Bo {
    branch Bo -color green
}
ic add root Peep {
    -color pink
    leaf Peep Hello -color blue
}
ic add root Sheep -color pink

test NewInterchange-describe-1 {Describe non-valued root} {
    ic describe root Sheep
} "root Sheep -color pink\n"

test NewInterchange-describe-2 {Describe non-valued nested item} {
    ic describe {root branch} {Bo Bo}
} "branch Bo -color green\n"

test NewInterchange-describe-3 {Describe valued item} {
    ic describe {root leaf} {Peep Peep}
} "leaf Peep Hello -color blue\n"

test NewInterchange-describe-4 {Describe nested item} {
    ic describe root Peep
} "root Peep \{\n\ \ \ \ -color pink\n\ \ \ \ leaf Peep Hello -color blue\n\}\n"

test NewInterchange-describe-6 {Describe whole model} {
    llength [ic describe]
} [llength {
root Bo {
    branch Bo -color green
}
root Peep {
    -color pink
    leaf Peep Hello -color blue
}
root Sheep -color pink
} ]

########################################################################
#### externalize
#

########################################################################
#### NewInterchangenalize
#

########################################################################
#### load
#

########################################################################
#### modelcget
#

########################################################################
#### modelconfigure
#

########################################################################
#### read
#

########################################################################
#### write
#


########################################################################
########################################################################
##### Complex tests


########################################################################
## CLEAN UP
after 250
catch {delete object ic}
