##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


# We need to make sure that the simulation support package
# is loaded
package require tycho.util.ptsim

##########################################################################
#### CTSimulation
#
# Simulation controller for CT domain.
#
class ::tycho::CTSimulation {
    inherit ::tycho::Simulation

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####
    
    ###################################################################
    ####                         public methods                    ####

    # Start the simulation server
    method startServer {}

    ###################################################################
    ####                      protected methods                    ####

    # Generate simulation from the current graph
    protected method _construct {}
}

########################################################################
#### constructor
#
body ::tycho::CTSimulation::constructor {args} {
    # Initialize options
    eval configure $args

}

#######################################################################
#### startServer
#
# Start the simulation server.
#
body ::tycho::CTSimulation::startServer {} {
    chain

    # Create the universe
    _send {
	set univ [java::new pt.domains.ct.kernel.CTUniverse]
	$univ setName Universe
        set exec [$univ getExecutor]
    }
}

########################################################################
#### _construct
#
# Construct a simulation from the current graph.
#
body ::tycho::CTSimulation::_construct {} {
    puts CTSimulation::_construct
    update
    
    # Generate the stars from vertices
    foreach v [$_graph vertices] {
        # Is it a junction or a vertex? Currently, we can
        # tell only by looking at the name, but this is
        # obviously lame...
        # FIXME
        if [string match {junction*} $v] {
            # do nothing

        } else {
            # Otherwise assume it represents a star. Get the class name.
            set type pt.domains.ct.stars.CT[$_graph attrget $v -class]

            # Create the star
            debug "set $v \[java::new $type \$univ $type\]"
            set result [_send "set $v \[java::new $type \$univ $v\]"]
            debug " -> $result"

	    # Set its parameters.
	    # FIXME: Currently, we look at the case of the parameter
	    # to tell whether it is a parameter that is understood
	    # by the star. This is sooooo fragile...
	    foreach {attr val} [$_graph attrset $v] {
		if [string match {-[A-Z]*} $attr] {
		    debug "\$[set v] set[string trim $attr -] $val"
		    set result [_send \
			    "\$[set v] set[string trim $attr -] $val"]
		    debug " -> $result"
		}
	    }
        }
    }

    # Generate the edges
    foreach e [$_graph edges] {
        # If the edge is already done, forget it
        if [info exists done($e)] {
            continue
        }

        # Get the names etc
        set from [$_graph attrget $e -from]
        set fromname [join $from .]
        set to [$_graph attrget $e -to]
        set toname [join $to .]
        debug "$from -> $to"

        # If the input port is a junction, then it's part
        # of a complex net, and we ignore it for now
        if [string match {junction*} $from] {
            continue
        }

        # If, however, the output port is a junction, it must
        # be the first edge in set of junctions and edges
        # that form a relation. Create a new net, then traverse
        # the edges and junctions and link all connected ports.
        if [string match {junction*} $to] {
            # Create the relation
            set rname $to
            debug "set $rname \[\$univ newRelation $rname\]"
            set result [_send "set $rname \[\$univ newRelation $rname\]"]
            debug " -> $result"

            # Link the first edge (the only input!)
            set fromvertex [lindex $from 0]
            set fromport [lindex $from 1]
	    set fromport [lindex [split $fromport -] 0]

            debug "set $fromname \[\$[set fromvertex] getIOPort $fromport\]"
            set result [_send "set $fromname \[\$[set fromvertex] \
                    getIOPort $fromport\]"]
            debug " -> $result"

            debug "\$\{[set fromname]\} link \$[set rname]"
            set result [_send "\$\{[set fromname]\} link \$[set rname]"]
            debug " -> $result"

            # Find edges
            set es {}
            set js [list $to]
            while { $js != "" } {
                set j [lindex $js 0]
                set js [lreplace $js 0 0]
                foreach e [$_graph edges $j] {
                    # If the end is a junction, add to the list
                    set q [$_graph attrget $e -from]
                    set r [$_graph attrget $e -to]
                    if [string match {junction*} $r] {
                        lappend js $r
                    } else {
                        # Any other edges are output edges
                        lappend es $e
                    }
                }
            }

            # Link each output edge from the relation to its port
            foreach e $es {
                set to [$_graph attrget $e -to]
                set toname [join $to .]
                set tovertex [lindex $to 0]
                set toport [lindex $to 1]
		set toport [lindex [split $toport -] 0]

                debug "set $toname \[\$[set tovertex] getIOPort $toport\]"
                set result [_send "set $toname \[\$[set tovertex] \
                        getIOPort $toport\]"]
                debug " -> $result"

                debug "\$\{[set toname]\} link \$[set rname]"
                set result [_send "\$\{[set toname]\} link \$[set rname]"]
                debug " -> $result"
            }
            continue
        }
 
        # Otherwise, we are creating a simple link
        set fromvertex [lindex $from 0]
        set fromport [lindex $from 1]
	set fromport [lindex [split $fromport -] 0]

        set tovertex [lindex $to 0]
        set toport [lindex $to 1]
	set toport [lindex [split $toport -] 0]

        # Get the actual port names
        debug "set $fromname \[\$[set fromvertex] getIOPort $fromport\]"
        set result [_send "set $fromname \
            \[\$[set fromvertex] getIOPort $fromport\]"]
        debug " -> $result"

        debug "set $toname \[\$[set tovertex] getIOPort $toport\]"
        set result [_send "set $toname \[\$[set tovertex] getIOPort $toport\]"]
        debug " -> $result"

        # Make the connection, dude
        debug "set $e \[ \
            \$univ {connect \
            pt.kernel.IOPort pt.kernel.IOPort \
            String} \$\{[set fromname]\} \$\{[set toname]\} \
            $e\]"
        set result [_send "set $e \[ \
            \$univ {connect \
            pt.kernel.IOPort pt.kernel.IOPort \
            String} \$\{[set fromname]\} \$\{[set toname]\} \
            $e\]"]
        debug " -> $result"
    }
}
