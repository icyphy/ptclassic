##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


# We need to make sure that the simulation support package
# is loaded
package require tycho.util.ptsim

##########################################################################
#### CTSimulation
#
# Simulation controller for CT domain.
#
class ::tycho::CTSimulation {
    inherit ::tycho::Simulation

    constructor {args} {}
    destructor {}

    # Generate universe
    protected method fakeit {}
}

########################################################################
#### constructor
#
body ::tycho::CTSimulation::constructor {args} {
    # Initialize options
    eval configure $args

    # Create the universe
    _send {
	set univ [java::new pt.domains.ct.kernel.CTUniverse]
	$univ setName Universe
    }

    # Fake universe creation for now
    fakeit
}

########################################################################
#### fakeit
#
# Fake, it, baby!
#
body ::tycho::CTSimulation::fakeit {} {
    _send {
	set exec [$univ getExecutor]
	set const [java::new pt.domains.ct.stars.CTConst $univ Const]
	set add1 [java::new pt.domains.ct.stars.CTAdd $univ Add1]
	set add2 [java::new pt.domains.ct.stars.CTAdd $univ Add2]
	set intgl1 [java::new pt.domains.ct.stars.CTIntegraRK4 $univ Integral1]
	set intgl2 [java::new pt.domains.ct.stars.CTIntegraRK4 $univ Integral2]
	set gain1 [java::new pt.domains.ct.stars.CTGain $univ Gain1]
	set gain2 [java::new pt.domains.ct.stars.CTGain $univ Gain2]
	set gain3 [java::new pt.domains.ct.stars.CTGain $univ Gain3]
	set gain4 [java::new pt.domains.ct.stars.CTGain $univ Gain4]
	set plot [java::new pt.domains.ct.stars.CTPlot $univ Plot]

	set constout [$const getIOPort output]
	set add1in [$add1 getIOPort input]
	set add1out [$add1 getIOPort output]
	set add2in [$add2 getIOPort input]
	set add2out [$add2 getIOPort output]

	set intgl1in [$intgl1 getIOPort input]
	set intgl1out [$intgl1 getIOPort output]
	set intgl2in [$intgl2 getIOPort input]
	set intgl2out [$intgl2 getIOPort output]
	set gain1in [$gain1 getIOPort input]
	set gain1out [$gain1 getIOPort output]
	set gain2in [$gain2 getIOPort input]
	set gain2out [$gain2 getIOPort output]
	set gain3in [$gain3 getIOPort input]
	set gain3out [$gain3 getIOPort output]
	set gain4in [$gain4 getIOPort input]
	set gain4out [$gain4 getIOPort output]
	set plotin [$plot getIOPort input]

	set r1 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $constout $add1in R1]
	set r2 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $add1out $intgl1in R2]
	set r3 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $intgl1out $plotin R3]
	set r4 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $gain1out $add1in R4]
	$gain1in link $r3
	$gain2in link $r3
	set r5 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $gain2out $add2in R5]
	set r6 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $gain3out $add1in R6]
	set r7 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $add2out $intgl2in R7]
	set r8 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $intgl2out $gain3in R8]
	set r9 [$univ {connect pt.kernel.IOPort pt.kernel.IOPort String} $gain4out $add2in R9]
	$gain4in link $r8

	$exec setSimulationParams 0 500 0.5
	$const setValue 1
	$gain1 setGain -0.061803398874499
	$gain2 setGain 0.19021130325903
	$gain3 setGain -0.19021130325903
	$gain4 setGain -0.061803398874499
	$plot setYMin 0.0
	$plot setYMax 5.0
    }
}

