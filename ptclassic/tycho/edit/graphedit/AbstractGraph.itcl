# A graph data structure.
#
# @Author: $Id$ John Reekie, Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### AbstractGraph
#
# A graph is a collection of vertices and a collection of edges between
# vertices; _AbstractGraph_ provides the basic infrastructure needed
# to build a number of different types of graph. Subclasses extend
# this class by providing concrete methods for creating, modifying,
# and accessing specific types of graph.
#
# _AbstractGraph_ model has the following types:
# <dl>
# <dt><b>annotation</b> _name_
# <dd>
# An annotation to the graph. Annotations contain things like
# layout information and anything else specific to particular
# graph viewers and editors. The _name_ of the annotation is used
# to indicate what its purpose is. The contents of an annotation
# are completely arbitrary, and it is up to the particular editor
# responsible for creating an annotation to figure out useful ways
# of handling annotations. Annotations are used to work around
# the inability of the File class to handle more than one file.
#
# <dt><b>vertex</b> _name_
# <dd>
# A vertex of the graph. Vertices have no default attributes.
#
# </dl>
#
# Here are some examples illustrating the methods in this class.
# Because an AbstractGraph can't actually do anything useful, we'll
# illustrate with one of its concrete subclasses,
# <a href="Digraph.html">Digraph</a>. Note that this subclass encodes
# edge names by inserting the <b>^</b> character between the two
# connected vertices:
# <pre><tcl>
#     catch {delete object $graph}
#     set graph [::tycho::Digraph [::tycho::autoName graph]]
#     $graph type configure vertex -label {}
#     $graph type configure edge -weight 0
#     $graph parse {
#         vertex a -label "First vertex"
#         vertex b -label "Second vertex"
#         vertex c
#         edge a b
#         edge b c
#         edge a c -weight 3
#     }
#     $graph describe
# </tcl></pre>
#
# Change an attribute of an edge and query it again. Note that the
# _Digraph_ produces the name of an edge by joining the source
# and target vertices with a caret:
#
# Change an attribute of an edge and query it again:
# <pre><tcl>
#     $graph attrset a^b -weight 2
#     $graph attrget a^b -weight
# </tcl></pre>
#
# Display a TIM representation of the graph
# <pre><tcl>
#     $graph describe
# </tcl></pre>
#
# Get all vertices:
# <pre><tcl>
#     $graph vertices
# </tcl></pre>
#
# Get all edges:
# <pre><tcl>
#     $graph edges
# </tcl></pre>
#
# Get all edges starting at vertex a:
# <pre><tcl>
#     $graph edges a *
# </tcl></pre>
#
# Delete a vertex but not edges connected to it, and record the deletion:
# <pre><tcl>
#     $graph record delete c
#     $graph describe
# </tcl></pre>
#
# Undo the deletion:
# <pre><tcl>
#     $graph undo
#     $graph describe
# </tcl></pre>
#
# Delete a vertex and all edges connected to it:
# <pre><tcl>
#     $graph remove c
#     $graph describe
# </tcl></pre>
#
class ::tycho::AbstractGraph {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####
    
    ###################################################################
    ####                         public methods                    ####

    # Test if the graph is acyclic
    method acyclic {}

    # Return adjacency edges matching two vertex patterns
    method adjacency {{pattern1 *} {pattern2 *}}

    # Get the children of a vertex
    method children {vertex}

    # Perform a depth-first traversal of the graph
    method depthFirst {{roots {}}}

    # Perform a depth-sort of the graph
    method depthSort {}

    # Layout the vertices on a grid, better for tree-like graphs
    method gridLayout {}

    # Get the "leaves" of the graph
    method leaves {}

    # Get the parents of a vertex
    method parents {vertex}

    # Remove a vertex _and_ adjacent edges from the graph
    method remove {vertex}

    # Get the roots of the graph
    method roots {}

    # Return the topological sort of a graph
    method topologicalSort {{leaves {}}}

    # Traverse the graph: simple version
    method traverse1 {}

    # Traverse the graph: less simple version
    method traverse2 {}

    # Traverse the graph: recursive simulation
    method traverse3 {}

    # Return vertices matching a pattern
    method vertices {{pattern *}}

    #################################################################
    ####                   protected methods                     ####

    # Update the cache
    protected method _updatecache

    #################################################################
    ####                  protected variables                    ####

    # An array of cached lists of vertex parents
    protected variable _parents

    # An array of cached lists of vertex children
    protected variable _children

    # A cached list of vertex names
    protected variable _vertices ""

    # Array for "visited" flags for each vertex
    protected variable _visited

    #################################################################
    ####                     private methods                     ####

    # Grid layout auxiliary method
    private method _gridlayout {roots ymin}

    #################################################################
    ####                    private variables                    ####

    # Cached data containing results of various algorithms
    private variable _cache

    # Arrays used by various algorithms
    private variable _firstfree
    private variable _widthpos
    private variable _taken
    private variable _depth
}


###################################################################
#### constructor
#
body ::tycho::AbstractGraph::constructor {args} {
    # Evaluate options
    eval configure $args

    # Define the "annotation" entity
    define annotation \
	    :leafonly 1

    # Define the "vertex" entity
    define vertex \
	    :leafonly 1
}

###################################################################
###################################################################
####                      public methods                       ####

########################################################################
#### acyclic
#
# Test if the graph is acyclic. This is a based on Tarjan's
# algorithm for strongly-connected components (simplified a lot!).
# See Sedgewick.
#
body ::tycho::AbstractGraph::acyclic {} {
    _update

    # Don't traverse if we don't have to
    if { [::info exists _cache(acyclic)] } {
	return $_cache(acyclic)
    }

    # The mark for each vertex is initialized to 0
    foreach v $_vertices {
	set _visited($v) 0
    }

    # Initialize the traversal stack with the roots of the graph
    set stack [roots]
    
    # Initialize the vertex counter
    set count 0

    # A larger number than the counter can reach
    set N [expr [llength $_vertices] + 1]

    # Keep processing vertices until there are none left
    while { $stack != "" } {
	# Read the vertex on the top of the stack
	set current [lindex $stack end]

	switch -exact $_visited($current) {
	    "0" {
		# The vertex has not been seen, so mark it but leave
		# it on the stack
		incr count
		set _visited($current) $count
		
		# Check the children
		foreach child [children $current] {
		    if { ! $_visited($child) } {
			# If not seen, put it on the stack
			lappend stack $child
		    } else {
			# If its index is lower, we have a cycle
			if { $_visited($child) <= $count } {
			    set _cache(acyclic) 0
			    return 0
			}
		    }
		}
	    }
	    $N {
		# This vertex has already been processed, by some other
		# path through the graph. Remove it from the stack.
		set stack [lreplace $stack end end]
	    }
	    default {
		# This vertex is still on the stack. Remove
		# it from the stack and mark it as "done."
		set stack [lreplace $stack end end]
		set _visited($current) $N
	    }
	}
    }
    
    # If we get to here, we have no cycles
    set _cache(acyclic) 1
    return 1
}

########################################################################
#### adjacency
#
# Return a list containing the edges of the graph as represented in
# the adjacency matrix with source and target
# vertex names that match the given patterns. The result is a flat list
# of source-target pairs. If no arguments are
# supplied, return all edges.
#
# This is different from edges{} only if the edges are not connected
# from vertex to vertex -- see _KeyedDigraph_ for an example.
#
body ::tycho::AbstractGraph::adjacency {{pattern1 *} {pattern2 *}} {
    _update
    set result {}
    foreach v $_vertices {
        foreach c $_children($v) {
            if { [string match $pattern2 $c] } {
                lappend result $v $c
            }
        }
    }
    return $result
}

########################################################################
#### children
#
# Return the children of a vertex. An error will result
# if the vertex does not exist.
#
body ::tycho::AbstractGraph::children {vertex} {
    _update
    return $_children($vertex) 
}

########################################################################
#### depthFirst
#
# Perform a depth-first search of the graph and return the vertices
# in the order visited. This is a non-recursive implementation, and is
# adapted from Sedgewick, Chapter 29. The "stack" in this algorithm
# is a Tcl list, with the "top" of the stack being the _end_ of the list.
#
# If there is no argument, then the graph is assumed to a) be directed
# and b) have at least one root vertex (with no parents). The graph
# is searched from the root nodes. If an argument is supplied, then
# it must be a list of nodes from which to start searching. If nothing
# is known about the structure of the graph, then all vertices should be
# supplied, since that will guarantee that all vertices are reached.
#
# This method can be used to perform naive reachability, by giving
# a single vertex as argument and examining the result list.
#
body ::tycho::AbstractGraph::depthFirst {{roots {}}} {
    _update

    # If we already have it, just return it
    set cacheindex depthfirst,[join $roots -]
    if [::info exists _cache($cacheindex)] {
	return $_cache($cacheindex)
    }

    # The traversal "stack" and result list
    set stack {}
    set result {}

    # Initialize visited flags to 0
    foreach v $_vertices {
	set _visited($v) 0
    }

    # Push start vertices onto the stack
    if { $roots == "" } {
	set roots [roots]
    }
    set stack $roots

    # Keep looking until we run out of vertices
    while { $stack != "" } {
	# Get first on stack
	set current [lindex $stack end]
	set stack [lreplace $stack end end]

	# Remember it
	lappend result $current

	# Put each non-visited child onto the stack and mark it
	foreach child $_children($current) {
	    if { ! $_visited($child) } {
		lappend stack $child
		set _visited($child) 1
            }
        }
    }
    # Remember the search in case it's needed later
    set _cache($cacheindex) $result
    return $result
}

########################################################################
#### depthSort
#
# An adaptation of the topological sort routine (see 
# topologicalSort{} for more information). The returned list is
# a list consisting of the depth and the nodes at that depth.
# The list is sorted in order of increasing depth. The "depth"
# of a node is is distance from a root vertex. For example, roots
# are at level 0, children of roots are at level 1, and so 
# on.
#
# FIXME: If the graph is cyclic, the sort should break at
# a "backwards" edge.
#
body ::tycho::AbstractGraph::depthSort {} {
    _update

    # If we already have it, just return it
    if { [::info exists _cache(depthsort)] } {
	return $_cache(depthsort)
    }

    # The traversal "stack" and result list
    set stack {}
    set result {}

    # Initialize visited flags to 0 and depths to -1
    foreach v $_vertices {
	set _visited($v) 0
	set _depth($v) -1
    }

    # Push all leaves onto the stack. If there are none, use all
    # vertices.
    set stack [leaves]
    if { $stack == {} } {
	set stack [vertices]
    }
    
    # Keep looking until we run out of vertices
    while { $stack != "" } {
	# Read the vertex on the top of the stack
	set current [lindex $stack end]

	# Switch on the "visited" flag
	if { $_visited($current) == 0 } {
	    # The vertex has not been seen, so mark it but leave
	    # it on the stack
	    set _visited($current) 1
	    
	    # Put each unmarked parent onto the stack
	    foreach parent $_parents($current) {
		if { ! $_visited($parent) } {
		    lappend stack $parent
		}
	    }
	} elseif { $_visited($current) == 1 } {
	    # This vertex is still on the stack, and hasn't been
	    # processed by some other path through the graph. Remove
	    # it from the stack and mark it as "done."
	    set stack [lreplace $stack end end]
	    set _visited($current) -1
	    
	    # "Exit" processing is to get the depth of the parents,
	    # find the maximum, and add one to get the depth of 
	    # this node. This works even though the graph is acyclic
	    # because we have initialized the depth of each vertex to
	    # -1, and any vertex that completes a cycle will have
	    # a depth of -1. -- i.e. add one and you get zero!
	    set depth -1
	    foreach p $_parents($current) {
		if { $_depth($p) > $depth } {
		    set depth $_depth($p)
		}
	    }
	    incr depth
	    set _depth($current) $depth
	    lappend atlevel($depth) $current

	} else { ;# $_visited($current) == 1
	    # This vertex has already been processed, by some other
	    # path through the graph. Remove it from the stack.
	    set stack [lreplace $stack end end]
	}
    }
    # Sort the nodes into the depthsort
    foreach lv [lsort -integer [array names atlevel]] {
	lappend result $lv $atlevel($lv)
    }

    # Remember the result in case it's needed later
    set _cache(depthsort) $result

    return $result
}

########################################################################
#### gridLayout
#
# Lay-out the graph in a grid form. The returned result is a list
# of sub-lists, where each sub-list is a list of pairs being
# the vertex name and the "width-position" of the vertex.
#
# The cache is updated with a "widthpos" attribute, which could
# be used later for assigning positions to newly-added vertices.
# This data would have to be placed into a different array, though,
# since the cache is cleared when a new vertex is added.
#
body ::tycho::AbstractGraph::gridLayout {} {
    _update

    # If we already have it, just return it
    if { [::info exists _cache(gridlayout)] } {
        return $_cache(gridlayout)
    }
    # Make sure we have a depth-sort
    set depthsort [depthSort]

    # Initialize vertices
    foreach v $_vertices {
	set _widthpos($v) -1
        set _visited($v) 0
    }
    # Initialize the "firstfree" array
    foreach {d _} $depthsort {
        set _firstfree($d) 0
    }

    # Initialize the "taken" array
    catch {unset _taken}

    # Call _gridlayout with the roots of the graph
    # FIXME: What if the graph has no roots?
    _gridlayout [roots] 0

    # Assemble the result
    set result {}
    foreach {depth vertices} $depthsort {
	set r {}
	foreach v $vertices {
            lappend r $v $_widthpos($v)
	}
        lappend result $r
    }
    # Remember and return the result
    set _cache(gridlayout) $result

    return $result
}

########################################################################
#### leaves
#
# Return the "leaves" of the graph.
#
body ::tycho::AbstractGraph::leaves {} {
    _update

    set result {}
    foreach v $_vertices {
    	if { $_children($v) == "" } {
	    lappend result $v
	}
    }
    return $result
}

########################################################################
#### parents
#
# Return the parents of a vertex. An error will result
# if the vertex does not exist.
#
body ::tycho::AbstractGraph::parents {vertex} {
    _update
    return $_parents($vertex)
}

########################################################################
#### remove
#
# Delete a vertex and all connected edges from the graph, and
# return the undo command. <i>This is an abstract method.</i>
#
body ::tycho::AbstractGraph::remove {vertex} {
    abstractMethod remove
}

########################################################################
#### roots
#
# Return the roots of the graph.
#
body ::tycho::AbstractGraph::roots {} {
    _update

    set result {}
    foreach v $_vertices {
    	if { $_parents($v) == "" } {
	    lappend result $v
	}
    }
    return $result
}

########################################################################
#### topologicalSort
#
# Perform a topological sort of the graph and return the vertices
# in the order visited. This method works backwards through the graph starting
# with the "leaf" nodes. This is the same as the traverse3{}
# method, but traverses the graph backwards from the leaves.
# See traverse3{} for better comments.
# If an argument is supplied, this algorithm will return the sort
# of vertices from which vertices in that list can be reached.
#
# FIXME: If the graph is cyclic, the sort should break at
# a "backwards" edge.
#
body ::tycho::AbstractGraph::topologicalSort {{leaves {}}} {
    _update

    # If we already have it, just return it
    if { [::info exists _cache(topologicalsort)] } {
	return $_cache(topologicalsort)
    }

    # The traversal "stack" and result list
    set stack {}
    set result {}

    # Initialize visited flags to 0
    foreach v $_vertices {
	set _visited($v) 0
    }

    # Push all leaves onto the stack. If there are none, use all
    # vertices.
    if { $leaves == {} } {
	set leaves [leaves]
	if { $leaves == {} } {
	    set leaves [vertices]
	}
    }
    set stack $leaves
    
    # Keep looking until we run out of vertices
    while { $stack != "" } {
	# Read the vertex on the top of the stack
	set current [lindex $stack end]
	
	# Switch on the "visited" flag
	if { $_visited($current) == 0 } {
	    # The vertex has not been seen, so mark it but leave
	    # it on the stack
	    set _visited($current) 1
	    
	    # Put each unmarked parent onto the stack
	    foreach parent $_parents($current) {
		if { ! $_visited($parent) } {
		    lappend stack $parent
		}
	    }
	} elseif { $_visited($current) == 1 } {
	    # This vertex is still on the stack, and hasn't been
	    # processed by some other path through the graph. Remove
	    # it from the stack and mark it as "done."
	    set stack [lreplace $stack end end]
	    set _visited($current) -1
	    
	    # "Exit" processing is to append the vertex to the sort
	    lappend result $current
	    
	} else { ;# $_visited($current) == 1
	    # This vertex has already been processed, by some other
	    # path through the graph. Remove it from the stack.
	    set stack [lreplace $stack end end]
	}
    }
    # Remember and return the result
    set _cache(topologicalsort) $result

    return $result
}

########################################################################
#### traverse1
#
# Perform a depth-first search of the graph, and return nodes in the
# order visited. This is a non-recursive implementation adapted
# from Sedgewick, Chapter 29. The "stack" in this algorithm is a Tcl
# list, with the "top" of the stack being the _end_ of the list.
#
# This method illustrates the "simple" version of a non-recursive
# depth-first traversal. It is mainly intended to be an explanatory
# model for other graph algorithms. No caching is done in order to make
# timing measurements simpler. The method will not work on graphs
# with no roots.
#
body ::tycho::AbstractGraph::traverse1 {} {
    _update

    # The mark for each vertex is initialized to 0
    foreach v $_vertices {
	set _visited($v) 0
    }

    # Initialize the traversal stack with the roots of the graph
    set stack [roots]
    
    # Initialize the result to empty
    set result {}

    # Keep processing vertices until there are none left
    while { $stack != "" } {
	# Get a vertex off the top of the stack
	set current [lindex $stack end]
	set stack [lreplace $stack end end]
	
	# If we've already seen it, ignore it
	if { $_visited($current) } {
	    continue
	}
	
	# Mark the vertex
	set _visited($current) 1
	
	# Process the vertex here
	lappend result $current
	
	# Add the child vertices to the stack for processing
	eval lappend stack [children $current]
    }
    # Return the accumulated result
    return $result
}

########################################################################
#### traverse2
#
# This traversal is the same as traverse1{}, but marks vertices _before_
# they are placed on the stack. This saves having vertices pushed
# onto and taken back off the stack.  No caching is done in order to make
# timing measurements simpler. Preliminary timing indicates
# no performance improvement.
#
body ::tycho::AbstractGraph::traverse2 {} {
    _update
     
    # The mark for each vertex is initialized to 0
    foreach v $_vertices {
	set _visited($v) 0
    }

    # Initialize the traversal stack with the roots of the graph
    set stack [roots]
    foreach v $stack {
	set _visited($v) 1
    }

    # Initialize the result to empty
    set result {}

    # Keep processing vertices until there are none left
    while { $stack != "" } {
	# Get a vertex off the top of the stack
	set current [lindex $stack end]
	set stack [lreplace $stack end end]
	
	# Process the vertex here
	lappend result $current
	
	# Mark each non-visited child and place it onto the stack
	foreach child [children $current] {
	    if { ! $_visited($child) } {
		lappend stack $child
		set _visited($child) 1
	    }
	}
    }
    # Return the accumulated result
    return $result
}

########################################################################
#### traverse3
#
# Perform a depth-first search of the graph. This version of the
# depth-first traversal allows processing to be performed on
# "entering" _and_ "leaving" a vertex. The returned value is
# a list containing the vertex name on "entry" and a "!" before the
# vertex name on exit.
#
# Because this is a non-recursive implementation,
# we use an explicit "stack" to simulate the recursive call stack. Each
# vertex on the stack is marked as follows:
# <ol>
# <li>0: Not visited yet.
# <li>-1: Visited and processed
# <li>1: Visited but not yet processed.
# </ol>
#
# A vertex marked 1 is thus on the stack waiting for the "return
# from the recursive call" to place it into the result.
#
# This algorithm is a non-recursive adaptation of the reverse
# topological sort given in Chapter 32 of Sedgewick. It will work even
# if the graph is cyclic, although the returned list will then be
# some "approximation" of a sort.
#
# Again, this method is intended only as a model for implementation
# of other algorithms. It will not work on graphs with no roots.
# No caching is done in order to make timing measurements simpler.
# This method is substantially slower than the simpler methods, and
# should be used only when some processing is needed on "exit" from
# processing a vertex.
#
body ::tycho::AbstractGraph::traverse3 {} {
    _update

    # The mark for each vertex is initialized to 0
    foreach v $_vertices {
	set _visited($v) 0
    }

    # Initialize the traversal stack with the roots of the graph
    set stack [roots]
    
    # Initialize the result to empty
    set result {}

    # Keep processing vertices until there are none left
    while { $stack != "" } {
	# Read the vertex on the top of the stack
	set current [lindex $stack end]
	
	# Switch on the visited flag. For time-critical methods,
	# use if-statements instead, as they will be a little faster.
	switch -exact -- $_visited($current) {
	    "0" {
		# The vertex has not been seen, so mark it but leave
		# it on the stack
		set _visited($current) 1
		
		# This is where we do "entry" processing
		lappend result $current
		
		# Put each unmarked child onto the stack. Would this
		# algorithm be faster (and still work) if _all_
		# children were pushed onto the stack?
		foreach child [children $current] {
		    if { ! $_visited($child) } {
			lappend stack $child
		    }
		}
	    }
	    "1" {
		# This vertex is still on the stack, and hasn't been
		# processed by some other path through the graph. Remove
		# it from the stack and mark it as "done."
		set stack [lreplace $stack end end]
		set _visited($current) -1
		
		# Here is where we do "exit" processing
		lappend result !$current
	    }
	    "-1" {
		# This vertex has already been processed, by some other
		# path through the graph. Remove it from the stack,
		# but don't do anything else with it.
		set stack [lreplace $stack end end]
	    }
	}
    }
    # Return the result
    return $result
}

########################################################################
#### vertices
#
# Return a list containing the vertices of the graph whose names match 
# a pattern. If the pattern is not given, all vertices are returned.
#
body ::tycho::AbstractGraph::vertices {{pattern *}} {
    if { $pattern == "*" } {
        match vertex
    } else {
        set result ""
        foreach vertex [names vertex:$pattern] {
            lappend result [lindex [split $vertex :] 1]
        }
        return $result
    }
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _gridlayout
#
body ::tycho::AbstractGraph::_gridlayout {roots ymin} {
    set result {}
    # NOTE: Assume no graph with more than a million nodes.
    set firstpos 1000000
    set lastpos 0

    foreach v $roots {
        # If it's already visited, we're in a cycle, so forget it
        if { $_visited($v) } {
            continue
        }
        set _visited($v) 1

        # Get the depth of the current node.
        set depth $_depth($v)

        # Get the width position
        set wpos $_widthpos($v)

        # If it does not already have a position, give it one.
        if {$wpos == -1} {
            # Set a minimum position (ff)
            set ff $_firstfree($depth)

            # Make sure the minimum position is not less than ymin.
            if {$ymin > $ff} {
                set ff $ymin
            }
            set children $_children($v)
            if {$children != {}} {
                # Get the top and bottom positions of the children
                set range [_gridlayout $children $ff]
                # Only make this choice here if the children
                # were not all visited nodes
                if { $range != "" } {
                    # Choose the average as the preferred position
                    set desired [expr \
                            ([lindex $range 0]+[lindex $range 1])/2]
                    # If desired position is greater than minimum, use it.
                    if {$desired > $ymin} {
                        set wpos $desired
                    } else {
                        set wpos $ymin
                    }
                } else {
                    set wpos $ff
                }
            } else {
                set wpos $ff
            }
            # Avoid levels that are already taken.
            while { [::info exists _taken($depth,$wpos)] } {
                incr wpos
            }
            # Mark the position taken.
            set _widthpos($v) $wpos
            set _taken($depth,$wpos) 1
            set _firstfree($depth) [expr $wpos+1]
        }
        if {$wpos < $firstpos} {set firstpos $wpos}
        if {$wpos > $lastpos} {set lastpos $wpos}
        set result [list $firstpos $lastpos]
    }
    return $result
}

########################################################################
#### _updatecache
#
# Clear the cache.
#
body ::tycho::AbstractGraph::_updatecache {} {
    catch {unset _parents}
    catch {unset _children}
    catch {unset _vertices}
    catch {unset _cache}
}
