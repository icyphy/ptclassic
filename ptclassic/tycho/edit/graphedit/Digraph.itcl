##########################################################################
# Version: $Id$
# Author: Edward A. Lee, John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Digraph
#
# The _Digraph_ model is a standard directed graph.  It extends the
# _AbstractGraph_ superclass with concrete methods for a number
# of common algorithms on directed graphs.
#
# _Digraph_ adds the following types to those inherited
# from _AbstractGraph_:
# <dl>
# <dt><b>edge</b> _name_
# <dd>
# An edge between two ports. The name of an edge is formed from the
# vertices it connects:
# <b>edge:</b>_v1_<b>^</b>_v2_, where _v1_ and _v2_
# are the source and target vertices. The external (TIM) format is
# a little friendlier,
# and represents an edge as <b>edge</b> _v1_ _v2_.
# Edges have no default attributes.
#
# </dl>
#
# When constructed,  edges do not require that vertices
# already exist, as this can occur when graphs are automatically
# generated; once all vertices and edges have been added, the graph
# can be checked for correctness and "repaired" with the verify{}
# and repair{} methods. It also makes graph construction somewhat
# faster as there is less error-checking.
#
# Here are some examples of its use; see <a 
# href="AbstractGraph">AbstractGraph</a> for examples of
# the basics of graph construction. First, create a graph
# that looks like this:
# <pre>
#   d----+
#        v
#   a--->b&lt;==>c
#   |         ^
#   +---------+
# </pre>
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::Digraph [::tycho::autoName graph]]
#     $graph parse {
#         vertex a
#         vertex b
#         vertex c
#         vertex d
#         edge a b
#         edge b c
#         edge a c
#         edge c b
#         edge d b
#     }
#     $graph describe
# </tcl></pre>
#
# Get the children of a vertex:
# <pre><tcl>
#     $graph children a
# </tcl></pre>
#
# Get the parents of a vertex:
# <pre><tcl>
#     $graph parents b
# </tcl></pre>
#
# Test if the graph is acyclic:
# <pre><tcl>
#     $graph acyclic
# </tcl></pre>
#
# Get the roots of the graph:
# <pre><tcl>
#     $graph roots
# </tcl></pre>
#
# Get the topological sort of the graph:
# <pre><tcl>
#     $graph topologicalSort
# </tcl></pre>
#
# Get a depth-sort of the graph:
# <pre><tcl>
#     $graph depthSort
# </tcl></pre>
#
# Get the graph in a grid layout (Not working!):
# <pre><tcl>
#     $graph gridLayout
# </tcl></pre>
#
class ::tycho::Digraph {
    inherit ::tycho::AbstractGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Return edges matching a pair of connection patterns
    method edges {{pattern1 *} {pattern2 *}}

    # Remove a vertex _and_ adjacent edges from the graph
    method remove {vertex}

    # "Repair" a graph by deleting improperly-connected edges
    method repair {}

    # Get the edges within a subgraph
    method subgraphEdges {args}

    # Get the input edges to a subgraph
    method subgraphInputs {args}

    # Get the output edges from a subgraph
    method subgraphOutputs {args}

    # Test whether a graph is correctly constructed
    method verify {}

    #################################################################
    ####                   protected methods                     ####

    # Add an edge
    protected method _addedge {vertex1 vertex2 args}

    # Return a description of an edge
    protected method _describeedge {name {prefix {}}}

    # Update the cache
    protected method _updatecache
}

########################################################################
#### constructor
#
body ::tycho::Digraph::constructor {args} {
    # Evaluate options
    eval configure $args

    # Define the "edge" type
    type define edge \
            :override 1 \
            :leafonly 1
}

########################################################################
#### edges
#
# Return a list containing the edges of the graph that match the
# given patterns, where _vertex1_ and _vertex2 are the source and
# target vertices. The returned list alternates source and target
# vertex names (note: not item names such as <code>edge:a^b</code>).
#
body ::tycho::Digraph::edges {{vertex1 *} {vertex2 *}} {
    set result {}
    foreach edge [names edge:$vertex1^$vertex2] {
        eval lappend result [lrange [split $edge :^] 1 2]
    }
    return $result
}

########################################################################
#### repair
#
# "Repair" a graph by deleting improperly-connected edges.
# Append to the history if recording.
#
body ::tycho::Digraph::repair {} {
    mark set temp
    foreach edge [names edge:*] {
        set splat [split $edge :^]
        set src [lindex $splat 1]
        set tgt [lindex $splat 2]

        if { ![exists vertex:$src] || ![exists vertex:$tgt] } {
            # Delete a disconnected edge
            delete edge:$src^$tgt
        }
    }
    if $recording {
        history compact temp current
    }
}

########################################################################
#### remove
#
# Delete a vertex and all connected edges from the graph, recording
# commands if the recording flag is set.
#
body ::tycho::Digraph::remove {vertex} {
    if ![exists vertex:$vertex] {
        error "Unknown vertex: \"$vertex\""
    }
    # Mark the history
	mark set temp

    # Delete outward edges
    foreach edge [names edge:$vertex^*] {
        delete $edge
    }
    # Delete inward edges
    foreach edge [names edge:*^$vertex] {
        delete $edge
    }
    # Delete the vertex
    delete vertex:$vertex

    # Compact the history
    if $recording {
        history compact temp current
    }
}

########################################################################
#### subgraphEdges
#
# Return the edges within the sub-graph given by the arguments. Each
# argument is the short name of a vertex.
#
body ::tycho::Digraph::subgraphEdges {args} {
    set result {}
    foreach u $args {
        foreach v $args {
            eval lappend result [names edge:$u^$v] 
        }
    }
    return $result
}

########################################################################
#### subgraphInputs
#
# Return the input edges to a sub-graph. Each
# argument is the short name of a vertex.
#
body ::tycho::Digraph::subgraphInputs {args} {
    set result {}
    foreach v $args {
        foreach edge [names edge:*^$v] {
            if { [lsearch -exact $args [lindex [split $edge :^] 1]] < 0 } {
                lappend result $edge
            }
        }
    }
    return $result
}

########################################################################
#### subgraphOutputs
#
# Return the output edges from a sub-graph. Each
# argument is the short name of a vertex.
#
body ::tycho::Digraph::subgraphOutputs {args} {
    _update
    set result {}
    foreach v $args {
        foreach edge [names edge:$v^*] {
            if { [lsearch -exact $args [lindex [split $edge :^] 2]] < 0 } {
                lappend result $edge
            }
        }
    }
    return $result
}

########################################################################
#### verify
#
# Test whether a graph is properly constructed. This method
# provides a default implementation that tests for invalid edges; however,
# subclasses may choose to override this method for efficiency, because
# it doesn't work with the subclass, or to perform additional tests.
#
body ::tycho::Digraph::verify {} {
    foreach edge [names edge:*] {
        set splat [split $edge :^]
        set src [lindex $splat 1]
        set tgt [lindex $splat 2]
        
        if { ![exists vertex:$src] || ![exists vertex:$tgt] } {
            return 0
        }
    }
    return 1
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _addedge
#
# Add an edge.
#
body ::tycho::Digraph::_addedge {vertex1 vertex2 args} {
    eval add edge:$vertex1^$vertex2 $args
}

########################################################################
#### _describeedge
#
# Return a string describing an edge.
#
body ::tycho::Digraph::_describeedge {name {prefix {}}} {
    return "${prefix}edge [lrange [split $name :^] 1 2] [assign $name]\n"
}

########################################################################
#### _updatecache
#
# Clear the cache and build updated versions of the _parents,
# _children, _edges and _vertices arrays.
#
body ::tycho::Digraph::_updatecache {} {
    # Do superclass first
    chain

    # Regenerate vertex list
    foreach vertex [names vertex:*] {
        set vertex [lindex [split $vertex :] 1]
        lappend _vertices $vertex
        set _parents($vertex) {}
        set _children($vertex) {}
    }
    # Regenerate parent-children
    foreach edge [names edge:*] {
        set splat [split $edge :^]
        set src [lindex $splat 1]
        set tgt [lindex $splat 2]

        lappend _children($src) $tgt
        lappend _parents($tgt) $src
    }
    # Validate cache
    cache validate
}
