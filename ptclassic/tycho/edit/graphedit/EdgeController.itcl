##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### EdgeController
#
# _EdgeController_ is a controller object used by the
# _DFGEditor_ view. It is responsible for managing edges of
# the graph.
#
class ::tycho::EdgeController {
    inherit ::tycho::ViewController
    
    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The corresponding vertex controller
    public variable vertexcontroller ""
	
    #################################################################
    ####                     public methods                      ####

    # Get the drag-dropper
    method _dropper {} {return $_dropper}

    # Get the edge-splitting drag-dropper
    method _splitter {} {return $_splitter}

    # Process a click event
    method click {id x y}

    # Configure the context-sensitive popup menu
    method configurePopup {name}

    # Delete an edge
    method delete {name}

    # Disconnect an edge
    method disconnect {edge end}

    # Process a motion event
    method drag {id x y}
 
    # Initialize the popup menu
    method initPopup {name}

    # Test if a junction will accept a connection
    method junctionaccepts {name id tag}

    # Find the closest available junction point.
    method junctionnearest {name id x y}

    # Redraw an edge
    method redraw {edge end}

    # Process a release event
    method release {args}

    # Test for a source for making a connection
    method trysource {id}

    # Test for a target for making a connection
    method trytarget {id}
    
    #################################################################
    ####                  protected methods                      ####

    # Reset all variables
    protected method _cleanup {}

    # Start connection: grapple
    protected method _initdrag:edge {x y}

    # Start connection: grapple
    protected method _initdrag:grapple {x y}

    # Start connection: junction
    protected method _initdrag:junction {x y}

    # Start connection: terminal
    protected method _initdrag:terminal {x y}

    #################################################################
    ####                 protected variables                     ####
    
    # The aspect of the edge being worked on
    protected variable _aspect

    # The direction we are connecting in
    protected variable _direction

    # The interactor to connect edges
    protected variable _dropper

    # The aspect we are connecting at
    protected variable _connectat

    # The name of the edge being worked on
    protected variable _edgename ""

    # The line item representing the edge being worked on
    protected variable _edgeitem ""

    # The current grapple, if any
    protected variable _grapple ""

    # The initial x
    protected variable _initx

    # The initial y
    protected variable _inity

    # The mode we are currently drag-dropping in
    protected variable _mode "idle"

    # Set if we are currently moving
    protected variable _moving 0

    # The previous x
    protected variable _prevx

    # The previous y
    protected variable _prevy

    # The interactor to split edges
    protected variable _splitter

    # Eligible tags of the "to" terminal
    protected variable _totags ""

    # The targetted terminal
    protected variable _target ""
}

########################################################################
#### constructor
#
body ::tycho::EdgeController::constructor {args} {
    # Evaluate options
    eval configure $args

    # This DragDropper is used to create new edges from
    # terminals and junctions, and disconnect edges
    set _dropper [$slate interactor DragDropper]
    $_dropper bind input
    $_dropper bind output
    $_dropper configure \
	    -sourcehalo 2 \
	    -targethalo 6 \
	    -targettags {input output junction} \
            -sourcepredicate "$this trysource" \
            -targetpredicate "$this trytarget" \
	    -activatecommand "$this click" \
	    -dragcommand "$this drag" \
	    -deactivatecommand "$this release"

    # This DragDropper is used to split edges
    set _splitter [$slate interactor DragDropper]
    $_splitter configure \
	    -startwhen distance \
	    -sourcehalo 6 \
	    -targethalo 6 \
	    -targettags {input output junction} \
            -targetpredicate "$this trytarget" \
	    -activatecommand "$this click" \
	    -dragcommand "$this drag" \
	    -deactivatecommand "$this release"
}

########################################################################
#### click
#
# Process the click event from either drag-_dropper.
#
body ::tycho::EdgeController::click {id x y} {
    # puts "click [$slate type $id] ([$slate gettags $id]) $id $x $y"

    set _initx $x
    set _inity $y
    
    # Figure out what are clicking on
    if [$slate hastag $id "grapple"] {
        set _mode grapple
    } elseif [$slate hastag $id "edge"] {
        set _mode "edge"
    } elseif [$slate hastag $id "junction"] {
        set _mode "junction"
    } else {
        set _mode "terminal"
    }
    # Process according to mode
    switch -exact $_mode {
        "terminal" {
            # Set up to create a new line. Clear the selection
            $slateview select clear
        }
        "grapple" {
            # Remember the grapple
            set _grapple $id

            # Unhighlight it
            $slate unhighlight $id
        }
        "edge" {
            # Set up to create a new line. Clear the selection
            $slateview select clear
        }
        "junction" {
            # Set up to create a new line. Clear the selection
            $slateview select clear
        }
    }
    # Mark the histories so that it can be compacted later
    $graph mark set edge
    $layout mark set edge
}

#########################################################################
#### configurePopup
#
# Initialize the context-sensitive pop-up menu. 
#
body ::tycho::EdgeController::configurePopup {name} {
    set e [$slateview find withtag current]
    puts "Over edge $e"

    # Rebuild the terminal style cascade menu
    
}

########################################################################
#### delete
#
# Delete an edge and net by name
#
body ::tycho::EdgeController::delete {edge} {
    # Delete grapples
    set id [slateid $edge]
    $slate delete grapple.$id

    # Delete the edge, making sure it's clean first
    $layout clean $edge
    $layout publish delete $edge
    $graph publish delete $edge

    # Notify views that the data has modified
    $layout notify event "modified"
    $graph notify event "modified"
}

########################################################################
#### disconnect
#
# Disconnect an edge, given its name. The _end_ argument is
# either "-from" or "-to," giving the end of the edge to
# disconnect. The edge is moved ten pixels away from the
# previous connection point, and a sticky grapple is added
# to the disconnected end.
#
body ::tycho::EdgeController::disconnect {edge end} {
    set edgeitem [slateid $edge]
    set term [$graph attrget $edge $end]
    set termitem [slateid $term]
    set termaspect [$slate itemcget $edgeitem ${end}aspect]

    # Disconnect
    $graph publish attrset $edge $end {}
    
    # Move the end of the edge
    if { $end == "-from" } {
	set aspect "start"
    } else {
	set aspect "end"
    }
    set point [$slate aspect $termitem $termaspect]
    if [$slate hastag $termitem "junction"] {
        set dirn $termaspect
    } else {
        set dirn  [$slate itemcget $termitem -direction]
    }
    set vector [::tycho::Shape::compassToVector $dirn]
    set x [expr [lindex $point 0] + 10 * [lindex $vector 0]]
    set y [expr [lindex $point 1] + 10 * [lindex $vector 1]]
    $slate reshapeto $edgeitem $x $y $aspect
    
    # Place a sticky grapple on the end
    $slate grapple $edgeitem -interactor $_dropper -aspects $aspect
    $slate itemconfigure "$aspect.$edgeitem" -sticky 1

    # Tag the edge if it is completely disconnected
    if { [$graph attrget $edge -from] == "" && \
	    [$graph attrget $edge -to] == "" } {
	$slate addtag disconnected withtag $edgeitem
    }
}

########################################################################
#### drag
#
# Move the end of the new edge. If the line item does not exist, then
# this is the first drag call, so call begin{} to create the line.
# If the _item_ argument is null, then we are not over a suitable
# terminal item, so just move the end of the line. If _item_ is not
# null, then we are over an input terminal, so move the end of the
# line to the right connection point.
#
body ::tycho::EdgeController::drag {id x y} {
    # puts [list drag $id $x $y]

    # If this is the first time, call for initial processing
    if !$_moving {
        _initdrag:$_mode $x $y
        set _moving 1
    }
    # Remember the target item for release{}
    set _target $id

    if { $id == "" } {
	# The drag-dropper is not over a target: move
        # start/end point and grapple
	$slate reshapeto $_edgeitem $x $y $_aspect
        if { $_grapple != "" } {
            $slate moveto $_grapple $x $y center
        }
    } else {
	# We are over a target: move start/end point to connection point
        if [$slate hastag $id "junction"] {
            set _connectat [junctionnearest [itemname $id] $id $x $y]
            set _direction $_connectat
        } else {
            set _connectat "terminal"
            set _direction [$slate itemcget $id -direction]
        }
	set coords [$slate aspect $id $_connectat]
	eval $slate reshapeto $_edgeitem $coords $_aspect

	# Change the end direction of the line 
        if { $_aspect == "end" } {
            set _direction [::tycho::Shape::compass $_direction "rev"]
        }
	$slate itemconfigure $_edgeitem -$_aspect $_direction

        # Move the grapple
        if { $_grapple != "" } {
            eval $slate moveto $_grapple $coords center
        }
    }
    # Rehighlight the edge if it is highlighted
    if { [$slate find withtag highlight.$_edgeitem] != "" } {
        $slate highlight $_edgeitem
    }
}

########################################################################
#### initPopup
#
# Initialise popup menu for edges.
#
body ::tycho::EdgeController::initPopup {name} {
    $slateview popup add $name cascade debug -label "Debug"
    $slateview popup add $name command describeItem debug \
	    -command "::tycho::post \[$slateview describe graph current\]" \
	    -label "Describe item"
    $slateview popup add $name command describeLayout debug \
	    -command "::tycho::post \[$slateview describe layout current\]" \
	    -label "Describe layout"
}

########################################################################
#### junctionaccepts
#
# Test if a junction will accept a connection.
#
body ::tycho::EdgeController::junctionaccepts {name id tag} {
    # puts "junctionaccepts $name $id $tag"

    set inputs [$graph edges * $name]
    set outputs [$graph edges $name]
    if { $tag == "input" } {
	# An input connection can be made if there are no
	# input connections and no more than three output connections.
	expr {[llength $inputs] == 0 && [llength $outputs] <= 3}
    } elseif { $tag == "output" } {
	# An output connection can be made if there are no more
	# than two output connections
	expr {[llength $outputs] <= 2}
    }
}

########################################################################
#### junctionnearest
#
# Find the nearest available connection point on a junction.
# Assumes there is at least one.
#
body ::tycho::EdgeController::junctionnearest {name id x y} {
    # puts "junctionnearest $id $x $y"

    # Find connected aspects
    set used {}
    foreach edge [$graph edges $name] {
        lappend used [$slate itemcget [slateid $edge] -fromaspect]
    } 
    foreach edge [$graph edges * $name] {
        lappend used [$slate itemcget [slateid $edge] -toaspect]
    }

    set nearest n
    set metric -1
    foreach aspect [::tycho::lsubtract {n s e w} $used] {
        set xy [$slate aspect $id $aspect]
        set x0 [lindex $xy 0]
        set y0 [lindex $xy 1]
        set m [expr pow($x-$x0, 2) + pow($y-$y0, 2)]
        if { $metric < 0 || $m < $metric } {
            set metric $m
            set nearest $aspect
        }
    }
    return $nearest
}

########################################################################
#### redraw
#
# Redraw an edge, given its name. The _end_ argument is
# either "-from" or "-to," giving the end of the edge that
# has changed. The edge is redrawn so that the end point is
# in the correct position for a connected terminal.
#
body ::tycho::EdgeController::redraw {edge end} {
    set edgeitem [slateid $edge]
    set term [$graph attrget $edge $end]
    set id [slateid $term]

    if [$slate hastag $id "junction"] {
        set connectat [junctionnearest [itemname $id] $id $x $y]
        set direction $_connectat
    } else {
        set connectat "terminal"
        set direction [$slate itemcget $id -direction]
    }
    if { $end == "-from" } {
	set aspect "start"
    } else {
	set aspect "end"
    }
    set coords [$slate aspect $id $connectat]
    eval $slate reshapeto $edgeitem $coords $aspect

    # Change the end direction of the line 
    if { $aspect == "end" } {
        set direction [::tycho::Shape::compass $direction "rev"]
    }
    $slate itemconfigure $edgeitem -$aspect $direction
}

########################################################################
#### release
#
# Release the item, making a connection in the graph if
# appropriate. If the edge is not connected, a sticky grapple
# is left on the disconnected end.
#
body ::tycho::EdgeController::release {args} {
    # puts "release $args ($_moving)"
    if !$_moving {
        # The mouse hasn't moved
        _cleanup
        return
    }
    if { $_target == "" } {
        # The line is not connected. Leave it, and make the grapple sticky
        if { $_grapple != "" } {
            $slate itemconfigure $_grapple -sticky 1

            # Tag the edge if it is completely disconnected
            if { [$graph attrget $_edgename -from] == "" && \
                    [$graph attrget $_edgename -to] == "" } {
                $slate addtag disconnected withtag $_edgeitem
            }
        } else {
            $slateview select add $_edgeitem
            $slate itemconfigure "$_aspect.$_edgeitem" -sticky 1
        }
    } else {
        # The line is connected. If there's a grapple, make it unsticky
        if { $_grapple != "" } {
            $slate itemconfigure $_grapple -sticky 0
        }
        # Make it the current selection
        $slateview select add $_edgeitem

        # Remove the disconnected tag
        $slate dtag $_edgeitem disconnected

        # Set the -from or -to attribute of the edge
        if { $_aspect == "end" } {
            $graph publish attrset $_edgename -to [itemname $_target]
            $layout publish attrset $_edgename -toaspect $_connectat
        } else {
            $graph publish attrset $_edgename -from [itemname $_target]
            $layout publish attrset $_edgename -fromaspect $_connectat
        }
	# The graph has been modified (I think...), so notify any
	# subscriber to the graph
	$graph notify event "modified"
    }
    # Force the edge to be "dirty", so that saving works properly
    $layout dirty $_edgename

    _cleanup

    # Compact the histories
    $layout history compact edge current
    $graph history compact edge current

    # If we get to here then the edge has moved, even
    # if the graph hasn't changed, so notify any views subscribed
    # to the layout
    $layout notify event "modified"
}

########################################################################
#### trysource
#
# Test if an item is a valid candidate for starting a new connection.
# This method looks at the connectedness of the item.
#
body ::tycho::EdgeController::trysource {id} {
    # puts "trysource $id"
    set name [itemname $id]

    # See if we're already dragging something. This is needed to
    # prevent a grapple that is being dragged from rehighlighting
    # if the cursor moves ahead of it.
    if { $_edgename != "" } {
        return 0
    }
    
    # Test the connectedness of the item
    set edges [concat [$graph edges $name] [$graph edges * $name]]
    set conn [llength $edges]
    if [$slate hastag $id "junction"] {
    	# Junctions have a connectivity of 4
    	expr {$conn < 4}
    } else {
    	# Terminals have a connectivity of 1
    	expr {$conn < 1}
    }
}

########################################################################
#### trytarget
#
# Test if an item is a valid candidate for terminating a new connection.
# This method looks at the tags and the connectivity of the item.
#
body ::tycho::EdgeController::trytarget {id} {
    # Make sure we're currently trying to connect
    if { $_totags == "" } {
        return 0
    }
    set name [itemname $id]

    # Treat junctions specially
    if [$slate hastag $id "junction"] {
        # Try junctions
        junctionaccepts $name $id $_totags
    } else {
        # We can connect if the item has the target tag
        if [$slate hastag $id $_totags] {
            # Terminals have a connectivity of 1
            set edges [concat [$graph edges $name] [$graph edges * $name]]
            set conn [llength $edges]
            expr {$conn < 1}
        } else {
            return 0
        }
    }
}

###################################################################
###################################################################
####                      protected methods                    ####

########################################################################
#### _cleanup
#
body ::tycho::EdgeController::_cleanup {} {
    set _aspect ""
    set _edgename ""
    set _edgeitem ""
    set _grapple ""
    set _mode "idle"
    set _moving 0
    set _totags {}
    set _target ""
}

########################################################################
#### _initdrag:edge
#
body ::tycho::EdgeController::_initdrag:edge {x y} {
    set edgeitem1 [$slate find withtag current]
    set edgename1 [itemname $edgeitem1]
    
    # Get a unique junction name
    set junctionname [$graph uniqueid junction]
    
    # Create the junction item
    set coords [$slate coords [$slate primary $edgeitem1]]
    set point [::tycho::Line::nearest $coords $_initx $_inity]
    $layout publish add item $junctionname \
            -slatetype Junction \
            -coords $point \
            -tags "junction"
    set junctionitem [slateid $junctionname]

    # Create the junction vertex
    $graph publish add vertex $junctionname

    # Get two unique edge names
    set edgename2 [$graph uniqueid edge]
    set _edgename [$graph uniqueid edge]

    # Split the edge: get coordinates
    set out [eval ::tycho::Line::direction [list $coords] $point]
    set in [::tycho::Shape::compass $out rev]
    set start1 [$slate aspect $edgeitem1 start]
    set end1 [$slate aspect $junctionitem $in]
    set start2 [$slate aspect $junctionitem $out]
    set end2 [$slate aspect $edgeitem1 end]

    # Add the new edge
    $graph publish add edge $edgename2 \
	    -from $junctionname \
	    -to [$graph attrget $edgename1 -to]
    $layout publish add item $edgename2 \
	    -slatetype Net \
	    -coords [concat $start2 $end2] \
            -start $out \
            -end [$slate itemcget $edgeitem1 -end] \
            -fromaspect $out \
            -tags "edge"
    
    # Modify the old edge
    $graph publish attrset $edgename1 -to $junctionname
    set x0 [lindex $end2 0]
    set y0 [lindex $end2 0]

    $layout publish reshape $edgename1 \
            [expr [lindex $end1 0] - [lindex $end2 0]] \
            [expr [lindex $end1 1] - [lindex $end2 1]] \
            end

    $layout publish attrset $edgename1 \
            -end $out \
            -toaspect $in

    # Create the new edge which is being drawn. Find the point to join
    if { $out == "w" || $out == "e" } {
        if { $y < $_inity } {
            set joinat "n"
        } else {
            set joinat "s"
        }
    } else {
           if { $x < $_initx } {
            set joinat "w"
        } else {
            set joinat "e"
        }
    }
    # Now create the edge
    $graph publish add edge $_edgename -from $junctionname
    $layout publish add item $_edgename \
            -slatetype Net \
            -coords [concat [$slate aspect $junctionitem $joinat] $x $y] \
            -start $joinat \
            -end $joinat \
            -fromaspect $joinat \
            -tags "edge"

    set _aspect "end"
    set _edgeitem [slateid $_edgename]
    set _totags "input"
}

########################################################################
#### _initdrag:grapple
#
body ::tycho::EdgeController::_initdrag:grapple {x y} {
    set _edgeitem [$slate itemcget $_grapple -item]
    set _edgename [itemname $_edgeitem]

    # Set up variables for drag-dropping
    set _aspect [$slate itemcget $_grapple -aspect]
    if { $_aspect == "start" } {
        set _totags "output"
	set end "from"
    } else {
        set _totags "input"
	set end "to"
    }     
    # Disconnect the edge
    $graph publish attrset $_edgename -$end ""
    $layout publish attrset $_edgename -${end}aspect ""
}

########################################################################
#### _initdrag:junction
#
body ::tycho::EdgeController::_initdrag:junction {x y} {
    set id [$slate find withtag "current"]
    set name [itemname $id]

    # Find the closest free terminal
    set connectat [junctionnearest $name $id $x $y]
    
    # Make an output connection always.
    set end "from"
    set _aspect end
    set _totags input
    set coords [concat [$slate aspect $id $connectat] $x $y]       

    # Get a unique name for the edge/net
    set _edgename [$graph uniqueid edge]
    
    # Create the new edge
    $graph publish add edge $_edgename -from $name

    # Create the new net
    $layout publish add item $_edgename \
            -slatetype Net \
            -coords $coords \
            -start $connectat \
            -end $connectat \
            -tags "edge"
    set _edgeitem [slateid $_edgename]
}

########################################################################
#### _initdrag:terminal
#
body ::tycho::EdgeController::_initdrag:terminal {x y} {
    set source [$slate find withtag "current"]

    # The "direction" of the terminal
    set dir [$slate itemcget $source -direction]

    # Set variables according to whether we are connecting from an
    # output or input
    if [$slate hastag $source "output"] {
    	set end "from"
        set _aspect end
        set _totags input
        set coords [concat [$slate aspect $source terminal] $x $y]       
    } else {
    	set end "to"
        set _aspect start
        set _totags output
        set coords [concat $x $y [$slate aspect $source terminal]]
        set dir [::tycho::Shape::compass $dir "rev"]
    }
    # Get a unique name for the edge/net
    set _edgename [$graph uniqueid edge]
    
    # Create the new edge
    $graph publish add edge $_edgename -$end [itemname $source]

    # Create the new net
    $layout publish add item $_edgename \
            -slatetype Net \
            -coords $coords \
            -start $dir \
            -end $dir \
            -tags "edge"
    set _edgeitem [slateid $_edgename]
}
