##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### EditGraph
#
# _EditGraph_ is an editor for the _GraphLayout_ model. It edits
# directed graphs.
#
class ::tycho::EditGraph {
    inherit ::tycho::TCanvas

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The layout model
    itk_option define -layout layout Layout {}
    
    # The graph model
    itk_option define -graph graph Graph {}
    
    # The icon index
    itk_option define -icons icons Icons {}
    
    #################################################################
    ####                     public methods                      ####

    # Remove an item from the selection
    method deselect {id}

    # Load a new layout
    method loadLayout {}

    # Add a vertex to the selection
    method select {id}

    # Clear the selection
    method selectionclear {}

    # Create another editor.
    method clone {}

    # Start creating a new edge
    method newclick {item x y}

    # Continue move the end of the new edge
    method newdrag {item x y}

    # Stop moving a new edge
    method newrelease {x y}

    # Handle change notification from the graph layout model
    method notify {method args}

    # Move mouse over a port
    method portenter {}

    # Move mouse away from a port
    method portleave {}

    # Redo the most recent command
    method redo {}

    # Run as a Ptolemy Universe
    method runPtolemy {}

    # Update the layout model
    method updateLayout {}

    # Undo the most recent command
    method undo {}

    # Make a new vertex
    method vertex {name x y}

    # Start moving a vertex
    method vertexclick {tag x y args}

    # Delete a vertex
    method vertexdelete {vertex}

    # Continue moving a vertex
    method vertexdrag {tag x y}

    # Stop moving a vertex
    method vertexrelease {tag x y}

    # Return the vertices and edges with a given tag.
    method withtag {tag}

    #################################################################
    ####                  protected methods                      ####
    
    # Add a tag to all indicated items.
    protected method _addtag {tag args}

    # Clear data from this editor (Note: not the viewer)
    protected method _clear {}

    # Remove an item from the selection
    protected method _deselect {name}

    # Delete a tag from all items.
    protected method _dtag {tag}

    # Add a new item
    protected method _item {name spec args}

    # Delete an edge
    protected method _itemdelete {name}

    # Configure an item
    protected method _itemconfigure {name args}
    
    # Add a nested item
    protected method _itemin {context name spec args}

    # Move an item
    protected method _move {tag x y}

    # Start moving an item
    protected method _moveclick {tag x y args}

    # Continue moving an item
    protected method _movedrag {tag x y}

    # Stop moving an item
    protected method _moverelease {tag x y}

    # Reshape an item
    protected method _reshape {name x y args}

    # Start reshaping an item
    protected method _reshapeclick {name x y args}

    # Continue reshaping an item
    protected method _reshapedrag {name x y}

    # Stop reshaping an item
    protected method _reshaperelease {name x y}

    # Add a vertex to the selection
    protected method _select {name}

    # Clear the selection
    protected method _selectionclear {foo}

    # Add an icon to a menu
    protected method addIconEntry {menu icons index}

    #################################################################
    ####                 protected variables                     ####
    
    # The mapping from item names to item IDs
    protected variable _itemID

    # The interactor to move things around
    protected variable follower

    # The interactor to connect edges
    protected variable dropper

    # Storage for temporary variables
    protected variable _scratch

    #################################################################
    ####                   private methods                       ####

    # Initialize the menubar
    private method initializeMenubar {}
}

#####################################################################
#### -layout configuration
# Subscribe to the layout model. Note: there will be a problem here
# if the model is changed, since the old one is not unsubscribed...
#
configbody ::tycho::EditGraph::layout {
    if { $itk_option(-layout) != "" } {
        $itk_option(-layout) subscribe $this all
    }
    # If the graph model already exists, load the layout
    if { $itk_option(-graph) != "" } {
        loadLayout
    }
}

########################################################################
#### constructor
#
body ::tycho::EditGraph::constructor {args} {
    # Evaluate options
    eval itk_initialize $args

    # If there is not already a graph model, create one
    if { $itk_option(-graph) == "" } {
	configure -graph \
                [uplevel #0 ::tycho::KeyedDigraph [::tycho::autoName graph]]
    }

    # If there is not already a layout model, create one
    if { $itk_option(-layout) == "" } {
	configure -layout \
                [uplevel #0 ::tycho::Layout \
                [::tycho::autoName layout] \
                -primaryview $this]
    }

    # If there is not already an icon index, create one
    if { $itk_option(-icons) == "" } {
	set icons [uplevel #0 ::tycho::IconIndex \
                [::tycho::autoName icons] \
                -datafile {$TYCHO/editors/visedit/icons.tim}]
	$icons load
	configure -icons $icons
    }

    # Add menu development stuff
    if {$myMenubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::EditGraph::initializeMenubar
    }

    # Key bindings
    bind $slate <Meta-Key-z> "$this undo"
    bind $slate <Meta-Key-r> "$this redo"

    # Make a more pronounced highlight
    $slate configure -highlightcolor azure2 -highlightwidth 4

    # Enable selection with button 1; shift-click toggles
    $slate selector bind click vertex -button 1
    $slate selector bind click vertex -button 1 -modifiers shift -toggle

    # Enable drag-selection with button 1; shift-click toggles
    $slate selector bind drag "#background" -button 1
    $slate selector bind drag "#background" -button 1 -modifiers shift -toggle

    # Create the interactor to move selected items
    set follower [$slate interactor Follower]
    $slate selector delegate immediate selected $follower vertex \
	    -button 1
    $slate selector delegate immediate selected $follower vertex \
	    -button 1 -modifiers shift

    # Now for some tricky stuff: we want the follower to send
    # the interaction to the model, rather than to the slate.
    # Give it the right "prefixes":
    $follower configure \
            -clickprefix "$this vertexclick" \
            -dragprefix "$this vertexdrag" \
            -releaseprefix "$this vertexrelease"

    # More tricky stuff: the selector sends selection events
    # to the model:
    $slate selector configure \
	    -clearprefix "$this selectionclear" \
	    -deselectprefix "$this deselect" \
	    -selectprefix "$this select"

    # Create a DragDropper to join terminals
    set dropper [$slate interactor DragDropper]
    $dropper bind output
    $dropper configure \
	    -halo 6 \
	    -targettags input \
	    -activatecommand "$this newclick %1 %2 %3" \
	    -dragcommand "$this newdrag %1 %2 %3" \
	    -deactivatecommand "$this newrelease %2 %3"

    # Is this needed?
    $slate configure -exportselection 0
}

########################################################################
#### clone
#
# Create another editor -- for demos only.
#
body ::tycho::EditGraph::clone {} {
    set clone [::tycho::view EditGraph \
            -layout $itk_option(-layout) \
            -graph $itk_option(-graph)]
}

########################################################################
#### deselect
#
body ::tycho::EditGraph::deselect {id} {
    $itk_option(-layout) publish deselect [$slate itemcget $id -name]
}

########################################################################
#### loadLayout
#
# Load a new layout into the editor.
#
body ::tycho::EditGraph::loadLayout {} {
    # Clear all data here
    _clear

    # Make sure the layout is up to date
    [$itk_option(-layout) cget -primaryview] updateLayout

    # Create vertices
    foreach vertex [$itk_option(-graph) vertices] {
        eval [list _item \
		$vertex \
                [$itk_option(-layout) itemget $vertex]] \
                [$itk_option(-layout) itemattrs $vertex]
	# Create port terminals
	foreach port [$itk_option(-graph) keys $vertex] {
	    eval [list _itemin \
		$vertex $port \
                [$itk_option(-layout) itemget $vertex.$port]] \
                [$itk_option(-layout) itemattrs $vertex.$port]
	}
    }
    # Create edges
    foreach {v0 k0 v1 k1} [$itk_option(-graph) edges] {
	set edge [list $v0 $k0 $v1 $k1]
        eval [list _item \
		$edge \
                [$itk_option(-layout) itemget $edge]] \
                [$itk_option(-layout) itemattrs $edge]
    }
}

########################################################################
#### newclick
#
# Start creating a new edge. Create the edge item and remember
# it.
#
body ::tycho::EditGraph::newclick {item x y} {
    # First we make sure that we clear the selection, since the
    # DragDropper is too dumb to do this...
    selectionclear

    # Create the connection line
    set coords [$slate aspect $item terminal]
    set _scratch(line) [eval $slate create SmartLine $coords $x $y]

    # Set the directions of the line
    set dir [eval ::tycho::Shape::compassFromVector \
	    [$slate itemcget $item -direction]]
    $slate itemconfigure $_scratch(line) -start $dir -end $dir
    set _scratch(dir) $dir

    # Remember the source item
    set _scratch(source) $item
}

########################################################################
#### newdrag
#
# Move the end of the new edge. If the _item_ argument is null,
# then we are not over a suitable terminal item, so just move the
# end of the line. If _item_ is not null, then we are over
# an input terminal, so move the end of the line to the right
# connection point.
#
body ::tycho::EditGraph::newdrag {item x y} {
    if { $item == "" } {
	# Just move end point
	$slate reshapeto $_scratch(line) $x $y end
    } else {
	# Move end point to terminal connection point
	set coords [$slate aspect $item terminal]
	eval $slate reshapeto $_scratch(line) $coords end

	# If the line direction does not match the terminal
	# direction, change the line
	set dir [eval ::tycho::Shape::compassFromVector \
	    [$slate itemcget $item -direction]]
	set dir [::tycho::Shape::compass $dir rev]

	if { $dir != $_scratch(dir) } {
	    $slate itemconfigure $_scratch(line) -end $dir
	    set _scratch(dir) $dir
	}
    }
    # Remember the target item for newrelease{}
    set _scratch(dest) $item
}

########################################################################
#### newrelease
#
# Release the item. If we are currently over a target input terminal,
# make a conneciton in the graph. If not, just delete the line,
# since connection failed.
#
body ::tycho::EditGraph::newrelease {x y} {
    set line $_scratch(line)
    if { $_scratch(dest) == "" } {
	$slate delete $line
    } else {
	# Get the vertices and ports being connected
	set srcpar [$slate itemcget [$slate parent $_scratch(source)] -name]
	set source [$slate itemcget $_scratch(source) -name]
	set dstpar [$slate itemcget [$slate parent $_scratch(dest)] -name]
	set dest [$slate itemcget $_scratch(dest) -name]

	# Add an edge to the graph
	$itk_option(-graph) publish edge $srcpar $source $dstpar $dest

	# Give the edge a name
	$slate itemconfigure $line -name [list $srcpar $source $dstpar $dest]

	# Add an edge to the layout model
	set attrs {}
	foreach {opt x y z val} [eval concat [$slate itemconfigure $line]] {
	    lappend attrs $opt $val
	}
	# Inform all views _except_ this one
	eval [list $itk_option(-layout) update $this item \
		[list $srcpar $source $dstpar $dest] \
		[concat [$slate type $line] [$slate coords $line]]] \
		$attrs

	# Remember it
	set _itemID([list $srcpar $source $dstpar $dest]) $line
    }
}

########################################################################
#### notify
#
body ::tycho::EditGraph::notify {method args} {
    eval _$method $args
}

########################################################################
#### redo
#
# Redo the most recent command
#
body ::tycho::EditGraph::redo {} {
    eval $itk_option(-layout) redo
    eval $itk_option(-graph) redo
}

########################################################################
#### runPtolemy
#
# Run the graph as a Ptolemy universe
#
body ::tycho::EditGraph::runPtolemy {} {
    set graph $itk_option(-graph)
    set layout $itk_option(-layout)

    # Create a new universe
    set universe [::tycho::autoName .universe]
    ::ptolemy::Universe $universe {}

    # Create blocks
    foreach vertex [$graph vertices] {
	puts "$universe addBlock $vertex [$layout itemcget $vertex -label]"
	$universe addBlock $vertex [$layout itemcget $vertex -label]
    }

    # Create edges
    foreach {v0 k0 v1 k1} [$graph edges] {
puts "$universe connect $universe.$v0.$k0 $universe.$v1.$k1"
	$universe connect $universe.$v0.$k0 $universe.$v1.$k1
    }

    # Ask the user how long to run
    foreach {_ iterations} \
	    [::tycho::query Answer {{line n {Number of Iterations} 100}}] {}

    puts $iterations

    $universe run $iterations
    $universe wrapup
}

########################################################################
#### select
#
body ::tycho::EditGraph::select {id} {
    $itk_option(-layout) publish select [$slate itemcget $id -name]
}

########################################################################
#### selectionclear
#
body ::tycho::EditGraph::selectionclear {} {
    $itk_option(-layout) publish selectionclear foo
}

########################################################################
#### undo
#
# Undo the most recent command
#
body ::tycho::EditGraph::undo {} {
    set foo [eval $itk_option(-layout) undo]
    set bar [eval $itk_option(-graph) undo]
}

########################################################################
#### updateLayout
#
#  Update the layout with current coordinates.
#
body ::tycho::EditGraph::updateLayout {} {
    foreach vertex [$itk_option(-graph) vertices] {
        set coords [$slate coords $_itemID($vertex)]
        eval [list $itk_option(-layout) coords $vertex] $coords
    }
    foreach {v0 k0 v1 k1} [$itk_option(-graph) edges] {
	set edge [list $v0 $k0 $v1 $k1]
        set coords [$slate coords $_itemID($edge)]
        eval [list $itk_option(-layout) coords $edge] $coords
    }
}

########################################################################
#### vertex
#
body ::tycho::EditGraph::vertex {icon x y} {
    set name [::tycho::autoName vertex]
    set graph $itk_option(-graph)
    set layout $itk_option(-layout)
    set icons $itk_option(-icons)

    # Mark the graph and the layout
    $graph mark vertex
    $layout mark vertex

    # Add a vertex to the graph
    $graph publish vertex $name -type $icon

    # Add a vertex to the layout model
    set type  [$icons type $icon]
    set attrs [$icons iconattrs $icon]
    set undo [eval [list $layout publish item \
	    $name [list $type $x $y]] $attrs \
	    -tags vertex]

    # Remember the undo commands. FIXME!!!
    set undograph [$graph getUndo current]
    set undolayout [$layout getUndo current]

    # Add ports to the graph.
    foreach port [$icons children port $icon] {
        $graph publish keyin $name $port
    }

    # Add the ports to the layout model
    foreach port [$icons children port $icon] {
        set type  [$icons type $icon.$port]
        set attrs [$icons portattrs $icon.$port]
		
        # When creating the port item, give it a tag which is the same
        # as its type -- that is, "input" or "output". Give it a
        # name which is the same as its name in the icon model.
        #set cmd [concat [list itemin $name $port [list $type 0 0]] $attrs \
        #        -tags [$icons portcget $icon.$port -type] \
        #        -name $port]
        #eval $layout $cmd
        #eval $layout notify $cmd
	eval [list $layout publish itemin $name $port [list $type 0 0]] \
		$attrs \
                -tags [list [$icons portcget $icon.$port -type]] \
		-name $port
    }

    # Compact the commands into a single one
    $graph compactHistory vertex current 1
    $layout compactHistory vertex current 1

    # Do this kludge to overwrite the undo command
    $graph setUndo current $undograph
    $layout setUndo current $undolayout
}


########################################################################
#### vertexclick
#
# Start a move interaction on vertices. The argument is a tag which
# must be attached only to vertices to be moved. Get the names of
# edges that are fully connected to these vertices and tag
# all vertices and those edges. Also get the names of edges
# that have one end connected to one of these vertices and
# remember who they are.
#
body ::tycho::EditGraph::vertexclick {tag x y args} {
    set layout $itk_option(-layout)
    set graph  $itk_option(-graph)

    # Get the vertices, and start a move sequence on them
    set vertices [withtag $tag]
    set _scratch(movevertices) $vertices

    # Notify views that these items are about to move
    $layout publish moveclick $tag $x $y

    # Get completely-connected and partially-connected edges
    set _scratch(moveedges) [eval $graph subgraphEdges $vertices]
    set _scratch(inputedges) [eval $graph subgraphInputs $vertices]
    set _scratch(outputedges) [eval $graph subgraphOutputs $vertices]
    
    # Start a move or reshape sequence on found edges
    if { $_scratch(moveedges) != "" } {
	eval $layout publish addtag $this.edge $_scratch(moveedges)
	$layout publish moveclick $this.edge $x $y
    }
    foreach edge $_scratch(inputedges) {
        $layout publish reshapeclick $edge $x $y end
    }
    foreach edge $_scratch(outputedges) {
        $layout publish reshapeclick $edge $x $y start
    }
}

########################################################################
#### vertexdelete
#
# Delete a vertex and all connected edges.
#
body ::tycho::EditGraph::vertexdelete {vertex} {
    set layout $itk_option(-layout)
    set graph  $itk_option(-graph)

    # Get connected edges
    set edges [concat \
	    [$graph subgraphEdges $vertex] \
	    [$graph subgraphInputs $vertex]]
    
    # Mark the layout history
    $layout mark vertex
    
    # Delete the vertex and connected edges
    $layout publish itemdelete $_itemID($vertex)
    foreach edge $edge {
    	$layout publish itemdelete $_itemID($edge)
    }
    
    # Merge the deletion commands into one
    if { $edges != "" } {
    	$layout compactHistory vertex current 1
    }
    
    # Delete the vertex form the graph model. This automatically
    # deletes connected edges
    $graph publish vertexdelete $vertex
}

########################################################################
#### vertexdrag
#
# Continue a move interaction on vertices. The
# vertices and edges are moved and reshaped as appropriate.
#
body ::tycho::EditGraph::vertexdrag {tag x y} {
    set layout $itk_option(-layout)

    # Move the vertices and fully-connected edges
    $layout publish movedrag $tag $x $y
    if { $_scratch(moveedges) != "" } {
	$layout publish movedrag $this.edge $x $y
    }
    # Reshape the partially-connected edges.
    foreach edge $_scratch(inputedges) {
	$layout publish reshapedrag $edge $x $y
    }
    foreach edge $_scratch(outputedges) {
	$layout publish reshapedrag $edge $x $y
    }	
}

########################################################################
#### vertexrelease
#
# Terminate a move interaction on vertices and add an undo and
# redo command to the history of the layout model.
#
body ::tycho::EditGraph::vertexrelease {tag x y} {
    set layout $itk_option(-layout)
    
    # Because the following will record a bunch of commands that we
    # want merged into a single undo/redo command, set a mark
    $layout mark vertex

    # Terminate move of vertices and fully-connected edges
    $layout publish moverelease $tag $x $y
    if { $_scratch(moveedges) != "" } {
	$layout publish moverelease $this.edge $x $y
	$layout publish dtag $this.edge
    }
    # Terminate the reshape of partially-connected edges
    foreach edge $_scratch(inputedges) {
	$layout publish reshaperelease $edge $x $y
    }
    foreach edge $_scratch(outputedges) {
	$layout publish reshaperelease $edge $x $y
    }

    # Now merge all those commands into a single one
    $layout compactHistory vertex current 1

    # Finally (and importantly!), add a null command to the graph
    # model to match this command
    $itk_option(-graph) appendHistory {} {} 0
}

########################################################################
#### withtag
#
# Return the vertice and edges with a given tag.
#
body ::tycho::EditGraph::withtag {tag} {
    set result {}
    foreach id [$slate find withtag $tag] {
	lappend result [$slate itemcget $id -name]
    }
    return $result
}

###################################################################
###################################################################
####                      protected methods                    ####

########################################################################
#### _addtag
#
# Add a tag to all indicated vertices and names.
#
body ::tycho::EditGraph::_addtag {tag args} {
    foreach name $args {
	$slate addtag $tag withtag $_itemID($name)
    }
}

########################################################################
#### _clear
#
# Clear the displayed graph.
#
body ::tycho::EditGraph::_clear {} {
    catch {unset _itemID}
    $slate delete all
}

########################################################################
#### _deselect
#
# Remove an item from the selection.
#
body ::tycho::EditGraph::_deselect {name} {
    $slate select remove $_itemID($name)
}

########################################################################
#### _dtag
#
# Delete a tag from all items.
#
body ::tycho::EditGraph::_dtag {tag} {
    $slate dtag $tag
}

########################################################################
#### _item
#
# Add a new item to the view.
#
body ::tycho::EditGraph::_item {name spec args} {
    set id [eval $slate create $spec $args -name $name]
    set _itemID($name) $id
}

########################################################################
#### _itemdelete
#
# Delete an item.
#
body ::tycho::EditGraph::_itemdelete {name} {
    $slate delete $_itemID($name)
    unset _itemID($name)
}

########################################################################
#### _itemconfigure
#
# Configure an item.
#
body ::tycho::EditGraph::_itemconfigure {name args} {
    eval $slate itemconfigure $_itemID($name) $args
}

########################################################################
#### _itemin
#
# Add a nested item. The item is created as a "root" child so that
# it responds to events.
#
body ::tycho::EditGraph::_itemin {context name spec args} {
    set parent $_itemID($context)
    set id [eval $slate createrootchild $parent $spec $args -name $name]
    set _itemID($name) $id
}

########################################################################
#### _move
#
body ::tycho::EditGraph::_move {tag x y} {
    if { [::info exists _itemID($tag)] } {
        $slate move $_itemID($tag) $x $y
    } else {
        $slate move $tag $x $y
    }
}

########################################################################
#### _moveclick
#
body ::tycho::EditGraph::_moveclick {tag x y} {
    if { [::info exists _itemID($tag)] } {
        eval $slate moveclick $_itemID($tag) $x $y
    } else {
        eval $slate moveclick $tag $x $y
    }
}

########################################################################
#### _movedrag
#
body ::tycho::EditGraph::_movedrag {tag x y} {
    if { [::info exists _itemID($tag)] } {
        $slate movedrag $_itemID($tag) $x $y
    } else {
        $slate movedrag $tag $x $y
    }
}

########################################################################
#### _moverelease
#
body ::tycho::EditGraph::_moverelease {tag x y} {
    if { [::info exists _itemID($tag)] } {
        $slate moverelease $_itemID($tag) $x $y
    } else {
        $slate moverelease $tag $x $y
    }
}

########################################################################
#### _reshape
#
body ::tycho::EditGraph::_reshape {name x y args} {
    eval $slate reshape $_itemID($name) $x $y $args
}

########################################################################
#### _reshapeclick
#
body ::tycho::EditGraph::_reshapeclick {name x y args} {
    eval $slate reshapeclick $_itemID($name) $x $y $args
}

########################################################################
#### _reshapedrag
#
body ::tycho::EditGraph::_reshapedrag {name x y} {
    $slate reshapedrag $_itemID($name) $x $y
}

########################################################################
#### _reshaperelease
#
body ::tycho::EditGraph::_reshaperelease {name x y} {
    $slate reshaperelease $_itemID($name) $x $y
}

########################################################################
#### _select
#
# Add an item to the selection.
#
body ::tycho::EditGraph::_select {name} {
    $slate select add $_itemID($name)
}

########################################################################
#### _selectionclear
#
# Clear the selection.
#
body ::tycho::EditGraph::_selectionclear {foo} {
    $slate select clear
}

#####################################################################
#### addIconEntry
# Add an icon entry to the menus
#
body ::tycho::EditGraph::addIconEntry {menu icons index} {
    if { $index != "" } {
	menubar add [$icons groupcget $index -label] $menu -type cascade
	foreach c [$icons children icon $index] {
	    menubar command \
		    [$icons iconcget $index.$c -label] \
		    [$icons groupcget $index -label] \
		    -command "$this vertex $index.$c 100 100"
	}
	foreach c [$icons children group $index] {
	    addIconEntry $menu $icons $index.$c
	}
    } else {
	foreach c [$icons roots icon] {
	    menubar command [$icons iconcget $c -label] $menu \
		    -command "$this vertex $c 100 100"
	}
	foreach c [$icons roots group] {
	    addIconEntry $menu $icons $c
	}
    }
}

    #####################################################################
    #####################################################################
    ####                       private methods                       ####

#####################################################################
#### initializeMenubar
# Adds entries to the menu bar specific to this class.
#
body ::tycho::EditGraph::initializeMenubar {} {
    # Add an Edit menu before the Window menu
    $myMenubar addMenu Edit -before Window -underline 0
    
    $myMenubar command {Undo} Edit -accelerator "M-z" \
	    -underline 0 -command "$this undo"
    
    $myMenubar command {Redo} Edit -accelerator "M-r" \
	    -underline 0 -command "$this redo"
    
    $myMenubar addSeparator Edit
    
    $myMenubar command Cut Edit -underline 0 -accelerator "C-w" \
	    -command "$this cut"
    
    $myMenubar command Copy Edit -underline 1 -accelerator "M-w" \
	    -command "$this copy"
    
    $myMenubar command Paste Edit -underline 0 -accelerator "C-y" \
	    -command "$this paste"
    
    $myMenubar addSeparator Edit
    
    $myMenubar command "Select All" Edit -underline 0 \
	    -accelerator "C-/" -command "$this selectRange 1.0 end"
    
    $myMenubar command "Unselect" Edit -underline 0 \
	    -accelerator "C-\\" -command "$this unselectRange 1.0 end"

    # Build a menu if icons from the icon index
    if { $itk_option(-icons) != "" } {
	$myMenubar addMenu Icons -underline 0
	addIconEntry Icons $itk_option(-icons) {}
    }

    # Add a Devel menu for development use
    $myMenubar addMenu Devel -underline 0
    $myMenubar command {Clone} Devel \
            -command "$this clone"

    $myMenubar addSeparator Devel

    $myMenubar command {Show layout} Devel \
		    -command "::tycho::post \[\[$this cget -layout\] describe\]"
    $myMenubar command {Show graph} Devel \
            -command "::tycho::post \[\[$this cget -graph\] describe\]"

    $myMenubar command {Run Ptolemy} Devel \
            -command "$this runPtolemy"
}
