##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### GraphLayout
#
# The _GraphLayout_ model is a visual representation of a
# graph.
#
class ::tycho::GraphLayout {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The "primary" view of this model
    public variable primaryview {}

    # The graph this model represents -- is this needed?
    public variable graph {}

    #################################################################
    ####                     public methods                      ####

    # Describe the layout
    method describe {{prefix {}}}

    # Remove a vertex from the selection
    method deselect {vertex}

    # Add en edge
    method edge {edge coords args}

    # Add a port to a vertex
    method portin {context port coords args}

    # Add a vertex to the selection
    method select {vertex}

    # Clear the selection
    method selectionclear {foo}

    # Add a vertex to the graph
    method vertex {vertex coords args}

    # Return all attributes of a vertex
    method vertexattrs {vertex}

    # Start a move interaction on vertices
    method vertexclick {tag x y args}

    # Configure a vertex
    method vertexconfigure {vertex args}

    # Set the coordinates of the vertex
    method vertexcoords {vertex x y}

    # Continue a move interaction on vertices
    method vertexdrag {tag x y}

    # Get the type and coordinates of a vertex
    method vertexget {vertex}

    # Move vertices
    method vertexmove {tag x y}

    # Terminate a move interaction on vertices
    method vertexrelease {tag x y}

    #################################################################
    ####                  protected methods                      ####
    
    # Ports cannot be added at the top level
    method port {port coords args} {
	_toplevelerror port $port
    }

    #################################################################
    ####                 protected variables                     ####
    
    # Storage used during interaction sequences
    protected variable _scratch

    #################################################################
    ####                   private methods                       ####
    
    # Evaluate code in this object's context
    private method evalInSpecificContext {args} {eval $args}
}

########################################################################
#### constructor
#
body ::tycho::GraphLayout::constructor {args} {	
    # Hierarchical items separated by period
    configure -separator "."

    # Evaluate options
    eval configure $args

    # The vertex entity has a value (its type and coords)
    defineEntityType vertex -valued 1

    # The port entity has a value (its type and proportional coords)
    defineEntityType port -valued 1

    # The edge entity also a value (its type and coords)
    defineEntityType edge -valued 1
}

########################################################################
#### describe
#
# Return a string that describes the layout.
# See the <a href="Interchange.html"> Interchange</a> class.
#
body ::tycho::GraphLayout::describe {{prefix {}}} {
    # First call my primary view to update layout
    $primaryview updateLayout

    # Call the superclass
    chain $prefix
}

########################################################################
#### deselect
#
# Remove a vertex from the selection. Does not return an inverse
# command, since selection and deselection are not undoable commands.
#
body ::tycho::GraphLayout::deselect {name} {
    return ""
}

########################################################################
#### edge
#
# Add a new edge to the model and return the inverse command. The
# value is the type and the _initial_ coordinates only.
#
body ::tycho::GraphLayout::edge {edge coords args} {
    _verifynot edge $edge

    # Add the layout here
    _entity edge {} $edge [concat [list $coords] $args]
}

########################################################################
#### portin
#
# Add a port to a vertex.
#
body ::tycho::GraphLayout::portin {context port value args} {
    _verifynotin port $context $port
    _entity port $context $port [concat [list $value] $args]
}

########################################################################
#### select
#
# Add an item to the selection. Does not return an inverse
# command, since selection and deselection are not undoable commands.
#
body ::tycho::GraphLayout::select {name} {
    return ""
}

########################################################################
#### selectionclear
#
# Clear the selection. Does not return an inverse
# command, since selection and deselection are not undoable commands.
#
body ::tycho::GraphLayout::selectionclear {foo} {
    return ""
}

########################################################################
#### vertex
#
# Add a new vertex to the model and return the inverse command. The
# value is the type and the _initial_ coordinates only.
#
body ::tycho::GraphLayout::vertex {vertex coords args} {
    _verifynot vertex $vertex

    # Add the layout here
    _entity vertex {} $vertex [concat [list $coords] $args]
}

########################################################################
#### vertexattrs
#
# Return a list containing the attributes of the vertex as a flat
# attribute-value list. Flag an error if the vertex does not exist.
#
body ::tycho::GraphLayout::vertexattrs {vertex} {
    _verify vertex $vertex
    _attributes vertex $vertex
}

########################################################################
#### vertexclick
#
# Start a move interaction on vertices. The argument is a tag which
# must be attached only to vertices to be moved. Get the names of
# edges that are fully connected to these vertices and tag
# all vertices and those edges. Also get the names of edges
# that have one end connected to one of these vertices and
# remember who they are. This method must _not_ be called
# via publish{}.
#
body ::tycho::GraphLayout::vertexclick {tag x y args} {
    # Get the vertices, and start a move sequence on them
    set vertices [$primaryview withtag $tag]
    set _scratch(movevertices) $vertices

    # Make sure that all views have the objects tagged right
    # FIXME: Inefficient!
    #    notify dtag $tag
    #    eval notify addtag $tag $vertices
    notify moveclick $tag $x $y

    set _scratch(startx) $x
    set _scratch(starty) $y

    # Get completely-connected edges, add a tag, and start a move sequence
    set _scratch(moveedges) [eval $graph subgraphEdges $vertices]
    if { $_scratch(moveedges) != "" } {
	eval notify addtag $this.edge $_scratch(moveedges)
	eval notify moveclick $this.edge $x $y
    }

    # Get partially-connected edges and start a reshape sequence on them
    set _scratch(inputedges) [eval $graph subgraphInputs $vertices]
    foreach edge $_scratch(inputedges) {
        notify reshapeclick $edge $x $y end
    }
    set _scratch(outputedges) [eval $graph subgraphOutputs $vertices]
    foreach edge $_scratch(outputedges) {
        notify reshapeclick $edge $x $y start
    }
}

########################################################################
#### vertexconfigure
#
# Configure a vertex and return the inverse command.
#
body ::tycho::GraphLayout::vertexconfigure {vertex args} {
    _verify vertex $vertex
    _configure vertex $vertex $args
}

########################################################################
#### vertexcoords
#
# Set the coordinates of a vertex.
#
body ::tycho::GraphLayout::vertexcoords {vertex x y} {
    _verify vertex $vertex
    _assign vertex $vertex [list [lindex [_get vertex $vertex] 0] $x $y]
}

########################################################################
#### vertexdrag
#
# Continue a move interaction on vertices. The tag is ignored, on the
# assumption that interaction sequences cannot be interleaved. The
# vertices and edges are moved and reshaped as appropriate.
# This method must _not_ be called via publish{}.
#
body ::tycho::GraphLayout::vertexdrag {tag x y} {
    # Move the vertices and fully-connected edges
    notify movedrag $tag $x $y
    if { $_scratch(moveedges) != "" } {
	notify movedrag $this.edge $x $y
    }
    # Reshape the partially-connected edges.
    foreach edge $_scratch(inputedges) {
	notify reshapedrag $edge $x $y
    }
    foreach edge $_scratch(outputedges) {
	notify reshapedrag $edge $x $y
    }	
}

########################################################################
#### vertexget
#
# Get the type and coordinates of a vertex
#
body ::tycho::GraphLayout::vertexget {vertex} {
    _verify vertex $vertex
    _get vertex $vertex
}

########################################################################
#### vertexmove
#
# Move a vertex and all connected edges, and return the inverse
# command. The argument is a tag which must be attached only to
# vertices to be moved. Get the names of edges that are fully connected
# to these vertices and move them; also get the names of edges that
# have one end connected to one of these vertices and reshape them.
# This method should be called via record{}, but _not_ via publish{}.
#
body ::tycho::GraphLayout::vertexmove {tag x y} {
    # Move the vertices
    notify move $tag $x $y
    set vertices [$primaryview withtag $tag]
    
    # Move completely-connected edges
    foreach edge [eval $graph subgraphEdges $vertices] {
	notify move $edge $x $y
    }
     
    # Get partially-connected edges and reshape sequence them
    foreach edge [eval $graph subgraphInputs $vertices] {
	notify reshape $edge $x $y end
    }
    foreach edge [eval $graph subgraphOutputs $vertices] {
	notify reshape $edge $x $y start
    }
}

########################################################################
#### vertexrelease
#
# Terminate a move interaction on vertices and add an undo and redo command
# to the history. This method must _not_ be called via publish{}.
#
body ::tycho::GraphLayout::vertexrelease {tag x y} {
    # Terminate move of vertices and fully-connected edges
    notify moverelease $tag $x $y
    if { $_scratch(moveedges) != "" } {
	notify moverelease $this.edge $x $y
	notify dtag $this.edge
    }
    # Terminate the reshape of partially-connected edges
    foreach edge $_scratch(inputedges) {
	notify reshaperelease $edge $x $y
    }
    foreach edge $_scratch(outputedges) {
	notify reshaperelease $edge $x $y
    }

    # Construct the undo and redo commands. Don't use "tag"
    # because objects may become untagged.
    set deltax [expr $x - $_scratch(startx)]
    set deltay [expr $y - $_scratch(starty)]
    
    set redo [list sequence]
    lappend redo [list addtag $this.move $_scratch(movevertices)]
    lappend redo [list vertexmove $this.move $deltax $deltay]
    lappend redo [list dtag $this.move]
    
    set undo [list sequence]
    lappend undo [list addtag $this.move $_scratch(movevertices)]
    lappend undo [list vertexmove $this.move -$deltax -$deltay]
    lappend undo [list dtag $this.move]
    
    # Add the constructed commands to the history
    appendHistory $redo $undo 1
}


    #################################################################
    #################################################################
    ####                  protected methods                      ####

