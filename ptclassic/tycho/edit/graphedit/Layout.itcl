##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Layout
#
# The _Layout_ model is a model for any graphical "picture"
# drawn on the slate.
#
class ::tycho::Layout {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The "primary" view of this model
    public variable primaryview {}

    #################################################################
    ####                     public methods                      ####

    # Add a tag to specified items
    method addtag {tag args}
	
    # Get child items
    method children {item}
	
    # Set the coordinates of an item
    method coords {item args}

    # Describe the layout
    method describe {{prefix {}}}

    # Delete a tag from all items
    method dtag {tag}

    # Remove an item from the selection
    method deselect {item}

    # Get the coordinates of an item
    method getcoords {item}

    # Add an item to the picture
    method item {item spec args}

    # Return all attributes of an item
    method itemattrs {item}

    # Configure an item
    method itemconfigure {item args}

    # Get an attribute of an item
    method itemcget {item args}

    # Delete an item
    method itemdelete {item}

    # Get the type and coordinates of an item
    method itemget {item}

    # Add a nested item
    method itemin {context item spec args}

    # Move an item
    method move {tag x y}

    # Start moving an item
    method moveclick {tag x y args}

    # Continue moving an item
    method movedrag {tag x y}

    # Stop moving an item
    method moverelease {tag x y}

    # Reshape an item
    method reshape {name x y args}

    # Start reshaping an item
    method reshapeclick {name x y args}

    # Continue reshaping an item
    method reshapedrag {name x y}

    # Stop reshaping an item
    method reshaperelease {name x y}

    # Add an item to the selection
    method select {item}

    # Clear the selection
    method selectionclear {foo}

    # Get the type of an item
    method type {foo}

    #################################################################
    ####                  protected methods                      ####
   
    #################################################################
    ####                 protected variables                     ####
    
    # Storage used during interaction sequences
    protected variable _scratch

    #################################################################
    ####                   private methods                       ####
    
    # Evaluate code in this object's context
    private method evalInSpecificContext {args} {eval $args}
}

########################################################################
#### constructor
#
body ::tycho::Layout::constructor {args} {	
    # Hierarchical items separated by period
    configure -separator "."

    # Evaluate options
    eval configure $args

    # The item entity has a value (its type and coords)
    defineEntityType item -valued 1
}

########################################################################
#### addtag
#
# Add a tag to all specified items. Does not return an inverse
# command, since tagging and untagging are not undoable commands.
#
body ::tycho::Layout::addtag {tag args} {
    return ""
}

########################################################################
#### children
#
# Get the children of an item.
#
body ::tycho::Layout::children {item} {
    _verifynot item $item
    _children item $item
}

########################################################################
#### coords
#
# Set the coordinates of an item.
#
body ::tycho::Layout::coords {item args} {
    _verify item $item
    _assign item $item [concat [list [lindex [_get item $item] 0]] $args]
}

########################################################################
#### dtag
#
# Delete a tag from all items. Does not return an inverse
# command, since tagging and untagging are not undoable commands.
#
body ::tycho::Layout::dtag {tag} {
    return ""
}

########################################################################
#### describe
#
# Return a string that describes the layout.
# See the <a href="Interchange.html"> Interchange</a> class.
#
body ::tycho::Layout::describe {{prefix {}}} {
    # First call my primary view to update layout
    $primaryview updateLayout

    # Call the superclass
    chain $prefix
}

########################################################################
#### deselect
#
# Remove an item from the selection. Does not return an inverse
# command, since selection and deselection are not undoable commands.
#
body ::tycho::Layout::deselect {name} {
    return ""
}

########################################################################
#### getcoords
#
# Get the coordinates of an item.
#
body ::tycho::Layout::getcoords {item} {
    _verify item $item
    lindex [_get item $item] 0
}

########################################################################
#### item
#
# Add a new item to the model and return the inverse command. The
# value is the type and the _initial_ coordinates only.
#
body ::tycho::Layout::item {item spec args} {
    _verifynot item $item
    _entity item {} $item $spec $args
}

########################################################################
#### itemattrs
#
# Return a list containing the attributes of the item as a flat
# attribute-value list. Flag an error if the item does not exist.
#
body ::tycho::Layout::itemattrs {item} {
    _verify item $item
    _attributes item $item
}

########################################################################
#### itemcget
#
# Get an attribute of an item.
#
body ::tycho::Layout::itemcget {item attribute} {
    _verify item $item
    _cget item $item $attribute
}

########################################################################
#### itemconfigure
#
# Configure an item and return the inverse command.
#
body ::tycho::Layout::itemconfigure {item args} {
    _verify item $item
    _configure item $item $args
}

########################################################################
#### itemdelete
#
# Delete an item from the model.
#
body ::tycho::Layout::itemdelete {item} {
    _verify item $item
    _delete item $item
}

########################################################################
#### itemget
#
# Get the type and coordinates of an item
#
body ::tycho::Layout::itemget {item} {
    _verify item $item
    _get item $item
}

########################################################################
#### itemin
#
# Add a nested item.
#
body ::tycho::Layout::itemin {context item value args} {
    _verifynotin item $context $item
    _entity item $context $item [concat [list $value] $args]
}

########################################################################
#### move
#
# Move an item by name, or a set of items by tag.
#
body ::tycho::Layout::move {tag x y} {
    # Only construct the inverse if the "recording" flag is set.
    # This is not for efficiency, but because the command may
    # need to generate its own redo command.
    if { $recording } {
	    if { [_exists item $tag] } {
	    	# This is an item, so return simple inverse command
	    	return [list move $tag [expr -$x] [expr -$y]]
	    } else {
	    	# It's a tag, so explicitly construct commands to move all
	    	# tagged items. Note that we don't use the tag since the
	    	# tags may change by the time the command is undone.
	    	set undo [list sequence]
	    	set redo [list sequence]
	    	foreach item [$primaryview withtag $tag] {
	    		lappend undo [list move $item [expr -$x] [expr -$y]]
	    		lappend redo [list move $item $x $y]
	    	}
	    	# Add to history, and return null so nothing else is recorded.
	    	appendHistory $redo $undo 1
	    	return ""
	    }
	}
}

########################################################################
#### moveclick
#
# Start moving an item specified by name, or a set of items 
# specified by tag.
#
body ::tycho::Layout::moveclick {tag x y} {
	# Just remember where we are, and don't record in the history
    set _scratch($tag.startx) $x
    set _scratch($tag.starty) $y
    return ""
}

########################################################################
#### movedrag
#
# Continue moving an item specified by name, or a set of items 
# specified by tag.
#
body ::tycho::Layout::movedrag {tag x y} {
	return ""
}

########################################################################
#### moverelease
#
# Terminate movement of an item specified by name, or a set of items 
# specified by tag. Record a single move command (for the whole
# sequence since the call to moveclick{}) in the history.
#
body ::tycho::Layout::moverelease {tag x y} {
    set deltax [expr $x - $_scratch($tag.startx)]
    set deltay [expr $y - $_scratch($tag.starty)]
    unset _scratch($tag.startx)
    unset _scratch($tag.starty)

    # Only construct the inverse if the "recording" flag is set.
    # This should never happen, but we check just to make sure.
    if { $recording } {
	if { [_exists item $tag] } {
	    # This is an item, so use simple commands
	    set undo [list move $tag [expr -$deltax] [expr -$deltay]]
	    set redo [list move $tag $deltax $deltay]
	} else {
	    # It's a tag, so construct commands to move all tagged items.
	    # Note that we don't use the tag in the command since the
	    # tags may change by the time the command is undone.
	    set items [$primaryview withtag $tag]
	    if { [llength $items] == 0 } {
		set undo {}
		set redo {}
	    } elseif { [llength $items] == 1 } {
		set undo [list move [lindex $items 0] \
			[expr -$deltax] [expr -$deltay]]
		set redo [list move [lindex $items 0] $deltax $deltay]
	    } else {
		set undo [list sequence]
		set redo [list sequence]
		foreach item [$primaryview withtag $tag] {
		    lappend undo [list move $item \
			    [expr -$deltax] [expr -$deltay]]
		    lappend redo [list move $item $deltax $deltay]
		}
	    }
	}
    	# Add to history, and return null so nothing else is recorded.
    	appendHistory $redo $undo 1
    	return ""
    }
}

########################################################################
#### reshape
#
# Reshape an item by name.
#
body ::tycho::Layout::reshape {name x y args} {
    if { ! [_exists item $name] } {
    	error "Item \"$name\" does not exists in [_dataname]"
    }
    concat reshape [list $name] [expr -$x] [expr -$y] $args
}

########################################################################
#### reshapeclick
#
# Start moving an item specified by name.
#
body ::tycho::Layout::reshapeclick {name x y args} {
    if { ! [_exists item $name] } {
    	error "Item \"$name\" does not exist in [_dataname]"
    }
	# Just remember where we are, and don't record in the history
    set _scratch($name.startx) $x
    set _scratch($name.starty) $y
    set _scratch($name.aspects) $args
    return ""
}

########################################################################
#### reshapedrag
#
# Continue reshaping an item specified by name.
#
body ::tycho::Layout::reshapedrag {name x y} {
	return ""
}

########################################################################
#### reshaperelease
#
# Terminate reshaping of an item specified by name. Record a
# single reshape command (for the whole sequence since the call
# to reshapeclick{}) in the history.
#
body ::tycho::Layout::reshaperelease {name x y} {
    set deltax [expr $x - $_scratch($name.startx)]
    set deltay [expr $y - $_scratch($name.starty)]
    set aspects $_scratch($name.aspects)
    unset _scratch($name.startx)
    unset _scratch($name.starty)
    unset _scratch($name.aspects)

    # Only construct the inverse if the "recording" flag is set.
    # This should never happen, but we check just to make sure.
    if { $recording } {
    	# This is an item, so use simple commands
    	set undo [concat reshape [list $name] \
		[expr -$deltax] [expr -$deltay] $aspects]
    	set redo [concat reshape [list $name] $deltax $deltay $aspects]

    	# Add to history, and return null so nothing else is recorded.
    	appendHistory $redo $undo 1
    	return ""
    }
}

########################################################################
#### select
#
# Add an item to the selection. Does not return an inverse
# command, since selection and deselection are not undoable commands.
#
body ::tycho::Layout::select {name} {
    return ""
}

########################################################################
#### selectionclear
#
# Clear the selection. Does not return an inverse
# command, since selection and deselection are not undoable commands.
#
body ::tycho::Layout::selectionclear {foo} {
    return ""
}

########################################################################
#### type
#
# Get the type of an item
#
body ::tycho::Layout::type {item} {
    _verify item $item
    lindex [_get item $item] 0
}

