##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Library
#
# A <i>Library</i> is a model containing a collection of items that are
# accessed by other models and widgets. This class is an abstract class
# for applications-specific libraries, which must define the types
# that actually contains data, such as, for example, <i>icon</i>.
#
# _Library_ contains support for structuring, organizing, and
# accessing items. This support includes support for building menus,
# for cross-referencing other libraries, and for building composite
# libraries out of smaller libraries. Because libraries often contain
# metadata (items in other models are created from a description in a
# library model), the Library model includes support for metadata, most
# notably the _attribute_ item type and associated methods.
#
# This model has the following types:
# <dl>
# <dt><b>attribute</b> _name_
# <dd>
# Meta-data describing an attribute
# of an item. Attribute meta-data must be contained within a 
# <b>metadata</b> item. This information in this type is used to build new
# item from meta-data, and by editors and viewers of model. As an example,
# the "icon" metadata would contain an attribute called "background."
# Attributes can have the following attributes:
#   <dl>
#   <dt><b>-default</b> _value_
#   <dd>
#   The default value of this attribute. The default default is the null
#   string.
#
#   <dt><b>-description</b> _html-string_
#   <dd>
#   An HTML description of the attribute. For
#   example, this could be an HTML string that describes what the
#   effect the background attribute is. The default is a null string.
#
#   <dt><b>-label</b> <i>label</i>
#   <dd>
#   A brief string describing the attribute. This string is typically used
#   by model viewers and editors as the label in widgets that allow 
#   attributes to be changed. By convention, model viewers and editors
#   do not display attributes with a null label. The default is a null string.
#
#   <dt><b>-readonly</b> _boolean_
#   <dd>
#   If true, model editors will not allow the attribute to be changed. The
#   default is false.
#
#   <dt><b>-type</b> <i>type</i>
#   <dd>
#   The "type" of the attribute. This is used by model viewers and
#   editors to decide how to display and edit the attribute. Legal types are:
#   <ul>
#     <li><b>string</b>: Can be any arbitrary value. This is the default.
#     <li><b>number</b>: A number.
#     <li><b>integer</b>: An integer.
#     <li><b>boolean</b>: A boolean value.
#     <li><b>choice</b>: A small set of (arbitrary) possible values. These
#     are intended for display by radiobuttons.
#     <li><b>set</b>: A larger set of (arbitrary) possible values. These
#     are intended for display by an option menu.
#     <li><b>font</b>: A font value, specified as a list {_family_ _size_
#     _style_}. The second and third elements can be omitted -- see
#     FontManager for details.
#     <li><b>color</b>: A symbolic color value.
#   </ul>
#
#   <dt><b>-values</b> <i>value-list</i>
#   <dd>
#   A list containing the set of legal values of the parameter. Valid for
#   the _choice_ and _set_ types only. The default is the null list.
#
#   </dl>
#
# <dt><b>group</b> _name_
# <dd>
# A group of items. This is a structuring mechanism for the library.
# Tools that access a library will usually treat each group as a new
# hierarchical menu or palette. Groups have the following attributes:
#   <dl>
#   <dt><b>-label</b> _string_
#   <dd>
#   The label used to display the group in menu bars and the like.
#   By convention, groups with a null label
#   will not be made available in user interfaces.
#
#   <dt><b>-description</b> _html-string_
#   <dd>
#   An HTML description of the purpose or contents of the group. This
#   attribute is generally used by help viewers.
#
#   </dl>
#
# <dt><b>xref</b> _name_ _value-list_
# <dd>
# A cross-reference to other models. The usage of this type is not
# dictated by this model at all -- rather, it is provided to allow
# other models and widgets that manipulate libraries to set up
# cross-references of various kinds. By convention, a <b>xref</b>
# item is a name-value list suitable for setting into an array, where
# each name is the full name of an item in this library, and the value
# is a cross-reference to an item in another model. The <b>xref</b>
# item has no attributes, and cannot nest other items.
#
# </dl>
#
# Although the <b>item</b> type is provided in this model, subclasses
# may also want to define additional types.
#
# Here is an example of a library model:
# <pre><tcl>
#   catch {delete object lib}
#   set lib [::tycho::Library [::tycho::autoName lib]]
#   $lib parse {
#     group a -label "Group A" {
#         item x -label "Item x" {
#             attribute width -default 0 -type integer
#             attribute height -default 0 -type integer
#         }
#         item y -label "Item y"
#         item z -label "Item z"
#     }
#     group b -label "Group B" {
#         item x -label "Item x"
#         item y -label "Item y"
#         item z -label "Item z"
#     }
#  }
#  $lib describe
# </tcl></pre>
#
# Produce a list that can be used to create a new item from the lib:
# <pre><tcl>
#     $lib attributes {a x}
# </tcl></pre>
#
# Create a menubar and add this library to it:
# <tcl quiet><pre>
#    proc select {library item} {
#        ::tycho::inform "item $item: [$library describe $item]"
#    }
#    catch {delete object .mb}
#    ::tycho::MenuBar .mb
#    pack .mb
#    raise .
#    wm deiconify .
#    .mb addMenu foo -label Foo
#    $lib makemenu item .mb foo "select $lib"
# </pre></tcl>
#
class ::tycho::Library {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                   public variables                      ####

    # The types of entity defined by this library
    public variable visibletypes {}

    #################################################################
    ####                     public methods                      ####

    # Get the attributes of an item
    method attributes {item}

    # Get the attributes with defaults of an item
    method defaults {item}

    # Instantiate an item into a data model
    method instantiate {item datamodel args}

    # Create a menu with items in this library
    method makemenu {menubar menuname args}

    # Create a menu with items in this library
    method _makemenu {types menubar menuname command context callback}

    #################################################################
    ####                   protected methods                     ####

    # Instantiate subitems of an item
    protected method _instantiate {item datamodel itemname}
}

########################################################################
#### constructor
#
body ::tycho::Library::constructor {args} {
    # Evaluate options
    eval configure $args

    # Add to the list of printable types
    lappend printable \
	    -visibletypes

    # Define the "attribute" entity
    define attribute \
	    :leafonly 1 \
	    -default "" \
	    -description "" \
	    -label "" \
	    -readonly 0 \
	    -type string \
	    -values {}

    # Define the "group" type.
    define group \
	    -label "" \
	    -description ""

    # Define the "item" type.
    define item \
	    -label "" \
	    -description ""

    # The xref entity type. Label is for menu display.
    define xref \
    	:leafonly 1
}

########################################################################
#### attributes
#
# Get the attributes of the item. This method takes the list of attributes
# of _item_, and the <b>-default</b> attribute of each nested
# item of type <b>attribute</b>, and returns them in a list. This
# data is typically used to instantiate a library component into
# another data model. An error will be raised if _item does not
# exist. See instantiate{} for a more complex instantation mechanism.
#
body ::tycho::Library::attributes {item} {
    if ![exists $item] {
	error "unknown item \"$item\""
    }
    set result [attrget $item]
    foreach attr [match attribute $item] {
	lappend result -$attr [attrget [concat $item $attr] -default]
    }
    return $result
}

########################################################################
#### defaults
#
# Get the attributes that have default values and their default value.
# Each item in the returned list is the name of a nested item of type
# <b>attribute</b>, and its <b>-default</b> attribute.
#
body ::tycho::Library::defaults {item} {
    if ![exists $item] {
	error "unknown item \"$item\""
    }
    set result ""
    foreach attr [match attribute $item] {
	lappend result -$attr [attrget [concat $item $attr] -default]
    }
    return $result
}

########################################################################
#### instantiate
#
# Instantiate an item from the library. This method assumes that the
# _item_ is meta-data -- a description from which an item can be
# created. It gets the attributes of _item_ using the attributes{} method, 
# and then adds a new item to _datamodel_. The following optional
# arguments are accepted:
#
# <dl>
# <dt><b>-itemtype</b> _type_
# <dd>
# The type of item to instantiate in the data model. If not
# given, the instantiated item will have the same type as
# the metadata item.
#
# <dt><b>-itemname</b> _name_
# <dd>
# The name of the item to instantiate in the data model. If not
# given, a name will be generated.
#
# <dt><b>-itemcontext</b> _context_
# <dd>
# The context within which to generate the new item. If not given,
# the item will be generated at the top level. Note, however, that
# <b>-itemname</b> may be a list -- in this case, the full name of
# the item is the concatenation of <b>-context</b> and <b>-itemname</b>.
# 
# <dt><b>-_attribute_</b> _value_
# <dd>
# Any other attribute will be added to the attribute list of the
# created item.
#
# </dl>
#
# Nested items that are not of type <b>attribute</b> will
# also be added to the model -- the name and type of each nested item
# will be the same as in the metadata item.
# The return value is the name of the top-level item. Each item is added
# via the publish{} method of the Model class, so that subscribers will
# be notified of the new data.
#
body ::tycho::Library::instantiate {item datamodel args} {
    if ![exists $item] {
        error "unknown item \"$item\""
    }
    # Extract options
    array set opts {-itemtype {} -itemname {} -itemcontext {}}
    array set opts $args

    set itemname $opts(-itemname)
    unset opts(-itemname)

    set itemtype $opts(-itemtype)
    unset opts(-itemtype)

    set itemcontext $opts(-itemcontext)
    unset opts(-itemcontext)

    # Get the full name
    if { $itemname == "" } {
        set itemname [$datamodel uniqueid [concat $itemcontext $itemtype]]
    }

    # Get the item type
    if { $itemtype == "" } {
        set itemtype [_type $item]
    }

    # Mark the history
    $datamodel mark set temp

    # Add the item
    eval [list $datamodel publish add $itemtype $itemname] \
            [attributes $item] [array get opts]

    # Add subitems
    _instantiate $item $datamodel $itemname

    # Compact the history and replace the undo command with a single
    # delete command
    $datamodel history compact temp current
    $datamodel history undo current "delete $itemname"

    # Return the new item
    return $itemname
}

########################################################################
#### _makemenu
#
# Low-level method to add a menu to a menubar. See the makemenu{}
# method for documentation.
#
body ::tycho::Library::_makemenu \
        {types menubar menuname command context callback} {
    # Call callback
    if { $callback != "" } {
        uplevel #0 $callback [list $menuname $context]
    }

    # Add cascade menus
    foreach g [match group $context] {
        set item [concat $context $g]
        set entry $menuname.$g
        if [exists $item -label] {
            set label [attrget $item -label]
            if { $label != "" } {
                $menubar add cascade $entry $menuname -label $label
                _makemenu $types $menubar $entry $command $item $callback
            }
        }
    }
    # Add items
    foreach t $types {
        foreach i [match $t $context] {
            set item [concat $context $i]
            set entry $menuname.$i
            if [exists $item -label] {
                set label [attrget $item -label]
                if { $label != "" } {
                    $menubar command $entry $menuname \
                            -label $label \
                            -command [concat $command [list $item]]
                }
            }
        }
    }
}

########################################################################
#### makemenu
#
# Add a menu to a menubar containing items in this library. Only
# items that have a non-null <b>-label</b> attribute will be added.
# The first argument is the types of item to be added to the menubar.
# The second argument is the menubar. The third is the name
# of the menu to place these items into. The following optional
# arguments are recognised:
#
# <dl>
# <dt><b>-customizecommand</b> _script_
# <dd>
# Specify a command prefix to evaluate before any items are
# added to a new menu. This can be used for placing menu
# entries at the head of each menu. The menu name and the
# group containing the items that will be added to that menu
# are appended to the script. 
#
# <dt><b>-command</b> _script_
# <dd>
# Specify a command prefix to evaluate when a library item is
# added. When a menu entry is selected, the menu name will be
# appended to this command and evaluated at the global scope.
#
# <dt><b>-context</b> _context_
# <dd>
# The context to start getting items from. By default, it is null,
# meaning that all items in the librray may be added to the library.
#
# <dt><b>-types</b> _typelist_
# <dd>
# Specify the types of entity that are added into the menu.
# If not supplied, the types will be given by the <b>-entities<b>
# configuration option of the library, if there is one. If not
# supplied and the library has no <b>-entities<b> option, then
# all types except <b>attribute</b>, <b>group</b>, and <b>xref</b>
# will be added. 
#
# </dl>
#
body ::tycho::Library::makemenu {menubar menuname args} {
    # Extract arguments
    array set opts {-command "puts" -customizecommand "" \
        -context "" -types ""}
    array set opts $args
 
    if { $opts(-types) == "" } {
        set opts(-types) $visibletypes
    }
    if { $opts(-types) == "" } {
        set opts(-types) [::tycho::lsubtract \
                [types] {attribute group xref}]
    }

    # Call the recursive lower-level method
    _makemenu $opts(-types) $menubar $menuname $opts(-command) \
            $opts(-context) $opts(-customizecommand)
}

###################################################################
###################################################################
####                      protected methods                    ####

########################################################################
#### _instantiate
#
# Instantiate subitems of an item. This method performs the instantiation
# of subitems begun by the instantiate{} method: each subitem in this
# model of _item_ is added to item _itemname_ of _datamodel_. This
# method is recursive, so nested subitems will also be instantiated.
# This method is protected so it cannot be accessed by clients; however,
# some subclasses may wish to override it in order to handle instantiation
# of subitems differently or more efficiently. As for instantiate{},
# each subitem is added via the publish{} method.
#
body ::tycho::Library::_instantiate {item datamodel itemname} {
    # Process each type
    foreach t [types] {
        if { $t == "attribute" } {
            continue
        }
        # Process each subitem
        foreach i [match $t $item] {
            # Add the subitem
            eval [list $datamodel publish add $t [concat $itemname $i]] \
                    [attributes [concat $item $i]]

	    # Process its subitems
	    _instantiate [concat $item $i] $datamodel [concat $itemname $i]
	}
    }
}
