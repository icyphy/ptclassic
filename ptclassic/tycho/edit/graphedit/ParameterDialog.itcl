# A dialog box for editing parameters in graph editors.
# This will change, do not rely on it.
#
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### ParameterDialog
#
# A widget for editing parameters of an item in a Library 
# model. This edit widget has two modes of operation:
# <ol
# <li> To edit the item in the Library model itself, or
# <li> To edit the attributes of an item in some other model.
# </ol>
#
# The first mode is the more straight-forward: the parameter
# edit widgets modified the values of the parameter entities
# contained in a given item entity. The second mode is designed
# for "master-instance" scenarios, where a Library model is used
# as the "master" to describe "instances" -- that is, entities
# in some other model. The master describes the default value,
# default attributes values, and information about the attributes
# that is used to create editors for the attributes.
#
# FIXME: This duplicates a pile of code from PreferenceEditor.
# What we need to do is modify PreferenceDialog to use
# ParameterDialog instead of PreferenceEditor.
#
class ::tycho::ParameterDialog {
    inherit ::tycho::Query

    constructor {args} {}
    destructor {}


    ###################################################################
    ####                            options                        ####

    # The command to execute to update parameters
    itk_option define -command command Command {}

    ###################################################################
    ####                         public methods                    ####

    # Edit the parameters of a master or attributes of an instance
    method edit {model item \
            {instancemodel {}} {instancename {}} {instancetype {}}}

    # Build a non-modal color browser
    method editcolor {parameter label current}

    # Build a non-modal font browser
    method editfont {parameter label current}

    # Refresh the parameter display
    method refresh {}

    # Update specified or changed parameters
    method update {}

    # Update a color field from a non-modal color browser
    method updatecolor {parameter dialog}

    # Update a color field display from a non-modal color browser
    method updatecolorbutton {parameter dialog}

    # Update a color dialog box with the current parameter
    method updatecolordialog {parameter dialog}

    # Update a font field from a non-modal font browser
    method updatefont {parameter dialog}

    # Update a font field display from a non-modal font browser
    method updatefontbutton {parameter dialog}

    # Update a font dialog box with the current parameter
    method updatefontdialog {parameter dialog}

    ###################################################################
    ####                         private procs                     ####

    # Compare two lists by element 1
    # FIXME: Will not be needed with Tcl8.0
    private proc cmp {a b} {
	string compare [lindex $a 1] [lindex $b 1]
    }

    ###################################################################
    ####                       private variables                   ####

    # List of editors opened by this editor
    private variable editors {}

    # The library model being edited or used as master
    private variable libraryModel {}

    # The item in the library
    private variable libraryItem {}

    # The instance model being edited
    private variable instanceModel {}

    # The instance item being edited
    private variable instanceItem {}

     # The type of the instance item being edited
    private variable instanceType {}

    # The separator character of the model
    private variable separator "."
}


#######################################################################
#### constructor
#
body ::tycho::ParameterDialog::constructor {args} {
    addButton apply -text "Apply <M-a>" -command "$this update"
    configure -okcommand "$this update"

    # Meta-a performs update
    bind $itk_component(hull) <Meta-a> \
	    "$this update; break"

    # Initialise options
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
# Unsubscribe from the model and delete sub-editors
#
body ::tycho::ParameterDialog::destructor {} {
    if { $libraryModel != "" } {
        catch {$libraryModel unsubscribe $libraryItem $this}
        foreach e $editors {
            catch {delete object $e}
        }
    }
}

#######################################################################
#### edit
#
# Edit the given item of the given model.
#
body ::tycho::ParameterDialog::edit {model item \
        {instancemodel {}} {instancename {}} {instancetype {}}} {
    puts "ParameterDialog::edit $model $item $instancemodel $instancename $instancetype"

    # Set the current model
    # FIXME: delete the old query widgets?
    set libraryModel $model
    set libraryItem $item
    set instanceModel $instancemodel
    set instanceItem $instancename
    set instanceType $instancetype

    # Configure the title
    if { $instanceModel != "" } {
        configure -title "$instanceModel: [join $instanceItem .]"
    } else {
        configure -title [$libraryModel attrget $libraryItem -label]
    }
    configure -labelcolor [::tycho::color blue black]

    # Initialize lists of parameters by type
    foreach type {boolean choice set font color integer string number} {
	set _$type {}
    }

    # If editing an instance, subscribe to the instance model
    if { $instanceModel != "" } {
        # Subscribe to the model so other changes update the display
        # $instanceModel subscribe data $this "$this refresh"
    }

    # Build list of parameters by type
    foreach attr [$libraryModel match attribute $libraryItem] {
	set label [$libraryModel attrget [concat $libraryItem $attr] -label]
	set type [$libraryModel attrget [concat $libraryItem $attr] -type]
	if { $label != "" } {
puts "%[list $libraryItem $attr $label]"
	    lappend _$type [list $libraryItem $attr $label]
	}

	# Subscribe to the model so other changes update the display
        # FIXME: May as well just call refresh{}?
	#$libraryModel subscribe data $this $libraryItem$separator$parameter \
	#	"$this clear $parameter; $this insert $parameter \
	#	\[$libraryModel get parameter $name\]"
    }

    # Sort the lists of parameters by label
    foreach type {boolean choice set font color integer string number} {
	set _$type [eval concat \
		[lsort -command ::tycho::ParameterDialog::cmp [set _$type]]]
    }

    # Get the values of the parameters
    if { $instanceModel == "" } {
        # Get values from the library model
        foreach tag [$libraryModel match attribute $libraryItem] {
            set vals(-$tag) [$libraryModel attrget $libraryItem -$tag]
        }
    } else {
        # Get values from the instance model.
        array set vals [$instanceModel attrset $instanceItem]

        # Check with the library, in case the attribute was added
        # to the library after the star was originally instantiated
        foreach tag [$libraryModel match attribute $libraryItem] {
            if ![info exists vals(-$tag)] {
                set vals(-$tag) [$libraryModel attrget \
                        [concat $libraryItem $tag] -default]
                
                # Update the instance model
                $instanceModel publish attrset $instanceItem -$tag $vals(-$tag)
            }
        }
    }

    # Build the parameter queries. Booleans are a checkbox.
    foreach {name tag label} $_boolean {
	check $tag $label $vals(-$tag)
    }
    # Choice is a pull-down menu
    foreach {name tag label} $_choice {
	choice $tag $label \
		[$libraryModel itemcget parameter $name -values] \
		$vals(-$tag)
    }
    # Set is a set of radiobuttons
    foreach {name tag label} $_set {
	radio $tag $label \
		[$libraryModel itemcget parameter $name -values] \
		$vals(-$tag)
    }
    # Numbers and strings are entry widgets
    foreach {name tag label} $_integer {
	line $tag $label $vals(-$tag)
    }
    foreach {name tag label} $_number {
	line $tag $label $vals(-$tag)
    }
    foreach {name tag label} $_string {
	line $tag $label $vals(-$tag)
    }
    # Fonts are a non-modal font browser
    foreach {name tag label} $_font {
	mediated $tag $label \
		$vals(-$tag) \
		[list $this editfont $tag $label]
    }
    # Colors are a non-modal color browser
    foreach {name tag label} $_color {
	mediated $tag $label \
		$vals(-$tag) \
		[list $this editcolor $tag $label]
    }
}

#######################################################################
#### editcolor
#
body ::tycho::ParameterDialog::editcolor {parameter label current} {
    set dialog [string trimleft $this.$parameter ":"]

    # If there's already one of these, just raise it
    if { [::info which -command $dialog] != "" } {
	raise $dialog
	return $current
    }

    # Make a color browser
    uplevel #0 [list ::tycho::ColorBrowser $dialog \
	    -title $label \
	    -default $current]
    wm deiconify $dialog

    # Remember it
    lappend editors $dialog

    # Give it an apply button. Pressing it applies the change.
    $dialog addButton apply -row 1 -column 0 \
	    -text "Apply" \
	    -command "$this updatecolor $parameter $dialog"

    # Subscribe to the model so undo and redo update the dialog
    $libraryModel subscribe $dialog $libraryItem$separator$parameter \
	    "$this updatecolordialog $parameter $dialog"

    # We have to modify the buttons to update the color
    $dialog configure -okcommand "$this updatecolor $parameter $dialog"

    # Return the same value, to fool Query into thinking
    # that nothing happened. The problem is that the "mediated"
    # query in Query assumes that the returned result is
    # the new value of the query.
    return $current
}

#######################################################################
#### editfont
#
body ::tycho::ParameterDialog::editfont {parameter label current} {
    set dialog [string trimleft $this.$parameter ":"]
    set name $libraryItem$separator$parameter

    # If there's already one of these, just raise it
    if { [::info which -command $dialog] != "" } {
	raise $dialog
	return $current
    }

    # Make a font browser but don't map it to the screen yet
    uplevel #0 [list ::tycho::FontDialog $dialog \
	    -title $label \
 	    -initialfont $current]

    # Remember it
    lappend editors $dialog

    # Give it an apply button. Pressing it applies the change.
    $dialog addButton apply -row 0 -column 2 \
	    -text "Apply" \
	    -command "$this updatefont $parameter $dialog"

    # Give it a help button.
    $dialog addButton help -row 0 -column 3 \
	    -text "Help" \
	    -command {::tycho::File::openContext \
	    [file join $TYCHO kernel gui doc usersGuides FontDialogHelp.html]}

    # Now that it has all its buttons, map it to the screen
    # and tell it not to change size anymore.
    wm deiconify $dialog
    after idle [list catch [list $dialog freeze]]

    # Subscribe to the model so undo and redo update the dialog
    $libraryModel subscribe $dialog $name \
	    "$this updatefontdialog $parameter $dialog"

    # We have to modify the buttons to update the font
    $dialog configure -okcommand "$this updatefont $parameter $dialog"

    # Return the same value, to fool Query into thinking
    # that nothing happened. The problem is that the "mediated"
    # query in Query assumes that the returned result is
    # the new value of the query.
    return $current
}

#######################################################################
#### refresh
#
# Update the displayed values
#
body ::tycho::ParameterDialog::refresh {} {
    # Clear all
    clear

    if { $instanceModel == "" } {
        # Get values from the library model
        foreach tag [names] {
            insert $tag [$libraryModel get parameter $tag]
        }
    } else {
        # Get values from the attributes of an instance
        array set vals [$instanceModel access attrs $instanceType $instanceItem]
        foreach tag [names] {
            insert $tag $vals(-$tag)
        }
    }
}

#######################################################################
#### update
#
# With no args, update any changed parameters. With args, always
# update specified parameters.
#
body ::tycho::ParameterDialog::update {} {
    set updated {}
    # Collect the changed parameters and change the model
    foreach {tag val} [$this get] {
	if { $val != [$instanceModel attrget $instanceItem -$tag] } {
puts "$instanceModel publish attrset $instanceItem -$tag $val"
	    $instanceModel publish attrset $instanceItem -$tag $val
	    lappend updated $tag $val
	}
    }
    # If the update command is supplied, call it
    if { $itk_option(-command) != "" && $updated != "" } {
	uplevel #0 $itk_option(-command)
    }
}

#######################################################################
#### updatecolor
#
body ::tycho::ParameterDialog::updatecolor {parameter dialog} {
    # Get the current color from the dialog
    set color [$dialog get entry]
    
    # If it's different to the current parameter, update it. This
    # is needed only so that the undo history does not have entries
    # that make no real change
    set name $libraryItem$separator$parameter
    if { $color != [$libraryModel get parameter $name] } {
	$libraryModel assign parameter $name $color

	# If the update command is supplied, call it - ???
	if { $itk_option(-command) != "" } {
	    uplevel #0 $itk_option(-command)
	}
    }
}

#######################################################################
#### updatecolorbutton
#
body ::tycho::ParameterDialog::updatecolorbutton {parameter dialog} {
    # Get the current color from the dialog
    set color [lindex [$dialog get] 1]
    
    # Update the display
    insert $parameter $color
}

#######################################################################
#### updatecolordialog
#
body ::tycho::ParameterDialog::updatecolordialog {parameter dialog} {
    # Get the current color from the parameters
    set name $libraryItem$separator$parameter
    set color [$libraryModel get parameter $name]
    
    # Modify the color dialog
    # FIXME: Need to a method to ListBrowser to do this
    # $dialog setItem $color

    # Update the display
    insert $parameter $color
}

#######################################################################
#### updatefont
#
body ::tycho::ParameterDialog::updatefont {parameter dialog} {
    # Get the current font from the dialog
    set font [$dialog get]
    set font [list [lindex $font 1] [lindex $font 3] [lindex $font 5]]
    
    # If it's different to the current parameter, update it. This
    # is needed only so that the undo history does not have entries
    # that make no real change
    set name $libraryItem$separator$parameter
    if { $font != [$libraryModel get parameter $name] } {
	$libraryModel assign parameter $name $font

	# If the update command is supplied, call it - ???
	if { $itk_option(-command) != "" } {
	    uplevel #0 $itk_option(-command)
	}
    }
}

#######################################################################
#### updatefontbutton
#
body ::tycho::ParameterDialog::updatefontbutton {parameter dialog} {
    # Get the current font from the dialog
    set font [$dialog get]
    set font [list [lindex $font 1] [lindex $font 3] [lindex $font 5]]
    
    # Update the display
    insert $parameter $font
}

#######################################################################
#### updatefontdialog
#
body ::tycho::ParameterDialog::updatefontdialog {parameter dialog} {
    # Get the current font from the parameters
    set font [$libraryModel get parameter $libraryItem$separator$parameter]
    
    # Modify the font dialog
    # FIXME: Add a method to FontDialog to do this.
    if { [lindex $font 0] != "" } {
	$dialog insert family [lindex $font 0]
    }
    if { [lindex $font 1] != "" } {
	$dialog insert size [lindex $font 1]
    }
    if { [lindex $font 2] != "" } {
	$dialog insert style [lindex $font 2]
    }
    $dialog updateDisplay

    # Update the display
    insert $parameter $font
}

