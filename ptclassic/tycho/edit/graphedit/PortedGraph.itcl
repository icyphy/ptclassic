##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### PortedGraph
#
# The _PortedGraph_ model is a directed graph with the
# notion of "ports" at each vertex. Edges between vertices must
# connect to a port of a vertex rather than just the vertex.
# Ports are implemented as an entity nested within
# vertices, and can therefore be configured with attributes.
# The most obvious application of this kind of graph is dataflow
# graphs, in which each edge from a vertex must be uniquely identified.
#
# _PortedGraph_ adds the following types to those inherited
# from _AbstractGraph_:
# <dl>
# <dt><b>edge</b> _name_
# <dd>
# An edge between two ports. The name of an edge does not contain
# information about which vertices or ports the edge connects.
# (This is in contrast to the Digraph model.)
# Edges have the following attributes:
#   <dl>
#   <dt><b>-from</b> _portorvertex_
#   <dd>
#   The source of the edge. This can be a port name (a list of
#   two elements) or a vertex.
#
#   <dt><b>-to</b> _portorvertex_
#   <dd>
#   The target of the edge.This can be a port name (a list of
#   two elements) or a vertex.
#
#   </dl>
#
# <dt><b>port</b> _name_
# <dd>
# A port of a vertex. Ports are used to connect edges, but can also
# be given attributes of their own. Ports are usefully only
# contained with a vertex.
#
# </dl>
#
# Here are some examples of creating and accessing a ported digraph.
# The graph looks like this:
# <pre>
#   a---->c--->
#         ^
#   b-----+--->d
# </pre>
# Create the graph, configure attributes of edges and vertices,
# and load data into it:
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::PortedGraph [::tycho::autoName graph]]
#     $graph type configure vertex -weight 1
#     $graph type configure edge -initialdelay 0
#     $graph type configure port -tokencount 1 -type input
#     $graph parse {
#         vertex a {
#             port out -tokencount 2 -type output
#         }
#         vertex b {
#             port out -type output
#         }
#         vertex c {
#             port in-0
#             port in-1
#             port out -type output
#         }
#         vertex d {
#             port in
#         }
#         edge x -from {a out} -to {c in-0} -initialdelay 1
#         edge y -from {b out} -to {c in-1}
#         edge z -from {b out} -to {d in}
#     }
#     $graph describe
# </tcl></pre>
#
# Get the ports of a vertex:
# <pre><tcl>
#     $graph match port c
# </tcl></pre>
#
# Get the edges coming _in_ to a given port:
# <pre><tcl>
#     $graph edges * {c in-0}
# </tcl></pre>
#
# Get the edges coming _out_ of a given port:
# <pre><tcl>
#     $graph edges {b out}
# </tcl></pre>
#
# Delete an edge:
# <pre><tcl>
#     $graph delete z
#     $graph describe
# </tcl></pre>
#
# Delete a vertex but not edges connected to it, and record the deletion:
# <pre><tcl>
#     $graph record delete c
#     $graph describe
# </tcl></pre>
#
# Undo the deletion:
# <pre><tcl>
#     $graph undo
#     $graph describe
# </tcl></pre>
#
# Delete a vertex and all edges connected to it, recording it:
# <pre><tcl>
#     $graph record remove c
#     $graph describe
# </tcl></pre>
#
# Undo the deletion:
# <pre><tcl>
#     $graph undo
#     $graph describe
# </tcl></pre>
#
class ::tycho::PortedGraph {
    inherit ::tycho::AbstractGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Return edges matching a vertex and port patterns
    method edges {{v1 *} {v2 *}}

    # Remove a vertex _and_ adjacent edges from the graph
    method remove {vertex}

    # "Repair" a graph by deleting improperly-connected edges
    method repair {}

    # Get the edges within a subgraph
    method subgraphEdges {args}

    # Get the input edges to a subgraph
    method subgraphInputs {args}

    # Get the output edges from a subgraph
    method subgraphOutputs {args}

    # Test whether a graph is correctly constructed
    method verify {}

    #################################################################
    ####                   protected methods                     ####

    # Update the cache
    protected method _updatecache

    #################################################################
    ####                   private variables                     ####

    # The edges in the graph, in cached form
    private variable _edges
    
    method debug {args} {
    	eval $args
    }
}

########################################################################
#### constructor
#
body ::tycho::PortedGraph::constructor {args} {
    # Define the "edge" type
    type define edge \
            :override 0 \
            :leafonly 1 \
            -from {} \
            -to {} 

    # Define the "port" entity
    type define port \
	    :leafonly 1

    # Turn off the :leafonly option of vertices, so that
    # they can contain ports
    type configure vertex :leafonly 0

    # Evaluate options
    eval configure $args
}

########################################################################
#### edges
#
# Return a list containing the edges of the graph that match the
# given patterns, where _v1_ and _v2_ are the source and
# target of the edge. These can be glob patterns. Note that if
# testing for connection to ports, supply a two-list for
# each, as in 
# <pre>
#    $graph edges {vertex1 output}
#
body ::tycho::PortedGraph::edges {{v1 *} {v2 *}} {
    _update
    set result {}
    foreach {_ edge} [array get _edges [list $v1 $v2]] {
        lappend result $edge
    }
    return $result
}

########################################################################
#### remove
#
# Delete a vertex and all connected edges from the graph, recording
# commands if the recording flag is set.
#
body ::tycho::PortedGraph::remove {vertex} {
    if { ![exists $vertex] || [type get $vertex] != "vertex" } {
        error "Unknown vertex: \"$vertex\""
    }
    # Mark the history
    mark set temp

    # Delete connected edges
    foreach edge [edges $vertex] {
        delete $edge
    }
    foreach edge [edges * * $vertex *] {
        delete $edge
    } 	
    # Delete the vertex
    delete $vertex

    # Compact the history
    if $recording {
        history compact temp current
    }
}

########################################################################
#### repair
#
# "Repair" a graph by deleting improperly-connected edges.
# Append to the history if recording.
#
body ::tycho::PortedGraph::repair {} {
    mark set temp
    foreach edge [match edge] {
        if {![exists [attrget $edge -from]] || ![exists [attrget $edge -to]]} {
            # Delete a disconnected edge
            delete $edge
        }
    }
    if $recording {
        history compact temp current
    }
}

########################################################################
#### subgraphEdges
#
# Return the edges within the sub-graph given by the arguments. Each
# argument is the name of a vertex. The edges can either be connected
# directly to a vertex or to a port within a vertex.
#
body ::tycho::PortedGraph::subgraphEdges {args} {
    _update
    set result {}
    foreach v $args {
        array set out [concat \
                [array get _edges [list "$v *" *]] \
                [array get _edges [list $v *]]]
    }
    foreach v $args {
        foreach {edge name} [concat \
                [array get _edges [list * "$v *"]] \
                [array get _edges [list * $v]]] {
            if [::info exists out($edge)] {
                lappend result $name
            }
        }
    }
    return $result
}

########################################################################
#### subgraphInputs
#
# Return the input edges to a sub-graph. Each
# argument is the short name of a vertex.
#
body ::tycho::PortedGraph::subgraphInputs {args} {
    _update
    set result {}
    foreach v $args {
        array set in [concat \
                [array get _edges [list * "$v *"]] \
                [array get _edges [list * $v]]]
    }
    foreach v $args {
        foreach {edge name} [concat \
                [array get _edges [list "$v *" *]] \
                [array get _edges [list $v *]]] {
            if [::info exists in($edge)] {
                unset in($edge)
            }
        }
    }
    foreach {_ e} [array get in] {
        lappend result $e
    }
    return $result
}

########################################################################
#### subgraphOutputs
#
# Return the output edges from a sub-graph. Each
# argument is the short name of a vertex.
#
body ::tycho::PortedGraph::subgraphOutputs {args} {
    _update
    set result {}
    foreach v $args {
        array set out [concat \
                [array get _edges [list "$v *" *]] \
                [array get _edges [list $v *]]]
    }
    foreach v $args {
        foreach {edge name} [concat \
                [array get _edges [list * "$v *"]] \
                [array get _edges [list * $v]]] {
            if [::info exists out($edge)] {
                unset out($edge)
            }
        }
    }
    foreach {_ e} [array get out] {
        lappend result $e
    }
    return $result
}

########################################################################
#### verify
#
# Test whether a graph is properly constructed.
# This method checks for improperly-connected edges.
#
body ::tycho::PortedGraph::verify {} {
    foreach edge [match edge] {
        if {![exists [attrget $edge -from]] || ![exists [attrget $edge -to]]} {
            return 0
        }
    }
    return 1
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _updatecache
#
# Clear the cache and build updated versions of the _parents,
# _children, _edges, and _vertices arrays.
#
body ::tycho::PortedGraph::_updatecache {} {
    # Do superclass first
    ::tycho::AbstractGraph::_updatecache
    catch {unset _edges}

    # Regenerate vertex list
    set _vertices [match vertex]

    # Have to make sure that arrays are initialized...
    foreach v $_vertices {
        set _parents($v) {}
        set _children($v) {}
    }

    # Regenerate parent-children
    foreach edge [match edge] {
        set src [attrget $edge -from]
        set tgt [attrget $edge -to]
        set _edges([list $src $tgt]) $edge

        set src [lindex $src 0]
        set tgt [lindex $tgt 0]
        lappend _parents($src) $tgt
        lappend _children($tgt) $src
    }
    foreach {v list} [array get _parents] {
    	set _parents($v) [::tycho::lnub $list]
    }
    foreach {v list} [array get _children] {
    	set _children($v) [::tycho::lnub $list]
    }

    # Validate cache
    cache validate
}
