##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### PortedDigraph
#
# The _PortedDigraph_ model is a directed graph with the
# notion of "ports" at each vertex. Edges between vertices must
# connect to a port of a vertex rather than just the vertex.
# Keys are implemented as an entity nested within
# vertices, and can therefore be configured with attributes.
# The most obvious application of this kind of graph is dataflow
# graphs, in which each edge from a vertex must be uniquely identified.
# Note, however, that ports are not constrained to be "inputs" or "outputs".
#
# Here are some examples of creating and accessing a ported digraph.
# The graph looks like this:
# <pre>
#   a---->c--->
#         ^
#   b-----+--->d
# </pre>
# Create the graph, configure attributes of edges and vertices,
# and load data into it:
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::PortedDigraph [::tycho::autoName graph]]
#     $graph type configure edge -initialdelay 0
#     $graph type configure port -tokencount 1
#     $graph type configure port -type input
#     $graph parse {
#         vertex a {
#             port out -tokencount 2 -type output
#         }
#         vertex b {
#             port out -type output
#         }
#         vertex c {
#             port in-0
#             port in-1
#             port out -type output
#         }
#         vertex d {
#             port in
#         }
#         edge a out c in-0 -initialdelay 0
#         edge b out c in-1
#         edge b out d in
#     }
#     $graph describe
# </tcl></pre>
#
# Get the ports of a vertex:
# <pre><tcl>
#     $graph ports c
# </tcl></pre>
#
# Get the edges coming _in_ to a given port:
# <pre><tcl>
#     $graph edges * * c in-0
# </tcl></pre>
#
# Get the edges coming _out_ of a given port:
# <pre><tcl>
#     $graph edges b out * *
# </tcl></pre>
#
# Delete an edge:
# <pre><tcl>
#     $graph edgedelete b out d in
#     $graph describe
# </tcl></pre>
#
# Delete a vertex but not edges connected to it, and record the deletion:
# <pre><tcl>
#     $graph record vertexdelete c
#     $graph describe
# </tcl></pre>
#
# Undo the deletion:
# <pre><tcl>
#     $graph undo
#     $graph describe
# </tcl></pre>
#
# Delete a vertex and all edges connected to it, recording it:
# <pre><tcl>
#     $graph record delete* c
#     $graph describe
# </tcl></pre>
#
# Undo the deletion:
# <pre><tcl>
#     $graph undo
#     $graph describe
# </tcl></pre>
#
class ::tycho::PortedDigraph {
    inherit ::tycho::AbstractGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####


    # Remove a vertex _and_ adjacent edges from the graph
    method delete* {vertex}

    # Add an edge and attributes to the graph
    method edge {vertex1 port1 vertex2 port2 args}

    # Get an attribute or attributes of an edge
    method edgecget {vertex1 port1 vertex2 port2 {attribute {}}}

    # Configure the edge with one or more attributes
    method edgeconfigure {vertex1 port1 vertex2 port2 args}

    # Remove an edge from the graph
    method edgedelete {vertex1 port1 vertex2 port2}

    # Return edges matching a vertex and port patterns
    method edges {{vertex1 *} {port1 *} {vertex2 *} {port2 *}}

    # Add a port to a vertex
    method port {vertex port args}

    # Get an attribute or attributes of a port
    method portcget {vertex port {attribute {}}}

    # Configure the port with one or more attributes
    method portconfigure {vertex port args}

    # Remove a port from the graph
    method portdelete {vertex port}

    # Return ports of a vertex that match a pattern
    method ports {vertex {port *}}

    # "Repair" a graph by deleting improperly-connected edges
    method repair {}

    # Get the edges within a subgraph
    method subgraphEdges {args}

    # Get the input edges to a subgraph
    method subgraphInputs {args}

    # Get the output edges from a subgraph
    method subgraphOutputs {args}

    # Test whether a graph is correctly constructed
    method verify {}

    #################################################################
    ####                   protected methods                     ####

    # Return a description of a single item
    protected method _describeitem {name {prefix {}}}

    # Update the cache
    protected method _updatecache
}

########################################################################
#### constructor
#
body ::tycho::PortedDigraph::constructor {args} {
    # Define the "edge" type
    type define edge \
            -override 1 \
            -leafonly 1

    # Define the "port" entity: no value, no default attributes
    type define port -leafonly 1

    # Turn off the -leaf option of vertices, so that
    # they can contain ports
    # type configure vertex -leaf 0

    # Evaluate options
    eval configure $args
}

########################################################################
#### delete*
#
# Delete a vertex and all connected edges from the graph, and
# return the undo command.
#
body ::tycho::PortedDigraph::delete* {vertex} {
    if ![exists vertex:$vertex] {
        error "Unknown vertex: \"$vertex\""
    }

    # Start undo command
    set undo [list sequence]

    # Delete outward edges
    foreach {v1 k1 v2 k2} [edges $vertex * * *] {
	lappend undo [edgedelete $v1 $k1 $v2 $k2]
    }
    # Delete inward edges
    foreach {v1 k1 v2 k2} [edges * * $vertex *] {
	lappend undo [edgedelete $v1 $k1 $v2 $k2]
    }
    # Delete the vertex. (NB: This must follow the edge deletion.)
    lappend undo [vertexdelete $vertex]

    # Return the undo command
    return $undo
}

########################################################################
#### edge
#
# Add a new edge to the graph, and return the undo command.
#
body ::tycho::PortedDigraph::edge {vertex1 port1 vertex2 port2 args} {
    # Add the edge to the model. We encode the vertex name into the
    # edge names to make it possible to implement methods like
    # edges{} using pattern-matching.
    eval add edge:$vertex1.$port1^$vertex2.$port2 $args
}

########################################################################
#### edgecget
#
# Get an attribute of an edge. An error will occur if the edge does not
# exist or the attribute does not exist.
#
body ::tycho::PortedDigraph::edgecget {vertex1 port1 vertex2 port2 {attribute {}}} {
    itemcget edge:$vertex1.$port1^$vertex2.$port2 $attribute
}

########################################################################
#### edgeconfigure
#
# Configure the edge and return the undo command. The argument list
# is a flat list of attribute-value pairs.
#
body ::tycho::PortedDigraph::edgeconfigure {vertex1 port1 vertex2 port2 args} {
    eval itemconfigure edge:$vertex1.$port1^$vertex2.$port2 $args
}

########################################################################
#### edgedelete
#
# Remove an edge from the graph, and return the undo command.
#
body ::tycho::PortedDigraph::edgedelete {vertex1 port1 vertex2 port2} {
    delete edge:$vertex1.$port1^$vertex2.$port2
}

########################################################################
#### edges
#
# Return a list containing the edges of the graph that match the
# given patterns. The result is a flat list containing the source
# vertex, source port, target vertexm and target port. If no arguments
# are supplied, return all edges.
#
body ::tycho::PortedDigraph::edges {{vertex1 *} {port1 *} {vertex2 *} {port2 *}} {
    # Only use the cached data if the cache is valid
    if [cache valid] {
        eval concat [array names _edges [list $vertex1 $port1 $vertex 2 $port2]]
    } else {
        set result {}
        foreach edge [names edge:$vertex1.$port1^$vertex2.$port2] {
            eval lappend result [lreplace [split $edge :.^] 0 0]
        }
        return $result
    }
}

########################################################################
#### port
#
# Add a port to a vertex.
# Additional arguments are a flat attribute-value list for the
# parameter. Flag an error if the port already exists. Return
# the undo command.
#
body ::tycho::PortedDigraph::port {vertex port args} {
    eval add [list "vertex:$vertex port:$port"] $args
}

########################################################################
#### portcget
#
# Get an attribute of a port. An error will occur if the port does not
# exist or the attribute does not exist.
#
body ::tycho::PortedDigraph::portcget {vertex port {attribute {}}} {
    itemcget [list vertex:$vertex port:$port] $attribute
}

########################################################################
#### portconfigure
#
# Configure the port and return the undo command. The argument list
# is a flat list of attribute-value pairs.
#
body ::tycho::PortedDigraph::portconfigure {vertex port args} {
    eval itemconfigure [list "vertex:$vertex port:$port"] $args
}

########################################################################
#### portdelete
#
# Remove a port from the graph, and return the undo command.
# Note that connected edges will not be deleted.
#
body ::tycho::PortedDigraph::portdelete {vertex port} {
    delete [list vertex:$vertex port:$port]
}

########################################################################
#### ports
#
# Return a list of ports of the given vertex. If the second argument
# is given, it is a glob-style pattern to be used to match against
# port names.
#
body ::tycho::PortedDigraph::ports {vertex {pattern *}} {
    set result {}
    foreach port [names [list vertex:$vertex port:$pattern]] {
    	lappend result [lindex [split [lindex $port end] :] 1]
    }
    return $result
}

########################################################################
#### repair
#
# "Repair" a graph by deleting improperly-connected edges.
# This method cannot be recorded or published.
#
body ::tycho::PortedDigraph::repair {} {
    foreach edge [names edge:*] {
        foreach {_ v1 p1 v2 p2} [split $edge :.^] {}
        if { ![exists [list vertex:$v1 port:$p1]] \
                || ![exists [list vertex:$v2 port:$p2]] } {
            # Delete a disconnected edge
            edgedelete $v1 $p1 $v2 $p2
        }
    }
    # Return null so record{} or publish{} will complain.
    return ""
}

########################################################################
#### subgraphEdges
#
# Return the edges within a sub-graph. The arguments are the vertices
# of the subgraph. The returned list of edges are source-target quads
# (not a flat list as in some other methods). This is to make graph
# editors more generic.
#
body ::tycho::PortedDigraph::subgraphEdges {args} {
    _update
    set result {}
    foreach u $args {
        foreach v $args {
            eval lappend result [array names _edges [list $u * $v *]]
        }
    }
    return $result
}

########################################################################
#### subgraphInputs
#
# Return the input edges to a sub-graph. The arguments are the vertices
# of the subgraph. The returned list of edges are source-target quads
# (not a flat list as in some other methods). This is to make graph
# editors more generic.
#
body ::tycho::PortedDigraph::subgraphInputs {args} {
    set result {}
    foreach v $args {
        foreach edge [array names _edges [list * * $v *]] {
            if { [lsearch -exact $args [lindex $edge 0]] < 0 } {
                lappend result $edge
            }
        }
    }
    return $result
}

########################################################################
#### subgraphOutputs
#
# Return the output edges from a sub-graph. The arguments are the vertices
# of the subgraph. The returned list of edges are source-target quads
# (not a flat list as in some other methods). This is to make graph
# editors more generic.
#
body ::tycho::PortedDigraph::subgraphOutputs {args} {
    set result {}
    foreach v $args {
        foreach edge [array names _edges [list $v * * *]] {
            if { [lsearch -exact $args [lindex $edge 2]] < 0 } {
                lappend result $edge
            }
        }
    }
    return $result
}

########################################################################
#### verify
#
# Test whether a graph is properly constructed.
# This method checks for improperly-connected edges.
#
body ::tycho::PortedDigraph::verify {} {
    foreach edge [names edge:*] {
        foreach {_ v1 p1 v2 p2} [split $edge :.^] {}
        if { ![exists [list vertex:$v1 port:$p1]] \
                || ![exists [list vertex:$v2 port:$p2]] } {
            return 0
        }
    }
    return 1
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _describeitem
#
# Return a string describing an item. this method overrides
# the default method because edges have a different format
# from the default.
#
body ::tycho::PortedDigraph::_describeitem {name {prefix {}}} {
    regexp {(.+):(.+)} [lindex $name end] _ type tail

    if { $type == "edge" } {
        # Start string with type
        set string $prefix
        append string "edge"

        # Append the two vertices and the data
        eval lappend string [split $tail ^.] [itemcget edge:$tail]

        append string \n
    } else {
        chain $name $prefix
    }
}

########################################################################
#### _updatecache
#
# Clear the cache and build updated versions of the _parents,
# _children, _edges and _vertices arrays.
#
body ::tycho::PortedDigraph::_updatecache {} {
    # Clear all cached data
    cache delete

    # Clear locally-cached data
    catch {unset _edges}
    catch {unset _parents}
    catch {unset _children}
    catch {unset _vertices}

    # Regenerate vertex list
    foreach vertex [names vertex:*] {
        set vertex [lindex [split $vertex :] 1]
        lappend _vertices $vertex
        set _parents($vertex) {}
        set _children($vertex) {}
    }
    foreach edge [names edge:*] {
        foreach {_ src p1 tgt p2} [split $edge :.^] {}

        # Regenerate parent-child lists
        lappend _children($src) $tgt
        lappend _parents($tgt) $src

        # Regenerate edge array
        set _edges([list $src $p1 $tgt $p2]) 1
    }
    # Chain to validate cache
    chain
}
