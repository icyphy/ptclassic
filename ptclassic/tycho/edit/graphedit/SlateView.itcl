##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996- The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

##########################################################################
#### SlateView
#
# _SlateView_ is a view that contains a Slate. It provides an interface
# between Slates and Layout models.
#
class ::tycho::SlateView {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

     # The height of the slate
    itk_option define -height height Height 300

     # The width of the slate
    itk_option define -width width Width 400

    # The background color of the slate


    #################################################################
    ####                     public methods                      ####

    # Set or get the coordinates of an item
    method coords {name args}

    # Find items.
    method find {mode args}

    # Get information about an item
    method iteminfo {slateid args}

    # Get or changed the name of an item given its slate id
    method itemname {slateid {newname {}}}

    # Manipulate the layout model
    method layout {mode args}

    # Manipulate libraries 
    method library {mode args}

    # Manipulate models 
    method model {mode args}

    # Handle data change notification from the layout model
    method notify {method args}

    # Handle event notification from the layout model
    method notifyevent {event args}

    # Get the slate id of an item given its name
    method slateid {name}

    #################################################################
    ####                  protected methods                      ####

    # Add a new item
    protected method _add {_ name args}

    # Change attributes of an item
    protected method _attrset {name args}

    # Add a tag to all indicated items.
    protected method _addtag {tag args}

    # Set or get the coordinates of an item
    protected method _coords {name args}

    # Clear data from this editor
    protected method _clear {}

    # Delete an item
    protected method _delete {name}

    # Delete a tag from all items.
    protected method _dtag {tag {delete {}}}

    # Configure an item
    protected method _itemconfigure {name args}
    
    # Move an item
    protected method _move {tag x y}

    # Start moving an item
    protected method _moveclick {tag x y args}

    # Continue moving an item
    protected method _movedrag {tag x y}

    # Stop moving an item
    protected method _moverelease {tag}

    # Reshape an item
    protected method _reshape {name x y args}

    # Start reshaping an item
    protected method _reshapeclick {name x y args}

    # Continue reshaping an item
    protected method _reshapedrag {name x y}

    # Stop reshaping an item
    protected method _reshaperelease {name}

    # Manipulate the the selection
    protected method _select {mode {name {}}}

    #################################################################
    ####                  protected variables                    ####
    
    # The slate
    protected variable _slate

    # The layout model
    protected variable _layout ""
    
    #################################################################
    ####                   private methods                       ####
    
    # Load items from the model into the slate
    private method _loadlayout {{item {}}}

    #################################################################
    ####                   private variables                     ####
    
    # The loaded libraries
    private variable _library

    # The loaded models
    private variable _model

    # The mapping from item names to item IDs
    private variable _itemid

    # The mapping from item IDs to item names
    private variable _nameof
}

########################################################################
#### constructor
#
body ::tycho::SlateView::constructor {args} {
    # Create a slate
    itk_component add slate {
        uplevel #0 ::tycho::slate $itk_interior.slate
    } {
        keep -cursor
        rename -background -canvascolor canvasColor CanvasColor
        rename -height -canvasheight canvasHeight CanvasHeight
        rename -width -canvaswidth canvasWidth CanvasWidth
    }
    set _slate $itk_component(slate)
    pack $_slate -expand yes -fill both -side left

    # Evaluate options
    eval itk_initialize $args

    # Subscribe to the style parameters
    stylesheet subscribe \
	    -canvasheight graphedit canvasHeight \
	    -canvaswidth  graphedit canvasWidth \
	    -canvascolor  graphedit canvasColor

    # Create the layout model.
    # FIXME: this needs to be settable externally so layouts can be shared.
    set _layout [uplevel \#0 ::tycho::Layout [::tycho::autoName layout]]
    model add layout $_layout

    # Subscribe to the layout
    $_layout subscribe data $this "$this notify"
    $_layout subscribe event $this "$this notifyevent"

    # In addition, subscribe to the layout model as a "view". This
    # is necessary because the Layout model sometimes needs to get
    # data from a real Tk canvas...
    $_layout subscribe view $this
}

########################################################################
#### coords
#
# Set or get coordinates of an item.
#
body ::tycho::SlateView::coords {name args} {
    eval $_slate coords $_itemid($name) $args
}


########################################################################
#### find
#
# Find items.
#
body ::tycho::SlateView::find {mode tag} {
    set result {}
    foreach id [$_slate find $mode $tag] {
	lappend result $_nameof($id)
    }
    return $result
}

#########################################################################
#### iteminfo
#
# Get a printable string conaining information about the item. Subclasses
# will usually override this to print more meaningful info.
#
body ::tycho::SlateView::iteminfo {slateid args} {
    set string {}
    append string [$_slate describe $slateid]
    return $string
}

#########################################################################
#### itemname
#
# Get the name of an item from its slate id. If the argument is
# not a valid id, return it on the assumption that it's a tag.
# If a second argument is given, rename the item with the given
# id to the new name.
#
body ::tycho::SlateView::itemname {slateid {newname {}}} {
    if ![::info exists _nameof($slateid)] {
        return $slateid
    } else {
        if { $newname == "" } {
            return $_nameof($slateid)
        } else {
            set oldname $_nameof($slateid)
            set _nameof($slateid) $newname
            unset _itemid($oldname)
            set _itemid ($newname) $slateid
        }
    }
}

########################################################################
#### layout
#
# Manipulate the layout model. This method is intended for low-level
# initialization and maintenance. It has several forms, depending on
# the value of the _mode_ argument:
# <dl>
# <dt><b>load</b> ?_item_?
# <dd>
# Load the current layout model into the slate.
#
# <dt><b>clear</b>
# <dd>
# Clear the layout model and the slate.
#
# <dt><b>set</b> _layout_
# <dd>
# Set the current layout model to a new model.
#
# <dt><b>delete</b> _layout_
# <dd>
# Delete the current layout model.
#
# </dl>
#
body ::tycho::SlateView::layout {mode args} {
    switch -exact $mode {
        "load" {
            _loadlayout
        }
        "clear" {
            $_layout clear
            $_layout notify event clear
        }
        "set" {
            set _layout [lindex $args 0]
        }
        "delete" {
            delete object $layout
        }
        default {
            error "Invalid mode \"$mode\": must be one of\
                    load, clear, set, or delete"
        }
    }
}

########################################################################
#### library
#
# Manipulate libraries. This command has several forms, depending
# on the value of the _mode_ argument:
# <dl>
# <dt><b>load</b> _path_ ?_libname_?
# <dd>
# Load a library. The _path_ can either be an absolute
# path, or a path relative to the TIM_PATH. (Not implemented yet).
# If the library has already been loaded into memory (by some
# other client), then this widget links to it; otherwise it loads
# it into memory and links to it. _libname_ is a name with which
# to access the liibrary in future calls to this method. If none
# is supplied, the name will be the root of the file name -- for
# example, the library "stars.tim" will be accessible as library
# "stars." An error wil be generated if there is alaready a
# library with the specified or default name.
#
# <dt><b>unload</b> ?_libname_ ...?
# <dd>
# Unload each listed library. Each library is dereferenced
# with <b>::tycho::model unlink</b>, so that the library will
# be removed from memory if no other objects are referencing
# it. If no library names are supplied, dereference all
# loaded libraries.
#
# <dt><b>addtomenu</b> _libname_ _menuname_ ?_option value_ ... ?
# <dd>
# Add items in a library to a menu. _menuname_ is the name of
# an existing menu in this widget's menubar.  Each menu entry is
# formed by dot-concatenating the library name and the item
# name. For example, item <b>{foo bar}</b> from library stars
# will be added as item <b>stars.foo.bar</b>. This is the
# name that is appended to the <b>-menucommand</b> option.
# The <b>group</b> type is used to construct hierarchical menus.
# The following options are recognized:
#
# <dl>
# <dt><b>-customizecommand</b> _script_
# <dd>
# Specify a command prefix to evaluate before any items are
# added to a new menu. This can be used for placing menu
# entries at the head of each menu. The menu name and the
# group containing the items that will be added to that menu
# are appended to the script. 
#
# <dt><b>-command</b> _command_
# <dd>
# Specify a command prefix to evaluate when a library item is
# added. When a menu entry is selected, the menu name will be
# appended to this command and evaluated at the global scope.
#
# <dt><b>-types</b> _typelist_
# <dd>
# Specify the types of entity that are added into the menu.
# If not supplied, the types will be given by the <b>-visibletypes</b>
# configuration option of the library, if there is one. If not
# supplied and the library has no <b>-visibletypes</b> option, then
# all types except <b>attribute</b>, <b>group</b>, and <b>xref</b>
# will be added. 
#
# </dl>
#
# <dt><b>names</b>
# <dd>
# Return a list of all loaded libraries.
#
# <dt><b>access</b> _libname_ ?_arg arg_ ...?
# <dd>
# Access a loaded library. If only _libname_ is supplied,
# return the corresponding model object. If additional arguments
# are supplied, they are assumed to be a method name and
# arguments, which are called on the corresponding model object.
# Raise an error if the given library is not loaded.
#
# </dl>
#
body ::tycho::SlateView::library {mode args} {
    switch -exact $mode {
        "access" {
            # Extract args
            set libname [lindex $args 0]
            if ![::info exists _library($libname)] {
                error "Unknown library \"$libname\""
            }
            if { [llength $args] > 1 } {
                eval $_library($libname) [lreplace $args 0 0]
            } else {
                return $_library($libname)
            }
        }
        "addtomenu" {
            # Extract args
            set libname [lindex $args 0]
            set menuname [lindex $args 1]
            array set opts {-types "" -command "" -customizecommand ""}
            array set opts [lreplace $args 0 1]
            if ![::info exists _library($libname)] {
                error "Unknown library \"$libname\""
            }
            set lib $_library($libname)

            # Add to menubar
            set mb [menubar]
            if { $mb != "" } {
                $lib makemenu $mb $menuname \
                        -types $opts(-types) \
                        -command $opts(-command) \
                        -customizecommand $opts(-customizecommand)
            }
        }
        "load" {
            # Extract args
            set path [lindex $args 0]
            if { [llength $args] > 1 } {
                set libname [lindex $args 1]
            } else {
                set libname [::file rootname [::file tail $path]]
            }
            # Get the library model
	    set path [::tycho::model load $path]
	    set _library($libname) [::tycho::model link $path $this]
        }
        "names" {
            array names _library
        }
        "unload" {
            # Extract args
            if { $args == "" } {
                set args [array names _library]
            }
            # Unload each library
            # FIXME: unlink
            foreach lib $args {
                ::tycho::unlink [$_library($lib) cget -modelpath] $this
                unset _library($lib)
            }
        }
        default {
            error "Invalid mode \"$mode\": should be one of\
                    access, addtomenu, load, names. or unload"
        }
    }
}

########################################################################
#### model
#
# Manipulate models. Typically SlateView subclasses manipulate
# one or more models containing data. This method serves as a
# common (across subclasses) repository for these models and
# also allows external clients access to them. This method has
# several forms, depending on the value of the _mode_ argument:
# <dl>
# <dt><b>access</b> _name_ ?_method_? ?_arg_ ...?
# <dd>
# Get access to a model. If _method_ is supplied, then it is the
# name of a method on the model to call, and additional
# arguments are supplied to the call. Otherwise, the namd of the
# model is returned.
#
# <dt><b>add</b> _name_ _object_
# <dd>
# Add a model to the list of known models. Note that _object_
# must be a globally-accessible object. To ensure this, clients
# must either create the model using <b>uplevel #0</b>, or
# use <b>info which -command _object_</b> before calling this
# method.
#
# <dt><b>delete</b> _name_
# <dd>
# Delete a model from the list of known models. Note that the
# model will not be destroyed.
#
# <dt><b>names</b>
# <dd>
# Return a list of known models.
#
# </dl>
#
body ::tycho::SlateView::model {mode args} {
    switch -exact $mode {
        "access" {
            # Extract args
            set name [lindex $args 0]
            if ![::info exists _model($name)] {
                error "Unknown model \"$name\""
            }
            if { [llength $args] > 1 } {
                eval $_model($name) [lreplace $args 0 0]
            } else {
                return $_model($name)
            }
        }
        "add" {
            # Extract args
            set name [lindex $args 0]
            set object [lindex $args 1]
            if { [::info which -command $object] == "" } {
                error "Model $name ($object) is not accessible in this scope"
            }
            if [::info exists _model($name)] {
                error "Model \"$model\" has already been registered"
            }
            set _model($name) $object
        }
        "delete" {
            # Extract args
            set name [lindex $args 0]
            if ![::info exists _model($name)] {
                error "Unknown model \"$name\""
            }
            unset _model($name)
        }
        "names" {
            array names _model
        }
        default {
            error "Invalid mode \"$mode\": should be one of\
                    access, add, delete, or names"
        }
    }
}

########################################################################
#### notify
#
# Handle data change notification from the layout model. This method
# simply prepends an underscore to the command name and evaluates the
# protected method with that name.
#
body ::tycho::SlateView::notify {method args} {
    # puts "$this notify $method"
    eval _$method $args

    # We used to place the mark for modification in here.
    # This was too agressive, as it marked the data modified
    # even if an item was clicked on (but not moved). Now, the
    # call to markModified takes place only in response to a
    # "modified" event notification from the layout model. These
    # events are geenrated by vertex and edge controllers.
    # markModified
}

########################################################################
#### notifyevent
#
# Handle event notification from the layout model. This processes
# the event in a switch. Subclasses may choose to override and
# chain any unrecognized events.
#
body ::tycho::SlateView::notifyevent {event args} {
    switch -exact $event {
	"clear" {
	    # Clear all items from the slate
	    catch {unset _itemid}
	    catch {unset _nameof}
	    $_slate delete all
	}
	"modified" {
	    # The data has changed
	    # puts !Modified
	    markModified
	}
	"saved" {
	    # The data has been saved by some other view
	    # puts !Saved
	    markUnmodified
	}
	default {
	    puts "Unrecognized event \"$event\" from \
		    [$_layout cget -modelname]"
	}
    }
}

########################################################################
#### slateid
#
# Return the slate id of an item given its name. If the id is unknown,
# return the argument on the assumption that it's a valid canvas
# tag.
#
body ::tycho::SlateView::slateid {name} {
    if [::info exists _itemid($name)] {
        return $_itemid($name)
    } else {
        return $name
    }
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _add
#
# Add a new item to the view.
#
body ::tycho::SlateView::_add {_ name args} {
    # Extract item type and coordinates
    array set opts $args
    set type $opts(-slatetype)
    set coords $opts(-coords)
    unset opts(-slatetype)
    unset opts(-coords)
    set args [array get opts]

    # Create a top-level or child item
    if { [llength $name] == 1 } {
	# Root item
	set id [eval $_slate create $type $coords $args]
    	set _itemid($name) $id
    	set _nameof($id) $name
    } else {
	set parent $_itemid([lreplace $name end end])
	set id [eval $_slate createrootchild $parent $type $coords $args]
	set _itemid($name) $id
	set _nameof($id) $name
    }
}

########################################################################
#### _addtag
#
# Add a tag to all indicated vertices and names.
#
body ::tycho::SlateView::_addtag {tag args} {
    foreach name $args {
	$_slate addtag $tag withtag $_itemid($name)
    }
}

########################################################################
#### _attrset
#
# Change attributes of an item.
#
body ::tycho::SlateView::_attrset {name args} {
    eval $_slate itemconfigure $_itemid($name) $args
}

########################################################################
#### _coords
#
# Set coordinates of an item.
#
body ::tycho::SlateView::_coords {name args} {
    eval $_slate coords $_itemid($name) $args
}

########################################################################
#### _delete
#
# Delete an item.
#
body ::tycho::SlateView::_delete {name} {
    $_slate delete $_itemid($name)
    unset _nameof($_itemid($name))
    unset _itemid($name)
}

########################################################################
#### _dtag
#
# Delete a tag from all items.
#
body ::tycho::SlateView::_dtag {tag {delete {}}} {
    eval $_slate dtag $tag $delete
}

########################################################################
#### _itemconfigure
#
# Configure an item.
#
body ::tycho::SlateView::_itemconfigure {name args} {
    array set opts $args
    if [::info exists opts(-coords)] {
        eval $_slate coords $_itemid($name) $opts(-coords)
        unset opts(-coords)
        set args [array get opts]
    }
    eval $_slate itemconfigure $_itemid($name) $args
}

########################################################################
#### _move
#
body ::tycho::SlateView::_move {tag x y} {
    if { [::info exists _itemid($tag)] } {
        $_slate move $_itemid($tag) $x $y
    } else {
        $_slate move $tag $x $y
    }
}

########################################################################
#### _moveclick
#
body ::tycho::SlateView::_moveclick {tag x y} {
    if { [::info exists _itemid($tag)] } {
        eval $_slate moveclick $_itemid($tag) $x $y
    } else {
        eval $_slate moveclick $tag $x $y
    }
}

########################################################################
#### _movedrag
#
body ::tycho::SlateView::_movedrag {tag x y} {
    if { [::info exists _itemid($tag)] } {
        $_slate movedrag $_itemid($tag) $x $y
    } else {
        $_slate movedrag $tag $x $y
    }
}

########################################################################
#### _moverelease
#
body ::tycho::SlateView::_moverelease {tag} {
    if { [::info exists _itemid($tag)] } {
        $_slate moverelease $_itemid($tag)
    } else {
        $_slate moverelease $tag
    }
}

########################################################################
#### _reshape
#
body ::tycho::SlateView::_reshape {name x y args} {
    eval $_slate reshape $_itemid($name) $x $y $args
}

########################################################################
#### _reshapeclick
#
body ::tycho::SlateView::_reshapeclick {name x y args} {
    eval $_slate reshapeclick $_itemid($name) $x $y $args
}

########################################################################
#### _reshapedrag
#
body ::tycho::SlateView::_reshapedrag {name x y} {
    $_slate reshapedrag $_itemid($name) $x $y
}

########################################################################
#### _reshaperelease
#
body ::tycho::SlateView::_reshaperelease {name} {
    $_slate reshaperelease $_itemid($name)
}

########################################################################
#### _select
#
# Manipulate the selection.
#
body ::tycho::SlateView::_select {mode {name {}}} {
    switch -exact $mode {
    	"add" {
	    $_slate select add $_itemid($name)
    	}
    	"remove" {
	    $_slate select add $_itemid($name)
    	}
    	"clear" {
	    $_slate select clear
    	}
    }
}

#####################################################################
#####################################################################
####                       private methods                       ####

#######################################################################
#### _loadlayout
#
# Load the layout model into the slate. If _item_ is provided, lkoad
# just that item.
#
body ::tycho::SlateView::_loadlayout {{item {}}} {
    if { $item != "" } {
        eval _add item [list $item] [$_layout attrget $item]
    }
    foreach i [$_layout match item $item] {
        _loadlayout [concat $item $i]
    }
}

