##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### DFGMover
#
# _DFGMover_ is an controller object used by the _DFGEditor_ view.
# It is responsible for managing creation of nets and edges, and
# connection and disconnecting them.
#
class ::tycho::DFGMover {
	inherit ::tycho::ViewController
	
    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Get the follower
    method _follower {} {return $_follower}

    # Process a click event
    method click {tag x y args}

    # Process a motion event
    method drag {tag x y}

    # Process a release event
    method release {tag}

    #################################################################
    ####                  protected methods                      ####

    # Reset all variables
    protected method _cleanup {}

    #################################################################
    ####                 protected variables                     ####
    
    # The interactor to move vertexes
    protected variable _follower

    # Input edges to the subgraph
    protected variable _inputedges ""
    
    # Edges within to the subgraph
    protected variable _moveedges ""
    
    # The tag of items being moved
    protected variable _movetag
    
    # Output edges from the subgraph
    protected variable _outputedges ""
    
}

########################################################################
#### constructor
#
body ::tycho::DFGMover::constructor {args} {
    # Evaluate options
    eval configure $args

    set _follower [$slate interactor Follower]

    # Make the follower send moves here
    $_follower configure \
            -clickprefix "$this click" \
            -dragprefix "$this drag" \
            -releaseprefix "$this release"
}

########################################################################
#### click
#
# Start a move interaction on vertices. The argument is a tag which
# must be attached only to vertices to be moved. Get the names of
# edges that are fully connected to these vertices and tag
# all vertices and those edges. Also get the names of edges
# that have one end connected to one of these vertices and
# remember who they are.
#
body ::tycho::DFGMover::click {tag x y args} {
    # Get the vertices, and start a move sequence on them
    set vertices [$slateview find withtag $tag]

    # Get the item name or the same tag
    set name [itemname $tag]
    set _movetag $name

    # Notify views that these items are about to move
    $layout publish moveclick $name $x $y

    # Get completely-connected and partially-connected edges
    set _moveedges [eval $graph subgraphEdges $vertices]
    set _inputedges [eval $graph subgraphInputs $vertices]
    set _outputedges [eval $graph subgraphOutputs $vertices]

    # Start a move or reshape sequence on found edges
    if { $_moveedges != "" } {
	eval $layout notify data addtag $this.edge $_moveedges
	$layout publish moveclick $this.edge $x $y
    }
    foreach edge $_inputedges {
        $layout publish reshapeclick $edge $x $y -aspects end
    }
    foreach edge $_outputedges {
        $layout publish reshapeclick $edge $x $y -aspects start
    }
}

########################################################################
#### drag
#
# Continue a move interaction on vertices. The
# vertices and edges are moved and reshaped as appropriate.
#
body ::tycho::DFGMover::drag {tag x y} {
    # Move the vertices and fully-connected edges
    $layout publish movedrag $_movetag $x $y
    if { $_moveedges != "" } {
	$layout publish movedrag $this.edge $x $y
    }
    # Reshape the partially-connected edges.
    foreach edge $_inputedges {
	$layout publish reshapedrag $edge $x $y
    }
    foreach edge $_outputedges {
	$layout publish reshapedrag $edge $x $y
    }
}

########################################################################
#### release
#
# Terminate a move interaction on vertices and add an undo and
# redo command to the history of the layout model.
#
body ::tycho::DFGMover::release {tag} {
    # Mark the history
    $layout mark set vertex

    # Terminate move of vertices
    $layout publish moverelease $_movetag

    # Terminate move of fully-connected edges
    if { $_moveedges != "" } {
        $layout publish moverelease $this.edge
        $layout notify data dtag $this.edge
    }

    # Terminate the reshape of partially-connected edges
    foreach edge $_inputedges {
		$layout publish reshaperelease $edge
    }
    foreach edge $_outputedges {
		$layout publish reshaperelease $edge
    }

    # Now merge all those commands into a single one
    $layout history compact vertex current

    # Finally (and importantly!), add a null command to the graph
    # model to match this command
    $graph history append {} {}
}


###################################################################
###################################################################
####                      protected methods                    ####

########################################################################
#### _cleanup
#
body ::tycho::DFGMover::_cleanup {} {
    ;
}
