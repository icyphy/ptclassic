# The wrapper for the Ptolemy II domain library.
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### PtDomainLibrary
#
class ::tycho::PtDomainLibrary {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####
    
    # The debug flag
    public variable debug 1

    ###################################################################
    ####                         public methods                    ####

    # Create a new actor
    method createActor {domain container name uniqueName}

    # Return a list of known domains
    method domains {}

    # Return a list of directors of the given domain
    method directors {domain}

    # Return the director
    method getDirector {domain director}

    # Return the unique instance
    proc getInstance {}


    ###################################################################
    ####                      public procs                         ####

    ###################################################################
    ####                   protected methods                       ####

    # Print a debug message
    protected method debug {msg} {
	if $debug {
	    puts "$this: $msg"
	}
    }

    ###################################################################
    ####                   private variables                       ####

    # The Java domain library
    private variable _domainLibrary ""

    # The unique intance
    private common _instance ""
}


#######################################################################
#### constructor
#
body ::tycho::PtDomainLibrary::constructor {args} {
    # Initialize args
    eval configure $args

    # Check that we are unique
    if { $_instance != "" } {
	error "PtDomainLibrary can have only one instance"
    }

    # Print the version number
    set ptversion [java::call ptolemy.schematic.DomainLibrary getPtolemyVersion]
    puts "Connected to Ptolemy II version $ptversion"

    # Figure out where the domain library is
    global env tcl_platform
    if { $tcl_platform(platform) == "windows" } {
        set domainLibURL "file:/[file join \
                $env(PTII) ptolemy schematic lib ptII.ptml]"
    } else {
        set domainLibURL "file://[file join \
                $env(PTII) ptolemy schematic lib ptII.ptml]"
    }

    # Parse it
    debug "Parsing $domainLibURL"
    set ptmlParser [java::new ptolemy.schematic.PTMLParser]
    set _domainLibrary [uplevel #0 "$ptmlParser parse $domainLibURL"]
    
    # Set as unique instance
    java::call ptolemy.schematic.DomainLibrary setInstance $_domainLibrary
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### createActor
#
# Create a new actor. This is bogus, it should be done
# within the Java code.
#
body ::tycho::PtDomainLibrary::createActor {domain container name uniqueName} {
    # Get the package paths
    set d [$_domainLibrary getDomain $domain]
    set i [$d childElements actorpackage]
    set packages {}
    while { [$i hasMoreElements] } {
	set p [[$i nextElement] getAttribute package]
	# puts $p
	lappend packages $p
    }

    # For each path, attempt to create the actor
    foreach p $packages {
	set class ${p}.$domain$name
	# puts "!$class $container $name"
	if { ![catch {set actor [java::new $class $container $uniqueName]} ] } {
            # puts "Got one! [$actor toString]"
	    return $actor
	}
    }
    puts "WARNING: Unable to create actor $name in domain $domain"
}

########################################################################
#### directors
#
# Get the directors of the given domain
#
body ::tycho::PtDomainLibrary::directors {domain} {
    set domain [$_domainLibrary getDomain $domain]
    set iterator [$domain childElements "director"]
    set result ""
    while { [$iterator hasMoreElements] } {
        set element [$iterator nextElement] 
	lappend result $element
    }
    return $result
}

########################################################################
#### domains
#
# Get the domains
#
body ::tycho::PtDomainLibrary::domains {} {
    set iterator [$_domainLibrary domains]
    set result ""
    while { [$iterator hasMoreElements] } {
        set element [$iterator nextElement] 
	lappend result $element
    }
    return $result
}

########################################################################
#### getDirector
#
# Get the named director of the given domain
#
body ::tycho::PtDomainLibrary::getDirector {domain director} {
    # puts "getDirector $domain $director"
    set domain [$_domainLibrary getDomain $domain]
    set director [$domain getChildElement "director" $director]
    return $director
}

########################################################################
#### getInstance
#
# Get the unique instance of this object.
#
body ::tycho::PtDomainLibrary::getInstance {} {
    if { $_instance == "" } {
        set _instance [uplevel #0 {::tycho::PtDomainLibrary #auto}]
    }
    return $_instance
}
