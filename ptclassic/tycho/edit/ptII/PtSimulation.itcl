# The superclass of all simulation controllers.
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### PtSimulation
#
# A <i>PtSimulation</i> object controls and communicates with a
# running Ptolemy II simulation. It is a subclass of the Tycho
# Model class, in order that multiple views can monitor the
# simulation.
#
# The simulation object
# represents a "live" simulation, and is distinct from the
# graph object that represents the static structure of the
# simulation. We say that the simulation object "performs"
# the graph.
#
# Most of the implementations of the methods in here are garbage,
# and will be fixed when we get a proper interface to Ptolemy II.
#
class ::tycho::PtSimulation {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####
    
    # The name of the simulation for messages and the like
    public variable simulationName ""

    # The debug flag
    public variable debug 1

    # The graph model
    public variable graph

    # The domain library
    public variable domainLibrary

    # Set if toplevel actor
    public variable isToplevel 1

    # The URL this simulation came from (I hope)
    public variable sourceURL ""

    ###################################################################
    ####                         public methods                    ####

    # Add a new actor to the graph
    method addActor {name uniqueName}

    # Add a new composite actor to the graph
    method addCompositeActor {name uniqueName}

    # Add an edge to a relation
    method addEdge {relation edgename}

    # Add a junction to a relation
    method addJunction {relation junctionname}

    # Add a new port to the graph
    method addPort {name uniqueName}

    # Add a new relation to the graph
    method addRelation {name}

    # Get the names of all actors
    method actors {} {
	return [array names _actors]
    }

    # Clear everything
    method clear {}

    # Connect an edge
    method connect {edgename source out target in}

    # Construct a simulation
    method constructSimulation {}

    # Get the edges of a relation
    method edges {relation} {
	return $_edges($relation)
    }

    # Get the actor with the given name
    method getActor {name} {
	return $_actors($name)
    }

    # Get the domain
    method getDomain {} {
	return $_domain
    }

     # Get the director
    method getDirector {} {
	return $_director
    }

    # Get the director name
    method getDirectorName {} {
        return $_directorName
    }

    # Get the port with the given name
    method getPort {name} {
	return $_ports($name)
    }

    # Instantiate composite actors that haven't already been
    method instantiateComposites {}

    # Get the junctions in a relation
    method junctions {relation} {
	return $_junctions($relation)
    }

    # Add a link to a relation
    method link {relation actor port}

    # Get the links of a relation
    method links {relation} {
	return $_links($relation)
    }

    # Respond to changes in the graph
    method notify {method args}

    # Pause the simulation
    method pause {}

    # Accept and remember the graph describing the simulation
    method perform {graph}

    # Get the names of all I/O ports
    method ports {} {
	return [array names _ports]
    }

    # Get a relation by name
    method getRelation {name} {
	return $_relations($name)
    }

    # Get the names of all relations
    method relations {} {
	return [array names _relations]
    }

    # Resume the simulation
    method resume {}

    # Set the director
    method setDirector {director}

   # Set the director name
    method setDirectorName {name} {
        set _directorName $name
    }

    # Set the domain
    method setDomain {domain} {
	set _domain $domain
    }

    # Set the toplevel actor
    method setToplevelActor {actor} {
	set _toplevelActor $actor
    }

    # Start the simulation
    method start {}

    # Start the simulation server
    method startServer {}

    # Stop the simulation
    method stop {}

    ###################################################################
    ####                      public procs                         ####

    ###################################################################
    ####                   protected methods                       ####

    # Print a debug message
    protected method debug {msg} {
	if $debug {
	    puts "$this: $msg"
	}
    }

    # Generate simulation from the current graph
    protected method _construct {}

    # Send a script to the simulation
    protected method _send {script}

    ###################################################################
    ####                   protected variables                     ####

    # The graph we are performing
    protected variable _graph

    ###################################################################
    ####                     private variables                     ####

    # The map from names to actors
    private variable _actors

    # The map from names (of composite actors) to sub-simulations
    private variable _subsimulations

    # The top-level actor
    private variable _toplevelActor ""

    # The manager
    private variable _manager ""

    # The domain
    private variable _domain ""

    # The director
    private variable _director ""

     # The directorName
    private variable _directorName ""

    # The director
    private variable _javaDirector ""

    # The map from names to relations
    private variable _relations

    # The map from names to I/O ports
    private variable _ports

    # List of edges for each relation
    private variable _edges

    # List of links for each relation
    private variable _links

    # List of junctions for each relation
    private variable _junctions

    ### FIXME
    public method getToplevelActor {} {
	return $_toplevelActor
    }
    public method getManager {} {
	return $_manager 
    }
}

#######################################################################
#### -isToplevel
#
configbody ::tycho::PtSimulation::isToplevel {
    puts "tycho::PtSimulation::isToplevel = $isToplevel"
    if { $_toplevelActor != "" } {
	if $isToplevel {
	    if { $_manager == "" } {
		set _manager [java::new ptolemy.actor.Manager]
		$_toplevelActor setManager $_manager
		debug "Manager: $_manager"
	    }
	} else {
	    set _manager ""
	    $_toplevelActor setManager [java::null]
	    debug "Manager: null"
	}
    }
}

#######################################################################
#### constructor
#
body ::tycho::PtSimulation::constructor {args} {
    # Initialize args
    eval configure $args

    set ptversion [java::call ptolemy.schematic.DomainLibrary \
	    getPtolemyVersion]
    # puts "Ptolemy II version $ptversion"

    # Create the toplevel actor and manager
    clear

     ### FIXME
    ###set _domain SDF
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### addActor
#
# Add a new actor to the graph
#
body ::tycho::PtSimulation::addActor {name uniqueName} {
    # Get the actor
    set actor [$domainLibrary createActor $_domain $_toplevelActor \
	    $name $uniqueName]
    if { $actor != "" } {
	puts "actor: $actor ([$actor toString])"
	set _actors($uniqueName) $actor
    }
}

########################################################################
#### addCompositeActor
#
# Add a new composite actor to the graph
#
body ::tycho::PtSimulation::addCompositeActor {name uniqueName} {
    # Create the actor
    set actor [java::new ptolemy.actor.TypedCompositeActor \
	    $_toplevelActor \
	    $uniqueName]

    # Remember it
    puts "actor: $actor ([$actor toString])"
    set _actors($uniqueName) $actor
}

########################################################################
#### addEdge
#
# Add an edge to a relation
#
body ::tycho::PtSimulation::addEdge {relation edgename} {
    lappend _edges($relation) $edgename
}

########################################################################
#### addJunction
#
# Add a junction to a relation
#
body ::tycho::PtSimulation::addJunction {relation junctionname} {
    lappend _junctions($relation) $junctionname
}

########################################################################
#### addPort
#
# Add a new port to the graph
#
body ::tycho::PtSimulation::addPort {name uniqueName} {
    puts "addPort $name $uniqueName"

    # Get the port
    set port [java::new ptolemy.actor.TypedIOPort $_toplevelActor $uniqueName]

    # Mess around...
    if { $name == "Out" } {
	$port setOutput 1
    }
    
    puts "port: $port ([$port toString])"
    set _ports($uniqueName) $port
}

########################################################################
#### addRelation
#
# Add a new relation to the graph
#
body ::tycho::PtSimulation::addRelation {name} {
    # Get the relation
    set relation [java::new ptolemy.actor.TypedIORelation \
	    $_toplevelActor \
	    $name]

    puts "$relation: [$relation toString]"
    set _relations($name) $relation
    set _edges($name) {}
    set _links($name) {}
    set _junctions($name) {}
}

########################################################################
#### clear
#
# Clear everything
#
body ::tycho::PtSimulation::clear {} {
    catch {unset _actors}
    catch {unset _relations}
    
    set _director ""
    set _javaDirector ""
    set _directorName ""
 
    if { $_toplevelActor != "" } {
	set name [$_toplevelActor getName]
    } else {
	set name System
    }
    set _toplevelActor [java::new ptolemy.actor.TypedCompositeActor]
    $_toplevelActor setName $name
    debug "Toplevel actor: $_toplevelActor"
    
    set _manager [java::new ptolemy.actor.Manager]
    $_toplevelActor setManager $_manager
    debug "Manager: $_manager"
    
    $_toplevelActor setManager $_manager
}

########################################################################
#### connect
#
# Connect one port to another
#
body ::tycho::PtSimulation::connect {edgename source out target in} {
    puts "connect $edgename $source $out $target $in"

    set outPort [$_actors($source) getPort $out]
    set inPort [$_actors($target) getPort $in]
    puts "[$outPort getFullName] ($outPort) -> [$inPort getFullName] ($inPort)"

    set _relations($edgename) \
            [$_toplevelActor connect $outPort $inPort $edgename]
    puts "Got relation $_relations($edgename)"
}

########################################################################
#### instantiateComposites
#
# Instantiate composite actors that haven't already been
#
body ::tycho::PtSimulation::instantiateComposites {} {
    foreach actor [actors] {
	set a $_actors($actor)
	if { [java::info class $a] == "ptolemy.actor.TypedCompositeActor" } {
	    if ![info exists _subsimulations($actor)] {
		# Create a sub-simulation
		set subactor [uplevel #0 \
                        ::tycho::PtSimulation #auto \
                        -isToplevel 0 \
                        -domainLibrary $domainLibrary]
		$subactor setToplevelActor $_toplevelActor

		# Get its url -- fingers crossed
		set suburl [$graph attrget $actor -url]
		set myurl $sourceURL

puts $myurl
puts $suburl
		regsub {^file:/+} $myurl {} file
		regsub {/[^/]*$} $file {} file
		puts "file = $file"
		set schematicURL "file:/$file/$suburl"

		# Load the data
		set schematic [::tycho::PtSchematic #auto]
		puts "$schematic"
		$schematic parseURL $schematicURL
		$schematic constructComposite $subactor \
			"MyName" \
                        $_toplevelActor

		# We have to remember the URL somewhere
		$subactor configure -sourceURL $schematicURL
                set _subsimulations($actor) $subactor
	    }
	}
    }
}

########################################################################
#### link
#
# Link a relation to a port
#
body ::tycho::PtSimulation::link {relation actor port} {

    # If there's an actor, assume the port belongs to it
    if { [info exists _actors($actor)] } {
	puts "$actor.$port link $relation"
	set javaPort [$_actors($actor) getPort $port]
        $javaPort link $_relations($relation)
        lappend _links($relation) [list $actor $port]
    } elseif { [info exists _ports($actor)] }  {
        # It appears to be an I/O port
	puts "$actor link $relation"
        set javaPort $_ports($actor)
        $javaPort link $_relations($relation)
        lappend _links($relation) $actor
    } else {
        puts "Warning: unable to link $relation to $actor.$port"
    }
}

########################################################################
#### notify
#
# Handle data change notification from the graph.
#
body ::tycho::PtSimulation::notify {method args} {
    # FIXME
    # puts "$this notify $method"
}

########################################################################
#### perform
#
# Accept a graph describing the simulation and construct the
# run-time simulation. Subscribe to the graph, so that any changes
# to it (from, for example, the user interface) update the
# simulation.
#
body ::tycho::PtSimulation::perform {graph} {
    if [info exists graph] {
        # Unsubscribe from the graph
        $graph subscribe data $this

        # FIXME: unlink from it as well?
    }
    set graph $graph

    # Subscribe to the graph
    $graph subscribe data $this

    # Generate the initial simulation run-time
    _construct
}

#######################################################################
#### pause
#
# Pause the simulation.
#
body ::tycho::PtSimulation::pause {} {
    debug "Pause"
    $_manager pause 
}

#######################################################################
#### resume
#
# Resume the simulation.
#
body ::tycho::PtSimulation::resume {} {
    debug "Resume"
    $_manager resume
}

#######################################################################
#### setDirector
#
# Set the director of the simulation
#
body ::tycho::PtSimulation::setDirector {director} {
    puts "::tycho::PtSimulation::setDirector $director"

    if ![ string match {java*} $director] {
	error "Bad director!!!"
    }

    set _director $director

    set JUNK {
	set dir [$domainLibrary getDirector $_domain $director]
	set class [$dir getAttribute "class"]
	set _javaDirector [java::new $class [lindex [split $class] end]]

	puts "Got director [$_javaDirector toString]"
	puts "[$_toplevelActor getName] ($_toplevelActor) \
		setDirector [$_javaDirector getName] ($_javaDirector)"
    }
    $_toplevelActor setDirector $_director
}

#######################################################################
#### start
#
# Start the simulation.
#
body ::tycho::PtSimulation::start {} {
    debug "Start"
    instantiateComposites
    $_manager startRun
}

#######################################################################
#### startServer
#
# Start the simulation server.
#
body ::tycho::PtSimulation::startServer {} {
    configure -offline 0
}

#######################################################################
#### stop
#
# Stop the simulation.
#
body ::tycho::PtSimulation::stop {} {
    debug "Stop"
    $_manager finish
}


    ###################################################################
    ###################################################################
    ####                    protected methods                      ####

########################################################################
#### _construct
#
# Construct a simulation from the current graph. Subclasses must
# override (for now, at least).
#
body ::tycho::PtSimulation::_construct {} {
    ;#
}
