##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

##########################################################################
#### PtTimePanel
#
# Panel to control simulation time parameters
#
class ::tycho::PtTimePanel {
    inherit ::tycho::PtRunPanel

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    # The domain library being used. Must be set in the constructor
    public variable domainLibrary

    # The simulation object. Must be set in the constructor
    public variable simulation

    # A callback for when a parameter is changed
    public variable parameterCallback

    #################################################################
    ####                     public methods                      ####

    # Get the value of a parameter
    method get {item}

    # Set the Java director that controls the simulation
    method setDirector {domain director}

    # Make bindings to an entry widget
    method _entrybind {param}

    # Respond to an update in an entry widget
    method _updateParameter {param}

    #################################################################
    ####                   private variables                     ####
    
    # The current director object
    private variable _director ""

    # The current set of parameter
    private variable _parameters
}

########################################################################
#### constructor
#
body ::tycho::PtTimePanel::constructor {args} {

    # Initialize options
    eval itk_initialize $args

    # Create the widget containing the parameters
    itk_component add main {
	::tycho::LabeledGrid $itk_interior.main \
		-labelforeground blue
    } {
	keep -background -cursor -font
    }
    pack $itk_component(main) -expand yes

    # Add the main parameters to it. Give it a nice bounding box.
    $itk_component(main) group main \
	    -rowspan 20 \
	    -columnspan 2 \
	    -style boxed \
	    -childstyle simple \
	    -label "Time parameters"
    
	$itk_component(main) add entry main.start -label "Start time" \
		-initial 0.0 -width 8
	$itk_component(main) add entry main.stop -label "Stop time" \
		-initial 1.0 -width 8
	$itk_component(main) add entry main.step -label "Time step" \
		-initial 0.01 -width 8
}

########################################################################
#### get
#
# Get a parameter.
#
body ::tycho::PtTimePanel::get {item} {
    $itk_component(main) get $item
}

########################################################################
#### setDirector
#
# Set the director that controls the execution.
#
body ::tycho::PtTimePanel::setDirector {domain director} {
    set _director $director
    set xmlDirector [$domainLibrary getDirector $domain $director]
    set class [$xmlDirector getAttribute "class"]

    set javaDirector [java::new $class]
    $simulation setDirector $javaDirector
    $simulation setDirectorName $director

    catch {unset _parameters}
    set iterator [$javaDirector getAttributes]
    while { [$iterator hasMoreElements] } {
        set element [$iterator nextElement] 
	set _parameters([join [$element getName] ""]) $element
    }

    set grid $itk_component(main)
    # Clear the existing parameter fields
    foreach elt [$grid names "main"] {
	$grid delete main.$elt
    }
    # Reset the grid
    $grid reset "main" 1 1

    # Filter out these...
    set filteredParameters {
	BreakpointODESolver
	DefaultODESolver
	TimeAccuracy
	ConvergeValueAccuracy
	MaximumIterationsPerStep
	MinimumStepSize
	LocalTrancationErrorTolerant
        ODESolver
    }

    # Add the new parameter fields
    foreach p [lsort [array names _parameters]] {
	# Filter out a few for the benefit of CT.... FIXME FIXME
	if { [lsearch -exact $filteredParameters $p] >= 0 } {
	    continue
	}
	# Add it
	set token [$_parameters($p) getToken]
	$grid add entry main.$p \
		-label $p \
		-width 8 \
		-initial [$token stringValue]
	_entrybind $p
    }
}


#######################################################################
#### _entrybind
#
# Bind to an entry widget. This adds bindings so that the
# parameter is updated when a) Return is pressed, or b) the
# focus moves out of the entry.
#
body ::tycho::PtTimePanel::_entrybind {param} {
    bind [$itk_component(main) component main.$param] <FocusOut> \
            "$this _updateParameter $param"
    bind [$itk_component(main) component main.$param] <Return> \
            "$this _updateParameter $param"
}

#######################################################################
#### _updateParameter
#
# Handle an update to a parameter.
#
body ::tycho::PtTimePanel::_updateParameter {p} {
    puts "updateParameter $p"
    set token [$_parameters($p) getToken]
    puts "Got token $token"
    if { [java::isnull $token] } {
	return
    }
    set oldValue [$token stringValue]
    set newValue [$itk_component(main) get main.$p]

    # No point updating it if it's the same
    if { $oldValue != $newValue } {
	puts "$_parameters($p) setExpression $newValue"
	$_parameters($p) setExpression $newValue
	$_parameters($p) parameterChanged [java::null]
    }
}
