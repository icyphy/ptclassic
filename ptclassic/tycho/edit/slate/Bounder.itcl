##########################################################################
# Version: $Id$
# Author: H. John Reekie
#
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


## Bounder
#
# An interactor that keeps the target object within a given region.
#
class ::tycho::Bounder {
    inherit ::tycho::Follower

    ## bounds
    #
    # The region in which to move. If null, use whole canvas, the Bounder
    # looks at the target object to see if it has a parent, and, if it has,
    # restricts the object to move only within the confines of the parents
    # bounds. If the object has no parent, then bounder uses the whole
    # canvas.
    #
    public variable bounds ""


    ## constructor
    #
    constructor {args} {
	eval configure $args
    }


    ## x0, y0 , x1, y1
    #
    # Individual values of bounds
    #
    private variable x0
    private variable y0
    private variable x1
    private variable y1
    
    private variable actualX
    private variable actualY


    ## click, drag, continue, release
    #
    # Similar to the methods in the parent class, Follower, except that
    # movement is prevented outside _bounds_.
    #
    method click {x y} {
	#
	# Get individual coordinates of the bounding region.
	# If there are no bounds specified, use the parent's bounds,
	# of the whole canvas if it has no parent.
	#
	if { $bounds != "" } {
	    assign x0 y0 x1 y1 $bounds
	} elseif { [$target parent] != "" } {
	    assign x0 y0 x1 y1 [[$target parent] query bounds]
	} else {
	    set x0 1
	    set y0 1
	    set x1 [expr [winfo width  $slate] - 1]
	    set y1 [expr [winfo height $slate] - 1]
	}

	#
	# Make the bounds smaller to allow for the size of the target
	# object. Use the coords if possible, else use the bounding
	# box.
	#
	set box [$target coords]
	if { [llength $box] != 4 } {
	    set box [$target query bbox]
	}
	assign a0 b0 a1 b1 $box

	set x0 [expr $x0 + ($x - $a0)]
	set y0 [expr $y0 + ($y - $b0)]
	set x1 [expr $x1 + ($x - $a1)]
	set y1 [expr $y1 + ($y - $b1)]

	#
	# Initialise other variables, and click on target
	#
	$targetproxy click $x $y

	set actualX $x
	set actualY $y
    }

    method drag {x y} {
	#
	# Test if the new point is outside the bounds. If it is,
	# then move to the boundary. Otherwise, move to the
	# new point.
	#
	if { $x < $x0 } {
	    set actualX $x0
	} elseif { $x > $x1  } {
	    set actualX $x1
	} else {
	    set actualX $x
	}

	if { $y < $y0 } {
	    set actualY $y0
	} elseif { $y > $y1  } {
	    set actualY $y1
	} else {
	    set actualY $y
	}

	$targetproxy drag $actualX $actualY

	if { $dragcommand != "" } {
	    uplevel #0 $dragcommand
	}
    }
}
