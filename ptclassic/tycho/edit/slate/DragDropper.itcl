##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### DragDropper
#
# The DragDropper is an interactor specialized for "drag-drop"
# type interactions. This is any interaction that starts by clicking
# on one item and ends with the mouse over another item.
#
# <p><b>Options</b>
#
# See also: <a href="Interactor.html">Interactor</a>.
#
# <dl>
# <dt><dd>
# <dl>
# <dt><b>-activatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>. This command should
# be set by the client to perform an action needed when the first
# item is clicked-on.
#
# <dt><b>-deactivatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>. This command
# is executed when the mouse is released. It is set by the client
# to perform the "drop" action. If the mouse is not over a suitable
# target item, the client will already have been informed by a null
# second argument to the *-dragcommand* script.
#
# <dt><b>-dragcommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>. This command
# is executed each time the mouse is moved. It should be used by the
# client to move or change the shape of something. If the mouse
# is currently over a suitable target item (as set by the *-targettag*
# option, the second argument is that item; if not, the second argument
# is null).
#
# <dt><b>-halo</b>
# <dd>The distance from a target item needed for the item to be
# considered under the mouse. This is mainly used for thin items
# like lines. By default, this is zero.
#
# <dt><b>-targettags</b>
# <dd>The tags of suitable target items. Any item with one of these tags
# is highlighted and passed to *-dragcommand* when the mouse moves
# within *-halo* pixels of it.
#
# </dl></dl>
#
# <p><b>Bugs</b>: The <i>DragDropper</i> will not work with
# cascaded interactors. This would be useful, for example, for
# gridding and bounding, and must be fixed.
#
# <p><b>Enhancements</b> (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/interacting.html">How interactors work</a>
# <li><a href="../internals/interactors.html">An overview of
#                    interactor classes</a>
# <li><a href="../internals/index.html">Infrastructure contents</a>
# <li><a href="index.html">Class documentation index</a>
# </ul>
#
class ::tycho::DragDropper {
    inherit ::tycho::Follower

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c
	eval configure $args
    }
    destructor {}

    ###################################################################
    ####                            options                        ####

    # The distance from the mouse to be considered under it
    public variable halo 0

    # The tags of target items
    public variable targettags {}

    ###################################################################
    ####                         public methods                    ####

    # Bind to a tag picture
    method bind {tagOrID args}

    # Start interaction sequence
    method click {x y args}

    # Continue interaction sequence
    method drag {x y}

    # Move mouse over a bound item
    method enter {}

    # Move mouse away from a bound item
    method leave {}

    # Test if the mouse is over a target item
    method over {x y}

    # Terminate interaction sequence
    method release {x y}

    ###################################################################
    ####                   protected variables                     ####

    # The line being create
    private variable line
}

#######################################################################
#### bind 
#
# ``Bind'' a connector to a tag type. This overrides the superclass
# method to add bindings for entering and leaving the terminal.
#
body ::tycho::DragDropper::bind {t args} {
    # First do the superclass thing
    eval chain $t $args

    # Add bindings for Enter
    $slate bind $t <Enter> "$this enter"
    $slate bind $t <Leave> "$this leave"
}

#######################################################################
#### click
#
# Start the interaction. All this does is clear highlights -- the client
# usually sets *-activatecommand* to make something useful happen.
#
body ::tycho::DragDropper::click {x y args} {
    # Delete all other highlights
    $slate delete highlight
}

#######################################################################
#### drag
#
# Continue an interaction sequence. If the mouse is over a suitable
# target item, highlight that item and pass it to the *-dragcommand*
# option. If not, delete all highlights and pass null to *-dragcommand*.
#
body ::tycho::DragDropper::drag {x y} {
    # See if we overlap any suitable connections
    set item [over $x $y]

    # Adjust highlighting
    $slate delete highlight
    if { $item != "" } {
	$slate highlight $item
    }

    # Call -dragcommand
    if { $dragcommand != "" } {
	uplevel \#0 $dragcommand [list $item] $x $y
    }
}

#######################################################################
#### enter
#
# Move over a bound item. Highlight the item.
#
body ::tycho::DragDropper::enter {} {
    $slate highlight [$slate find withtag current]
}

#######################################################################
#### leave
#
# Move mouse away from a bound item.
#
body ::tycho::DragDropper::leave {} {
    $slate unhighlight [$slate find withtag current]
}

#######################################################################
#### release
#
# Let go of the mouse. This method just deletes highlights.
#
body ::tycho::DragDropper::release {x y} {
    $slate delete highlight
}

#######################################################################
#### over
#
# See if the mouse is over a suitable target item. Return the
# item if it is, null if not.
#
body ::tycho::DragDropper::over {x y} {
    set found 0
    foreach item [eval $slate find overlapping \
	    [::tycho::Rectangle::stretch $x $y $x $y $halo]] {
	foreach tag $targettags {
	    if [$slate hastag $item $tag] {
		set found 1
		return $item
	    }
	}
    }
    return {}
}
