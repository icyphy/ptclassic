##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Follower
#
# The simplest interactor: follow the mouse. This interactor implements
# the activate{} and deactivate{} methods so that
# clicking and dragging on a target picture causes corresponding actions
# on the target -- in other words, with the default moving behavior,
# the picture is moved by clicking and dragging.
#
# It seems like this class goes to a lot of trouble to perform a simple
# function. However, its real power comes from inheritance, where
# click-and-drag behavior can be customized for more sophistictaed
# interaction -- see
# <a href="Gridder.html"><i>Gridder</i></a>,
# <a href="Bounder.html"><i>Bounder</i></a>, and
# <a href="Alonger.html"><i>Alonger</i></a> for examples.
#
class ::tycho::Follower {
    inherit ::tycho::Interactor

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c

	eval configure $args
    }
    destructor {}

    ###################################################################
    ####                        protected methods                  ####

    # Attach the interactor to the current picture
    protected method activate {t x y args}

    # Remove the interactor from the current picture
    protected method deactivate {args}
}

#######################################################################
#### activate
#
# Activate the interactor on a picture object. Motion and release events
# are bound to the current picture so that the picture can be dragged
# and so on. After setting up bindings and calling the *activatecommand*
# option, this method calls the click{} method -- subclasses therefore
# need only to override click{} (and drag{} and release{}) to alter the
# interaction behavior.
# 
body ::tycho::Follower::activate {t x y args} {
    # Set the target. The client can modify its options later
    # with -activatecommand if desired. If the target argument is
    # in fact a tag, get the current picture from the slate.
    if { [string match {_*} $t] || [string match {[0-9]*} $t] } {
	target $t
    } else {
	target [$slate find withtag current]
    }

    # Set up the bindings.
    $slate bind $target \
	    [eval ::tycho::Interactor::event Motion $args] \
	    [list @scope [info class] "$this drag %x %y; update idletasks"]
    $slate bind $target \
	    [eval ::tycho::Interactor::event Release $args] \
	    [list @scope [info class] "$this release; $this deactivate $args"]

    # Execute the user-specified activation command
    execute $activatecommand $x $y $args

    # Start the interaction sequence
    eval click $x $y $args
}


#######################################################################
#### deactivate
#
# Deactivate the interactor from the target. This method must be called
# by the script bound to the release event.
# 
body ::tycho::Follower::deactivate {args} {
    # Remove bindings from the current tag
    $slate bind $target\
	    [eval ::tycho::Interactor::event Motion $args] {}
    $slate bind $target \
	    [eval ::tycho::Interactor::event Release $args] {}

    execute $deactivatecommand $args
}
