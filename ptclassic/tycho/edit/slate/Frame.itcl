#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Set up the "function table." Explicitly load the superclass
# to avoid a bizarre problem with variable scoping.
#
namespace ::tycho {
    if { [::info classes Picture] == "" } {
	uplevel #0 {source $tychoslate/kernel/Picture.itcl}
    }
}

uplevel #0 {
    array set Frame [array get Picture]

    set Frame(borderwidth) ::tycho::Frame::borderwidth
    set Frame(color)       ::tycho::Frame::color
    set Frame(construct)   ::tycho::Frame::construct
    set Frame(coords)      ::tycho::Frame::coords
    set Frame(relief)      ::tycho::Frame::relief
}


## Frame
#
# A 3D rectangle class.
#
class ::tycho::Frame {
    inherit ::tycho::Picture

    proc construct {id tags canvas x0 y0 x1 y1 args}


    ###################################################################
    ####                            options                        ####

    # The width of the relief border
    common borderwidth

    # The color of the frame
    common color

    # The relief: raised, sunken, groove, ridge, or flat
    common relief

    ###################################################################
    ####                         public procs                      ####

    proc borderwidth {id canvas bw}
    proc color       {id canvas co}
    proc coords      {id canvas args}
    proc relief      {id canvas re}


    ###################################################################
    ####                         protected variables               ####

    # Components of the picture
    common lit
    common notlit
    common shaded
    common notshaded
    common surface

    # The object used to get shades of color
    common colorShadesObject

    # The "shape" of pictures of this class
    common shape "rectangle"

    #### Set option defaults
    set optiondefault(-color)       background
    set optiondefault(-borderwidth) 2
    set optiondefault(-relief)      raised

}


##########################################################################
## borderwidth
#
# Set the borderwidth configuration option.
#
body ::tycho::Frame::borderwidth {id canvas bw} {
    set borderwidth($id) $bw

    set coords [$canvas	coords $primary($id)]

    set x0 [lindex $coords 0]
    set y0 [lindex $coords 1]
    set x1 [expr [lindex $coords 2] + 1]
    set y1 [expr [lindex $coords 3] + 1]

    set	a0 [expr $x0 + $borderwidth($id)]
    set	b0 [expr $y0 + $borderwidth($id)]
    set	a1 [expr $x1 - $borderwidth($id)]
    set	b1 [expr $y1 - $borderwidth($id)]

    $canvas coords $lit($id) \
	    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
    $canvas coords $shaded($id) \
	    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1

    if { $relief($id) == "ridge" || $relief($id) == "groove" } {
	set x0 $a0
	set y0 $b0
	set x1 $a1
	set y1 $b1

	set a0 [expr $x0 + $borderwidth($id)]
	set b0 [expr $y0 + $borderwidth($id)]
	set a1 [expr $x1 - $borderwidth($id)]
	set b1 [expr $y1 - $borderwidth($id)]
	
	$canvas coords $notlit($id) \
		$x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
	$canvas coords $notshaded($id) \
		$x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1
    }

    if { [::info exists surface($id)] } {
	$canvas coords $surface($id) $a0 $b0 $a1 $b1
    }
}


##########################################################################
## color
#
# Set the color configuration option.
#
body ::tycho::Frame::color {id canvas co} {
    set color($id) $co
    set colorShadesObject($id) [::tycho::Shades::new $color($id)]

    # FIXME: quick and dirty
    relief $id $canvas $relief($id)
    $canvas itemconfigure $surface($id) -fill [$colorShadesObject($id) matt]
}


##########################################################################
#### construct
#
body ::tycho::Frame::construct {id tags canvas x0 y0 x1 y1 args} {
    # Initialize the options
    foreach {option value} [concat [array get optiondefault] $args] {
	set [string trimleft $option -]($id) $value
    }

    # This object is used to get the shades of color
    set colorShadesObject($id) [::tycho::Shades::new $color($id)]
 

    # Create the primary component for the outline coordinates.
    # Note that this has an outline, but it will be obscured
    # by other components. DO NOT give this rectangle a blank
    # outline, because then it will respond to mouse events on
    # its inside (even though invisible), which makes see-through
    # frames impossible.
    set primary($id) [$canvas create rectangle $x0 $y0 $x1 $y1 \
	    -tags $tags]

    # The way that the polygon co-ordinates is set up in the Tk
    # canvas seems somewhat bogus, so we have to futz with the
    # coordinates here.
    set	y1 [expr $y1+1]
    set	x1 [expr $x1+1]

    # Create the borders and the fill. This is set for the default
    # relief (raised).
    set	a0 [expr $x0 + $borderwidth($id)]
    set	b0 [expr $y0 + $borderwidth($id)]
    set	a1 [expr $x1 - $borderwidth($id)]
    set	b1 [expr $y1 - $borderwidth($id)]

    set lit($id) [$canvas create polygon \
 	    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1 \
 	    -fill [$colorShadesObject($id) light] -tags $tags]

    set shaded($id) [$canvas create polygon \
 	    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1 \
 	    -fill [$colorShadesObject($id) dark] -tags $tags]

    set surface($id) [$canvas create rectangle \
 	    $a0 $b0 $a1 $b1 \
 	    -fill [$colorShadesObject($id) matt] \
 	    -outline {} -tags $tags]

    if { $relief($id) != "raised" } {
	relief $id $canvas $relief($id)
    }
}


##########################################################################
#### coords
#
# Set or read the frame's coordinates
#
body ::tycho::Frame::coords {id canvas args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the primary
    set coords $args
    eval $canvas coords $primary($id) $coords

    # Change the co-ordinates of the outside borders.
    set x0 [lindex $coords 0]
    set y0 [lindex $coords 1]
    set x1 [expr [lindex $coords 2] + 1]
    set y1 [expr [lindex $coords 3] + 1]

    set a0 [expr $x0 + $borderwidth($id)]
    set b0 [expr $y0 + $borderwidth($id)]
    set a1 [expr $x1 - $borderwidth($id)]
    set b1 [expr $y1 - $borderwidth($id)]

    $canvas coords $lit($id) \
	    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1

    $canvas coords $shaded($id) \
	    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1

    # If the relief is "ridge" or "groove," change the coordinates
    # of the inside borders.
    if { $relief($id) == "ridge" || $relief($id) == "groove" } {
	set x0 $a0
	set y0 $b0
	set x1 $a1
	set y1 $b1

	set a0 [expr $x0 + $borderwidth($id)]
	set b0 [expr $y0 + $borderwidth($id)]
	set a1 [expr $x1 - $borderwidth($id)]
	set b1 [expr $y1 - $borderwidth($id)]

	$canvas coords $notlit($id) \
		$x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
	
	$canvas coords $notshaded($id) \
		$x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1
    }

    # If there is a surface component, change its coordinates
    if { [::info exists surface($id)] } {
	$canvas coords $surface($id) $a0 $b0 $a1 $b1
    }
}


##########################################################################
## relief
#
# The relief of the ThreeD object. Can be one of: flat, raised,
# sunken. ridge, or groove. The coloring for the raised and ridge
# options is the same: the coloring for the sunken and grovved options
# is the same -- the difference is only in whether the notlit and
# notshaded components exist.
#
body ::tycho::Frame::relief {id canvas re} {
    set relief($id) $re
    set slate [join [linit [split $canvas .]] .]

    if { $relief($id) == "ridge" || $relief($id) == "groove" } {
	
	set light [$colorShadesObject($id) light]
	set dark  [$colorShadesObject($id) dark]

	if { $relief($id) == "groove" } {
	    set light $dark
	    set dark [$colorShadesObject($id) light]
	}

	# Change the color of the lit and shaded components
	$canvas itemconfigure $lit($id) -fill $light
	$canvas itemconfigure $shaded($id) -fill $dark

	# If the relief has changed to ridge or groove, then we
	# have to create the inside border polygons, and move
	# the surface if it exists.
	if { ! [info exists notlit($id)] } {

	    set coords [$canvas coords $primary($id)]
	    set tags [[canvasslate $canvas] gettags $id]

	    set x0 [expr [lindex $coords 0] + $borderwidth($id)]
	    set y0 [expr [lindex $coords 1] + $borderwidth($id)]
	    set x1 [expr [lindex $coords 2] - $borderwidth($id) + 1]
	    set y1 [expr [lindex $coords 3] - $borderwidth($id) + 1]

	    set a0 [expr $x0 + $borderwidth($id)]
	    set b0 [expr $y0 + $borderwidth($id)]
	    set a1 [expr $x1 - $borderwidth($id)]
	    set b1 [expr $y1 - $borderwidth($id)]

	    set notlit($id) [$canvas create polygon \
		    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1 \
		    -fill $dark -tags $tags]

	    set notshaded($id) [$canvas create polygon \
		    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1 \
		    -fill $light -tags $tags]

	    if { [::info exists surface($id)] } {
		$canvas coords $surface($id) $a0 $b0 $a1 $b1
	    }
	} else {
	    $canvas itemconfigure $notshaded($id) -fill $light
	    $canvas itemconfigure $notlit($id) -fill $dark
	}
    } else {
	set light [$colorShadesObject($id) light]
	set dark  [$colorShadesObject($id) dark]

	if { $relief($id) == "sunken" } {
	    set light $dark
	    set dark [$colorShadesObject($id) light]
	} elseif { $relief($id) == "flat" } {
	    set light [$colorShadesObject($id) matt]
	    set dark $light
	}

	# Change the color of the various components
	$canvas itemconfigure $lit($id) -fill $light
	$canvas itemconfigure $shaded($id) -fill $dark

	# If the relief has changed from ridge or groove, then we
	# delete the inside border polygons and move the surface.
	if {  [::info exists notlit($id)] } {

	    $canvas delete $notlit($id)
	    $canvas delete $notshaded($id)
	    unset notlit($id)
	    unset notshaded($id)

	    if { [::info exists surface($id)] } {
		set coords [$canvas coords $primary($id)]

		set x0 [lindex $coords 0]
		set y0 [lindex $coords 1]
		set x1 [expr [lindex $coords 2] + 1]
		set y1 [expr [lindex $coords 3] + 1]

		set a0 [expr $x0 + $borderwidth($id)]
		set b0 [expr $y0 + $borderwidth($id)]
		set a1 [expr $x1 - $borderwidth($id)]
		set b1 [expr $y1 - $borderwidth($id)]

		$canvas coords $surface($id) $a0 $b0 $a1 $b1
	    }
	}
    }
}
