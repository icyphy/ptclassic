#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes Connectible] == "" } {
	uplevel #0 {source $tychoslate/Connectible.itcl}
    }
    if { [::info classes Frame] == "" } {
	uplevel #0 {source $tychoslate/Frame.itcl}
    }
}

########################################################################
## Connectible
#
# <i>Connectible</i> is an abstract class for items that can have
# things connected to them with terminals.
# The appearance of its terminals if given by configuration options. 
# For a specific application, you may prefer to write a subclass
# dedicated to the application.
# 
# <p><b>Options</b>:
# 
# <ul>
# <li><b>-inputs</b>.  The positions of the input connections.  This is a 
# flat list of <i>x</i> and <i>y</i> coordinates, as percentages of the 
# icon size and with the origin at the top left of the icon.  By default, 
# this is <code>{0 50}</code>, meaning that there is a single input 
# halfway up the left edge of the icon.  If a single integer is given when 
# setting this option, the option is set to a list such that that number 
# of inputs are evely spaced along the left edge of the icon.  For 
# example, setting <code>-inputs 2</code> will result in the 
# <code>-inputs</code> being set to <code>{0 25 0 75}</code>.
# 
# <li><b>-intype</b>.  A list containing the item type to use to draw the 
# input terminals, followed by options of the item.  The item must accept 
# exactly two coordinates.  The default is <code>{Terminal -type 
# input}</code>.
# 
# <li><b>-outputs</b>.  The positions of the output connections.  This is 
# must the same as the <code>inputs</code> option, except that output 
# terminals are by default placed at the right-hand side of the node icon.
# 
# <li><b>-outtype</b>.  A list containing the item type to use to draw the 
# output terminals, followed by options of the item.  The default is 
# <code>{Terminal -type output}</code>.
# 
# </ul>
# 
# <p><b>Components</b>
#
# <ul>
# <li><b>inports</b>:
# The input ports.
# <li><b>outports</b>:
# The output ports.
# </ul>
#
# <p><b>Enhancements</b>: In an earlier version of the Slate,
# Connectible items had primary and secondary "directions," so that
# you could flip the node about the vertical and horizontal axes.
# 
# <p><b>Caveats</b>: (none)
# 
# <p><b>Example</b>: Create a node:
# <tcl quiet><pre>
#   source $tycho/editors/slate/doc/internals/newslate.itcl
#   .t.s create Connectible 50 50 120 90 -inputs {0 50 50 0} -outputs 2 &#92
# 	-name Foo -tags moveable &#92
# 	-intype {Terminal -type input -style blob -fill red} &#92
# 	-outtype {Terminal -type output -style doublearrow -fill blue}
# </pre></tcl>
# 
# <a href="../internals/howtoread.html">Reading <i>ComplexItem</i> documentation</a>.
#
# <b>Note</b>: This is an experimental class.
#
class ::tycho::Connectible {
    inherit ::tycho::ComplexItem

    ###################################################################
    ####                         public procs                      ####

    # Update the *-inputs* option
    proc _inputs {id canvas slate inputs}
    
    # Update the *-intype* option
    proc _intype {id canvas slate intype}
    
    # Update the *-outputs* option
    proc _outputs {id canvas slate outputs}
    
    # Update the *-outtype* option
    proc _outtype {id canvas slate outtype}

    # Create a new item
    proc construct {id canvas slate tags x0 y0 x1 y1 args}

    # Get or set the coordinates of the Connectible's icon
    proc coords {id canvas slate args}
    
    ###################################################################
    ####                         protected variables               ####

    # All methods are looked up through a table
    common methodtable

    # All options have a default value
    common optiondefault

    ###################################################################
    ####                           private procs                   ####

    proc redrawinputs  {id canvas slate positions}
    proc redrawoutputs {id canvas slate positions}

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::ComplexItem::methodtable]
    array set methodtable [@scope ::tycho::Frame array get methodtable]

    set methodtable(construct)   ::tycho::Connectible::construct
    set methodtable(coords)      ::tycho::Connectible::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::ComplexItem::optiondefault]
    array set optiondefault [@scope ::tycho::Frame array get optiondefault]
}


##########################################################################
#### construct
#
body ::tycho::Connectible::construct {id canvas slate tags x0 y0 x1 y1 args} {
    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $args] {
	set option([string trimleft $opt -]$id) $val
    }

    # Create the Frame
    eval ::tycho::Frame::construct \
	    $id $canvas $slate [list $tags] $x0 $y0 $x1 $y1

    # Create the input and output ports
    _inputs  $id $canvas $slate $option(inputs$id)
    _outputs $id $canvas $slate $option(outputs$id)
}

##########################################################################
#### coords
#
body ::tycho::Connectible::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the frame itself
    eval ::tycho::Frame::coords $id $canvas $slate $args

    # Move the inputs and outputs
    eval ::tycho::Connectible::coords $id $canvas $slate $args
}
