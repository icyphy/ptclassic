#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Set up the "function table." Explicitly load the superclass
# to avoid a bizarre problem with variable scoping.
#
uplevel #0 {
    if { [::info classes ::tycho::Picture] == "" } {
	source $tychoslate/kernel/Picture.itcl
    }

    array set Node [array get Picture]

    set Node(construct)   ::tycho::Node::construct
    set Node(coords)      ::tycho::Node::coords
    set Node(icontype)    ::tycho::Node::icontype
    set Node(inputs)      ::tycho::Node::inputs
    set Node(intype)      ::tycho::Node::intype
    set Node(name)        ::tycho::Node::name
    set Node(outputs)     ::tycho::Node::outputs
    set Node(outtype)     ::tycho::Node::outtype
    set Node(update)      ::tycho::Node::update
}


## Node
#
# A "node" class for dataflow diagrams and the like.
# By default, this class provides a reasonable representation
# of a graph node, but it can be parameterized for different
# "icons" and "terminals." More complex control over appearance
# can be achieved by subclassing.
#
class ::tycho::Node {
    inherit ::tycho::Picture

    proc construct {id tags canvas x0 y0 x1 y1 args}


    ###################################################################
    ####                            options                        ####

    # The type of item to use for the icon
    common icontype

    # The font to use to display the icon name
    common font

    # The name to display on the icon
    common name

    # The type of item and options to use for the input ports
    common intype

    # The positions of the input ports
    common inputs

    # The type of item and options to use for the output ports
    common outtype

    # The positions of the output ports
    common outputs

    ###################################################################
    ####                         public procs                      ####

    proc coords   {id canvas args}
    proc font     {id canvas fo}
    proc inputs   {id canvas in}
    proc intype   {id canvas in}
    proc icontype {id canvas it}
    proc name     {id canvas nm}
    proc outputs  {id canvas ou}
    proc outtype  {id canvas ou}
    proc update   {id canvas}

    ###################################################################
    ####                         protected variables               ####

    common icon
    common textitem
    
    # The "direction" of the input ports
    common indirn

    # The input ports
    common inports

    # The "direction" of the output ports
    common outdirn

    # The output ports
    common outports


    ###################################################################
    ####                           private procs                   ####

    proc redrawinputs  {id canvas positions}
    proc redrawoutputs {id canvas positions}
}


##########################################################################
#### construct
#
body ::tycho::Node::construct {id tags canvas x0 y0 x1 y1 args} {
    set slate [canvasslate $canvas]

    # Initialize the options
    set defaultoptions { \
	    -name "NoName" \
	    -icontype {Frame -color green} \
	    -intype {Terminal -type input} \
	    -outtype {Terminal -type output} \
	    -font -Adobe-Helvetica-Bold-R-Normal--*-120-*-*-*-*-*-* \
	    -inputs 1 \
	    -outputs 1 }

    foreach {option value} [concat $defaultoptions $args] {
	set [string trimleft $option -]($id) $value
    }

    # Create the primary component for the outline coordinates.
    set primary($id) [$canvas create rectangle $x0 $y0 $x1 $y1 \
	    -tags $tags]

    # Create the icon
    set icon($id) [eval $slate create [lindex $icontype($id) 0] \
	    $x0 $y0 $x1 $y1 [lrange $icontype($id) 1 end] \
	    -tags [list $tags]]

    # Create the label (should it be underneath?)
    set point [rectAspect [list $x0 $y0 $x1 $y1] "c"]
    set textitem($id) [eval $canvas create text $point \
	    -text $name($id) -font $font($id) \
	    -tags [list $tags]]

    # Create the input and output ports
    inputs  $id $canvas $inputs($id)
    outputs $id $canvas $outputs($id)
}


##########################################################################
#### coords
#
body ::tycho::Node::coords {id canvas args} {
    set slate [canvasslate $canvas]

    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the primary
    set coords $args
    eval $canvas coords $primary($id) $coords

    # Move the icon
    eval $slate coords $icon($id) $coords

    # Perform a generic update
    update $id $canvas

    # Set up coordinates for moving inputs and outputs
    assign x0 y0 x1 y1 $coords

    set xscale [expr ($x1-$x0)/100.0]
    set yscale [expr ($y1-$y0)/100.0]

    # Move inputs
    set positions {}
    foreach {x y} $inputs($id) {
	if { $x == 0 } {
	    lappend positions $x0 [expr $y0 + $yscale * $y]
	} elseif { $x == 100 } {
	    lappend positions $x1 [expr $y0 + $yscale * $y]
	} elseif { $y == 0 } {
	    lappend positions [expr $x0 + $xscale * $x] $y0
	} elseif { $y == 100 } {
	    lappend positions [expr $x0 + $xscale * $x] $y1
	}  
    }
    redrawinputs $id $canvas $positions

    # Move outputs
    set positions {}
    foreach {x y} $outputs($id) {
	if { $x == 0 } {
	    lappend positions $x0 [expr $y0 + $yscale * $y]
	} elseif { $x == 100 } {
	    lappend positions $x1 [expr $y0 + $yscale * $y]
	} elseif { $y == 0 } {
	    lappend positions [expr $x0 + $xscale * $x] $y0
	} elseif { $y == 100 } {
	    lappend positions [expr $x0 + $xscale * $x] $y1
	}  
    }
    redrawoutputs $id $canvas $positions
}


##########################################################################
#### font
#
body ::tycho::Node::font {id canvas fo} {
    set font($id) $fo
    $canvas itemconfigure $textitem($id) -font $fo
}

##########################################################################
#### icontype
#
body ::tycho::Node::icontype {id canvas it} {
    set icontype($id) $it
    set slate [canvasslate $canvas]

    $slate delete $icon($id)
    set icon($id) [eval $slate create [lindex $icontype($id) 0] \
	    [$canvas coords $primary($id)] [lrange $icontype($id) 1 end] \
	    -tags [list [$slate gettags $id]]]

    $slate lower $icon($id) $textitem($id)
}

##########################################################################
#### inputs
#
# The option representing the positions of the input connections.
# Each of these is a list of connection positions, in % and relative
# to the top-left corner of the picture's outline. Each position
# is a pair, with each number the percentage distance along
# the horizontal and vertical axis respectively. For example,
# a single point in the center of the left edge is {0 50}};
# two points along the bottom edge could be {25 100 75 100}.
#
# By default, there is one input on the left edge and one output
# on the right edge.
#
# Setting this configuration option supports a handy shortcut:
#
# -- A single number sets the list to evenly spaced positions
#    along the left (input) or right (output) edges. For example,
#    the option -inputs 2 to the constructor will result in
#    the -inputs variable being set to {0 25 0 75}.
#
body ::tycho::Node::inputs {id canvas in} {
    # Set up coordinates
    assign x0 y0 x1 y1 [$canvas coords $primary($id)]
    set xscale [expr ($x1-$x0)/100.0]
    set yscale [expr ($y1-$y0)/100.0]
    set positions {}

    # If the argument is an integer, generate evenly-spaced points
    # along the left axis.
    if { [llength $in] == 1 && [string match {[0-9]*} $in] } {
	set inputs($id) {}
	set indirn($id) {}

	# If it's zero, then delete ports and we're done
	if { $in == 0 } {
	    if { [::info exists inports($id)] } {
		foreach p $inports($id) {
		    $slate delete $p
		}
	    }
	    return
	}
	foreach y [spread $in 0 100 -indented] {
	    lappend inputs($id) 0 $y
	    lappend indirn($id) -1 0
	    lappend positions $x0 [expr $y0 + $yscale * $y]
	}
    } else {
	# The argument has the correct format
	set inputs($id) $in
	set indirn($id) {}
	foreach {x y} $in {
	    if { $x == 0 } {
		lappend indirn($id) -1 0
		lappend positions $x0 [expr $y0 + $yscale * $y]
	    } elseif { $x == 100 } {
		lappend indirn($id) 1 0
		lappend positions $x1 [expr $y0 + $yscale * $y]
	    } elseif { $y == 0 } {
		lappend indirn($id) 0 -1
		lappend positions [expr $x0 + $xscale * $x] $y0
	    } elseif { $y == 100 } {
		lappend indirn($id) 0 1
		lappend positions [expr $x0 + $xscale * $x] $y1
	    } else {
		error "Invalid coordinates $x $y"
	    }
	}
    }
    # Now move/draw the terminals
    redrawinputs $id $canvas $positions
}

##########################################################################
#### intype
#
body ::tycho::Node::intype {id canvas in} {
    set slate [canvasslate $canvas]
    set intype($id) $in
    foreach p $inports($id) {
	$slate delete $p
    }
    set inports($id) {}

    inputs $id $canvas $inputs($id)
}

##########################################################################
#### name
#
body ::tycho::Node::name {id canvas nm} {
    set name($id) $nm
    $canvas itemconfigure $textitem($id) -text $nm
}

##########################################################################
#### outputs
#
# See inputs{} for comments.
#
body ::tycho::Node::outputs {id canvas out} {
    set slate [canvasslate $canvas]

    # Set up coordinates
    assign x0 y0 x1 y1 [$canvas coords $primary($id)]
    set xscale [expr ($x1-$x0)/100.0]
    set yscale [expr ($y1-$y0)/100.0]
    set positions {}
    
    # If the argument is an integer, generate evenly-spaced points
    # along the right axis.
    if {  [llength $out] == 1 && [string match {[0-9]*} $out] } {
	set outputs($id) {}
	set outdirn($id) {}

	# If it's zero, then delete ports and we're done
	if { $out == 0 } {
	    if { [::info exists outports($id)] } {
		foreach p $outports($id) {
		    $slate delete $p
		}
	    }
	    return
	}
	foreach y [spread $out 0 100 -indented] {
	    lappend outputs($id) 100 $y
	    lappend outdirn($id) 1 0
	    lappend positions $x1 [expr $y0 + $yscale * $y]
	}
    } else {
	# The argument has the correct format
	set outputs($id) $out
	set outdirn($id) {}
	foreach {x y} $out {
	    if { $x == 0 } {
		lappend outdirn($id) -1 0
		lappend positions $x0 [expr $y0 + $yscale * $y]
	    } elseif { $x == 100 } {
		lappend outdirn($id) 1 0
		lappend positions $x1 [expr $y0 + $yscale * $y]
	    } elseif { $y == 0 } {
		lappend outdirn($id) 0 -1
		lappend positions [expr $x0 + $xscale * $x] $y0
	    } elseif { $y == 100 } {
		lappend outdirn($id) 0 1
		lappend positions [expr $x0 + $xscale * $x] $y1
	    } else {
		error "Invalid coordinates $x $y"
	    }
	}
    }
    # Now move/draw the terminals
    redrawoutputs $id $canvas $positions
}

##########################################################################
#### outtype
#
body ::tycho::Node::outtype {id canvas ou} {
    set slate [canvasslate $canvas]
    set outtype($id) $ou
    foreach p $outports($id) {
	$slate delete $p
    }
    set outports($id) {}
    outputs $id $canvas $outputs($id)
}

##########################################################################
#### redrawinputs
#
body ::tycho::Node::redrawinputs {id canvas positions} {
    if { ! [::info exists inports($id)] } {
	set inports($id) {}
    }
    set slate [canvasslate $canvas]
    set tags  [$canvas gettags $id]
    foreach {x y} $positions {a b} $indirn($id) p $inports($id) {
	if { $p == "" } {
	    lappend inports($id) [eval $slate create \
		    [lindex $intype($id) 0] \
		    $x $y \
		    [lrange $intype($id) 1 end] \
		    -direction [list [list $a $b]] \
		    -tags [list $tags]]
	} else {
	    $slate coords $p $x $y
	    # Should be able to optimise this out
	    $slate itemconfigure $p \
		    -direction [list $a $b]
	}
    }
}

##########################################################################
#### redrawoutputs
#
body ::tycho::Node::redrawoutputs {id canvas positions} {
    if { ! [::info exists outports($id)] } {
	set outports($id) {}
    }
    set slate [canvasslate $canvas]
    set tags  [$canvas gettags $id]
    foreach {x y} $positions {a b} $outdirn($id) p $outports($id) {
	if { $p == "" } {
	    lappend outports($id) [eval $slate create \
		    [lindex $outtype($id) 0] \
		    $x $y \
		    [lrange $outtype($id) 1 end] \
		    -direction [list [list $a $b]] \
		    -tags [list $tags]]
	} else {
	    $slate coords $p $x $y
	    # Should be able to optimise this out
	    $slate itemconfigure $p \
		    -direction [list $a $b]
	}
    }    
}

##########################################################################
#### update
#
body ::tycho::Node::update {id canvas} {
    # Figure out where to put the text item
    set point [rectAspect [$canvas coords $primary($id)] "c"]

    # Move it there
    eval $canvas coords $textitem($id) $point
}
