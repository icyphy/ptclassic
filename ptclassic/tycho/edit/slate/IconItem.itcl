#########################################################################
# @Version: @(#)IconItem.itcl	1.33 07/29/98
# @Author: H. John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


########################################################################
## IconItem
#
# <i>IconItem</i> is an abstract class for items that can have
# things connected to them with terminals. It is a subclass of
# LabeledItem, because it inherits the text label and the
# internal scaled graphics options. It extends LabeledItem
# in two ways:
# <ul>
# <li>By having a single pair of coordinates, and options that control
# the icon width and height (instead of required the coordinates
# of the bounding rectangle.
# <li>By supporting active child items that are used to "connect"
# lines to the item.
# </ul>
# 
# <p><a name="IconItem class Options"><b>Options</b>:
# 
# See also <a href="LabeledItem.html#LabeledItem class Options">LabeledItem</a>.
#
# <ul>
# <li><b>-anchor</b>:
# The anchor point of the item relative to its origin. This option
# is valid only if the *-shape* option is set to "point." Otherwise
# it will read the previously set value and will cause an
# error if set. Default is "center."
#
# <li><b>-hsize</b>:
# The horizontal size of the item. If the *-shape* option is "point<"
# then this option sets the horizontal size of the item; otherwise
# it will read zero and will cause an error if set. (This option
# should have been called "width," but that is already used for
# the width of the outline in Tk.) The minimum size of this
# option is 2.
#
# <li><b>-vsize</b>:
# The vertical size of the item. If the *-shape* option is "point,"
# then this option sets the vertical size of the item; otherwise
# it will read zero and will cause an error if set. (This option
# should have been called "height," but since "width" cannot be used
# then neither can "height.") The minimum size of this
# option is 2.
#
# </ul>
# 
# <p><b>Components</b>
#
# Each terminal created with the <b>terminal</b> proc becomes
# a component with name given by the _name_ argument.
#
# <p><b>Enhancements</b>: In an earlier version of the Slate,
# IconItem items had primary and secondary "directions," so that
# you could flip the node about the vertical and horizontal axes.
# 
# <p><b>Caveats</b>: (none)
# 
# <p><b>Example</b>: See <a href="IconFrame.html">IconFrame.html</a>
#
# <a href="../internals/howtoread.html">Reading <i>ComplexItem</i> documentation</a>.
#
# <b>Note</b>: This is an experimental class.
#
class ::tycho::IconItem {
    inherit ::tycho::LabeledItem

    ###################################################################
    ####                         public procs                      ####

    # Update the *-anchor* option
    proc _anchor {id canvas slate anchor {x {}} {y {}}}

    # Update the *-hsize* option
    proc _hsize {id canvas slate hsize}

    # Update the *-vsize* option
    proc _vsize {id canvas slate vsize}

    # Change coordinates
    proc coords {id canvas slate {x {}} {y {}}}
    
    # Get or set the region of the icon
    proc region {id canvas slate args}

    # Add a terminal to the icon
    proc terminal {id canvas slate name type x y args}

    ###################################################################
    ####                          protected procs                  ####

    # Adjust sizes after changing coordinates
    protected proc adjust {id canvas slate}

    # Adjust terminals after changing coordinates
    protected proc adjustterminals {id canvas slate a0 b0 a1 b1 x0 y0 x1 y1}

    ###################################################################
    ####                         private variables                 ####

    # All methods are looked up through a table
    private common methodtable

    # All options have a default value
    private common optiondefault

    # An array of lists of terminal components, indexed by id
    private common terminals

    ###################################################################
    ####                           private procs                   ####
}


###################################################################
####                       class initialization                ####
namespace eval ::tycho::IconItem {
    #### Set method table
    array set methodtable [array get ::tycho::LabeledItem::methodtable]

    set methodtable(_anchor)     ::tycho::IconItem::_anchor
    set methodtable(_hsize)      ::tycho::IconItem::_hsize
    set methodtable(_vsize)      ::tycho::IconItem::_vsize

    set methodtable(coords)    ::tycho::IconItem::coords
    set methodtable(region)    ::tycho::IconItem::region
    set methodtable(terminal)  ::tycho::IconItem::terminal

    #### Set option defaults
    array set optiondefault [array get ::tycho::LabeledItem::optiondefault]
    set optiondefault(-anchor)	"center"
    set optiondefault(-hsize)   60
    set optiondefault(-shape)   "point"
    set optiondefault(-text)    "NoName"
    set optiondefault(-vsize)   40
}


##########################################################################
## -anchor option configuration
#
# Adjust the anchor position. If optional arguments are given,
# these are coordinates to anchor to.
#
body ::tycho::IconItem::_anchor {id canvas slate anchor {x {}} {y {}}} {
    if { $x == "" } {
        ::tycho::assign x y [eval ::tycho::Rectangle::feature \
                [$canvas coords $primary($id)] $option(anchor$id)]
    }
    # Move the item
    $slate moveto $id $x $y $anchor -shape rectangle

    # Remember the option
    set option(anchor$id) $anchor
}

###########################################################################
## -hsize option configuration
#
body ::tycho::IconItem::_hsize {id canvas slate hsize} {
    if { $hsize < 2} {
        error "Invalid -hsize: $hsize"
    }
    set option(hsize$id) $hsize
    adjust $id $canvas $slate
}

##########################################################################
## -vsize option configuration
#
body ::tycho::IconItem::_vsize {id canvas slate vsize} {
     if { $vsize < 2} {
        error "Invalid -vsize: $vsize"
    }
    set option(vsize$id) $vsize
    adjust $id $canvas $slate
}

#########################################################################
## adjust
#
# Adjust item after changing hsize or vsize
#
body ::tycho::IconItem::adjust {id canvas slate} {
    ::tycho::assign x0 y0 x1 y1 [$canvas coords $primary($id)]
 
    # Remember the anchor point
    ::tycho::assign a b [::tycho::Rectangle::feature \
            $x0 $y0 $x1 $y1 $option(anchor$id)]

    # Get the anchor point after adjusting size
    set m1 [expr $x0 + $option(hsize$id)]
    set n1 [expr $y0 + $option(vsize$id)]
    ::tycho::assign x y [::tycho::Rectangle::feature \
            $x0 $y0 $m1 $n1 $option(anchor$id)]

    # Resize the main graphic
    [set ::tycho::[$slate type $id]::methodtable(_coords)] \
            $id $canvas $slate $x0 $y0 $m1 $n1

    # Move the terminals
    eval adjustterminals $id $canvas $slate $x0 $y0 $x1 $y1 $x0 $y0 $m1 $n1

    # Move the whole lot back to the anchor point
    $canvas move $id [expr $a - $x] [expr $b - $y]
}

##########################################################################
#### adjustterminals
#
# Move the terminals...
#
body ::tycho::IconItem::adjustterminals \
        {id canvas slate a0 b0 a1 b1 x0 y0 x1 y1} {
    set xscale [expr ($x1-$x0)/($a1-$a0)]
    set yscale [expr ($y1-$y0)/($b1-$b0)]
    if [::info exists terminals($id)] {
        foreach t $terminals($id) {
            ::tycho::assign a b [$slate feature $component($t$id) origin]
            set x [expr $x0 + ($a-$a0) * $xscale]
            set y [expr $y0 + ($b-$b0) * $yscale]
            $slate move $component($t$id) [expr $x-$a] [expr $y-$b]
        }
    }
}

##########################################################################
#### coords
#
body ::tycho::IconItem::coords {id canvas slate {x {}} {y {}}} {
    # No args: just return coordinates
    if { $x == "" } {
        return [eval ::tycho::Rectangle::feature \
                [$canvas coords $primary($id)] $option(anchor$id)]
    } else {
        adjust $id $canvas $slate
    }
}

##########################################################################
#### region
#
# Get or set the region of the item. This is needed because the
# coordinates do not match the type of the primary component.
#
body ::tycho::IconItem::region {id canvas slate args} {
    set coords [$canvas coords $primary($id)]

    if { $args == "" } {
        return $coords
    } else {
        ::tycho::assign a0 b0 a1 b1 $coords
        ::tycho::assign x0 y0 x1 y1 $args
 
        # Resize the main graphic
        [set ::tycho::[$slate type $id]::methodtable(_coords)] \
                $id $canvas $slate $x0 $y0 $x1 $y1

        # Move the terminals
        eval adjustterminals $id $canvas $slate $a0 $b0 $a1 $b1 $x0 $y0 $x1 $y1

        # Remember the width and height
        set option(hsize$id) [expr $x1-$x0]
        set option(vsize$id) [expr $y1-$y0]
    }
}

##########################################################################
#### terminal
#
# Create a terminal and register as a component.
#
body ::tycho::IconItem::terminal {id canvas slate name type x y args} {
    set component($name$id) \
	    [eval $slate createrootchild $id $type $x $y $args]
    lappend terminals($id) $name
}
