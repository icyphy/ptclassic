#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes Iconic] == "" } {
	uplevel #0 {source $tychoslate/Iconic.itcl}
    }
    if { [::info classes LabeledOval] == "" } {
	uplevel #0 {source $tychoslate/LabeledOval.itcl}
    }
}

########################################################################
## IconOval
#
# <i>IconOval</i> is an Oval with connecting terminals on it, intended
# for use as an icon in block diagrams and the like. It has just two
# coordinates, which are the _x_ and _y_ coordinates of its center.
# 
# <p><b>Options</b>:
# 
# _IconOval_ has all options of <a href="Iconic.html">Iconic</a>
# and <a href="LabeledOval">LabeledOval</a>. In addition, it has the options:
#
# <ul>
# <li><b>-vsize</b>
# The height of the oval, in pixels.
# <li><b>-hsize</b>
# The width of the oval, in pixels.
#
# </ul>
# 
# <p><b>Components</b>
#
# _IconOval_ has all components of <a href="Iconic.html">Iconic</a>
# and <a href="LabeledOval">LabeledOval</a>.
# 
# <p><b>Bugs</b>: If the input and output terminals are not positioned
# at the compas points then the terminal doesn't connect to the oval.
# 
# <p><b>Example</b>: Create an icon:
# <tcl quiet><pre>
#   source $tycho/editors/slate/doc/internals/newslate.itcl
#   set icon [$slate create IconOval 80 80 &#92
#       -inputs {0 50 50 0} &#92
#       -outputs 1 &#92
#       -fill green &#92
#       -graphics {line 20 50 80 50 -width 4
#                  line 50 20 50 80 -width 4} &#92
#       -tags moveable]
#   $slate createchild $icon Terminal 0 0 &#92
#       -anchor {0 50} &#92
#       -direction {-1 0} &#92
#       -type input &#92
#       -style blob &#92
#       -fill red
#   $slate createchild $icon Terminal 0 0 &#92
#       -anchor {100 50} &#92
#       -type output &#92
#       -style doublearrow  &#92
#       -fill blue
# </pre></tcl>
# 
# <p><b>Enhancements</b>: Make terminals connect anywhere on the oval.
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/howtoread.html">Reading <i>ComplexItem</i>
# documentation</a>.
# <li><a href="../internals/items.html">Complex item classes</a>.
# </ul>
#
class ::tycho::IconOval {
    inherit ::tycho::Iconic

    ###################################################################
    ####                         public procs                      ####

    # Update the *-vsize* option
    proc _vsize {id canvas slate vsize}

    # Update the *-hsize* option
    proc _hsize {id canvas slate hsize}

    # Create a new item
    proc construct {id canvas slate tags x y args}

    # Get or set the coordinates of the IconOval's icon
    proc coords {id canvas slate args}
    
    # Draw a highlight around the oval
    proc highlight {id canvas slate args}
    
    ###################################################################
    ####                           protected procs                 ####

    # Update the coordinates
    proc _coords {id canvas slate x y}
    
    ###################################################################
    ####                         private variables                 ####

    # All methods are looked up through a table
    private common methodtable

    # All options have a default value
    private common optiondefault

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::Iconic::methodtable]
    array set methodtable [@scope ::tycho::LabeledOval array get methodtable]

    set methodtable(_vsize)   ::tycho::IconOval::_vsize
    set methodtable(_hsize)    ::tycho::IconOval::_hsize

    set methodtable(construct)   ::tycho::IconOval::construct
    set methodtable(coords)      ::tycho::IconOval::coords
    set methodtable(highlight)   ::tycho::IconOval::highlight

    #### Set option defaults
    array set optiondefault [array get ::tycho::Iconic::optiondefault]
    array set optiondefault [@scope ::tycho::LabeledOval \
            array get optiondefault]
    set optiondefault(-vsize) 50
    set optiondefault(-text)  ""
    set optiondefault(-hsize) 50
}

##########################################################################
## -vsize option configuration
#
body ::tycho::IconOval::_vsize {id canvas slate vsize} {
    set option(vsize$id) $vsize
    eval _coords $id $canvas $slate [coords $id $canvas $slate]
}

##########################################################################
## -hsize option configuration
#
body ::tycho::IconOval::_hsize {id canvas slate hsize} {
    set option(hsize$id) $hsize
    eval _coords $id $canvas $slate [coords $id $canvas $slate]
}

##########################################################################
#### _coords
#
body ::tycho::IconOval::_coords {id canvas slate x y} {
    # Alter the coordinates of the oval
    set coords [eval ::tycho::Rectangle::stretch $x $y $x $y \
        [expr $option(hsize$id)/2] [expr $option(vsize$id)/2]]
    eval ::tycho::Oval::coords $id $canvas $slate $coords

    # Move the inputs and outputs
    eval ::tycho::Iconic::coords $id $canvas $slate $coords
}

##########################################################################
#### construct
#
body ::tycho::IconOval::construct {id canvas slate tags x y args} {
    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $args] {
	set option([string trimleft $opt -]$id) $val
    }

    # Figure out the coordinates of the bounding Oval
    set coords [::tycho::Rectangle::stretch $x $y $x $y \
        [expr $option(hsize$id)/2] [expr $option(vsize$id)/2]]

    # Create the Oval.
    eval ::tycho::LabeledOval::_construct \
	    $id $canvas $slate [list $tags] $coords

    # Create the input and output ports
    # ::tycho::Iconic::_inputs  $id $canvas $slate $option(inputs$id)
    # ::tycho::Iconic::_outputs $id $canvas $slate $option(outputs$id)
}

##########################################################################
#### coords
#
body ::tycho::IconOval::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
        ::tycho::assign x0 y0 x1 y1 [$canvas coords $primary($id)]
        return [list [expr ($x0+$x1)/2] [expr ($y0+$y1)/2]]
    }

    # Alter the coordinates of the oval
    eval _coords $id $canvas $slate $args
}

##########################################################################
#### highlight
#
# Draw a highlight around the main icon. This is so the highlight
# appears around the oval, not around the outside of the terminals,
# which looks a bit rough.
#
body ::tycho::IconOval::highlight {id canvas slate args} {
    eval $canvas create oval [$canvas bbox $primary($id)] $args
    $canvas lower highlight.$id $id
}
