##########################################################################
# Version: $Id$
# Author: H. John Reekie
#
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


## Interactor
#
# The abstract superclass for all interactor classes.
#
class ::tycho::Interactor {

    ## button
    #
    # The button number to switch on events. DO NOT change after
    # the interactor has been bound.
    #
    # FIXME: Check that the interactor is not bound (how?).
    #
    public variable button 1


    ## modifiers
    #
    # A list of event modifiers. DO NOT change after
    # the interactor has been bound.
    #
    # FIXME: Check that the interactor is not bound (how?).
    #
    public variable modifiers {}


    ## target
    #
    # The picture that this interactor is currently operating on.
    # This is a public variable to make it easier to set up scripts
    # to chain interactors together.
    #
    public variable target "" {
	if { $target == "" } {
	    if { $sameproxy } {
		set targetproxy "" ;# should this always be done?
	    }
	} else {
	    if { $sameproxy } {
		set targetproxy $target
	    } else {
		$targetproxy configure -target $target
	    }
	}
    }


    ## targetproxy
    #
    # The interactor to which behavior oeprations are cascadeed.
    # If there is only one interactor, then this variable must be
    # the same as _target_.
    #
    # The _sameproxy_ flag indicates whether this variable is the
    # is the same as _target_.
    #
    private variable sameproxy 1
    public  variable targetproxy "" {
	if { $targetproxy == "" } {
	    set sameproxy 1
	} else {
	    set sameproxy 0
	}
    }


    ## activatecommand
    #
    # A script used to customise the interaction sequence. If not null,
    # it is executed at the beginning of the interaction sequence. It
    # is typically used to set target parameters or to chain interactors.
    #
    # NOTE: The activate{} method of each interactor _must_ check this
    # variable and execute it if it is not NULL.
    #
    public variable activatecommand {}


    ## deactivatecommand
    #
    # A script used to customise the interaction sequence. If not null,
    # it is executed at the end of the interaction sequence. It is useful
    # for assigning objects created during an interaction to variables,
    # and other clean-up stuff.
    #
    # NOTE: The deactivate{} method of each interactor _must_ check this
    # variable and execute it if it is not NULL.
    #
    public variable deactivatecommand {}


    ## dragcommand
    #
    # A script used to customise the interaction sequence. If not null,
    # it is executed at the completion of the interactor's drag
    # method. This is useful for performing some actions on
    # an object when it is moved, etc.
    #
    # NOTE: The drag{} method of each interactor _must_ check this
    # variable and execute it if it is not NULL.
    #
    public variable dragcommand {}


    ###################################################################
    ## Constructor and destuctor


    ## constructor
    #
    # (None.)
    #

    ## destructor
    #
    # (None.)
    ##


    ## slate, canvas
    #
    # The slate on which this interactor resides and operates.
    #
    protected variable slate  ""
    protected variable canvas ""


    ## bind [-button button] [-modifier modifier] target
    #
    # Procedure to ``bind'' an interactor class to a picture.
    # This creates a binding on the specified picture so that,
    # when the appropriate event occurs, the interactor is
    # is ``activated'' on the target.
    #
    proc bind {args} {abstractProc Interactor bind}


    ## unbind target
    #
    # Remove a binding from the interactor to the target. In other
    # disable potential interactions. This is partciularly needed
    # when using interactors that bind to a slate rather to an
    # individual picture: all picture-specific interactions should be
    # unbound to prevent bizarre interactions in case of clicks that
    # match both a picture and the slate.
    #
    proc unbind {t} {abstractProc Interactor unbind}


    ## cascade proxy
    #
    # Forward interaction commands to a delegate object.
    #
    method cascade {proxy} {
	$this configure -targetproxy $proxy
	$proxy configure -target $target
    }


    ## uncascade
    #
    # Stop cascading interaction commands to a delegate object.
    #
    method uncascade {} {
	$this configure -targetproxy ""
    }


    ## activate
    #
    # Make myself active. In other words, set up bindings to intercept
    # events that I need from now on. One of the bindings is obliged to
    # call deactivate to remove the bindings.
    #
    method activate {args} {abstractMethod Interactor activate}


    ## deactivate
    #
    # Make myself inactive. In other words, remove my bindings.
    #
    method deactivate {args} {abstractMethod Interactor deactivate}


    ## click, drag, continue, release
    #
    # The behavior interface. By default, interaction commands are
    # just forwarded on to the target proxy.
    #
    method click {x y} {
	$targetproxy click $x $y
    }

    method drag {x y} {
	$targetproxy drag $x $y
	if { $dragcommand != "" } {
	    uplevel #0 $dragcommand
	}
    }

    method continue {} {
	$targetproxy continue
    }

    method release {} {
	$targetproxy release
    }
}


## eventcode type [-button button] [-key key] [-modifiers modifiers]
#
# Translate an event specification into a Tk event code
#
proc eventcode {type args} {
    set button ""
    set modifiers {}

    getopt button args
    getopt key args
    getoption modifiers args

    set code ""
    switch -exact [string tolower $type] {

	"button" -
	"press" -
	"click" -
	"buttonpress" {
	    set code "ButtonPress"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"double" -
	"doubleclick" {
	    set code "Double-ButtonPress"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"triple" -
	"tripleclick" {
	    set code "Triple-ButtonPress"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"release" -
	"buttonrelease" {
	    set code "ButtonRelease"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"drag"   -
	"move"   -
	"motion" {
	    set code "Motion"
	    if { $button != "" } {
		set code [join [list "B" $button "-" $code] ""]
	    }
	}

	"enter" {
	    set code "Enter"
	}

	"leave" {
	    set code "Leave"
	}

	"key" -
	"keypress" -
	"keydown" {
	    if { [info exists key] } {
		set code "KeyPress-$key"
	    } else {
		set code "KeyPress"
	    }
	}

	"keyup" -
	"keyrelease" {
	    if { [info exists key] } {
		set code "KeyRelease-$key"
	    } else {
		set code "KeyRelease"
	    }
	}
    }

    foreach m $modifiers {
	set code [join [list [capitalize $m] $code] "-"]
    }

    return <$code>
}
