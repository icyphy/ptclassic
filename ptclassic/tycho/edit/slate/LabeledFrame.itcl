#########################################################################
# @Version: @(#)LabeledFrame.itcl	1.18 07/29/98
# @Author: John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
## LabeledFrame
#
# <i>LabeledFrame</i> is a frame with a text label and graphics.
# In all other respects, it can be treated like any other rectangle item.
# At present, the graphics do not take account of the width
# of the 3D border.
#
# <p><a name="LabeledFrame class Options"></a><b>Options</b>
#
# See <a href="LabeledItem.html#LabeledItem class Options">LabeledItem</a>
# and <a href="Frame.html#Frame class Options">Frame</a>.
#
# <p><b>Bugs</b>: (none)
#
# <p><b>Example</b>: Create a labeled rectangle:
# <tcl quiet><pre>
#  package require slate.demo
#  set slate [::demo::newslate "A LabeledFrame"]
#  $slate create LabeledFrame 40 40 100 80 -color green &#92
#          -text Foo -tags moveable &#92
#          -graphics "Frame 25 25 75 75 -color green -relief sunken"
# </pre></tcl>
#
# <p><b>Enhancements</b>: (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/howtoread.html">Reading <i>ComplexItem</i>
# documentation</a>.
# <li><a href="../internals/items.html">Complex item classes</a>.
# </ul>
#
class ::tycho::LabeledFrame {
    inherit ::tycho::LabeledItem

    ###################################################################
    ####                         public procs                      ####

    # Create a new item with options already set
    proc _construct {id canvas slate tags x0 y0 x1 y1}

    # Create a new item
    proc construct {id canvas slate tags x0 y0 x1 y1 args}

    # Set or get the item's coordinates
    proc coords {id canvas slate args}

    ###################################################################
    ####                         private variables                 ####

    # The virtual "method" table
    private common methodtable

    # Default values of this item's options
    private common optiondefault
}


###################################################################
####                       class initialization                ####

catch {::tycho::Frame} ;# Force it to load
namespace eval ::tycho::LabeledFrame {
    #### Set method table
    array set methodtable [array get ::tycho::LabeledItem::methodtable]
    array set methodtable [array get ::tycho::Frame::methodtable]

    set methodtable(construct) ::tycho::LabeledFrame::construct
    set methodtable(coords)    ::tycho::LabeledFrame::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::LabeledItem::optiondefault]
    array set optiondefault [array get ::tycho::Frame::optiondefault]
}

##########################################################################
#### _construct
#
body ::tycho::LabeledFrame::_construct {id canvas slate tags x0 y0 x1 y1} {
    # Create the Frame
    eval ::tycho::Frame::_construct \
    	$id $canvas $slate [list $tags] $x0 $y0 $x1 $y1

    # Create the graphics and text label -- do not change the order!
    _text     $id $canvas $slate $option(text$id)
    _graphics $id $canvas $slate $option(graphics$id)
}

##########################################################################
#### construct
#
body ::tycho::LabeledFrame::construct {id canvas slate tags x0 y0 x1 y1 args} {
    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $args] {
        set option([string trimleft $opt -]$id) $val
    }
    # Call the proc to do the real work
    _construct $id $canvas $slate $tags $x0 $y0 $x1 $y1
}

##########################################################################
#### coords
#
# Set or read the frame's coordinates
#
body ::tycho::LabeledFrame::coords {id canvas slate args} {
    set coords [$canvas coords $primary($id)]

    # No args: just return coordinates
    if { $args == "" } {
        return $coords
    }

    # Move the frame itself
    eval ::tycho::Frame::coords $id $canvas $slate $args

    # Move and scale the text and graphics
    eval ::tycho::LabeledItem::coords $id $canvas $slate $coords $args
}
