#########################################################################
# @Version: @(#)LabeledLine.itcl	1.18 07/29/98
# @Author: John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
## LabeledLine
#
# <i>LabeledLine</i> is a line with a text label attached to it.
# The text label ia automatically placed near the center of the line,
# and an optional offset can be used to allow manual repositioning
# of the line. In all other respects. it behaves just like a regular
# Tk canvas line. (Note: only a subset of the Tk canvas line options
# are supported. Others can be added if and when needed.)
#
# <p><b>Options</b>
#
# <ul>
# <li><b>-anchor</b>:
# The anchor position of the text label relative to the "center"
# of the line. This is the anchoring that will first be tried by the
# item; if however, this anchoring cause the text item to overlap
# the line, then the anchor will be changed (if possible) to an
# anchor that causes it to _not_ overlap the line. By default, it
# is "s".
#
# <li><b>-arrow</b>:
# The location of the arrow-head on the line: can be
# one of <i>none</i>, <i>first</i>, <i>last</i>, or <i>both</i>. 
# <i>none</i> by default.
#
# <li><b>-fill</b>:
# The color of the line. Black by default.
#
# <li><b>-smooth</b>:
# The flag controlling whether the line is
# drawn with curves instead of straight segments. Off by default.
#
# <li><b>-text</b>:
# The label of the item. If the line has an odd number of vertices,
# the label is placed near the center vertex; if it has an even number of
# vertices, the label is placed near the center of the center segment.
# 
# </ul>
#
# <p><b>Components</b>
#
# <ul>
# <li><b>label</b>:
# The editable text label.
# </ul>
#
# <p><b>Bugs</b>: (none)
#
# <p><b>Enhancements</b>: (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/howtoread.html">Reading <i>ComplexItem</i>
# documentation</a>.
# <li><a href="../internals/items.html">Complex item classes</a>.
# </ul>
#
#  <P><b>Example</b>
#
# <tcl quiet><pre>
#   package require slate.demo
#   ::demo::demoLabeledLine
# </pre></tcl>
#
class ::tycho::LabeledLine {
    inherit ::tycho::ComplexItem

    ###################################################################
    ####                         public procs                      ####

    # Update the *-anchor* option
    proc _anchor {id canvas slate anchor}
    
    # Update the *-arrow* option
    proc _arrow {id canvas slate arrow}

    # Update the *-fill* option
    proc _fill {id canvas slate fill}

    # Update the *-smooth* option
    proc _smooth {id canvas slate smooth}

    # Update the *-text* option
    proc _text {id canvas slate text}

    # Create a new item
    proc construct {id canvas slate tags args}

    # Set or get the lines's coordinates
    proc coords {id canvas slate args}

    ###################################################################
    ####                          private variables                ####

    # The virtual "method" table
    private common methodtable

    # Default values of this item's options
    private common optiondefault
}

###################################################################
####                       class initialization                ####

namespace eval ::tycho::LabeledLine {
    #### Set method table
    array set methodtable [array get ::tycho::ComplexItem::methodtable]

    set methodtable(_anchor)   ::tycho::LabeledLine::_anchor
    set methodtable(_arrow)    ::tycho::LabeledLine::_arrow
    set methodtable(_fill)     ::tycho::LabeledLine::_fill
    set methodtable(_smooth)   ::tycho::LabeledLine::_smooth
    set methodtable(_text)     ::tycho::LabeledLine::_text

    set methodtable(construct)  ::tycho::LabeledLine::construct
    set methodtable(coords)     ::tycho::LabeledLine::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::ComplexItem::optiondefault]

    set optiondefault(-anchor)	"s"
    set optiondefault(-arrow)   last
    set optiondefault(-fill)	black
    set optiondefault(-shape)   line
    set optiondefault(-smooth)  off
    set optiondefault(-text)	""
}


##########################################################################
## -anchor option configuration
#
# Move the item if necessary to avoid overlapping the line.
#
body ::tycho::LabeledLine::_anchor {id canvas slate anchor} {
    set option(anchor$id) $anchor
    if { ! [::info exists component(label$id)] } {
	return
    }
    $canvas itemconfigure $component(label$id) -anchor $anchor
    
    # Check if the text anchor needs to be changed
    if { [::tycho::lmember [eval $canvas find overlapping \
	    [eval ::tycho::Rectangle::shrink \
	    [$canvas bbox $component(label$id)] 2]] $primary($id)] } {
	# Build the list of anchor points
	set anchors {s n e w se sw ne nw}

	# For each, move the text and test for overlap again
	foreach a $anchors {
	    $canvas itemconfigure $component(label$id) -anchor $a
	    if { ! [::tycho::lmember [eval $canvas find overlapping \
		    [eval ::tycho::Rectangle::shrink \
		    [$canvas bbox $component(label$id)] 2]] $primary($id)] } {
		# Success!
		break
	    }
	}
	# Remember the anchor we ended up with. (It may be that we didn't
	# find a good anchor. Too bad, there's nothing we can do about it...)
	set option(anchor$id) $a
    }
}

##########################################################################
## -arrow option configuration
#
body ::tycho::LabeledLine::_arrow {id canvas slate arrow} {
    set option(arrow$id) $arrow
    $canvas itemconfigure $primary($id) -arrow $arrow
}

##########################################################################
## -fill option configuration
#
body ::tycho::LabeledLine::_fill {id canvas slate fill} {
    set option(fill$id) $fill
    $canvas itemconfigure $primary($id) -fill $fill
}

##########################################################################
## -smooth option configuration
#
body ::tycho::LabeledLine::_smooth {id canvas slate smooth} {
    set option(smooth$id) $smooth
    $canvas itemconfigure $primary($id) -smooth $smooth
}

##########################################################################
## -text option configuration
#
# Create or alter the text label. It is placed near the center of the
# line at the current *-anchor* position, and moved if necessary to
# as not to collide with the line.
#
body ::tycho::LabeledLine::_text {id canvas slate text} {
    if { $text != "" } {
        if { ! [::info exists component(label$id)] } {
	    # Create the item near the center of the line
            set component(label$id) [eval $canvas create text \
                    [::tycho::Line::center [$canvas coords $primary($id)]] \
                    [list -text $text \
		    -tags [$canvas gettags $primary($id)]]]
        } else {
	    $canvas itemconfigure $component(label$id) -text $text
	}
	_anchor $id $canvas $slate $option(anchor$id)

    } else {
        catch {$canvas delete $component(label$id)}
    }
    set option(text$id) $text
}

##########################################################################
#### construct
#
body ::tycho::LabeledLine::construct {id canvas slate tags args} {
    # Split coordinates and options
    if { [set t [lsearch -glob $args {-[a-zA-Z]*}]] != -1 } {
	set options [lrange $args $t end]
	set args [lreplace $args $t end]
    }

    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $options] {
	set option([string trimleft $opt -]$id) $val
    }

    # Create the primary component -- the line
    set primary($id) [eval $canvas create line $args [list \
	    -arrow   $option(arrow$id) \
	    -fill    $option(fill$id) \
	    -smooth  $option(smooth$id) \
	    -tags $tags]]

    # Create the text label
    _text $id $canvas $slate $option(text$id)
}

##########################################################################
#### coords
#
# Set or read the LabeledLine's coordinates
#
body ::tycho::LabeledLine::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the line
    eval $canvas coords $primary($id) $args

    # Make sure the text is in the center of the line
    eval $canvas coords $component(label$id) [::tycho::Line::center $args] 

    # Configure the anchor so the label dodges the line
    _anchor $id $canvas $slate $option(anchor$id)
}
