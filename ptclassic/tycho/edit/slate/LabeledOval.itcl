#########################################################################
# @Version: $Id$
# @Author: John Reekie, Bilung Lee
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes LabelledItem] == "" } {
	uplevel #0 {source $tychoslate/LabelledItem.itcl}
    }
}

##########################################################################
## LabelledOval
#
# An oval with a label in it, and optional graphics.
#
# <a href="../internals/howtoread.html">Reading <i>Picture</i> documentation</a>.
#
class ::tycho::LabelledOval {
    inherit ::tycho::LabelledItem

    # Create a new item
    proc construct {id canvas slate tags x0 y0 x1 y1 args}

    ###################################################################
    ####                            options                        ####

    # The fill color of the oval
    common _fill

    # The outline color of the oval
    common _outline

    # The width of the oval outline
    common _width

    ###################################################################
    ####                     option update procs                   ####

    # Update the *-fill* option
    proc _fill {id canvas slate fill}

    # Update the *-outline* option
    proc _outline {id canvas slate outline}

    # Update the *-width* option
    proc _width {id canvas slate width}

    ###################################################################
    ####                         public procs                      ####

    # Set or get the item's coordinates
    proc coords {id canvas slate args}
    
    ###################################################################
    ####                         protected variables               ####

    # The virtual "method" table
    common methodtable

    # Default values of this item's options
    common optiondefault

    # Labelled ovals are oval in shape
    common shape "oval"

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::LabelledItem::methodtable]

    set methodtable(_fill)     ::tycho::LabelledOval::_fill
    set methodtable(_outline)  ::tycho::LabelledOval::_outline
    set methodtable(_width)    ::tycho::LabelledOval::_width

    set methodtable(construct) ::tycho::LabelledOval::construct
    set methodtable(coords)    ::tycho::LabelledOval::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::LabelledItem::optiondefault]

    set optiondefault(-fill)    ""
    set optiondefault(-outline) "black"
    set optiondefault(-width)   "1"
}

##########################################################################
## -fill option configuration
#
body ::tycho::LabelledOval::_fill {id canvas slate fill} {
    set _fill($id) $fill
    $canvas itemconfigure $primary($id) -fill $fill
}

##########################################################################
## -outline option configuration
#
body ::tycho::LabelledOval::_outline {id canvas slate outline} {
    set _outline($id) $outline
    $canvas itemconfigure $primary($id) -outline $outline
    if { $_text($id) != "" } {
	    $canvas itemconfigure $textitem($id) -fill $outline
	}
}

##########################################################################
## -width option configuration
#
body ::tycho::LabelledOval::_width {id canvas slate width} {
    set _width($id) $width
    $canvas itemconfigure $primary($id) -width $width
}

##########################################################################
#### construct
#
body ::tycho::LabelledOval::construct {id canvas slate tags x0 y0 x1 y1 args} {
    # Initialize the options
    foreach {option value} [concat [array get optiondefault] $args] {
	set _[string trimleft $option -]($id) $value
    }

    # Create the primary component. This is the displayed oval.
    set primary($id) [$canvas create oval $x0 $y0 $x1 $y1 \
	    -fill $_fill($id) -outline $_outline($id) \
	    -width $_width($id) -tags $tags]

    # Create the text label and graphics
    _text     $id $canvas $slate $_text($id)
    _graphics $id $canvas $slate $_graphics($id)
}

##########################################################################
#### coords
#
# Set or read the oval's coordinates
#
body ::tycho::LabelledOval::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the oval itself
    eval $canvas coords $primary($id) $args

    # Move and scale the text and graphics FIXME: Inefficient
    _anchor   $id $canvas $slate $_anchor($id)
    _graphics $id $canvas $slate $_graphics($id)
}
