##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Line
#
# The shape of lines. Items with
# this shape include <I>line</I> and <I>SmartLine</I>.
#
#  <P><b>Primitive aspects</b>
#
# <ul>
# <li><B>vertex-</B><I>n</I>: The <I>n</I>'th vertex of the line.
# <li><B>start</B>: The start of the line.
# <li><B>end</B>: The end of the line.
# </ul>
#
# <p><b>Derived aspects</b>
#
# <ul>
# <li><B>length</B>: The number of edges in the line (number of
# vertices less one).
# </ul>
#
# <p><b>Bugs</b>: (none).
#
# <p><b>Enhancements</b>: (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/shapes.html">An overview of Shape classes</a>
# <li><a href="../internals/index.html">Infrastructure contents</a>
# <li><a href="../codeDoc/index.html">Class documentation index</a>
# </ul>
#
class ::tycho::Line {
    inherit ::tycho::Shape

    ###################################################################
    ####                         public procs                      ####

    # Get one or more aspects of an item
    proc _aspect {id canvas slate args}

    # Attach a set of grapples to an item
    proc _grapple {id canvas slate interactor args}

    # Reshape one or more aspects of an item
    proc _reshape {id canvas slate x y args}

    # Start a reshape interaction sequence
    proc _reshapeclick {id canvas slate x y args}

    # Continue a reshape interaction sequence
    proc _reshapedrag {id canvas slate x y}

    # Terminate a reshape interaction sequence
    proc _reshaperelease {id canvas slate x y}

    # Get one or more aspects of a line
    proc aspect {coords args}

    # Find the "center" point of a line
    proc center {coords}

    # Reflect a line about the specified x coordinate
    proc flip {coords x0}

    # Reflect a line about the specified y coordinate
    proc flop {coords y0}

    # Reshape one or more aspects of a line
    proc reshape {coords x y args}

    # Reverse the direction of a line
    proc reverse {coords}

    # Rotate a line about the specified x and y coordinates
    proc rotate {coords x y angle}
}

#######################################################################
#### _aspect
#
body ::tycho::Line::_aspect {id canvas slate args} {
    set coords [$slate coords $id]

    if { $args == "" } {
	set result {length start end}
	foreach n [::tycho::linterval 0 \
		[expr [llength $coords] / 2 - 1]] {
	    lappend result "vertex-$n"
	}
	return $result
    } else {
	return [eval aspect [list $coords] $args]
    }
}

#######################################################################
#### _reshape
#
body ::tycho::Line::_reshape {id canvas slate x y args} {
    eval $slate coords $id \
	    [eval reshape [list [$slate coords $id]] $x $y $args]
}

#######################################################################
#### _reshapeclick
#
body ::tycho::Line::_reshapeclick {id canvas slate x y args} {
    set ghost 0
    ::tycho::getopt ghost args

    # Remember how I am now.
    set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # Get the coordinates of the line into an efficient-to-process form
    set i 0
    set scratch($id.indexes) {}
    foreach {a b} [$slate coords $id] {
	set scratch($id.$i.x) $a
	set scratch($id.$i.y) $b
	lappend scratch($id.indexes) $i
	incr i
    }

    # Figure out the vertices that will be changed
    set scratch($id.vertices) {}
    foreach aspect $args {
	::tycho::assign a n [split $aspect "-"]
	switch -exact $a {
	    "start" {
		lappend scratch($id.vertices) 0
	    }
	    "end" {
		lappend scratch($id.vertices) \
			[lindex $scratch($id.indexes) end]
	    }
	    "vertex" {
		lappend scratch($id.vertices) $n
	    }
	    "length" {
		error "Cannot set the \"length\" aspect of a line"
	    }
	    default {
		error "Invalid aspect \"$aspect\" of line shape"
	    }
	}
    }
    # Make sure there are no duplicates
    set scratch($id.vertices) [::tycho::lnub $scratch($id.vertices)]

    # If the -ghost flag is set, draw the ghost line.
    if { $ghost } {
	$slate ghost $id
	set scratch($id.ghost) 1
    } else {
	set scratch($id.ghost) 0
    }
}

#######################################################################
#### _reshapedrag
#
body ::tycho::Line::_reshapedrag {id canvas slate x y} {
    # Get delta coordinates
    set deltaX [expr $x - $scratch($id.prevX)]
    set deltaY [expr $y - $scratch($id.prevY)]

    # Remember the current coordinates
    set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # Add the delta coordinates to the vertices
    foreach v $scratch($id.vertices) {
    	set scratch($id.$v.x) [expr $scratch($id.$v.x) + $deltaX]
    	set scratch($id.$v.y) [expr $scratch($id.$v.y) + $deltaY]
    }

    # Rebuild the coordinates list and change coordinates
    set coords {}
    foreach i $scratch($id.indexes) {
	lappend coords $scratch($id.$i.x) $scratch($id.$i.y)
    }

    # If there's a ghost, reshape it. Otherwise reshape the item.
    if $scratch($id.ghost) {
	eval $canvas coords ghost $coords
    } else {
	eval $slate coords $id $coords
    }
}

#######################################################################
#### _reshaperelease
#
body ::tycho::Line::_reshaperelease {id canvas slate x y} {
    # If there's a ghost, reshape the item to its shape
    # and then delete the ghost.
    if $scratch($id.ghost) {
	# Reshape the item
	eval $slate coords $id [$slate coords ghost]
	$canvas delete ghost
    }

    # General cleaning up
    unset scratch($id.ghost)
    unset scratch($id.prevX)
    unset scratch($id.prevY)

    foreach v $scratch($id.indexes) {
    	unset scratch($id.$v.x)
    	unset scratch($id.$v.y)
    }
    unset scratch($id.vertices)
    unset scratch($id.indexes)
}

#######################################################################
#### aspect
#
# Return aspects of a line. Valid aspects are "start,"
# "end," "length," or <code>vertex-</code><i>n</i>, where _n_ is
# between 0 and _length_.
#
body ::tycho::Line::aspect {coords args} {
    set result {}

    foreach aspect $args {
	set a [lindex [split $aspect "-"] 0]
	switch -exact $a {
	    "length" {
		lappend result [expr [llength $coords] / 2 - 1]
	    }
	    "start" {
		lappend result [lindex $coords 0] [lindex $coords 1]
	    }
	    "end" {
		lappend result \
			[lindex $coords [expr [llength $coords] - 2]] \
			[lindex $coords end]
	    }
	    "vertex" {
		set n [lindex [split $aspect "-"] 1]
		lappend result \
			[lindex $coords [expr 2*$n]] \
			[lindex $coords [expr 2*$n + 1]]
	    }
	    default {
		error "Invalid aspect \"$aspect\" of line shape"
	    }
	}
    }
    return $result
}

#######################################################################
#### center
#
# Find the center point of a line. If the line has an odd number of
# coordinates, this is the middle vertex; if it has an even number
# of coordinates, this is the center of the middle segment.
#
body ::tycho::Line::center {coords} {
    set len [llength $coords]
    set N [expr $len / 2]
    if { $len & 3 } {
	# Not divisible by four, so there are an odd number of vertices
	list [lindex $coords [expr $N-1]] [lindex $coords $N]
    } else {
	# Divisible by four, so get the center of the middle segment
	list \
		[expr ([lindex $coords [expr $N-2]] \
		+ [lindex $coords $N]) / 2.0] \
		\
		[expr ([lindex $coords [expr $N-1]] \
		+ [lindex $coords [expr $N+1]]) / 2.0]
    }
}

#######################################################################
#### reshape
#
# Reshape one or more aspects of a line by the specified amount.
# Reshape each aspect by the specified _x_ and _y_ relative
# values.
#
body ::tycho::Line::reshape {coords x y args} {
    # Get the coordinates of the line into an efficient-to-process form
    set i 0
    set indexes {}
    foreach {a b} $coords {
	set _x($i) $a
	set _y($i) $b
	lappend indexes $i
	incr i
    }

    # Process all aspects to change coordinates
    foreach aspect $args {
	::tycho::assign a n [split $aspect "-"]
	switch -exact $a {
	    "start" {
		set _x(0) [expr $_x(0) + $x]
		set _y(0) [expr $_y(0) + $y]
	    }
	    "end" {
		set n [lindex $indexes end]
		set _x($n) [expr $_x($n) + $x]
		set _y($n) [expr $_y($n) + $y]
	    }
	    "length" {
		error "Cannot set the \"length\" aspect of a line"
	    }
	    "vertex" {
		set _x($n) [expr $_x($n) + $x]
		set _y($n) [expr $_y($n) + $y]
	    }
	    default {
		error "Invalid aspect \"$aspect\" of line shape"
	    }
	}
    }

    # Rebuild the coordinates list and return
    set coords {}
    foreach i $indexes {
	lappend coords $_x($i) $_y($i)
    }
    return $coords
}

##########################################################################
#### reverse
#
# Reverse the direction of a line. Basically just reverse
# a list of coordinates.
#
body ::tycho::Line::reverse {coords} {
    set result {}
    foreach {x y} $coords {
	set result [concat $x $y $result]
    }
    return $result
}

##########################################################################
#### flip
#
# Reflect a line about the specified x coordinate.
#
body ::tycho::Line::flip {coords x0} {
    set result {}
    foreach {x y} $coords {
	set x [expr 2 * $x0 - $x]
	lappend result $x $y
    }
    return $result
}

##########################################################################
#### flop
#
# Reflect a line about the specified y coordinate.
#
body ::tycho::Line::flop {coords y0} {
    set result {}
    foreach {x y} $coords {
	set y [expr 2 * $y0 - $y]
	lappend result $x $y
    }
    return $result
}

##########################################################################
#### rotate
#
# Rotate a line about the specified x and y coordinates, by the
# specified angle (in degrees).
#
body ::tycho::Line::rotate {coords x y angle} {
    set angle [radians $angle]
    set result {}

    while { [llength $coords] > 0 } {
	set a [lindex $coords 0]
	set b [lindex $coords 1]
	set coords [lreplace $coords 0 1]

	if { $a == $x && $y == $b } { ;# same point
	    lappend result $a $b
	} else {
	    set dx [expr $a - $x]
	    set dy [expr $b - $y]

	    set radius [expr sqrt($dx*$dx+$dy*$dy)]
	    set theta  [expr atan2($dy, $dx) + $angle]

	    set a [expr $x + $radius * cos($theta)]
	    set b [expr $y + $radius * sin($theta)]

	    lappend result $a $b
	}
    }
    return $result
}
