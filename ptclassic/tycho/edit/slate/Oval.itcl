##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### AsOval
#
# The shape of ovals. Like rectangles, items with oval shape have
# four coordinates, being the left, top, right, and bottom
# coordinates. Items with this shape include <I>oval</I>
# and <I>LabelledOval</I>.
#
#  <P><b>Primitive aspects</b>
#
# <ul>
# <li><B>hradius</B>: The point at the right side of the oval; changing
# this aspect changes the horizontal width of the oval.
# <li><B>vradius</B>: The point at the top side of the oval; changing
# this aspect changes the vertical height of the oval.
# </ul>
#
# <p><b>Derived aspects</b>
#
# <ul>
# <li><B>c</B> or <B>center</B>: The center of the oval.
# <li><B>circumference-</B><I>x-y</I>: The point on the circumference that
# intersects the vector (<I>x</I>, <I>y</I>) drawn from the center.
# </ul>
#
# <p><b>Bugs</b>: Does not work at all.
#
# <p><b>Enhancements</b>: (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/shapes.html">Shape classes</a>.
# </ul>
#
class ::tycho::AsOval {
    inherit ::tycho::Shape

    ###################################################################
    ####                         public procs                      ####

    # Get one or more aspects of an item
    proc aspect {id canvas slate args}

    # Attach a set of grapples to an item
    proc grapple {id canvas slate interactor args}

    # Reshape one or more aspects of an item
    proc reshape {id canvas slate x y args}

    # Start a reshape interaction sequence
    proc reshapeclick {id canvas slate x y args}

    # Continue a reshape interaction sequence
    proc reshapedrag {id canvas slate x y}

    # Terminate a reshape interaction sequence
    proc reshaperelease {id canvas slate x y}
}


#######################################################################
#### aspect
#
# Return the value of an aspect. Valid aspects are "hradius,"
# "vradius," "center," or <code>circumference-</code><i>x-y</i>, where
# (_x_, _y_) is a vector from the center.
#
body ::tycho::AsOval::aspect {id canvas slate args} {
    assign x0 y0 x1 y1 [$slate coords $id]
    set result {}

    if { $args == "" } {
    	return {hradius vradius center circumference-x-y}
    } else {
	foreach aspect $args {
		set a [lindex [split $aspect "-"] 0]
	    switch -exact $a {
		"hradius" {
		    lappend result $x1 [expr ($y0+$y1)/2]
		}
		"vradius" {
		    lappend result [expr ($x0+$x1)/2] $y0
		}
		"center" {
		    lappend result [expr ($x0+$x1)/2] [expr ($y0+$y1)/2]
		}
		"circumference" {
		    lappend result ???
		default {
		    error "Invalid aspect \"$aspect\" of line shape"
		}
	    }
	}
    }
    return $result
}

#######################################################################
#### reshape
#
# Reshape one or more aspects of the item by the specified amount.
# Reshape each aspect by the specified _x_ and _y_ relative
# values. Aspects are only affected by the appropriate _x_ or _y_
# value -- for example, if the "e" (east) aspect is specified, it
# is moved only by the _x_ amount.
#
body ::tycho::AsOval::reshape {id canvas slate x y args} {
    # Get the current coordinates
    assign x0 y0 x1 y1 [$slate coords $id]
    
    # For each of the two possible aspects, see if it is present in
    # the aspects list, and if it is, alter the appropriate coordinates
    if { [lsearch -exact $args hradius] >= 0 } {
		set x0 [expr $x0 - $x]
		set x1 [expr $x1 + $x]
    }
    if { [lsearch -exact $args vradius] >= 0 } {
		set y0 [expr $y0 - $y]
		set y1 [expr $y1 + $y]
    }
    
    # Reshape with coords{}
    $slate coords $id $x0 $y0 $x1 $y1
}

#######################################################################
#### reshapeclick
#
body ::tycho::AsOval::reshapeclick {id canvas slate x y args} {
    getflag ghost args

    # Remember how I am now.
    set scratch($id.aspects) $args
    set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # If the -ghost flag is set, draw the ghost oval.
    if { $ghost } {
		set scratch($id.ghost) [eval $canvas create oval \
			[$slate coords $id] \
			-outline grey]
    }
}

#######################################################################
#### reshapedrag
#
body ::tycho::AsOval::reshapedrag {id canvas slate x y} {
    # Get the current coordinates
    assign x0 y0 x1 y1 [$slate coords $id]
    
   # Get delta coordinates
    set deltaX [expr $x - $scratch($id.prevX)]
    set deltaY [expr $y - $scratch($id.prevY)]

	# Remember the current coordinates
	set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # For each of the two possible aspects, see if it is present in
    # the aspects list, and if it is, alter the appropriate coordinates
    if { [lsearch -exact $args hradius] >= 0 } {
		set x0 [expr $x0 - $x]
		set x1 [expr $x1 + $x]
    }
    if { [lsearch -exact $args vradius] >= 0 } {
		set y0 [expr $y0 - $y]
		set y1 [expr $y1 + $y]
    }

    # If there's a ghost, reshape it. Otherwise reshape the item.
    if { [::info exists scratch($id.ghost)] } {
		$canvas coords $scratch($id.ghost) $x0 $y0 $x1 $y1
    } else {
		$slate coords $id $x0 $y0 $x1 $y1
    }
}
}

#######################################################################
#### reshaperelease
#
body ::tycho::AsOval::reshaperelease {id canvas slate x y} {
    # If there's a ghost, reshape the item to its shape
    # and then delete the ghost.
    if { [::info exists scratch($id.ghost)] } {
		# Reshape the item
		eval $slate coords $id [$slate coords $scratch($id.ghost)]
		$canvas delete $scratch($id.ghost)

		# Clean up
		unset scratch($id.ghost)
    }

    # General cleaning up
    unset scratch($id.prevX)
    unset scratch($id.prevY)
}
