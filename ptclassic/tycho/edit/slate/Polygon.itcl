##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### AsPolygon
#
# A shape for polygons.
#
class ::tycho::AsPolygon {
    inherit ::tycho::Shape

    ###################################################################
    ####                         public procs                      ####

    # Get one or more aspects of an item
    proc aspect {id canvas slate args}

    # Attach a set of grapples to an item
    proc grapple {id canvas slate interactor args}

    # Reshape one or more aspects of an item
    proc reshape {id canvas slate x y args}

    # Start a reshape interaction sequence
    proc reshapeclick {id canvas slate x y args}

    # Continue a reshape interaction sequence
    proc reshapedrag {id canvas slate x y}

    # Terminate a reshape interaction sequence
    proc reshaperelease {id canvas slate x y}
}


#######################################################################
#### aspect
#
# Return the value of an aspect. Valid aspects are "length"
# and <code>vertex-</code><i>n</i>, where _n_ is
# between 0 and _length_ - 1.
#
body ::tycho::AsPolygon::aspect {id canvas slate args} {
    set coords [$slate coords $id]
    set result {}

    if { $args == "" } {
	lappend result length start end
	foreach n [interval 0 \
		[expr [llength $coords] / 2 - 2]] {
	    lappend result "vertex-$n"
	}
    } else {
	foreach aspect $args {
	    set a [lindex [split $aspect "-"] 0]
	    switch -exact $a {
		"edges" {
			set len [llength $coords]
			if { [lindex $coords 0] == [lindex $coords [expr $len-2]] \
				 && [lindex $coords 0] == [lindex $coords end] } {
				# The start vertex is repeated
				lappend result [expr [llength $coords] / 2 - 2]
			} else {
				lappend result [expr [llength $coords] / 2 - 1]
			}
		}
		"length" {
		    lappend result [expr [llength $coords] / 2 - 1]
		}
		"center" {
			assign x0 y0 x1 y1 $coords
		    lappend result [expr ($x0+$x1)/ 2] [expr $y0+$y1)/2]
		}
		"vertex" {
		    set n [lindex [split $aspect "-"] 1]
		    lappend result \
			    [lindex $coords [expr 2*$n]] \
			    [lindex $coords [expr 2*$n + 1]]
		}
		default {
		    error "Invalid aspect \"$aspect\" of polygon shape"
		}
	    }
	}
    }
    return $result
}

#######################################################################
#### reshape
#
# Reshape one or more aspects of the item by the specified amount.
# Reshape each aspect by the specified _x_ and _y_ relative
# values. Aspects are only affected by the appropriate _x_ or _y_
# value -- for example, if the "e" (east) aspect is specified, it
# is moved only by the _x_ amount.
#
body ::tycho::AsPolygon::reshape {id canvas slate x y args} {
    # Get the coordinates of the line into an efficient-to-process form
    set i 0
    set indexes {}
    foreach {a b} [$slate coords $id] {
		set _x($i) $a
		set _y($i) $b
		lappend indexes $i
		incr i
    }
    
    # If the start vertex is repeated, delete it
    set last [expr $i/2-1]
	if { $_x(0) == $_x($last) && $_y(0) == $_y($last) } {
		unset _x($last)
		unset _y($last)
	}
	set indexes [lreplace $indexes end end]

    # Process all aspects to change coordinates
    foreach aspect $args {
	assign a n [split $aspect "-"]
	switch -exact $a {
	    "length" {
		error "Cannot set the \"length\" aspect of a line"
	    }
	    "vertex" {
		set _x($n) [expr $_x($n) + $x]
		set _y($n) [expr $_y($n) + $y]
	    }
	    default {
		error "Invalid aspect \"$aspect\" of line shape"
	    }
	}
    }

    # Rebuild the coordinates list and change coordinates
    set coords {}
    foreach i $indexes {
	lappend coords $_x($i) $_y($i)
    }
    eval $slate coords $id $coords
}

#######################################################################
#### reshapeclick
#
body ::tycho::AsPolygon::reshapeclick {id canvas slate x y args} {
    getflag ghost args

    # Remember how I am now.
    set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # Get the coordinates of the line into an efficient-to-process form
    set i 0
    foreach {a b} [$slate coords $id] {
		set scratch($id.$i.x) $a
		set scratch($id.$i.y) $b
		lappend scratch($id.indexes) $i
		incr i
    }

    # If the start vertex is repeated, delete it
    set last [expr $i/2-1]
	if { $scratch($id.0.x) == $scratch($id.$last.x) \
			&& $scratch($id.0.y) == $scratch($id.$last.y) } {
		unset scratch($id.$last.x)
		unset scratch($id.$last.y)
	}
	set scratch($id.indexes) [lreplace $scratch($id.indexes) end end]

    # Figure out the vertices that will be changed
    foreach aspect $args {
		assign a n [split $aspect "-"]
		switch -exact $a {
	    	"vertex" {
	    		lappend scratch($id.vertices) $n
	    	}
		    "length" {
				error "Cannot set the \"length\" aspect of a line"
	    	}
		    default {
				error "Invalid aspect \"$aspect\" of line shape"
			}
		}
    }
    
    # Make sure there are no duplicates
    set scratch($id.vertices) [lnub scratch($id.vertices)]

    # If the -ghost flag is set, draw the ghost line.
    if { $ghost } {
		set scratch($id.ghost) [eval $canvas create line \
			$scratch($id.coords) \
			-fill grey]
    }
}

#######################################################################
#### reshapedrag
#
body ::tycho::AsPolygon::reshapedrag {id canvas slate x y} {
    # Get delta coordinates
    set deltaX [expr $x - $scratch($id.prevX)]
    set deltaY [expr $y - $scratch($id.prevY)]

	# Remember the current coordinates
	set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # Add the delta coordinates to the vertices
    foreach v $scratch($id.vertices) {
    	set scratch($id.$v.x) [expr $scratch($id.$v.x) + $deltaX]
    	set scratch($id.$v.y) [expr $scratch($id.$v.y) + $deltaY]
    }

    # Rebuild the coordinates list and change coordinates
    set coords {}
    foreach i $scratch($id.indexes) {
		lappend coords $scratch($id.$v.x) $scratch($id.$v.y)
    }

    # If there's a ghost, reshape it. Otherwise reshape the item.
    if { [::info exists scratch($id.ghost)] } {
		eval $canvas coords $scratch($id.ghost) $coords
    } else {
		eval $slate coords $id $coords
    }
}

#######################################################################
#### reshaperelease
#
body ::tycho::AsPolygon::reshaperelease {id canvas slate x y} {
    # If there's a ghost, reshape the item to its shape
    # and then delete the ghost.
    if { [::info exists scratch($id.ghost)] } {
		# Reshape the item
		eval $slate coords $id [$slate coords $scratch($id.ghost)]
		$canvas delete $scratch($id.ghost)

		# Clean up
		unset scratch($id.ghost)
    }

    # General cleaning up
    unset scratch($id.prevX)
    unset scratch($id.prevY)

    foreach v $scratch($id.indexes) {
    	unset scratch($id.$v.x)
    	unset scratch($id.$v.y)
    }
    unset scratch($id.vertices)
    unset scratch($id.indexes)
}
