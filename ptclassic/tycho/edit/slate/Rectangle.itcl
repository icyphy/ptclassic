##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### AsRectangle
#
# A shape for rectangular pictures.
#
class ::tycho::AsRectangle {
    inherit ::tycho::Shape

    ###################################################################
    ####                         public procs                      ####

    # Get one or more aspects of an item
    proc aspect {id canvas slate args}

    # Deform one or more aspects of an item
    proc deform {id canvas slate x y args}

    # Attach a set of grapples to an item
    proc grapple {id canvas slate interactor args}

    # Process a phase of an interaction sequence to deform an item
    proc interact {id canvas slate mode x y args}

    # Deform an aspect of a picture to absolute coordinates
    proc reshape {id canvas slate x y aspect}


    ###################################################################
    ####                   private variables                       ####

    # The aspects on which deformations etc are being performed.
    private common aspect

    # The ghost items
    private common ghost

    # Initial starting coordinates in interaction sequence
    private common start

    # Values of the aspects used during click-drag-release sequence.
    private common west
    private common north
    private common east
    private common south
}


#######################################################################
#### aspect aspect
#
# Return the value of an aspect. Valid aspects are any
# of the eight compass points and "c" or "center."
#
body ::tycho::AsRectangle::aspect {id canvas slate args} {
    if { $args == "" } {
	return {c n s e w ne nw se sw}
    } else {
	return [eval rectAspect [list [$slate coords $id]] $args]
    }
}

#######################################################################
#### deform
#
# Deform one or more aspects of the picture by the specified amount.
# Deform each aspect by the specified _x_ and _y_ relative
# values. Aspects are only affected by the appropriate _x_ or _y_
# value -- for example, if the "e" (east) aspect is specified, it
# is moved only by the _x_ amount.
#
body ::tycho::AsRectangle::deform {id canvas slate x y args} {

    # Get the current values of the four main aspects
    assign w n e s [$slate coords $id]
    
    # For each direction, see if it is present in the aspects list,
    # and if it is, add to the appropriate direction
    
    if { [lsearch $args "*w"] >= 0 } {
	set w [expr $w + $x]
    }
    if { [lsearch $args "*e"] >= 0 } {
	set e [expr $e + $x]
    }
    if { [lsearch $args "n*"] >= 0 } {
	set n [expr $n + $y]
    }
    if { [lsearch $args "s*"] >= 0 } {
	set s [expr $s + $y]
    }
    
    # Deform with coords{}
    # FIXME: This should use region{}
    $slate coords $id $w $n $e $s
}

#######################################################################
#### grapple interactor [-ghost]
#
# Attach a set of grapples to a target picture. The grapple is attached
# to the target as a constraint. If the specified interactor is null,
# then the grapple is removed from the object.
#
# FIXME: This is _very_ slow. Try caching grapples and composites
# somewhere and using cached objects.
#
body ::tycho::AsRectangle::grapple {id canvas slate interactor args} {
    getflag ghost args

    # If the interactor argument is null, remove an existing
    # resizer. This gets its value as an annotation, and 
    # then detachs it as a constraint.
    if { $interactor == "" } {
	set resizer [$target annotation "resizer"]
	if { $resizer != "" } {
	    $target annotation "resizer" {}
	    $target detach body ::tycho::$resizer
	    $slate  delete $resizer
	}
	return
    }

    # If it's not null, then create four grapplers in a composite.
    assign x0 y0 x1 y1 [$target coords]

    set resizer [$slate create Composite]

    set nw [$resizer component create "grapple" Grapple 10]
    set ne [$resizer component create "grapple" Grapple 10]
    set sw [$resizer component create "grapple" Grapple 10]
    set se [$resizer component create "grapple" Grapple 10]

    # Move them to the corners of the rectangle
    $nw moveto nw $x0 $y0
    $ne moveto ne $x1 $y0
    $sw moveto sw $x0 $y1
    $se moveto se $x1 $y1

    # Set up the interaction between them
    $nw behavior \
	    exec $nw move $ne movey $sw movex $target \
	        [concat deform nw [makeflag ghost]]

    $ne behavior \
	    exec $ne move $nw movey $se movex $target \
	        [concat deform ne [makeflag ghost]]

    $sw behavior \
	    exec $sw move $se movey $nw movex $target \
	        [concat deform sw [makeflag ghost]]

    $se behavior \
	    exec $se move $sw movey $ne movex $target \
	        [concat deform se [makeflag ghost]]

    # Bind the interactor to each grappler.
    $interactor bind $nw
    $interactor bind $ne
    $interactor bind $sw
    $interactor bind $se

    # Assuming that a bounded interactor is being used, set the
    # bounds query of each grappler. This is ridiculously hard
    # to follow, because the calculations have to be deferred
    # until the grappler is actually clicked-on.
    $nw query set bounds "list \
	    2 \
	    2 \
	    \[expr \[lindex \[$se aspect nw\] 0\] - 2\] \
	    \[expr \[lindex \[$se aspect nw\] 1\] - 2\] "

    $ne query set bounds "list \
	    \[expr \[lindex \[$sw aspect ne\] 0\] + 2\] \
	    2 \
	    \[expr \[winfo width $slate\] - 3\] \
	    \[expr \[lindex \[$sw aspect ne\] 1\] - 2\] "

    $sw query set bounds "list \
	    2 \
	    \[expr \[lindex \[$ne aspect sw\] 1\] + 2\] \
	    \[expr \[lindex \[$ne aspect sw\] 0\] - 2\] \
	    \[expr \[winfo height $slate\] - 3\] "

    $se query set bounds "list \
	    \[expr \[lindex \[$nw aspect se\] 0\] + 2\] \
	    \[expr \[lindex \[$nw aspect se\] 1\] + 2\] \
	    \[expr \[winfo width  $slate\] - 3\] \
	    \[expr \[winfo height $slate\] - 3\] "


    # So that the resizer moves when the target moves,
    # attach it as a constraint. Also, add it as an annotation
    # so that it can be deleted later.
    $target attach "body" $resizer move {}
    $target annotation add "resizer" $resizer
}

#######################################################################
#### interact
#
# -- click: Signal the start of a click-drag-release action. This
#    assumes that a release action has been called since previous
#    drag actions. The optional -ghost flag indicates that the picture
#    is to be deformed by dragging a ``ghost'' of the picture. One or
#    more aspects can be specified.
#
# -- drag: Deform the aspects previously specified by click{} by the
#    ghost tothe specified value. Aspects are modified by the relevent
#    x or y coordinate only.
#    Drag assumes that click has already been called on the picture,
#    and will function unpredictable if not.
#
# -- release: Terminate a click-drag-release sequence. If a ghost is
#    being deformed, then the picture is deformed to the shape of the ghost
#    and the ghost is deleted. Note: A release must be used to terminate
#    the click-drag-release sequence, even if not ghosting the picture.
#
# Note: DO NOT OVERRIDE.
#
# FIXME: There is a lot of duplicated code in here which needs to
# be factored out. The best approach would be to generate a script which
# invoked the constraints directly. Maybe this can be made common enough
# to put into the Shape superclass.
#
body ::tycho::AsRectangle::interact {id canvas slate mode x y args} {
    global depends

    switch -exact $mode {
	"direct" {
	    set aspect [lindex $args 0]

	    # GET the current values of the four aspects and
	    # add relative amounts.
	    assign w n e s [$target coords]
	
	    if { [string match "*w" $aspect] } {
		set w [expr $w + $x]
	    } elseif { [string match "*e" $aspect] } {
		set e [expr $e + $x]
	    }

	    if { [string match "n*" $aspect] } {
		set n [expr $n + $y]
	    } elseif { [string match "s*" $aspect] } {
		set s [expr $s + $y]
	    }

	    # Deform with coords{}
	    $target coords $w $n $e $s

	    # Propagate constraints
	    set ds $depends($aspect)
	    $target propagate "direct" $x $y [lindex $ds 0]
	    $target propagate "direct" $x [expr $y/2] [lindex $ds 1]
	    $target propagate "direct" [expr $x/2] $y [lindex $ds 2]
	    $target propagate "direct" $x 0  [lindex $ds 3]
	    $target propagate "direct" 0  $y [lindex $ds 4]
	    $target propagate "direct" [expr $x/2] 0 [lindex $ds 5]
	    $target propagate "direct" 0 [expr $y/2] [lindex $ds 6]
	}
	"click" {
	    getflag ghost args
	    set aspect [lindex $args 0]

	    # Remember how I am now.
	    set coords [$target coords]
	    assign w n e s $coords
	    set start $coords

	    # If the -ghost flag is set, draw the ghost box.
	    # If not, clear the *ghost* variable so that later drags
	    # don't get confused.
	    #
	    # If the ghost is not set, propagate constraints.
	    if { $ghost } {
		set ghost [eval $canvas create rectangle $coords \
			-outline grey]
	    } else {
		set ghost ""
		$target propagate "click" $x $y [lindex $depends($aspect) 7]
	    }
	}
	"drag" {
	    if { [string match "*w" $aspect] } {
		set w [expr $w + $x]
	    } elseif { [string match "*e" $aspect] } {
		set e [expr $e + $x]
	    }

	    if { [string match "n*" $aspect] } {
		set n [expr $n + $y]
	    } elseif { [string match "s*" $aspect] } {
		set s [expr $s + $y]
	    }

	    # If there's a ghost, deform it. Otherwise deform the picture.
	    if { $ghost != "" } {
		$canvas coords $ghost $w $n $e $s
	    } else {
		$target coords $w $n $e $s

		set ds $depends($aspect)
		$target propagate "drag" $x $y [lindex $ds 0]
		$target propagate "drag" $x [expr $y/2] [lindex $ds 1]
		$target propagate "drag" [expr $x/2] $y [lindex $ds 2]
		$target propagate "drag" $x 0  [lindex $ds 3]
		$target propagate "drag" 0  $y [lindex $ds 4]
		$target propagate "drag" [expr $x/2] 0 [lindex $ds 5]
		$target propagate "drag" 0 [expr $y/2] [lindex $ds 6]
	    }
	}
	"release" {
	    # If there's a ghost, deform the picture to its shape
	    # and then delete the ghost. Perform a one-shot constraint
	    # propagation. If there's no ghost, finalize constraint
	    # propagation.
	    if { $ghost != "" } {
		# Perform constraint propagation first. Figure out the
		# amount of movement in each axis, and then propagate
		# by that much.
		assign l t r b $start
		if { [string match "*w" $aspect] } {
		    set x [expr $w - $l]
		} elseif { [string match "*e" $aspect] } {
		    set x [expr $e - $r]
		}

		if { [string match "n*" $aspect] } {
		    set y [expr $n - $t]
		} elseif { [string match "s*" $aspect] } {
		    set y [expr $s - $b]
		}

		# Deform the picture
		$target coords $w $n $e $s
		$canvas delete $ghost

		set ghost ""

		set ds $depends($aspect)
		$target propagate "direct" $x $y [lindex $ds 0]
		$target propagate "direct" $x [expr $y/2] [lindex $ds 1]
		$target propagate "direct" [expr $x/2] $y [lindex $ds 2]
		$target propagate "direct" $x 0  [lindex $ds 3]
		$target propagate "direct" 0  $y [lindex $ds 4]
		$target propagate "direct" [expr $x/2] 0 [lindex $ds 5]
		$target propagate "direct" 0 [expr $y/2] [lindex $ds 6]

	    } else {
		$target propagate "release" 0 0 [lindex $depends($aspect) 7]
	    }
	}
	default {
	    error "AsRectangle::deform: Bad mode $mode"
	}
    }
}


#######################################################################
#### reshape aspect x y
#
# Deform an aspect of a picture to absolute coordinates.
#
# FIXME: Needs to accept multiple aspects.
#
body ::tycho::AsRectangle::reshape {id canvas slate x y aspect} {
    global depends

    assign w n e s [$target coords]
    set a 0
    set b 0

    if { [string match "*w" $aspect] } {
	set a [expr $x - $w]
	set w $x
    } elseif { [string match "*e" $aspect] } {
	set a [expr $x - $e]
	set e $x
    }

    if { [string match "n*" $aspect] } {
	set b [expr $y - $n]
	set n $y
    } elseif { [string match "s*" $aspect] } {
	set b [expr $y - $s]
	set s $y
    }

    # Deform the picture
    $target coords $w $n $e $s

    # Propagate constraints
    set ds $depends($aspect)
    $target propagate "direct" $a $b [lindex $ds 0]
    $target propagate "direct" $a [expr $b/2] [lindex $ds 1]
    $target propagate "direct" [expr $a/2] $b [lindex $ds 2]
    $target propagate "direct" $a 0  [lindex $ds 3]
    $target propagate "direct" 0  $b [lindex $ds 4]
    $target propagate "direct" [expr $a/2] 0 [lindex $ds 5]
    $target propagate "direct" 0 [expr $b/2] [lindex $ds 6]
}

