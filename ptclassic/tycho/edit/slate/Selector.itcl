##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Selector
#
# An interactor that selects canvas items in the usual fashion: click
# selects an item and deselelts any other items, shift-click toggles
# an item, dragging selects items in a region, shift-dragging toggles
# items in a region.
#
# Currently, selected items are highlights by drawing a rectangle
# around them -- later this might be made more sophisticated.
#
class ::tycho::Selector {
    inherit ::tycho::Interactor

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c
	background $background

	eval configure $args
    }
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Set the "background" tag or picture
    method background {b}

    # Bind the interactor to a picture or tag
    method bind {t args}

    # Deselect all tagged items
    method clear {}

    ## Remove the binding of an interactor to a picture or tag
    method unbind {t}


    ###################################################################
    ####                        protected methods                  ####

    # Attach the interactor to the current picture
    protected method activate {t x y}

    # Attach the interactor to the current picture
    protected method altactivate {t x y}

    # Remove the interactor from the current picture
    protected method deactivate {}


    ###################################################################
    ####                   protected variables                     ####

    # The tag or picture to use as the "background"
    protected variable background "background"
}


#######################################################################
#### activate target x y
#
# Add a picture object to the selected objects. Motion and release events
# are bound to the tag "sel" so that the selected objects can be dragged.
#
body ::tycho::Selector::activate {t x y} {

    # Get the current object
    set current [$slate find withtag current]

    # If it's a highlight box, just return
    if { [lmember [$slate gettags $current] box.$this] } {
	return
    }

    # Select it if it isn't already
    if { ! [lmember [$slate gettags $current] sel.$this] } {
	# Deselect all currently selected objects, delete highlights
	$slate dtag   sel.$this
	$slate dtag   move.$this
	$slate delete box.$this

	# Tag it for moving
	$slate addtag "move.$this" withtag $current

	# Draw a box around it
	set box [eval $canvas create rectangle \
		[rectStretch [$slate bbox $current] 1]\
		-width 3 -outline blue \
		-tags [list [concat \
	            box.$this \
		    box.$current \
		    [ldelete [$slate gettags $current] current]]]]
	$slate lower $box $current

	# Tag the current object again
	$slate addtag "sel.$this" withtag $current

	# Set the target
	set target "move.$this"
    }

    # Set up the movement bindings
    foreach b $button {
	$slate bind $target \
		[::tycho::Interactor::event Motion -button $b] \
		[list @scope [info class] "$this drag %x %y; update idletasks"]
	$slate bind $target \
		[::tycho::Interactor::event Release -button $b] \
		[list @scope [info class] "$this release; $this deactivate"]
    }

    # Execute the user-specified activation command
    execute $activatecommand $x $y

    # Start the interaction sequence
    eval click $x $y $options
}


#######################################################################
#### altactivate target x y
#
# Toggle a picture object's selection state, without affecting other
# selected pictures.
#
body ::tycho::Selector::altactivate {t x y} {
    
    # Get the current picture
    set current [$slate find withtag current]

    # If it's a highlight box, just ignore
    if { [lmember [$slate gettags $current] "box.$this"] } {
	return
    }

    if { [lmember [$slate gettags $current] "sel.$this"] } {
	# The item is already selected. Delete its highlight
	# and deselect it
	$slate delete box.$current
	$slate dtag   $current sel.$this
	$slate dtag   $current move.$this

	# Make sure mouse is updated
	update idletask
    } else {
	# The item is not selected. Select and highlight it

	# Tag it for moving
	$slate addtag "move.$this" withtag $current

	# Draw a box around it
	set box [eval $canvas create rectangle \
		[rectStretch [$slate bbox $current] 1]\
		-width 3 -outline blue \
		-tags [list [concat \
	            box.$this \
		    box.$current \
		    [ldelete [$slate gettags $current] current]]]]
	$slate lower $box $current

	# Tag the current object again
	$slate addtag "sel.$this" withtag $current

	# Set the target
	set target "move.$this"

	# Set up the movement bindings
	foreach b $button {
	    $slate bind $target \
		    [::tycho::Interactor::event Motion -button $b] \
		    [list @scope [info class] \
		        "$this drag %x %y; update idletasks"]
	    $slate bind $target \
		    [::tycho::Interactor::event Release -button $b] \
		    [list @scope [info class] \
		        "$this release; $this deactivate"]
	}

	# Execute the user-specified activation command
	execute $activatecommand $x $y

	# Start the interaction sequence
	eval click $x $y $options
    }
}


#######################################################################
#### bind target
#
# Bind button-press events to the specified object or tag, so that
# clicking on one of those pictures calls activate{}. The configuration
# options *-button* and *-modifiers* determine the actual events.
#
body ::tycho::Selector::bind {t args} {
    foreach b $button {
	$slate bind $t \
		[::tycho::Interactor::event Press -button $b ] \
		[list @scope [info class] "$this activate $t %x %y"]
	$slate bind $t \
		[::tycho::Interactor::event Press \
		-button $b -modifiers Shift] \
		[list @scope [info class] "$this altactivate $t %x %y"]
    }
}


#######################################################################
#### background
#
# Set the background tag or picture of this selector. The background
# is the picture against which clicking to clear a selection and
# drag-selecting are performed.
#
# Although having a background picture seems complicated at first
# compared to binding to the canvas) it is necessary to make dragging
# and selecting on hierarchical pictures work.
#
body ::tycho::Selector::background {b} {
    
    # Remove bindings from the old background

    #
    $slate dtag   sel.$this
    $slate dtag   move.$this

    # Delete highlight boxes
    $slate delete box.$this

    # Set the bindings
    $slate bind $background <Button-1> "$this clear"
    $slate bind $background <Shift-Button-1> ""
}


#######################################################################
#### clear
#
body ::tycho::Selector::clear {} {
    
    # Remove selection tags
    $slate dtag   sel.$this
    $slate dtag   move.$this

    # Delete highlight boxes
    $slate delete box.$this
}

#######################################################################
#### deactivate
#
# Deactivate the interactor from the target. This method must be called
# by the script bound to the release event.
#
body ::tycho::Selector::deactivate {} {
    # Remove bindings
    foreach b $button {
	$slate bind $target \
		[::tycho::Interactor::event Motion -button $b] {}
	$slate bind $target \
		[::tycho::Interactor::event Release -button $b] {}
    }

    # Execute the user-specified de-activation command
    execute $deactivatecommand
    
    # Update the screen. This appears to be necessary to ensure that
    # the current tag is updated correctly before processing another
    # event.
    update idletasks
}


#######################################################################
#### unbind target
#
# Remove the bindings to the specified object or tag. The specified 
# pictures will no longer respond to the mouse.
#
body ::tycho::Selector::unbind {t} {
    foreach b $button {
	$slate bind $t \
		[::tycho::Interactor::event Press -button $b] {}
    }
}
