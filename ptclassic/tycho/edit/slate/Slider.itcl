##########################################################################
# Version: $Id$
# Author: H. John Reekie and William Chen
#
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################
#if {[info class Slider] != ""} {
#    delete class Slider
#}



#######################################################################
#### Slider
#
# A (vertical) slider widget. Will probably replace the Slider
# widget once it's done.
#
class ::tycho::Slider {
    inherit itk::Widget


    ## command
    #
    # The command prefix to be used whenever the slider changes.
    #
    itk_option define -command command Command "" {}

    ## digits
    #
    # The number of significant digits to display.
    #
    itk_option define -digits digits Digits 1 {
	updatevalue
    }

    ## from
    #
    # The value when the slider is at the bottom.
    #
    # NOTE: This value must always be less than the -to option.
    #
    itk_option define -from from From 0 {
	updatevalue
    }

    ## label
    #
    # The slider's label -- appears underneath it.
    #
    itk_option define -label label Label "" {
	if { $initialized } {
	    $labellabel configure -text $itk_option(-label)

	#
	# Set the height of the slate
	#
	$itk_component(slate) configure -width $itk_option(-totalwidth) \
		-height [expr \
		  [lindex [$labellabel query bbox] 3] + $interspace]
	}
    }

    ## length
    #
    # The vertical movement of the slider.
    #
    private variable length 108
    itk_option define -length length Length 108 {
	if { $initialized && $itk_option(-length) != $length } {
	    ::set length $itk_option(-length)
	    puts "$this length = $itk_option(-length)"
	    redraw
	}
    }

    ## resolution
    #
    # The resolution of the slider. If zero, there is no
    # quantization.
    #
    itk_option define -resolution resolution Resolution 0 {
	if { $initialized } {
	    if { $itk_option(-resolution) != 0 } {
		#
		# The resolution is non-zero, so configure the
		# stepping interactor with the right step and
		# the update command. (Remove the update command
		# from the alonger interactor.)
		#
		$stepper configure \
			-gridsize [expr double($itk_option(-resolution)) \
			/ ($itk_option(-to) - $itk_option(-from)) \
			* $itk_option(-length)] \
			-dragcommand "$this updatevalue"
		$alonger configure -dragcommand {}
		$alonger cascade $stepper
	    } else {
		#
		# The resolution is zero, so remove the stepping interactor
		# from the interaction chain. Set the alonger interactor
		# to perform the update command.
		#
		$alonger configure -dragcommand "$this updatevalue"
		$alonger uncascade
	    }

	    #
	    # Adjust the slider position
	    #
	    $this set [$this adjust [$this get]]
	}
    }

    ## scale
    #
    # The type of scale: linear or log.
    #
    itk_option define -scale scale Scale "linear" {
	#
	# Does nothing yet
	#
    }

    ## showvalue
    #
    # If set, the current value is displayed above the slider.
    #
    itk_option define -showvalue showvalue ShowValue on {
	#
	# Does nothing yet
	#
    }

    ## to
    #
    # The value when the slider is at the top.
    #
    # NOTE: This value must always be greater than the -from option.
    #
    itk_option define -to to To 10 {
	updatevalue
    }

    ## totalwidth
    #
    # The total width of the slider widget.
    #
    itk_option define -totalwidth totalwidth TotalWidth 40 {
	if { $initialized } {
	    puts "$this totalwidth!"
	    redraw
	}
    }

    ## width
    #
    # The width of the slider strip.
    #
    private variable width 4
    itk_option define -width width Width 4 {
	if { $initialized && $itk_option(-width) != $width } {
	    ::set width $itk_option(-width)
	    puts "$this width = $itk_option(-width)"
	    redraw
	}
    }


    ## constructor args
    #
    constructor {args} {}


    ## updatevalue
    #
    # Recalculate and display the current value of the slider.
    # With no argument, uses the current slider position; with
    # an argument, uses that argument.
    #
    # If there is one, call the _command_ option.
    #
    method updatevalue {args} {
	if { ! $initialized } {
	    return
	}

	if { $args == "" } {
	    ::set value [$this get]
	} else {
	    ::set value [lindex $args 0]
	}

	#
	# Now for a bit of trickery: because the quantization
	# of the slider movement may cause positioning errors,
	# quantize the value and adjust the slider position.
	#
	# As it turns out, the errors are so small that this is
	# not worth worrying about, so I commented it out --hjr--
	#
	# ::set value [adjust $value]
	# slide $value

	#
	# Update the label
	#
	$valuelabel configure -text [format %.$itk_option(-digits)f $value]

	#
	# Call the command prefix
	#
	if { $itk_option(-command) != "" } {
	    eval $itk_option(-command) $value
	}
    }


    ## adjust
    #
    # Return a slider value adjusted to be within limits and on
    # the correct interval.
    #
    # private
    method adjust {x} {
	if { $x < $itk_option(-from) } {
	    ::set x $itk_option(-from)
	} elseif { $x > $itk_option(-to) } {
	    ::set x $itk_option(-to)
	}

	if { $itk_option(-resolution) != 0 } {
	    ::set x [roundTo $x $itk_option(-resolution)]
	}

	return $x
    }


    ## slide
    #
    # Move the slider to the position indicated by the given value.
    # Assumes the value is already "adjusted."
    #
    # private
    method slide {x} {
	::set position [expr $sliderbottom \
		- ($x-$itk_option(-from)) \
		/ double($itk_option(-to)-$itk_option(-from)) \
		* ($sliderbottom-$slidertop)]

	$bar move direct \
		0 [expr $position - $barheight/2 - [lindex [$bar coords] 1]]
    }


    ## set
    #
    # Set the slider to a specified value.
    #
    method set {x} {
	::set s [adjust $x]
	slide $x
	updatevalue $x
    }


    ## get
    #
    # Get the current slider value from slider position.
    #
    method get {} {
	::set position [expr [lindex [$bar coords] 1] + $barheight/2]
	::set value    [expr $itk_option(-from) \
		+ ($sliderbottom-$position)/$itk_option(-length) \
		* ($itk_option(-to) - $itk_option(-from))]

	return $value
    }


    ## Picture components
    #
    private variable trough
    private variable bar
    private variable valuelabel
    private variable labellabel

    private variable stepper
    private variable alonger

    ## Picture dimensions
    #
    private variable barwidth
    private variable barheight

    private variable interspace 3
    private variable protrudeby 1

    private variable troughtop
    private variable troughbottom

    private variable slidertop
    private variable sliderbottom


    private variable initialized 0

    ## redraw
    #
    # Deleting any existing components and redraw everything
    #
    method redraw {} {}
    
}



## constructor args
#
body ::tycho::Slider::constructor {args} {

    #
    # Create the slate on which everything gets drawn.
    #
    itk_component add slate {
	::tycho::slate $itk_interior.slate
    } {
	keep -background -cursor -relief \
		-borderwidth
    }
    pack $itk_component(slate)

    #
    # Create the interactors
    #
    ::set alonger [$itk_component(slate) create Alonger -along y]
    ::set stepper [$itk_component(slate) create Stepper]

    #
    # Initialise options.
    #
    eval itk_initialize $args

    #
    # Set the _initialized_ flag and redraw the slider
    #
    ::set initialized 1
    redraw
}

## redraw
#
body ::tycho::Slider::redraw {} {

    #
    # Delete existing pictures
    #
    if { [info exists trough] } {
	delete object $trough
	delete object $bar
	delete object $labellabel
	delete object $valuelabel
    }

    #
    # Set up display parameters
    #
    ::set xcenter [expr $itk_option(-totalwidth) / 2]
    ::set textbase 20

    ::set barwidth 20
    ::set barheight 10

    ::set interspace 3
    ::set protrudeby 1

    ::set troughtop    [expr $textbase + $interspace]
    ::set slidertop    [expr $troughtop + $protrudeby + $barheight/2]
    ::set sliderbottom [expr $slidertop + $itk_option(-length)]
    ::set troughbottom [expr $sliderbottom + $protrudeby + $barheight/2]


    #
    # Create the value display.
    #
    ::set valuelabel [$itk_component(slate) create Text \
	    $xcenter $textbase \
	    -text $itk_option(-from) -anchor s -foreground blue]

    #
    # Create the slider objects
    #
    ::set trough [$itk_component(slate) create Frame \
	    [expr $xcenter - $itk_option(-width)/2] \
	    $troughtop \
	    [expr $xcenter + $itk_option(-width)/2] \
	    $troughbottom \
	    -color darkgrey \
	    -borderwidth [expr $itk_option(-width)/2] \
	    -relief sunken]

    ::set bar [$itk_component(slate) create Frame \
	    [expr $xcenter - $barwidth/2] \
	    [expr $troughbottom - $protrudeby - $barheight] \
	    [expr $xcenter + $barwidth/2] \
	    [expr $troughbottom - $protrudeby] \
	    -color darkseagreen \
	    -borderwidth 3]

    #
    # Create the label underneath the sliders
    #
    ::set labellabel [$itk_component(slate) create Text \
	    $xcenter [expr $troughbottom + $interspace] \
	    -text $itk_option(-label) -anchor n -justify center]

    #
    # Set the height of the slate
    #
    $itk_component(slate) configure -width $itk_option(-totalwidth) \
	    -height [expr [lindex [$labellabel query bbox] 3] + $interspace]

    #
    # Set the interactors up and bind to the slider bar
    #
    $alonger configure -bounds \
	    [list [expr $slidertop - $barheight/2] \
	    [expr $sliderbottom + $barheight/2]]
    $alonger bind $bar

    configure -resolution $itk_option(-resolution)
}
