#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes ComplexItem] == "" } {
	uplevel #0 {source $tychoslate/ComplexItem.itcl}
    }
}

########################################################################
## Terminal
#
# A "terminal" for making connections to dataflow nodes and
# such. This kind of terminal is based on arrowed lines.
# Its coordinates are the coordinates at which it "connects" to 
# whatever it is that it is a terminal of.
#
# <p><b>Options</b>:
# 
# <ul>
# <li><b>-anchor</b>. The position on its parent item that the terminal
# attaches to. If null, the terminal will remain at the location
# at which its coords make it. If a pair, these two elements are
# taken to be the relative _x_ and _y_ locations on the parent,
# where 0 it the top or left and 100 is the bottom or right.
# If a compass point, than that point on the parent is used.
# 
# <li><b>-direction</b>. The direction of the terminal away from its 
# origin (the point at which it "connects" to something), as a unit 
# vector. The "unit vector" is a Tcl list of two elements (x and y). The 
# default is <code>{1 0}</code>, meaning that the terminal will be 
# horizontal and drawn to connect to a node on its left, and to a wire 
# on its right.
# 
# <li><b>-fill</b>. The color of the terminal. 
# 
# <li><b>-length</b>. The length of the line representing the terminal. 
# 
# <li><b>-width</b>. The width of the line. 
# 
# <li><b>-style</b>.  The "style" of terminal: <i>arrow</i>, 
# <i>doublearrow</i>, or <i>blob</i>.  If <i>arrow</i>, the terminal is 
# just a simple arrow; if <i>doublearrow</i>, the arrow has two heads; if 
# <i>blob</i>, the terminal has a small circle at the wiring end.
# 
# <li><b>-type</b>. The "type" of the terminal: <i>input</i> or 
# <i>output</i>. This is mainly used to control the appearance of the 
# terminal.
# 
# <li><b>-width</b>. The width of the line.
# 
# </ul>
# 
# <p><b>Components</b>
#
# <ul>
# <li><b>blob</b>: A component item used for terminal ends.
# </ul>
#
# <p><b>Enhancements</b>: The "arrow" style should perhaps put a
# "tail" on the wiring end of an input terminal (as in VEM).
# 
# <p><b>Example</b>: Create some terminals:
# <tcl quiet><pre>
#   source $tycho/editors/slate/doc/internals/newslate.itcl
#   foreach {x y opts} {
#    	100 50  {}
#    	100 100 {-type output -fill red}
#    	100 150 {-style blob  -fill blue}
#    	100 200 {-direction {1 1} -style doublearrow}
#   } {
#    	eval $slate create Terminal $x $y $opts -tags moveable
#   }
# </pre></tcl>
#
# <ul>
# <li><a href="../internals/howtoread.html">Reading <i>ComplexItem</i>
# documentation</a>.
# <li><a href="../internals/items.html">Complex item classes</a>.
# </ul>
#
class ::tycho::Terminal {
    inherit ::tycho::ComplexItem

    # Create a new Terminal item
    proc construct {id canvas slate tags x0 y0 args}

    ###################################################################
    ####                         public procs                      ####

    # Update the *-anchor* option
    proc _anchor {id canvas slate anchor}
    
    # Update the *-arrowshape* option
    proc _arrowshape {id canvas slate arrowshape}
    
    # Update the *-blobsize* option
    proc _blobsize {id canvas slate blobsize}
    
    # Update the *-direction* option
    proc _direction {id canvas slate direction}
    
    # Update the *-fill* option
    proc _fill {id canvas slate fill}
    
    # Update the *-length* option
    proc _length {id canvas slate length}
    
    # Update the *-style* option
    proc _style {id canvas slate length}
    
    # Update the *-type* option
    proc _type {id canvas slate type}

    # Update the *-width* option
    proc _width {id canvas slate width}

    # Get an aspect
    proc aspect {id canvas slate args}

    # Set or get the Terminal's coordinates
    proc coords {id canvas slate args}
    
    ###################################################################
    ####                         protected variables               ####

    # The terminal is a "point" shape
    protected common shape "point"

    ###################################################################
    ####                         private variables                 ####

    # The virtual "method" table
    private common methodtable

    # Default values of this item's options
    private common optiondefault

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::ComplexItem::methodtable]

    set methodtable(_anchor)     ::tycho::Terminal::_anchor
    set methodtable(_arrowshape) ::tycho::Terminal::_arrowshape
    set methodtable(_blobsize)   ::tycho::Terminal::_blobsize
    set methodtable(_direction)  ::tycho::Terminal::_direction
    set methodtable(_fill)       ::tycho::Terminal::_fill
    set methodtable(_length)     ::tycho::Terminal::_length
    set methodtable(_style)      ::tycho::Terminal::_style
    set methodtable(_type)       ::tycho::Terminal::_type
    set methodtable(_width)      ::tycho::Terminal::_width

    set methodtable(aspect)      ::tycho::Terminal::aspect
    set methodtable(construct)   ::tycho::Terminal::construct
    set methodtable(coords)      ::tycho::Terminal::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::ComplexItem::optiondefault]

    set optiondefault(-anchor)    {}
    set optiondefault(-arrowshape) {}
    set optiondefault(-blobsize)  3
    set optiondefault(-direction) {1 0}
    set optiondefault(-fill)      black
    set optiondefault(-length)    25
    set optiondefault(-style)     arrow
    set optiondefault(-type)      input
    set optiondefault(-width)     1
}

##########################################################################
#### -anchor option configuration
#
body ::tycho::Terminal::_anchor {id canvas slate anchor} {
    set option(anchor$id) $anchor

    # Move the item according to the anchor. Do nothing if null.
    if { [llength $anchor] == 1 } {
	# Assume a compass point
	eval coords $id $canvas $slate \
		[$slate aspect [$slate parent $id] $anchor]
    } elseif { [llength $anchor] == 2 } {
	# Assume relative x and y positions
	::tycho::assign x0 y0 x1 y1 [$slate region [$slate parent $id]]
	coords $id $canvas $slate \
		[expr $x0 + [expr ($x1-$x0)/100.0] * [lindex $anchor 0]] \
		[expr $y0 + [expr ($y1-$y0)/100.0] * [lindex $anchor 1]]
    }
}

##########################################################################
#### -arrowshape option configuration
#
body ::tycho::Terminal::_arrowshape {id canvas slate arrowshape} {
    set option(arrowshape$id) $arrowshape
    if { $arrowshape != "" } {
	$canvas itemconfigure $primary($id) -arrowshape $arrowshape
    }
}

##########################################################################
#### -blobsize option configuration
#
body ::tycho::Terminal::_blobsize {id canvas slate blobsize} {
    set option(blobsize$id) $blobsize

    # Update the style, forcing an update.
    set style $option(style$id)
    set option(style$id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### -direction option configuration
#
body ::tycho::Terminal::_direction {id canvas slate direction} {
    set option(direction$id) $direction
    set coords [$canvas coords $primary($id)]

    # Figure the other end.
    set x1 [expr [lindex $coords 0] \
	    + [lindex $option(direction$id) 0] * $option(length$id)]
    set y1 [expr [lindex $coords 1] \
	    + [lindex $option(direction$id) 1] * $option(length$id)]

    # Change the coordinates
    eval $canvas coords $primary($id) [lrange $coords 0 1] $x1 $y1

    # Get the right appearance by setting the style option. Force
    # redraw by setting style to nothing.
    set style $option(style$id)
    set option(style$id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### -fill option configuration
#
body ::tycho::Terminal::_fill {id canvas slate fill} {
    set option(fill$id) $fill

    $canvas itemconfigure $primary($id) -fill $option(fill$id)
    if { [::info exists component(blob$id)] } {
	$canvas itemconfigure $component(blob$id) -fill $option(fill$id)
    }
}

##########################################################################
#### -length option configuration
#
body ::tycho::Terminal::_length {id canvas slate length} {
    set option(length$id) $length
    set coords [$canvas coords $primary($id)]

    # Figure the other end.
    set x1 [expr [lindex $coords 0] \
	    + [lindex $option(direction$id) 0] * $option(length$id)]
    set y1 [expr [lindex $coords 1] \
	    + [lindex $option(direction$id) 1] * $option(length$id)]

    # Change the coordinates
    eval $canvas coords $primary($id) $coords $x1 $y1

    # Get the right appearance by setting the style option. Force
    # redraw by setting style to nothing.
    set style $option(style$id)
    set option(style$id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### -style option configuration
#
body ::tycho::Terminal::_style {id canvas slate style} {
    # Check direction of arrow
    if { $style == "arrow" } {
	if { $option(type$id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	}
	if { [::info exists component(blob$id)] } {
	    $canvas delete $component(blob$id)
	    unset component(blob$id)
	}
    } elseif { $style == "doublearrow" && $option(style$id) != "doublearrow" } {
	if { [::info exists component(blob$id)] } {
	    $canvas delete $component(blob$id)
	}

	set coords [$canvas coords $primary($id)]
	set xdir [lindex $option(direction$id) 0]
	set ydir [lindex $option(direction$id) 1]

	if { $option(type$id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	    set component(blob$id) [$canvas create line \
		    [expr [lindex $coords 0] + $xdir * 5] \
		    [expr [lindex $coords 1] + $ydir * 5] \
		    [expr [lindex $coords 0] + $xdir * 6] \
		    [expr [lindex $coords 1] + $ydir * 6] \
		    -fill $option(fill$id) \
		    -arrow first \
		    -tags [$canvas gettags $id]]
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	    set component(blob$id) [$canvas create line \
		    [expr [lindex $coords 2] - $xdir * 5] \
		    [expr [lindex $coords 3] - $ydir * 5] \
		    [expr [lindex $coords 2] - $xdir * 6] \
		    [expr [lindex $coords 3] - $ydir * 6] \
		    -fill $option(fill$id) \
		    -arrow first \
		    -tags [$canvas gettags $id]]
	}
    } elseif { $style == "blob" && $option(style$id) != "blob" } {
	$canvas itemconfigure $primary($id) -arrow none
	if { [::info exists component(blob$id)] } {
	    $canvas delete $component(blob$id)
	}

	set coords [$canvas coords $primary($id)]
	set component(blob$id) [eval $canvas create oval \
		[::tycho::Rectangle::stretch \
		[lindex $coords 2] [lindex $coords 3] \
		[lindex $coords 2] [lindex $coords 3] \
		$option(blobsize$id)] \
		-fill $option(fill$id) -outline $option(fill$id) \
		-tags [list [$canvas gettags $id]]]
    }
    set option(style$id) $style
}

##########################################################################
#### -type option configuration
#
body ::tycho::Terminal::_type {id canvas slate type} {
    set option(type$id) $type

    # Get the right appearance by setting the style option. Force
    # redraw by setting style to nothing.
    set style $option(style$id)
    set option(style$id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### -width option configuration
#
body ::tycho::Terminal::_width {id canvas slate width} {
    set option(width$id) width
   $canvas itemconfigure $primary($id) -width $width
}


##########################################################################
#### aspect
#
body ::tycho::Terminal::aspect {id canvas slate args} {
    if { $args == "" } {
	return {origin terminal}
    }

    set result {}
    set coords [$canvas coords $primary($id)]
    foreach aspect $args {
	switch -exact $aspect {
	    "origin" {
		lappend result [lindex $coords 0]
		lappend result [lindex $coords 1]
	    }
	    "terminal" {
		lappend result [lindex $coords 2]
		lappend result [lindex $coords 3]
	    }
	}
    }
    return $result
}

##########################################################################
#### construct
#
body ::tycho::Terminal::construct {id canvas slate tags x0 y0 args} {
    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $args] {
	set option([string trimleft $opt -]$id) $val
    }

    # Figure the other end.
    set x1 [expr $x0 + [lindex $option(direction$id) 0] * $option(length$id)]
    set y1 [expr $y0 + [lindex $option(direction$id) 1] * $option(length$id)]

    # The primary component is also the line.
    set primary($id) [$canvas create line $x0 $y0 $x1 $y1 \
	    -tags $tags -fill $option(fill$id) \
	    -width $option(width$id)]
    if { $option(arrowshape$id) != "" } {
	$canvas itemconfigure $primary($id) \
		-arrowshape $option(arrowshape$id)
    }

    # Update the style, forcing an update.
    set style $option(style$id)
    set option(style$id) {}
    _style $id $canvas $slate $style

    # Move to correct anchor position
    _anchor $id $canvas $slate $option(anchor$id)
}

##########################################################################
#### coords
#
body ::tycho::Terminal::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [lrange [$canvas coords $primary($id)] 0 1]
    }

    # Move the primary
    set coords [$canvas coords $primary($id)]
    set moveX [expr [lindex $args 0] - [lindex $coords 0]]
    set moveY [expr [lindex $args 1] - [lindex $coords 1]] 

    $canvas move $id $moveX $moveY
}
