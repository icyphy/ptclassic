#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes Picture] == "" } {
	uplevel #0 {source $tychoslate/Picture.itcl}
    }
}

########################################################################
## Terminal
#
# A "terminal" for making connections to dataflow nodes and
# such. This kind of terminal is based on arrowed lines.
#
# <a href="../internals/howtoread.html">Reading <i>Picture</i> documentation</a>.
#
# <b>Note</b>: This is an experimental class.
#
class ::tycho::Terminal {
    inherit ::tycho::Picture

    # Create a new Terminal item
    proc construct {id canvas slate tags x0 y0 args}

    ###################################################################
    ####                            options                        ####

    # The direction of the terminal away from its connection point,
    # as a unit vector pair
    common _direction

    # The fill color of the terminal
    common _fill

    # The length of the terminal line
    common _length

    # The "style" of the terminal: "arrow," "doublearrow," or "blob"
    common _style

    # The type of the terminal: "input" or "output"
    common _type

    ###################################################################
    ####                     option update procs                   ####

    # Update the *-direction* option
    proc _direction {id canvas slate direction}
    
    # Update the *-fill* option
    proc _fill {id canvas slate fill}
    
    # Update the *-length* option
    proc _length {id canvas slate length}
    
    # Update the *-style* option
    proc _style {id canvas slate length}
    
    # Update the *-type* option
    proc _type {id canvas slate type}

    ###################################################################
    ####                         public procs                      ####

    # Get an aspect
    proc aspect {id canvas slate args}

    # Set or get the Terminal's coordinates
    proc coords {id canvas slate args}
    
    ###################################################################
    ####                         picture components                ####

    # An component item used for terminal ends
    common blobitem

    ###################################################################
    ####                         protected variables               ####

    # The virtual "method" table
    common methodtable

    # Default values of this item's options
    common optiondefault

    # The terminal is a "point" shape
    common shape "point"

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::Picture::methodtable]

    set methodtable(_direction)  ::tycho::Terminal::_direction
    set methodtable(_fill)       ::tycho::Terminal::_fill
    set methodtable(_length)     ::tycho::Terminal::_length
    set methodtable(_style)      ::tycho::Terminal::_style
    set methodtable(_type)       ::tycho::Terminal::_type

    set methodtable(aspect)      ::tycho::Terminal::aspect
    set methodtable(construct)   ::tycho::Terminal::construct
    set methodtable(coords)      ::tycho::Terminal::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::Picture::optiondefault]

    set optiondefault(-direction) {1 0}
    set optiondefault(-length)    25
    set optiondefault(-type)      input
    set optiondefault(-style)     arrow
    set optiondefault(-fill)      black
}

##########################################################################
#### -direction option configuration
#
body ::tycho::Terminal::_direction {id canvas slate direction} {
    set _direction($id) $direction
    set coords [$canvas coords $primary($id)]

    # Figure the other end.
    set x1 [expr [lindex $coords 0] \
	    + [lindex $_direction($id) 0] * $_length($id)]
    set y1 [expr [lindex $coords 1] \
	    + [lindex $_direction($id) 1] * $_length($id)]

    # Change the coordinates
    eval $canvas coords $primary($id) [lrange $coords 0 1] $x1 $y1

    # Get the right appearance by setting the style option. Force
    # redraw by setting style to nothing.
    set style $_style($id)
    set _style($id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### -fill option configuration
#
body ::tycho::Terminal::_fill {id canvas slate fill} {
    set _fill($id) $fill

    $canvas itemconfigure $primary($id) -fill $_fill($id)
    if { [::info exists blobitem($id)] } {
	$canvas itemconfigure $blobitem($id) -fill $_fill($id)
    }
}

##########################################################################
#### -length option configuration
#
body ::tycho::Terminal::_length {id canvas slate length} {
    set _length($id) $length
    set coords [$canvas coords $primary($id)]

    # Figure the other end.
    set x1 [expr [lindex $coords 0] \
	    + [lindex $_direction($id) 0] * $_length($id)]
    set y1 [expr [lindex $coords 1] \
	    + [lindex $_direction($id) 1] * $_length($id)]

    # Change the coordinates
    eval $canvas coords $primary($id) $coords $x1 $y1

    # Get the right appearance by setting the style option. Force
    # redraw by setting style to nothing.
    set style $_style($id)
    set _style($id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### -style option configuration
#
body ::tycho::Terminal::_style {id canvas slate style} {
    # Check direction of arrow
    if { $style == "arrow" } {
	if { $_type($id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	}
	if { [::info exists blobitem($id)] } {
	    $canvas delete $blobitem($id)
	    unset blobitem($id)
	}
    } elseif { $style == "doublearrow" && $_style($id) != "doublearrow" } {
	if { [::info exists blobitem($id)] } {
	    $canvas delete $blobitem($id)
	}

	set coords [$canvas coords $primary($id)]
	set xdir [lindex $_direction($id) 0]
	set ydir [lindex $_direction($id) 1]

	if { $_type($id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	    set blobitem($id) [$canvas create line \
		    [expr [lindex $coords 0] + $xdir * 5] \
		    [expr [lindex $coords 1] + $ydir * 5] \
		    [expr [lindex $coords 0] + $xdir * 6] \
		    [expr [lindex $coords 1] + $ydir * 6] \
		    -fill $_fill($id) \
		    -arrow first \
		    -tags [$canvas gettags $id]]
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	    set blobitem($id) [$canvas create line \
		    [expr [lindex $coords 2] - $xdir * 5] \
		    [expr [lindex $coords 3] - $ydir * 5] \
		    [expr [lindex $coords 2] - $xdir * 6] \
		    [expr [lindex $coords 3] - $ydir * 6] \
		    -fill $_fill($id) \
		    -arrow first \
		    -tags [$canvas gettags $id]]
	}
    } elseif { $style == "blob" && $_style($id) != "blob" } {
	$canvas itemconfigure $primary($id) -arrow none
	if { [::info exists blobitem($id)] } {
	    $canvas delete $blobitem($id)
	}

	set coords [$canvas coords $primary($id)]
	set blobitem($id) [eval $canvas create oval \
		[rectStretch [list \
		[lindex $coords 2] [lindex $coords 3] \
		[lindex $coords 2] [lindex $coords 3]] \
		3] \
		-fill $_fill($id) -outline $_fill($id) \
		-tags [list [$canvas gettags $id]]]
    }
    set _style($id) $style
}

##########################################################################
#### -type option configuration
#
body ::tycho::Terminal::_type {id canvas slate type} {
    set _type($id) $type

    # Get the right appearance by setting the style option. Force
    # redraw by setting style to nothing.
    set style $_style($id)
    set _style($id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### aspect
#
body ::tycho::Terminal::aspect {id canvas slate args} {
    if { $args == "" } {
	return {origin terminal}
    }

    set result {}
    set coords [$canvas coords $primary($id)]
    foreach aspect $args {
	switch -exact $aspect {
	    "origin" {
		lappend result [lindex $coords 0]
		lappend result [lindex $coords 1]
	    }
	    "terminal" {
		lappend result [lindex $coords 2]
		lappend result [lindex $coords 3]
	    }
	}
    }
    return $result
}

##########################################################################
#### construct
#
body ::tycho::Terminal::construct {id canvas slate tags x0 y0 args} {
    # Initialize the options
    foreach {option value} [concat [array get optiondefault] $args] {
	set _[string trimleft $option -]($id) $value
    }

    # Figure the other end.
    set x1 [expr $x0 + [lindex $_direction($id) 0] * $_length($id)]
    set y1 [expr $y0 + [lindex $_direction($id) 1] * $_length($id)]

    # The primary component is also the line.
    set primary($id) [$canvas create line $x0 $y0 $x1 $y1 \
	    -tags $tags -fill $_fill($id)]

    # Update the style, forcing an update.
    set style $_style($id)
    set _style($id) {}
    _style $id $canvas $slate $style
}

##########################################################################
#### coords
#
body ::tycho::Terminal::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [lrange [$canvas coords $primary($id)] 0 1]
    }

    # Move the primary
    set coords [$canvas coords $primary($id)]
    set moveX [expr [lindex $args 0] - [lindex $coords 0]]
    set moveY [expr [lindex $args 1] - [lindex $coords 1]] 

    $canvas move $id $moveX $moveY
}
