#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Set up the "function table." Explicitly load the superclass
# to avoid a bizarre problem with variable scoping.
#
uplevel #0 {
    if { [::info classes ::tycho::Picture] == "" } {
	source $tychoslate/kernel/Picture.itcl
    }

    array set Terminal [array get Picture]

    set Terminal(construct)   ::tycho::Terminal::construct
    set Terminal(coords)      ::tycho::Terminal::coords
    set Terminal(direction)   ::tycho::Terminal::direction
    set Terminal(fill)        ::tycho::Terminal::fill
    set Terminal(length)      ::tycho::Terminal::length
    set Terminal(style)       ::tycho::Terminal::style
    set Terminal(type)        ::tycho::Terminal::type
}


## Terminal
#
# A "terminal" for making connections to dataflow nodes and
# such. This kind of terminal is based on arrowed lines.
#
class ::tycho::Terminal {
    inherit ::tycho::Picture

    proc construct {id tags canvas x0 y0 args}


    ###################################################################
    ####                            options                        ####

    # The direction of the terminal away from its connection point,
    # as a unit vector pair
    common direction

    # The fill color of the terminal
    common fill

    # The length of the terminal line
    common length

    # The "style" of the terminal: arrow, doublearrow, blob
    common style

    # The type of the terminal: input or output
    common type


    ###################################################################
    ####                         public procs                      ####

    proc coords    {id canvas args}
    proc direction {id canvas di}
    proc fill      {id canvas fi}
    proc length    {id canvas le}
    proc style     {id canvas ty}
    proc type      {id canvas ty}

    ###################################################################
    ####                         protected variables               ####

    common blobitem
    common double
}


##########################################################################
#### construct
#
body ::tycho::Terminal::construct {id tags canvas x0 y0 args} {
    # Initialize the options
    if { ! [::info exists color($id)] } {
	set defaultoptions { \
		-direction {1 0} \
		-length 20 \
		-type input \
		-style arrow \
		-fill black \
	    }

	foreach {option value} [concat $defaultoptions $args] {
	    set [string trimleft $option -]($id) $value
	}
    }

    # Figure the other end.
    set x1 [expr $x0 + [lindex $direction($id) 0] * $length($id)]
    set y1 [expr $y0 + [lindex $direction($id) 1] * $length($id)]

    # The primary component is also the line.
    set primary($id) [$canvas create line $x0 $y0 $x1 $y1 \
	    -tags $tags -fill $fill($id)]

    # Update the style
    style $id $canvas $style($id)
}


##########################################################################
#### coords
#
body ::tycho::Terminal::coords {id canvas args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the primary
    set coords [$canvas coords $primary($id)]
    set moveX [expr [lindex $args 0] - [lindex $coords 0]]
    set moveY [expr [lindex $args 1] - [lindex $coords 1]] 

    $canvas move $id $moveX $moveY
}

##########################################################################
#### direction
#
body ::tycho::Terminal::direction {id canvas di} {
    set direction($id) $di
    set coords [$canvas coords $primary($id)]

    # Figure the other end.
    set x1 [expr [lindex $coords 0] \
	    + [lindex $direction($id) 0] * $length($id)]
    set y1 [expr [lindex $coords 1] \
	    + [lindex $direction($id) 1] * $length($id)]

    # Change the coordinates
    eval $canvas coords $primary($id) [lrange $coords 0 1] $x1 $y1

    # If necessary, move the blob
    if { $style($id) == "blob" && $type($id) == "output" } {
	$canvas move $blobitem($id) [expr $x1 - [lindex $coords 0]] \
		[expr $y1 - [lindex $coords 1]]
    }
}

##########################################################################
#### fill
#
body ::tycho::Terminal::fill {id canvas fi} {
    set fill($id) $fi

    $canvas itemconfigure $primary($id) -fill $fill($id)
    if { [::info exists blobitem($id)] } {
	$canvas itemconfigure $blobitem($id) \
		-fill $fill($id) -outline $fill($id)
    }
    if { [::info exists double($id)] } {
	$canvas itemconfigure $double($id) \
		-fill $fill($id)
    }
}

##########################################################################
#### length
#
body ::tycho::Terminal::length {id canvas le} {
    set length($id) $le
    set coords [$canvas coords $primary($id)]

    # Figure the other end.
    set x1 [expr [lindex $coords 0] \
	    + [lindex $direction($id) 0] * $length($id)]
    set y1 [expr [lindex $coords 1] \
	    + [lindex $direction($id) 1] * $length($id)]

    # Change the coordinates
    eval $canvas coords $primary($id) $coords $x1 $y1

    # If necessary, move the blob
    if { $style($id) == "blob" && $type($id) == "output" } {
	$canvas move $blobitem($id) [expr $x1 - [lindex $coords 0]] \
		[expr $y1 - [lindex $coords 1]]
    }
}

##########################################################################
#### style
#
body ::tycho::Terminal::style {id canvas st} {
    set style($id) $st

    # Check direction of arrow
    if { $style($id) == "arrow" } {
	if { $type($id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	}
	if { [::info exists blobitem($id)] } {
	    $canvas delete $blobitem($id)
	    unset blobitem($id)
	}
    } elseif { $style($id) == "double" && ! [::info exists double($id)] } {
	set coords [$canvas coords $primary($id)]
	
	set double($id) [$canvas create line \
		[expr [lindex $coords 0] + [lindex $direction($id) 0] * 5] \
		[expr [lindex $coords 1] + [lindex $direction($id) 1] * 5] \
		[expr [lindex $coords 0] + [lindex $direction($id) 0] * 6] \
		[expr [lindex $coords 1] + [lindex $direction($id) 1] * 6] \
		-fill $fill($id) \
		-tags [$canvas gettags $id]]

	if { $type($id) == "input" } {
	    $canvas itemconfigure $double($id) -arrow first
	} else {
	    $canvas itemconfigure $double($id) -arrow last
	}

	if { [::info exists blobitem($id)] } {
	    $canvas delete $blobitem($id)
	    unset blobitem($id)
	}
    } elseif { $style($id) == "blob" && ! [::info exists blobitem($id)] } {
	$canvas itemconfigure $primary($id) -arrow none
	set coords [$canvas coords $primary($id)]
	set blobitem($id) [eval $canvas create oval \
		[rectStretch [list \
		    [lindex $coords 2] [lindex $coords 3] \
		    [lindex $coords 2] [lindex $coords 3]] \
		    3] \
		-fill $fill($id) -outline $fill($id) \
		-tags [list [$canvas gettags $id]]]
    
	if { [::info exists double($id)] } {
	    $canvas delete $double($id)
	    unset double($id)
	}
    }
}

##########################################################################
#### type
#
body ::tycho::Terminal::type {id canvas ty} {
    set type($id) $ty

    # Check direction of arrow
    if { $style($id) == "arrow" } {
	if { $type($id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	}
    } elseif { $style($id) == "double" } {
	if { $type($id) == "input" } {
	    $canvas itemconfigure $primary($id) -arrow first
	    $canvas itemconfigure $double($id) -arrow first
	} else {
	    $canvas itemconfigure $primary($id) -arrow last
	    $canvas itemconfigure $double($id) -arrow last
	}
    }
}
