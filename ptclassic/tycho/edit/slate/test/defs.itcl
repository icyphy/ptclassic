# Definitions for slate tests.
#
# @Author: John Reekie
# 
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

############################################################################
#### Define a proc that can be used to create a new slate
#
proc _slate {} {
    catch {delete object .s}
    ::tycho::slate .s
    pack .s
    wm deiconify .
    raise .
}

############################################################################
#### Define a proc that does an update and then waits
#
proc _update {} {
    global SHORTTIME
    update idletasks
    if { [::info exists SHORTTIME] } {
        after $SHORTTIME
    }
}

############################################################################
#### Define a proc that creates a clean slate
#
proc _clean {} {
    if { [::info which -command .s] == "" } {
	_slate
    }
    .s delete all
    raise .
}

############################################################################
#### Define a proc that creates two items on the slate
#
proc _twoitems {} {
    global r f
    _clean
    set r [.s create rectangle 40 40 80 80 -fill blue -tags foo]
    set f [.s create Frame 140 140 180 180 -color green -tags bar]
}

############################################################################
#### Define a proc that creates a complex item with two
#### child items -- one a root and one not
#
proc _hieritem {} {
    global h i j
    _clean
    set h [.s create Frame 40 40 200 160 -color green]
    set i [.s createchild $h Frame 60 60 120 100 -color red -relief sunken]
    set j [.s createrootchild $h Frame 120 100 180 140 -color blue]
}

############################################################################
#### Define a proc to delete the last slate and close the main window
#
proc _done {} {
    _update
    catch {delete object .s}
    # wm iconify .
}


############################################################################
#### Define a proc to simulate an interaction sequence
#
proc _interact {prefix tag xinc yinc n args} {
    set x 100
    set y 100
    eval ${prefix}click $tag .s.canvas .s $x $y $args
    update idletasks
    while { $n > 0 } {
	set x [expr $x + $xinc]
	set y [expr $y + $yinc]
	eval ${prefix}drag $tag .s.canvas .s $x $y
	update idletasks
	incr n -1
    }
    eval ${prefix}release $tag .s.canvas .s $x $y
    .s coords $tag
}

############################################################################
#### Define a proc to return the final result of an interaction
#
proc _finally {prefix tag xinc yinc n args} {
    eval $prefix [.s coords $tag] \
	    [expr $xinc * $n] [expr $yinc * $n] $args
}

proc _finally2 {prefix tag xinc yinc n args} {
    eval $prefix [list [.s coords $tag]] \
	    [expr $xinc * $n] [expr $yinc * $n] $args
}
