# Test slate class
#
# @Author: John Reekie
# 
# @Version: @(#)testSlate.itcl	1.11 05/13/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the test package is loaded
package require slate.test

############################################################################
#### Comments on these tests
#
# These tests test out only the methods in Slate. For tests
# that apply to individual item types, shapes, or interactors,
# see the individual test files. For tests of the methods
# inherited from Slate.itcl, see testSlate.itcl.
#
# Tests are on a per-method basis. Most methods have (at least)
# four cases: pass a simple item by ID, pass a tag that will
# match a simple item, pass a complex item by ID, and pass a tag
# that will match a complex item.
#

#######################################################################
#### constructor
#
test Slate-constructor-1 {Simplest construction test} {
   catch {itcl::delete object .s}
   ::tycho::slate .s
} {.s}
itcl::delete object .s

# FIXME: add more tests with different options

#######################################################################
#### animate
# FIXME

#######################################################################
#### feature
# FIXME

#######################################################################
#### delete
# FIXME

#######################################################################
#### describe
# FIXME

############################################################################
#### ghost{}
#
_twoitems
test Slate-ghost-1 {Pass simple item by ID} {
    set h [.s ghost $r blah]
    string compare  [list \
	    [.s.canvas find withtag ghost] \
	    [.s.canvas find withtag ghost.$r] \
	    [.s.canvas find withtag blah]] \
	    [list $h $h $h]
} {0}

test Slate-ghost-2 {Pass complex item by ID} {
    set j [.s ghost $f blab]
    string compare  [list \
	    [lsort [.s.canvas find withtag ghost]] \
	    [.s.canvas find withtag ghost.$f] \
	    [.s.canvas find withtag blab]] \
	    [list [lsort [list $h $j]] $j $j]
} {0}

_twoitems
test Slate-ghost-11 {Pass simple item by tag} {
    set h [.s ghost foo blah]
    string compare  [list \
	    [.s.canvas find withtag ghost] \
	    [.s.canvas find withtag ghost.$r] \
	    [.s.canvas find withtag ghost.foo] \
	    [.s.canvas find withtag blah]] \
	    [list $h $h $h $h]
} {0}

test Slate-ghost-12 {Pass complex item by tag} {
    set j [.s ghost bar blab]
    string compare  [list \
	    [lsort [.s.canvas find withtag ghost]] \
	    [.s.canvas find withtag ghost.$f] \
	    [.s.canvas find withtag ghost.bar] \
	    [.s.canvas find withtag blab]] \
	    [list [lsort [list $h $j]] $j $j $j]
} {0}

_twoitems
test Slate-ghost-21 {Multiple items by tag} {
    .s addtag foo all
    set hs [.s ghost foo]
    string compare [lsort $hs] \
	    [lsort [.s.canvas find withtag ghost]]
} {0}

############################################################################
#### highlight{}
#
_twoitems
test Slate-highlight-1 {Pass simple item by ID} {
    set h [.s highlight $r -tags blah]
    string compare  [list \
	    [.s.canvas find withtag highlight] \
	    [.s.canvas find withtag highlight.$r] \
	    [.s.canvas find withtag blah]] \
	    [list $h $h $h]
} {0}

test Slate-highlight-2 {Pass complex item by ID} {
    set j [.s highlight $f -tags blab]
    string compare  [list \
	    [lsort [.s.canvas find withtag highlight]] \
	    [.s.canvas find withtag highlight.$f] \
	    [.s.canvas find withtag blab]] \
	    [list [lsort [list $h $j]] $j $j]
} {0}

_twoitems
test Slate-highlight-11 {Pass simple item by tag} {
    set h [.s highlight foo -tags blah]
    string compare  [list \
	    [.s.canvas find withtag highlight] \
	    [.s.canvas find withtag highlight.$r] \
	    [.s.canvas find withtag highlight.foo] \
	    [.s.canvas find withtag blah]] \
	    [list $h $h $h $h]
} {0}

test Slate-highlight-12 {Pass complex item by tag} {
    set j [.s highlight bar -tags blab]
    string compare  [list \
	    [lsort [.s.canvas find withtag highlight]] \
	    [.s.canvas find withtag highlight.$f] \
	    [.s.canvas find withtag highlight.bar] \
	    [.s.canvas find withtag blab]] \
	    [list [lsort [list $h $j]] $j $j $j]
} {0}

_twoitems
test Slate-highlight-21 {Multiple items by tag} {
    .s addtag foo all
    set hs [.s highlight foo]
    string compare [lsort $hs] \
	    [lsort [.s.canvas find withtag highlight]]
} {0}

#######################################################################
#### grapple
#### ungrapple
#
# Create an item and "grapple" it. This tests the grapple and
# ungrapple methods and the Grapple and Reshaper classes.
# It also tests construction and automatic scaling of complex items.
#
set i -1
_slate
test Slate-grapple-[incr i] {Create grapples and check coords} {
    set item [.s create ComplexItem 50 50 100 100]

    #.s createchild $item rectangle 50 50 100 100 -outline grey
    .s createchild $item line 50 50 100 100
    .s createchild $item line 50 100 100 50
    .s createchild $item oval 60 60 90 90 -fill green

    .s grapple $item

    set result {}
    foreach a [.s feature $item] {
	lappend result [.s coords [.s find withtag $a.$item]]
    }
    set result
} {{75.0 50.0} {75.0 100.0} {100.0 75.0} {50.0 75.0} {100.0 50.0} {50.0 50.0} {100.0 100.0} {50.0 100.0}}

proc _grappled {} {
    global item
    _clean
    set item [.s create ComplexItem 50 50 100 100]
    .s createchild $item line 50 50 100 100
    .s createchild $item line 50 100 100 50
    .s createchild $item oval 60 60 90 90 -fill green
    .s grapple $item
}

_grappled
test Slate-grapple-[incr i] {Move the item and recheck grapples} {
    .s move $item 50 50

    set result {}
    foreach a [.s feature $item] {
	lappend result [.s coords [.s find withtag $a.$item]]
    }
    set result
} {{125.0 100.0} {125.0 150.0} {150.0 125.0} {100.0 125.0} {150.0 100.0} {100.0 100.0} {150.0 150.0} {100.0 150.0}}

# This doesn't work
#_grappled
# test Slate-grapple-[incr i] {Scale the item and recheck grapples} {
#     .s scale $item 50 50 0.5 2.0
# } {}

# Simulate interaction
_grappled
set results {
    {{75.0 70.0} {75.0 100.0} {100.0 85.0} {50.0 85.0} {100.0 70.0} {50.0 70.0} {100.0 100.0} {50.0 100.0}}
    {{75.0 70.0} {75.0 120.0} {100.0 95.0} {50.0 95.0} {100.0 70.0} {50.0 70.0} {100.0 120.0} {50.0 120.0}}
    {{85.0 70.0} {85.0 120.0} {120.0 95.0} {50.0 95.0} {120.0 70.0} {50.0 70.0} {120.0 120.0} {50.0 120.0}}
    {{95.0 70.0} {95.0 120.0} {120.0 95.0} {70.0 95.0} {120.0 70.0} {70.0 70.0} {120.0 120.0} {70.0 120.0}}
    {{105.0 90.0} {105.0 120.0} {140.0 105.0} {70.0 105.0} {140.0 90.0} {70.0 90.0} {140.0 120.0} {70.0 120.0}}
    {{115.0 110.0} {115.0 120.0} {140.0 115.0} {90.0 115.0} {140.0 110.0} {90.0 110.0} {140.0 120.0} {90.0 120.0}}
    {{125.0 110.0} {125.0 140.0} {160.0 125.0} {90.0 125.0} {160.0 110.0} {90.0 110.0} {160.0 140.0} {90.0 140.0}}
    {{135.0 110.0} {135.0 160.0} {160.0 135.0} {110.0 135.0} {160.0 110.0} {110.0 110.0} {160.0 160.0} {110.0 160.0}}
}
foreach feature [.s feature $item] r $results {
    incr i
    test Slate-grapple-$i {Drag interaction on the \"$feature\" grapple} {
	# The grapple
	set g [.s find withtag $feature.$item]
	
	# Simulate the interaction
	_interaction grapple.$item $g 50 50 2 2 10 -button 1

	# Produce the result
	set result {}
	foreach a [.s feature $item] {
	    lappend result [.s coords [.s find withtag $a.$item]]
	}
	set result
    } $r
}

#######################################################################
#### interactor
# FIXME

#######################################################################
#### move
# FIXME

#######################################################################
#### moveclick
#### movedrag
#### moverelease
#
# These methods are tested as a set. Mainly, these tests confirm
# that the interaction is being forwarded to the Shape class;
# see testShape.itcl for that class for more complex tests.
#
_twoitems
test Slate-moveclick-1 {Move the simple item, no ghosting} {
    .s moveclick $r 100 100; _update
    .s movedrag $r 110 110; _update
    .s movedrag $r 120 120; _update
    .s moverelease $r; _update
    .s coords $r
} {60.0 60.0 100.0 100.0}

test Slate-moveclick-2 {Move the simple item, with ghosting} {
    .s moveclick $r 100 100 -ghost; _update
    .s movedrag $r 90 90; _update
    .s movedrag $r 80 80; _update
    set result [.s coords ghost]
    .s moverelease $r; _update
    concat $result [.s coords $r]
} {40.0 40.0 80.0 80.0 40.0 40.0 80.0 80.0}

#######################################################################
#### moveto
# FIXME

#######################################################################
#### recreate
# FIXME

#######################################################################
#### region
#
_twoitems

test Slate-region-1.1 {Get region, simple rectangle by ID} {
    .s region $r
} {40.0 40.0 80.0 80.0}

test Slate-region-1.2 {Get region, simple rectangle by tag} {
    .s region foo
} {40.0 40.0 80.0 80.0}

test Slate-region-1.3 {Get region, complex rectangle by ID} {
    .s region $f
} {140.0 140.0 180.0 180.0}

test Slate-region-1.4 {Get region, complex rectangle by tag} {
    .s region bar
} {140.0 140.0 180.0 180.0}

# Create non-rectangles
proc _moreitems {} {
    global l m
    _clean
    set l [.s create line 40 40 80 80 -fill blue -tags foo]
    set m [.s create SmartLine 140 140 180 180 -fill red -tags bar]
}

_moreitems
test Slate-region-1.5 {Get region, simple non-rectangle by ID} {
    .s region $l
} {40 40 80 80}

test Slate-region-1.6 {Get region, simple non-rectangle by tag} {
    .s region foo
} {40 40 80 80}

test Slate-region-1.7 {Get region, complex non-rectangle by ID} {
    .s region $m
} {140 140 180 180}

test Slate-region-1.8 {Get region, complex non-rectangle by tag} {
    .s region bar
} {140 140 180 180}

_twoitems
.s addtag all all
test Slate-region-1.9 {Get region, multiple items by tag} {
    # For some reason, the bbox doesn't quite give us the right answer...
    .s region all
} {41 41 181 181}

test Slate-region-1.10 {Get region, no items metched} {
    # For some reason, the bbox doesn't quite give us the right answer...
    .s region nothing
} {}

_twoitems
_update
test Slate-region-2.1 {Change region, simple rectangle by ID} {
    .s region $r 70 70 90 90
    .s coords $r
} {70.0 70.0 90.0 90.0}
_update

_twoitems
_update
test Slate-region-2.2 {Change region, simple rectangle by tag} {
    .s region foo 70 70 90 90
    .s coords $r
} {70.0 70.0 90.0 90.0}
_update

_twoitems
_update
test Slate-region-2.3 {Change region, complex rectangle by ID} {
    .s region $f 70 70 90 90
    .s coords $f
} {70.0 70.0 90.0 90.0}
_update

_twoitems
_update
test Slate-region-2.4 {Change region, complex rectangle by tag} {
    .s region bar 70 70 90 90
    .s coords $f
} {70.0 70.0 90.0 90.0}
_update

# Test non-rectangles
_moreitems
_update
test Slate-region-2.5 {Change region, simple non-rectangle by ID} {
    .s region $l 70 70 90 90
    .s coords $l
} {70.0 70.0 90.0 90.0}
_update

_moreitems
_update
test Slate-region-2.6 {Change region, simple non-rectangle by tag} {
    .s region foo 70 70 90 90
    .s coords $l
} {70.0 70.0 90.0 90.0}
_update

_moreitems
_update
test Slate-region-2.7 {Change region, complex non-rectangle by ID} {
    .s region $m 70 70 90 90
    .s coords $m
} {70.0 70.0 80.0 70.0 80.0 90.0 90.0 90.0}
_update

_moreitems
_update
test Slate-region-2.8 {Change region, complex non-rectangle by tag} {
    .s region bar 70 70 90 90
    .s coords $m
} {70.0 70.0 80.0 70.0 80.0 90.0 90.0 90.0}
_update

_twoitems
_update
.s addtag all all
test Slate-region-2.9 {Change region, multiple items by tag} {
    # For some reason, the bbox doesn't quite give us the right answer...
    .s region all 70 70 150 150
    .s bbox all
} {68 68 152 152}
_update

test Slate-region-2.10 {Change region, no items metched} {
    # For some reason, the bbox doesn't quite give us the right answer...
    .s region nothing 70 70 90 90
} {}

_clean
set i [.s create IconFrame 100 100 -color green -hsize 60 -vsize 40]
test Slate-region-3.1 {Get region of item with method override} {
    .s region $i
} {70.0 80.0 130.0 120.0}
_update

test Slate-region-3.1 {Change region of item with method override} {
    .s region $i 50 90 150 120
    .s coords [.s primary $i]
} {50.0 90.0 150.0 120.0}
_update

#######################################################################
#### reshape
# FIXME

#######################################################################
#### reshapeclick
#### reshapedrag
#### reshaperelease
#
# FIXME (Tested indirectly by Interactor tests.)

#######################################################################
#### reshapeto
# FIXME

#######################################################################
#### selection
# FIXME

#######################################################################
#### selector
# FIXME

#######################################################################
#### shape
# FIXME

#######################################################################
#### shape*
# FIXME

#######################################################################
#### unhighlight
# FIXME
