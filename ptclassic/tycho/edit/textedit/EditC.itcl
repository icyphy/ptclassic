# Definition of a C context-sensitive editor.
#
# @Author: Edward A. Lee
# @Contributor: Christopher Hylands
#
# @Version: @(#)EditC.itcl	1.28 01/27/99
#
# @Copyright (c) 1995-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
# FIXME: To do
#
# - This editor only handles indenting and comments.  Needs much more.
# 


#######################################################################
#### EditC
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing C files. It editor
# automatically indents a line in response to a Tab character, and
# provides a command for indenting a region (the selection). To enter a
# literal Tab, enter the sequence <Control-q><Tab>. This editor also
# colors comments and the strings "FIXME" and "NOTE", and provides a
# method for commenting out a region.
#
class ::tycho::EditC {
    inherit ::tycho::EditProgram

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Add a Tcl package initialization function
    method addTclInitialization {}

    # Compile the C file and load it into Tcl
    method compileAndLoad {}

    # If the selection has no embedded comments, then comment it out.
    method commentSelection {}

    # Compile the C file
    method evaluate {}

    # Open a window with help on the C editor.
    method help {}

    # Tag and color the C code in a region.
    method parseNow {start stop}

    # Return a list of tags to use when checking the spelling.
    method spellCheckTags {} {return {ccomment}}

    # If the selection is exactly a comment, remove the comment symbols.
    method uncommentSelection {}

    ###################################################################
    ####                         protected methods                 ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ##########################################################################
    ####                         private methods                          ####
    
    # Initialize the menu bar.
    private method _initializeMenubar {menubar}
    
    private variable compiler {}
}

###################################################################
#
body ::tycho::EditC::constructor {args} {

    eval itk_initialize $args

    # C does not have line-oriented comments, so there is no fill prefix.
    set fillPrefix ""
}

#######################################################################
#### addTclInitialization
# When a C file is loaded into Tcl, an initialization function with
# a specific name is called.  See the Tcl load command for naming
# details. This method checks whether such a function and inserts
# it if it does not exist.
#
body ::tycho::EditC::addTclInitialization {} {
    # Make sure the user know what's being modified
    saveQuery

    # Figure out the initialization proc name
    set basename [file rootname [file tail $itk_option(-file)]]
    set initProcName "[string toupper\
            [string range $basename 0 0]][string tolower\
            [string range $basename 1 end]]_Init"

    # Search for tcl.h and initProcName
    set sawInclude 0
    set sawInitProcName 0
    # catch all of this incase the file does not yet exist
    if ![catch {set fd [open $itk_option(-file) r]}] {
        while {[gets $fd linein] >= 0} {
            if [regexp {#include [<"](tcl|tk|itcl).h[">]} $linein] {
                set sawInclude 1 
            }
            if [regexp $initProcName $linein] {
                set sawInitProcName 1
                break
            } 
        }
        close $fd
    }

    if { $sawInitProcName } {
        # There is already an initialization, so just print to the
        # status bar and be done with it.
        putStatus "Initialization procedure already exists"
    } else {
        # Add a initialization procedure to the end of the file
        set fd [open $itk_option(-file) a]
        # Check to see if we need to add #include <tcl.h>
        if {$sawInclude == 0 } { 
            puts $fd "#ifndef _TCL\n#include <tcl.h>"
            puts $fd "#endif"
        }

        puts $fd "/* Tcl initialization procedure added for\
                the Tcl load command\n */"
        puts $fd "int ${initProcName}\(Tcl_Interp *interp)\n\{"
        puts $fd "    /* A sample Tcl command registration. */"
        puts $fd "    /* Tcl_CreateCommand(interp, \"$basename\",\
                Tcl_${basename}Cmd,"
        puts $fd "                         (ClientData) NULL,\
                (Tcl_CmdDeleteProc*) NULL);"
        puts $fd "     */"
        puts $fd "    return TCL_OK;\n\}"
        close $fd
        reload
        putStatus "Initialization function added: \
be sure to register your Tcl commands"
    }
}

####################################################################
#### compileAndLoad
# Save the buffer if necessary, compile it and load it back into
# Tcl.  If necessary, add a initialization procedure so that the 
# Tcl load command will work.  If there is no makefile present in the
# current directory, then create a makefile with a name based on the
# current file.
#
body ::tycho::EditC::compileAndLoad {} {
    global env tycho
    evaluate
    if {$compiler != {}} {
	$compiler compileAndLoad [list [filename]]
    }
}

#####################################################################
#### evaluate
# Save the buffer if necessary, compile it. If there is no makefile
# present in the current directory, then create a makefile with a
# name based on the current file.
#
body ::tycho::EditC::evaluate {} {
    global env tycho
    saveQuery

    if {$compiler == {}} {
        #set compiler [::tycho::CompileCTcl [::tycho::autoName .editC]]
        # Once we've created compiler, it stays...
        set compiler [::tycho::CompileCTcl [::tycho::autoName .compilerC]]
    }

    # Make sure we get .widgetname instead of ::.widgetname
    $compiler configure -view [string trimleft $this ":"]

    $compiler compile [list [filename]]
}

#####################################################################
#### commentSelection
# Check to see whether the selection has any embedded comments. If it
# does, issue an error message. If it does not, then comment out the
# selection.
#
body ::tycho::EditC::commentSelection {} {
    if {[set txt [getSelection]] != {}} {

	if [regexp {\/\*|\*\/} $txt] {
	    error "Selection contains embedded comment characters"
	}
	$itk_component(text) mark set insert \
		[$itk_component(text) index sel.first]
	deleteRange sel.first sel.last
	set start [$itk_component(text) index insert]
	insertString insert "/*\n"
	insertString insert $txt
	insertString insert "*/\n"
	$itk_component(text) tag add sel $start insert
	markModified
	parseRegion sel.first sel.last
    }
}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditC::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO edit textedit doc usersGuides \
	    EditCHelp.html] html
}

#####################################################################
#### parseNow
# Tag and color C-style comments in the text plus the strings "NOTE"
# and "FIXME". Note that if a comment begins in the specified range but
# ends outside the range, the entire comment is parsed.
#
body ::tycho::EditC::parseNow {start stop} {

    set text $itk_component(text)

    $text tag remove ccomment $start $stop

    # The base class identifies line-oriented comments, which do not
    # exist in C.  Therefore, we need to completely redefine this procedure.
    set ind $start
    set count 0
    while {[set ret [$text search -exact \
	    {/*} $ind $stop]] != {}} {
	# Found the start of a comment.  Look for the end.
	set endcmt [$text search -exact {*/} $ret end]
	if {$endcmt != {}} {

	    # Found the end of a comment.  Tag it.
	    $text tag add ccomment $ret "$endcmt + 2 chars"
	    
	    set ind $endcmt
	} else {
	    set ind [$text index "$ret +2 chars"]
	}
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }

    # Now tag all occurrences of "FIXME" and "NOTE" within the range
    # that got processed.
    set ind $start
    while {[set ind [$text search -count cnt -regexp \
	    {FIXME|NOTE} $ind $stop]] != {}} {

	$text tag add fixme $ind "$ind + $cnt chars"
	    
	set ind [$text index "$ind + $cnt chars"]
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }

    # Set the visual characteristics of the tagged text
    $text tag configure ccomment -foreground $itk_option(-commentcolor)
}

#####################################################################
#### uncommentSelection
# Remove comment characters from the two ends of the selection.
# If the comment characters are by themselves on a line, remove
# the line altogether.
#
body ::tycho::EditC::uncommentSelection {} {
    if {[set txt [getSelection]] != {}} {

	if {[regexp -indices "^\[ \t\]*\/\\*\n*" $txt leading] && \
		[regexp -indices "\\*\/\[ \t\]*\n*\[ \t\]*\$" $txt trailing]} {
	    
	    set newtxt [string range $txt \
		    [expr [lindex $leading 1]+1] \
		    [expr [lindex $trailing 0]-1]]
	    
	    $itk_component(text) mark set insert \
		    [$itk_component(text) index sel.first]
	    deleteRange sel.first sel.last
	    set start [$itk_component(text) index insert]
	    insertString insert $newtxt
	    $itk_component(text) tag add sel $start insert
	    markModified
	    parseRegion sel.first sel.last
	} {
	    error "Selection is not a comment"
	}
    }
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::EditC::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::EditC::_initializeMenubar $menubar
    }
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### _initializeMenubar
# Initialize the menu bar.  Adds entries specific to this class.
#
body ::tycho::EditC::_initializeMenubar {menubar} {

    # Add menu entries for templates
    $menubar separator specialsep1 special
    $menubar command tclinit special \
	    -label {Add Tcl Initialization} \
            -underline 0 \
            -command "$this addTclInitialization"

    # Set up menu entries for compiling
    $menubar delete evaluate
    $menubar insert command compile close \
	    -label Compile \
            -underline 6 \
            -command "$this evaluate"
    $menubar insert command compileandload close \
	    -label {Compile and Load} \
            -underline 12 \
            -command "$this compileAndLoad"
    $menubar insert separator filesep3 close
}
