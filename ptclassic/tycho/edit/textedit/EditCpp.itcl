# Definition of a C++ context-sensitive editor.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### options
#
# NOTE: Unfortunately, itcl appears to require that all options
# from the base class be repeated here with the new class name.
# Otherwise, they are not recognized.
option add *EditCpp.textWidth 80 widgetDefault
option add *EditCpp.textHeight 40 widgetDefault
option add *EditCpp.parenColor [ptkColor lightskyblue white] widgetDefault
option add *EditCpp.targetColor [ptkColor lightskyblue white] widgetDefault
option add *EditCpp.fillMaxLineLength 70 widgetDefault
option add *EditCpp.textBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *EditCpp.textfont [.tychoFonts defaultFont fixed]
option add *EditCpp.relief raised widgetDefault
option add *EditCpp.selectColor [ptkColor yellow white] widgetDefault
option add *EditCpp.commentColor [ptkColor firebrick black] widgetDefault
option add *EditCpp.fixmeColor [ptkColor red black] widgetDefault
option add *EditCpp.stringColor [ptkColor gray50 black] widgetDefault

# new options

option add *EditCpp.procColor [ptkColor blue black] widgetDefault


#######################################################################
#### EditCpp
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing C++ files. This
# editor automatically indents a line in response to a Tab character,
# and provides a command for indenting a region (the selection). To
# enter a literal Tab, enter the sequence <Control-q><Tab>. This editor
# also colors comments, procedure names, and the strings "FIXME" and
# "NOTE", and provides a method for commenting out a region.
#
class ::tycho::EditCpp {
    inherit ::tycho::EditC

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Comment out the selection using C++ style line-oriented comments.
    method commentSelection {}

    # Open a help window.
    method help {}

    # Tag and color the C++ code in a region.
    method parseNow {start stop}

    # Return a list of tags to use when checking the spelling.
    method spellCheckTags {} {return {comment ccomment}}

    # Remove the leading "//" on lines touched by the selection.
    method uncommentSelection {}
}

###################################################################
#
body ::tycho::EditCpp::constructor {args} {

    eval itk_initialize $args
    
    # Set the fill prefix to be the comment character for C++.
    set fillPrefix "//"
}

#####################################################################
#### commentSelection
# Use the commentSelection method in EditProgram rather than
# the one in EditC.
#
body ::tycho::EditCpp::commentSelection {} {
    EditProgram::commentSelection
}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditCpp::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO editors textedit kernel doc usersGuides \
	    EditCppHelp.html]
}

#####################################################################
#### parseNow
# Tag and color the region of text, indentifying both C and C++ features.
#
body ::tycho::EditCpp::parseNow {start stop} {

    # To get C style comments:
    EditC::parseNow $start $stop

    # To get C++ style comments:
    EditProgram::parseNow $start $stop
}

#####################################################################
#### uncommentSelection
# Use the uncommentSelection method in EditProgram rather than
# the one in EditC.
#
body ::tycho::EditCpp::uncommentSelection {} {
    EditProgram::uncommentSelection
}
