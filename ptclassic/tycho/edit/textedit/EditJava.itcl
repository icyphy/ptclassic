# Definition of a Java context-sensitive editor.
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### options
# Define colors for the Tcl context-sensitive editor. These are done
# as options so that they can be overridden by the user. Other colors
# that work reasonably well are: forestGreen, chocolate3, DarkOrange,
# coral, OrangeRed, DeepPink, maroon, magenta, and DarkOrchid.
#
# NOTE: Unfortunately, itcl appears to require that all options
# from the base class be repeated here with the new class name.
# Otherwise, they are not recognized.
option add *EditJava.textWidth 80 widgetDefault
option add *EditJava.textHeight 40 widgetDefault
option add *EditJava.parenColor [ptkColor lightskyblue white] widgetDefault
option add *EditJava.targetColor [ptkColor lightskyblue white] widgetDefault
option add *EditJava.fillMaxLineLength 70 widgetDefault
option add *EditJava.textBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *EditJava.textfont [.tychoFonts defaultFont fixed]
option add *EditJava.relief raised widgetDefault
option add *EditJava.selectColor [ptkColor yellow white] widgetDefault
option add *EditJava.commentColor [ptkColor firebrick black] widgetDefault
option add *EditJava.fixmeColor [ptkColor red black] widgetDefault
option add *EditJava.stringColor [ptkColor gray50 black] widgetDefault

# new options

option add *EditJava.procColor [ptkColor blue black] widgetDefault


#######################################################################
#### EditJava
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing Java files. Java is a
# machine independent language developed at Sun.  The Java editor
# editor automatically indents a line in response to a Tab character,
# and provides a command for indenting a region (the selection). To
# enter a literal Tab, enter the sequence <Control-q><Tab>. This editor
# also colors comments, procedure names, and the strings "FIXME" and
# "NOTE", and provides a method for commenting out a region. It also
# provides a command for evaluating a region of code.
#
class ::tycho::EditJava {
    inherit ::tycho::EditCpp

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Execute the Java code in the selection (or the entire text widget).
    method evaluate {}

    # Generate and display a doc file from the current buffer
    method gendoc {}
 
    # Open a help window.
    method help {}

    # Color the Java code in a region.
    method parseNow {start stop} {}

    # Tag identifiers in the file that are defined elsewhere.
    method tagLinks {}

    ####################################################################
    ####                    protected methods                       ####

    # Return the regular expression used to identify line-oriented comments.
    protected method commentRegexp {}

    ##########################################################################
    ####                         protected variables                      ####

    # Counter for hyperlinks.
    protected variable hypcount 0
}

###################################################################
#
body ::tycho::EditJava::constructor {args} {

    eval itk_initialize $args
    
    # Set the fill prefix to be the comment character for Java.
    set fillPrefix "//"
    menubar addMenu Special left {} -underline 0

    menubar addMenuItem "Generate doc" Special -underline 0 \
            -command "$this gendoc"

}

#####################################################################
#### evaluate
# Evaluate the contents of the text window as Java commands
# in the global context.  Display and return the result of the evaluation.
#
body ::tycho::EditJava::evaluate {} {
    set code [getSelection]
    if { $code == {} } {
	set code [get 1.0 end]
	set type "File"
    } else {
	set type "String"
    }

    set ret [uplevel #0 $code]
    if {$ret != {}} {
	puts $ret
	putStatus "$type evaluated"
	::tycho::inform "$type evaluation returned:\n$ret"
	putStatus ""
    } {
        putStatus "$type evaluated (empty result)"
    }
    focusin
    return $ret
}

###################################################################
#### gendoc
# Generate and display a doc file.
# If the doc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
# NOTE: This is a Unix-specific implementation, since "exec" is used
# to invoke "ptlang".
#
body ::tycho::EditJava::gendoc {} {
    return [::tycho::EditProgram::gendoc {set docfile $root.htm} \
            { ::tycho::rm -f "$root.h" "$root.cc" "$root.htm" "$root.t"; \
            exec javadoc $tail}] 

}

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditJava::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/editors/textedit/doc/usersGuides/EditJavaHelp.html
}

#####################################################################
#### parseNow
# Invoke the base class parser to color comments and the strings
# "NOTE" and "FIXME".  Then tag and color procedure names.
#
body ::tycho::EditJava::parseNow {start stop} {

    EditProgram::parseNow $start $stop
    set text $itk_component(text)

    # Remove tags first, if necessary
    $text tag remove procname $start $stop

    # Search for procedure definitions.
    set ind $start
    set endc $stop
    set spaces "\[ \t\]"
    set procregexp "^$spaces*(public$spaces+|protected$spaces+|private$spaces+)?proc$spaces+(\[^ \t\]*)"
    while {[set ind [$text search -count len -regexp $procregexp \
	    $ind $stop]] != {}} {

	set endc [$text index "$ind + $len chars"]
	set line [$text get $ind $endc]
	
	# Procedures
	if [regexp -indices $procregexp $line match access procName] {
	    # Procedure definitions. Tag the procedure name.
	    # Note that we support Java qualifiers here.
	    # Should they be colored too?
	    set first [lindex $procName 0]
	    set last [lindex $procName 1]
	    $text tag add procname "$ind + $first chars" \
		    "$ind + $last chars +1 char"
	}
        set ind $endc
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }
    
    # Set the visual characteristics of the tagged text
    $text tag configure procname -foreground \
	    [option get $itk_component(hull) procColor EditJava]
}

#### tagLinks
# This method tags identifiers in the file that are defined elsewhere
# and are registered for auto-loading in the global array "auto_index".
# A binding is attached to the tag to perform a hyper jump to the file
# given in the auto_index array, annotated with the name of the identifier.
#
body ::tycho::EditJava::tagLinks {} {

    global ::auto_index
    
    # Construct regular expressions for all identifiers in the
    # auto_index array. Delimiters that might be found before or after
    # a classname invocation or procedure call.  Some care is required
    # here because there may be many items in the array, and the size
    # of a regular expression is limited.  Thus, we construct a set
    # of regular expressions.  The size is limited to 100 entries.

    set count 0
    set delim "\[\] \t\[\(\)\{\}\:\;\]"
    foreach entry [array names auto_index] {
	if {$count >= 100} {
	    set count 0
	    append ids "\)\(\$\|$delim\)"
	    lappend regexps $ids
	}
	if {$count == 0} {
	    set ids "\(\^\|$delim\)\($entry"
	} {
	    append ids "|$entry"
	}
	incr count
    }
    append ids "\)\(\$\|$delim\)"
    lappend regexps $ids

    set text $itk_component(text)

    # The following finds the line number of the line beyond the end
    set end [$text index end]
    regexp {[0-9]+} $end endline
    
    # We now step through each line, one at a time, for each regexp.
    foreach ids $regexps {

	set next 1.0
	while {[set next [$text search -regexp $ids $next end]] \
		!= {}} {
	    set line [$text get $next "$next lineend"]
	    if [regexp -indices $ids $line match p1 key p2] {
		set start "$next +[lindex $key 0] char"
		set stop "$next +[lindex $key 1] char +1 char"
		$text tag add hyperlink$hypcount $start $stop
		$text tag configure hyperlink$hypcount \
			-foreground \
			[option get $itk_component(hull) procColor EditJava]
		$text tag configure hyperlink$hypcount \
			-underline 1
		
		set word [$text get $start $stop]
		
		# Remove the "source " from the auto_index word
		set filename [string range $auto_index($word) 7 end]
		
		# FIXME: Despite the "break" here, some other binding kicks
		# in after this one, causing text to be selected.  Tk bug?
		$text tag bind hyperlink$hypcount \
			<Double-Button-1> \
			"$this hyperJump $filename $word; break"
		
		incr hypcount
		set next [$text index \
			"$next +[string length $word] char"]
	    } else {
		set next [$text "$next lineend"]
	    }
	    # The following appears to be needed to prevent infinite loops.
	    if [$text compare $next >= end] {break}
	}
    }
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### commentRegexp
# Return the regular expression used to identify line-oriented comments.
#
body ::tycho::EditJava::commentRegexp {} {
    return "(^|;)\[ \t\]*#.*\$"; #line comment
}
