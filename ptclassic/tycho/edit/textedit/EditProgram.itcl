# Definition of an editor for editing source code in various languages.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditProgram
# This class defines a window that provides an emacs-like editor
# specialized for editing program files. It colorizes the code,
# identifying comments, automatically indents the code, and fills
# blocks of comments. Derived classes are specialized to particular
# programming languages. This class provides a common infrastructure.
# In particular, it provides a common mechanism for handling
# line-oriented comments, and indentation driven by brackets, braces,
# and parentheses. It also tags and colors colors comments and the
# strings "FIXME" and "NOTE", provides infrastructure for tagging and
# coloring keywords, and provides a method for commenting out a region.
#
class ::tycho::EditProgram {
    inherit ::tycho::Edit

    ###################################################################
    ####                     public methods                        ####

    constructor {args} {}
    destructor {}

    # Open a help window.  This should be redefined in derived classes.
    method help {}

    ###################################################################
    ####                  protected methods                        ####

    # Return the name of the type of text widget to use (EditProgramText).
    protected method textWidget {} {return ::tycho::EditProgramText}
}

###################################################################
#
body ::tycho::EditProgram::constructor {args} {
    
    eval itk_initialize $args

    # Add to the format menu commands to comment and uncomment
    # the regions defined by the selection.
    $itk_component(formatMenu) add separator
    
    $itk_component(formatMenu) add command \
	    -label "Comment Out Region" \
	    -underline 0 \
	    -command "$this component text commentSelection"
    
    $itk_component(formatMenu) add command \
	    -label "Uncomment Region" \
	    -underline 0 \
	    -command "$this component text uncommentSelection"
    
    # Add to the format menu a command to recolorize.
    $itk_component(formatMenu) add separator
    
    $itk_component(formatMenu) add command \
	    -label "Recolorize" \
	    -accelerator "S-C-l" \
	    -underline 0 \
	    -command "$this component text parseRegion 1.0 end"
    
    $itk_component(formatMenu) add command \
	    -label "Indent Line" \
	    -accelerator "Tab" \
	    -underline 0 \
	    -command "$this component text indentLine"

    $itk_component(formatMenu) add command \
	    -label "Indent Region" \
	    -accelerator "Esc C-\\" \
	    -underline 1 \
	    -command "$this component text busy indentSelection"
    
    $itk_component(formatMenu) add command \
	    -label "Tab" \
	    -accelerator "C-q Tab" \
	    -underline 0 \
	    -command "$this component text insertString insert {\t}"

    # Read contents from the specified file, unless the name is "NoName".
    # This needs to be repeated from the baseclass because the -file
    # option will not have been processed by the time the base class
    # constructor is executed.
    if {$file != {NoName}} {
	$itk_component(text) initFile $file
	markUnmodified
    }
}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditProgram::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/editors/textedit/doc/usersGuides/EditProgramHelp.html
}
