# Definition of a Tcl context-sensitive editor.
#
# @Author: Edward A. Lee
# @Contributor: Christopher Hylands
#
# @Version: @(#)EditTcl.itcl	1.35	01/27/99
#
# @Copyright (c) 1995-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### EditTcl
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing Tcl files. Tcl is an
# interpreted language developed by John Ousterhout of Berkeley. This
# editor automatically indents a line in response to a Tab character,
# and provides a command for indenting a region (the selection). To
# enter a literal Tab, enter the sequence <Control-q><Tab>. This editor
# also colors comments, procedure names, and the strings "FIXME" and
# "NOTE", and provides a method for commenting out a region. It also
# provides a command for evaluating a region of code.
#
class ::tycho::EditTcl {
    inherit ::tycho::EditProgram

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Execute the Tcl code in the selection (or the entire text widget).
    method evaluate {}

    # Execute the Tcl code in the construct surrounding the insertion cursor
    method evaluateConstruct {}

    # Open a help window.
    method help {}

    # Color the Tcl code in a region.
    method parseNow {start stop} {}

    # Select the proc that the insertion cursor is inside of.
    method selectConstruct {}

    # Tag identifiers in the file that are defined elsewhere.
    method tagLinks {}

    ####################################################################
    ####                    protected methods                       ####

    # Return the regular expression used to identify line-oriented comments.
    protected method commentRegexp {}

    # Configure the popup menu depending on the current context
    protected method configureContextMenu {}

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ##########################################################################
    ####                         protected variables                      ####

    # Counter for hyperlinks.
    protected variable hypcount 0

    ##########################################################################
    ####                         protected commons                        ####

    # Regular expression to select a construct
    protected common selectConstructRegexp {^proc}
}

###################################################################
#
body ::tycho::EditTcl::constructor {args} {

    eval itk_initialize $args
    
    # Set the fill prefix to be the comment character for Tcl.
    set fillPrefix "#"

    bind $itk_component(text) <<EvaluateConstruct>> \
            "$this evaluateConstruct"
}

#####################################################################
#### evaluate
# Evaluate the contents of the text window as Tcl commands
# in the global context.  Display and return the result of the evaluation.
#
body ::tycho::EditTcl::evaluate {} {
    set code [getSelection]
    if { $code == {} } {
	set code [get 1.0 end]
	set type "File"
    } else {
	set type "String"
    }

    set ret [uplevel #0 $code]
    if {$ret != {}} {
	puts $ret
	putStatus "$type evaluated"
	safeEval ::tycho::inform "$type evaluation returned:\n$ret"
	putStatus ""
    } {
        putStatus "$type evaluated (empty result)"
    }
    focusin
    return $ret
}

#####################################################################
#### evaluateConstruct
# Evaluate the entire construct that the point is within.  In Tcl
# this is a proc.  As with evaluate, the construct is evaluated
# in the global context.  Display and return the result of the evaluation.
#
body ::tycho::EditTcl::evaluateConstruct {} {
    selectConstruct
    evaluate
}

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditTcl::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
        [file join $TYCHO edit textedit doc usersGuides \
	    EditTclHelp.html] html
}

#####################################################################
#### parseNow
# Invoke the base class parser to color comments and the strings
# "NOTE" and "FIXME".  Then tag and color procedure names.
#
body ::tycho::EditTcl::parseNow {start stop} {

    chain $start $stop
    set text $itk_component(text)

    # Remove tags first, if necessary
    $text tag remove procname $start $stop

    # Search for procedure definitions.
    set ind $start
    set endc $stop
    set spaces "\[ \t\]"
    set procregexp "^$spaces*(public$spaces+|protected$spaces+|private$spaces+)?proc$spaces+(\[^ \t\]*)"
    while {[set ind [$text search -count len -regexp $procregexp \
	    $ind $stop]] != {}} {

	set endc [$text index "$ind + $len chars"]
	set line [$text get $ind $endc]
	
	# Procedures
	if [regexp -indices $procregexp $line match access procName] {
	    # Procedure definitions. Tag the procedure name.
	    # Note that we support Itcl qualifiers here.
	    # Should they be colored too?
	    set first [lindex $procName 0]
	    set last [lindex $procName 1]
	    $text tag add procname "$ind + $first chars" \
		    "$ind + $last chars +1 char"
	}
        set ind $endc
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }
}

#########################################################################
#### selectConstruct
# Select the proc that the insertion cursor is inside of.
# This method is useful for selecting a proc to be evaluated
# The selectConstructRegexp common variable can be modified in the
# child classes to cause this method to highlight other constructs.
#
# FIXME: This is a little evil, but what we do is search backwards from
# the current point for a line that begins with 'proc' with no
# whitespace in front of proc, and then search forward for a line
# that begins with a curly bracket that has no white space in front.
# The real solution would be to have a function that counts parentheses
# and also gets the header
#
body ::tycho::EditTcl::selectConstruct {} {
    set idx [$itk_component(text) index insert]
    set start [findOne 1 1 1 1 {^(proc|body|configbody)} $idx 0.0 {}]
    if {$start == ""} {
	set start 0.0
    }
    set stop [findOne 1 0 1 1 {^\}} $idx end {} ]
    if {$stop == ""} {
	set stop end
    }
    selectRange [lindex $start 0] \
            [$itk_component(text) index "[lindex $stop 0] +1 char"]
    # Move the insertion cursor back to where we started, the selectRange
    # command moved it on us.
    seeFragment [list range $idx $idx]
}

#########################################################################
#### tagLinks
# This method tags identifiers in the file that are defined elsewhere
# and are registered for auto-loading in the global array "auto_index".
# A binding is attached to the tag to perform a hyper jump to the file
# given in the auto_index array, annotated with the name of the identifier.
#
body ::tycho::EditTcl::tagLinks {} {

    global ::auto_index
    
    # Construct regular expressions for all identifiers in the
    # auto_index array. Delimiters that might be found before or after
    # a classname invocation or procedure call.  Some care is required
    # here because there may be many items in the array, and the size
    # of a regular expression is limited.  Thus, we construct a set
    # of regular expressions.  The size is limited to 100 entries.

    set count 0
    set delim "\[\] \t\[\(\)\{\}\:\;\]"
    foreach entry [array names auto_index] {
	if {$count >= 100} {
	    set count 0
	    append ids "\)\(\$\|$delim\)"
	    lappend regexps $ids
	}
	if {$count == 0} {
	    set ids "\(\^\|$delim\)\($entry"
	} {
	    append ids "|$entry"
	}
	incr count
    }
    append ids "\)\(\$\|$delim\)"
    lappend regexps $ids

    set text $itk_component(text)

    # The following finds the line number of the line beyond the end
    set end [$text index end]
    regexp {[0-9]+} $end endline
    
    # We now step through each line, one at a time, for each regexp.
    foreach ids $regexps {

	set next 1.0
	while {[set next [$text search -regexp $ids $next end]] \
		!= {}} {
	    set line [$text get $next "$next lineend"]
	    if [regexp -indices $ids $line match p1 key p2] {
		set start "$next +[lindex $key 0] char"
		set stop "$next +[lindex $key 1] char +1 char"
		$text tag add hyperlink$hypcount $start $stop
		$text tag configure hyperlink$hypcount \
			-foreground [stylesheet get editcolors procColor]
		$text tag configure hyperlink$hypcount \
			-underline 1
		
		set word [$text get $start $stop]
		
		# Remove the "source " from the auto_index word
		set filename [string range $auto_index($word) 7 end]
		
		# FIXME: Despite the "break" here, some other binding kicks
		# in after this one, causing text to be selected.  Tk bug?
		$text tag bind hyperlink$hypcount \
			<Double-Button-1> \
			"$this hyperJump $filename $word; break"
		
		incr hypcount
		set next [$text index \
			"$next +[string length $word] char"]
	    } else {
		set next [$text "$next lineend"]
	    }
	    # The following appears to be needed to prevent infinite loops.
	    if [$text compare $next >= end] {break}
	}
    }
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### commentRegexp
# Return the regular expression used to identify line-oriented comments.
#
body ::tycho::EditTcl::commentRegexp {} {
    return "(^|;)\[ \t\]*#.*\$"; #line comment
}

#####################################################################
#### configureContextMenu
# Configure the popup menu according to context. For Tcl editors, this
# looks for an html file and opens that if it finds one. In addition,
# if there is a selection, it offer to evaluate it.
#
body ::tycho::EditTcl::configureContextMenu {} {
    chain

    if { [$itk_component(text) tag ranges sel] != "" } {
	contextmenu command evaluate \
                -label "Evaluate selection" \
                -command "$this evaluate"
    }

    # Add links to HTML and Idoc files
    # FIXME: There must be a better way of doing this
    if { $itk_option(-file) != "" && $itk_option(-file) != "NoName" } {
	set base [file join [file dirname $itk_option(-file)] doc codeDoc]
        set base [file join \
                $base \
                [file rootname [file tail $itk_option(-file)]]]

        # HTML docs
        set link $base.html
	if { [file exists $link] } {
	    contextmenu command html \
                    -label "Open HTML Documentation" \
		    -command "::tycho::File::openContext $link"
	}
        # Idocs
        set link $base.idoc
	if { [file exists $link] } {
	    contextmenu command idocs \
                    -label "Open Itcl Documentation" \
		    -command "::tycho::File::openContext $link"
	}
    }
}

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::EditTcl::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        $menubar insert command selectbody unselect \
		-label "Select Body"  \
                -underline 7 \
                -command "$this selectConstruct"
        
        $menubar insert command evaluatebody reload \
		-label "Evaluate Body" \
                -underline 9 \
                -accelerator [::tycho::Shortcuts::getLabel EvaluateConstruct] \
                -command "$this evaluateConstruct"
    }
}
