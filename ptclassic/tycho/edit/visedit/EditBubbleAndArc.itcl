# Definition of a basic graphical entry tool for editing bubble and arc graph.
#
# @Author: Wan-Teh Chang
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditBubbleAndArc
# This class define a basic graphical editor for editing bubble and arc graph,
# which can be used as a base class.
#
# FIXME: THIS FILE SHOULD NOT BE USED AS A STYLE GUIDE.
# Comments by Wan-teh Chang (wtc@eecs.berkeley.edu) on 7 Feb. 1996:
# This finite state machine editor was originally written in Tcl/Tk.
# It was later ported to itcl-1.5 and the old Tycho class hierarchy.
# Last night (6 Feb. 1996) I finished porting it to itcl-2.0 and the
# new Tycho class hierarchy.
#
# I did my best to conform to the programming style of Tycho.  However,
# because the file is very big (1570 lines), and I was shooting for a
# quick port, currently it still has the following problems that need
# to fixed:
# - EditBubbleAndArc should be derived from Graphics.  It is now derived from 
#   File.
#
class ::tycho::EditBubbleAndArc {
    inherit ::tycho::File

    ##########################################################################
    ####                      constructor & destructor                    ####
    constructor {args} {}
    destructor {}

    ################################################################*#########
    ####                         public variables                         ####

    #### create_item array
    # This is needed for the radio button global variables
    public common create_item


    ##########################################################################
    ####                         public methods                           ####

    ##################################################################
    # The following are methods used by the constructor and File
    # menu commands.

    #### loadFile
    method loadFile {loadfile}

    #### save
    method save {{name ""}}

    #### doSave
    # Save the contents of the canvas widget to "file".
    # This method is invoked by the "save" method.
    method doSave {} {
	error "Sorry, doSave method should be redefined in derived class."
    }

    #### reload
    method reload {}

    #### confirmedReload
    # confirm to reload previously saved file contents.
    # This method is invoked by the "reload" method.
    method confirmedReload {} {
	error "Sorry, confirmedReload method should be redefined in derived class."
    }


    #################################################################
    # The following methods implement the commands in the Edit menu.

    #### editLabel
    # Invoked by the Edit Label command in the Edit menu.
    method editLabel {tag}

    #### editNodeLabelDone
    # This method is only used by the "editLabel" method.
    method editNodeLabelDone {node label}

    #### editArcLabelDone
    # This method is only used by the "editLabel" method.
    method editArcLabelDone {arc label}

    #### deleteItem
    # Invoked by the Delete command in the Edit menu.
    method deleteItem {item}

    #### deleteNode
    # This method is only used by the "deleteItem" method.
    method deleteNode {node}

    #### deleteArc
    # This method is only used by the "deleteItem" method.
    method deleteArc {arc}

    #### smoothToggleArc
    method smoothToggleArc {item}

    #### addPoint
    method addPoint {}

    #### deletePoint
    method deletePoint {}

    ######################################################################
    # The following are utility functions.

    method lineMidpoint {arc}
    method snap_to_oval {oval x y} 
    method find_close_node {x y} 
    method adjustArcLabel {arc} 
    method unselect {} 
    method chooseCursor {x y} 
    method chooseCursorOverNode {x y} 
    method chooseCursorOverArc {x y} 

    ######################################################################
    # Item creation commands

    method stateButtonCmd {} 
    method arcButtonCmd {} 

    ######################################################################
    # The following methods are handlers for events on the "node" tag.
    method bind_node_B1 {x y}

    ######################################################################
    # The following methods are handlers for events on the "arc" tag.
    method bind_arc_B1 {x y} 

    ######################################################################
    # The following methods are handlers for events on the "selected" tag.
    method bind_selected_Enter {x y} 
    method bind_selected_Leave {} 
    method bind_selected_B1_Motion {x y} 
    method bind_selected_node_B1_Motion {x y} 

    #### resizeNode
    # Only used by bind_selected_node_B1_Motion
    method resizeNode {tag x1 y1 x2 y2} 

    #### oval_slope
    # Only used by resizeNode
    method oval_slope {oval m xneg}

    method bind_selected_BR1 {x y} 

    ##########################################################################
    # The following methods are handlers for events on the "selectedpoint" tag.
    method bind_selectedpoint_B1 {x y}
    method bind_selectedpoint_B1_Motion {x y} 

    ########################################################################
    # The following methods are handlers for events on the "selarclabel" tag.
    method bind_selarclabel_B1 {x y} 
    method bind_selarclabel_B1_Motion {x y} 
    method bind_selarclabel_BR1 {} 

    ###############################################################
    # The following methods are handlers for canvas-wide events.
    method bind_B1 {x y} 

    # Used by bind_B1 
    method mkNode {x y}
    method mkArc {x y}

    method bind_B1_Motion {x y} 
    method bind_BR1 {x y} 
    method bind_Motion {x y} 

    #### setUpCanvasBindings
    # Establish bindings for the canvas.
    method setUpCanvasBindings {} 


    ##########################################################################
    ####                         protected variables                      ####

    ###################################################################
    # Most the methods of this class get the information on the graph
    # from the canvas widget and the class members below.

    # Pathname of the canvas widget
    protected variable c

    # Array that stores info about the nodes/states
    protected variable nodeInfo

    # Array that stores info about the edges/transitions
    protected variable edgeInfo

    protected variable dblselpt_index
    protected variable point_to_draw
    protected variable oldx
    protected variable oldy
    protected variable node_id
    protected variable node_create_state
    protected variable arc_coords
    protected variable arc_id
    protected variable drag_action
    protected variable button1_down 0
    protected variable over_selected 0

}

#########################################################################
#########################################################################
####               constructor & destructor                          ####

body ::tycho::EditBubbleAndArc::constructor {args} {

    # Add an Edit menu
    itk_component add editMenuButton {
	menubutton $itk_component(menuFrame).edit \
		-text Edit \
		-underline 0 \
		-menu $itk_component(menuFrame).edit.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(editMenuButton) -side left \
	    -before $itk_component(windowMenuButton)
    
    # Edit menu contents
    itk_component add editMenu {
	menu $itk_component(editMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    $itk_component(editMenu) add command \
	    -label "Edit Label" \
	    -command "$this editLabel selected"
    
    $itk_component(editMenu) add command \
	    -label Delete \
	    -command "$this deleteItem selected"

    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label "Smooth Toggle" \
	    -command "$this smoothToggleArc selected"

    $itk_component(editMenu) add command \
	    -label "Add Point Downstream" \
	    -command "$this addPoint"

    $itk_component(editMenu) add command \
	    -label "Delete Point" \
	    -command "$this deletePoint"

    
    ############################################################
    # Create the main drawing area.  It contains a canvas
    # widget, two scroll bars to scroll the canvas, and
    # radiobuttons for creating items in the canvas.
    frame $itk_component(childsite).main

    frame $itk_component(childsite).main.draw
    frame $itk_component(childsite).main.draw.top
    canvas $itk_component(childsite).main.draw.top.c \
	    -width 15c -height 15c \
	    -scrollregion {0 0 60c 60c} \
	    -xscrollcommand "$itk_component(childsite).main.draw.bottom.xscroll set" \
	    -yscrollcommand "$itk_component(childsite).main.draw.top.yscroll set"

    # Save the pathname of the canvas widget in class member 'c'.
    set c $itk_component(childsite).main.draw.top.c

    # Set up bindings for the canvas.
    $this setUpCanvasBindings

    # Create the scroll bar to scroll the canvas vertically.
    scrollbar $itk_component(childsite).main.draw.top.yscroll \
	    -command "$itk_component(childsite).main.draw.top.c yview"
    set width [$itk_component(childsite).main.draw.top.yscroll cget -width]
    pack $itk_component(childsite).main.draw.top.c $itk_component(childsite).main.draw.top.yscroll \
	    -side left -fill y
    
    # Create the scroll bar to scroll the canvas horizontally.
    # Note that a "corner" frame is used to take up the space
    # at the lower right corner.
    frame $itk_component(childsite).main.draw.bottom
    scrollbar $itk_component(childsite).main.draw.bottom.xscroll \
	    -orient horizontal \
	    -command "$itk_component(childsite).main.draw.top.c xview"
    set height [$itk_component(childsite).main.draw.bottom.xscroll cget -width]
    frame $itk_component(childsite).main.draw.bottom.corner \
	    -height $height \
	    -width $width
    pack $itk_component(childsite).main.draw.bottom.corner -side right
    pack $itk_component(childsite).main.draw.bottom.xscroll -side left -expand 1 -fill x

    pack $itk_component(childsite).main.draw.top $itk_component(childsite).main.draw.bottom -fill x

    # Create the radio buttons for creating items in the canvas.
    frame $itk_component(childsite).main.buttons -relief raised -bd 2
    label $itk_component(childsite).main.buttons.label -text "Item to\ncreate:"
    radiobutton $itk_component(childsite).main.buttons.state \
	    -text State \
	    -variable ::tycho::EditBubbleAndArc::create_item($this) \
	    -value state \
	    -command "$this stateButtonCmd" \
	    -anchor w
    radiobutton $itk_component(childsite).main.buttons.arc \
	    -text Arc \
	    -variable ::tycho::EditBubbleAndArc::create_item($this) \
	    -value arc \
	    -command "$this arcButtonCmd" \
	    -anchor w

    # Initialize the global variable used by this object.
    set create_item($this) {}

    pack $itk_component(childsite).main.buttons.label $itk_component(childsite).main.buttons.state \
	    $itk_component(childsite).main.buttons.arc \
	    -side top -fill x
    pack $itk_component(childsite).main.draw $itk_component(childsite).main.buttons -side left -fill y

    pack $itk_component(childsite).main

    # The following initialize options and then invoke any
    # configuration options, assuming there are options specified.
    eval itk_initialize $args

    # Load the startup file
    $this loadFile $file
    markUnmodified

}

body ::tycho::EditBubbleAndArc::destructor {} {
    # Delete the global variables owned by this object
#    unset create_item($this)
}

#########################################################################
#########################################################################
####                          public methods                         ####

###################################################################
#### loadFile
# Load the specified file into the canvas widget.
# This method is used by the constructor and the "reload"
# method.
#
body ::tycho::EditBubbleAndArc::loadFile {loadfile} {
    # Read the contents from the specified file, unless the name is
    # "NoName".
    if {$loadfile != {NoName} && $loadfile != {}} {
	if [file exists $loadfile] {
	    if [file readable $loadfile] {
		# Source the graph file
		::source $loadfile
	    }
	}
    }
}

##################################################################
#### save
# Invoked by the Save command in the File menu.
# The code of this method below is very generic. The derived classes
# should provide definitions of the "doSave" method, which depends
# on the specific kinds of editors.
#
body ::tycho::EditBubbleAndArc::save {{name ""}} {
    # If the argument is present, this is probably a request to save
    # a backup file, so we should not delete backup files.
    if {$name != ""} {
	removeBackupFiles
	set filename $name
    } {
	set filename $file
    }
    
    if {$filename == "" || $filename == {NoName}} {
	return [saveAs]
    } {
	if [catch {doSave} errmsg] {
	    error "Can't save to [file tail $file]:\n$errmsg"
	    return 0
	} else {
	    markUnmodified
	    return 1
	}
    }
}

##############################################################
#### reload
# Invoked by the Reload command in the File menu.  Reload the
# previously saved file contents after obtaining confirmation.
# This command does nothing if either the graph is not modified
# or no file has been specified.
# The code below is very generic. The derived classes should 
# override the confirmedReload method.
#
body ::tycho::EditBubbleAndArc::reload {} {
    if {$modified} {
	if {![askuser "This file has been modified. Reload anyway?"]} {
	    return
	}
    }
    $this confirmedReload
}

#################################################################
#### editLabel
# Invoked by the Edit Label command in the Edit menu.
# Pop up a dialog box with an entry for editing the label of
# the selected node or arc.
#
body ::tycho::EditBubbleAndArc::editLabel {tag} {
    set item [$c find withtag $tag]
    if {$item == {}} return
    
    if {[lsearch -exact [$c gettags $item] node] >= 0} {
	# item is a node
	set onlyquery [list onlytag {Label:} \
		[$c itemcget $nodeInfo($item,label) -text]]
	EntryQuery .query \
		-queries [list $onlyquery] \
		-okcommand "$this editNodeLabelDone $item \
		\[.query get onlytag\]"
	.query centerOnScreen

	# modal interaction
	grab set .query
    } elseif {[lsearch -exact [$c gettags $item] arc] >= 0} {
	# item is an arc
	set onlyquery [list onlytag {Label:} \
		[$c itemcget $edgeInfo($item,label) -text]]
	EntryQuery .query \
		-queries [list $onlyquery] \
		-okcommand "$this editArcLabelDone $item \
		\[.query get onlytag\]"
	.query centerOnScreen

	# modal interaction
	grab set .query
    }
}
    
#################################################################
#### editNodeLabelDone
# This method is only used by the "editLabel" method.
# Invoked when the user pushes the OK button in the Edit Label
# dialog box for a node.
#
body ::tycho::EditBubbleAndArc::editNodeLabelDone {node label} {
    if {[$c itemcget $nodeInfo($node,label) -text] != $label} {
	$c itemconfigure $nodeInfo($node,label) -text $label
	$this markModified
    }
}

#################################################################
#### editArcLabelDone
# This method is only used by the "editLabel" method.
# Invoked when the user pushes the OK button in the Edit Label
# dialog box for an arc.
#
body ::tycho::EditBubbleAndArc::editArcLabelDone {arc label} {
    if {[$c itemcget $edgeInfo($arc,label) -text] != $label} {
	$c itemconfigure $edgeInfo($arc,label) -text $label
	$this markModified
    }
}

###################################################################
#### deleteItem
# Invoked by the Delete command in the Edit menu.
# This method deletes the specified item from the canvas
# along with its corresponding entries in the data structures.
# It invokes the "deleteNode" or "deleteArc" methods below
# depending on whether the item is a node or an arc.
#
body ::tycho::EditBubbleAndArc::deleteItem {item} {
    # The indices in the nodeInfo and edgeInfo arrays
    # are item IDs.
    set id [$c find withtag $item]
    if {[lsearch -exact [$c gettags $id] node] >= 0} {
	# id is a node.
	$this deleteNode $id
    } elseif {[lsearch -exact [$c gettags $id] arc] >= 0} {
	# id is an arc.
	$this deleteArc $id
    }
}

###################################################################
#### deleteNode
# Delete the specified node and its incident edges from the canvas
# along with the relevant entries in the data structures.  This
# method is only used by the "deleteItem" method.
#
body ::tycho::EditBubbleAndArc::deleteNode {node} {
    # Perhaps should issue warning that the incident edges will
    # be deleted too.

    # Delete the incoming edges.
    foreach edge $nodeInfo($node,inEdges) {
	unset edgeInfo($edge,outSlope) edgeInfo($edge,outXneg) \
		edgeInfo($edge,inSlope) edgeInfo($edge,inXneg)
	set src $edgeInfo($edge,src)
	set index [lsearch -exact $nodeInfo($src,outEdges) $edge]
	set nodeInfo($src,outEdges) [lreplace $nodeInfo($src,outEdges) \
		$index $index]
	unset edgeInfo($edge,src) edgeInfo($edge,dest)
	# Delete the points
	eval $c delete $edgeInfo($edge,points)
	unset edgeInfo($edge,points)
	# Delete the arc label
	$c delete $edgeInfo($edge,label)
	unset edgeInfo($edge,label) edgeInfo($edge,label_deltax) \
		edgeInfo($edge,label_deltay)
	$c delete $edge
    }
    unset nodeInfo($node,inEdges)
    
    # Delete the outgoing edges.
    foreach edge $nodeInfo($node,outEdges) {
	unset edgeInfo($edge,outSlope) edgeInfo($edge,outXneg) \
		edgeInfo($edge,inSlope) edgeInfo($edge,inXneg)
	set dest $edgeInfo($edge,dest)
	set index [lsearch -exact $nodeInfo($dest,inEdges) $edge]
	set nodeInfo($dest,inEdges) [lreplace $nodeInfo($dest,inEdges) \
		$index $index]
	unset edgeInfo($edge,src) edgeInfo($edge,dest)
	# Delete the points.
	eval $c delete $edgeInfo($edge,points)
	unset edgeInfo($edge,points)
	# Delete the arc label.
	$c delete $edgeInfo($edge,label)
	unset edgeInfo($edge,label) edgeInfo($edge,label_deltax) \
		edgeInfo($edge,label_deltay)
	$c delete $edge
    }
    unset nodeInfo($node,outEdges)
    
    # Finally, delete the node itself.
    $c delete $nodeInfo($node,label)
    unset nodeInfo($node,label)
    $c delete $node
    $this markModified
}

###################################################################
#### deleteArc
# Delete the specified arc from the canvas along with the
# relevant entries in the data structures.  This method is
# only used by the "deleteItem" method.
#
body ::tycho::EditBubbleAndArc::deleteArc {arc} {
    unset edgeInfo($arc,outSlope) edgeInfo($arc,outXneg) \
	    edgeInfo($arc,inSlope) edgeInfo($arc,inXneg)
    set src $edgeInfo($arc,src)
    set index [lsearch -exact $nodeInfo($src,outEdges) $arc]
    set nodeInfo($src,outEdges) [lreplace $nodeInfo($src,outEdges) \
	    $index $index]
    set dest $edgeInfo($arc,dest)
    set index [lsearch -exact $nodeInfo($dest,inEdges) $arc]
    set nodeInfo($dest,inEdges) [lreplace $nodeInfo($dest,inEdges) \
	    $index $index]
    # Delete the points.
    eval $c delete $edgeInfo($arc,points)
    unset edgeInfo($arc,src) edgeInfo($arc,dest) edgeInfo($arc,points)
    # Delete the arc label.
    $c delete $edgeInfo($arc,label)
    unset edgeInfo($arc,label) edgeInfo($arc,label_deltax) \
            edgeInfo($arc,label_deltay)
    $c delete $arc
    $this markModified
}

####################################################################
#### smoothToggleArc
# Toggle the mode of an arc between smooth (Bezier curve) or zigzag
#
body ::tycho::EditBubbleAndArc::smoothToggleArc {item} {
    if {[lsearch -exact [$c gettags $item] arc] >= 0} {
	# item is an arc
	# arc can only be made smooth when it has more than two points
	if {[llength [$c coords $item]] > 4} {
	    set s [$c itemcget $item -smooth]
	    # toggle it
	    $c itemconfigure $item -smooth [expr !$s]
	    $this markModified
	}
    }
}

#######################################################################
#### addPoint
# Add a new point downstream (towards the arrow) to the doubly-selected
# point.  The new point will be the midpoint between the doubly-selected
# point and its downstream neighbor.
#
body ::tycho::EditBubbleAndArc::addPoint {} {
    # return immediately if no doubly-selected point
    if {[$c find withtag dblselpt] == {}} return
    
    # the index of the doubly-selected point is recorded in the
    # member dblselpt_index.  Get the coords of the edge.
    set coords [$c coords selected]
    if {$dblselpt_index == [expr [llength $coords]/2 - 1]} {
	inform "The doubly-selected point is a terminal\
		endpoint.\nIt doesn't have downstream."
    } else {
	set edge [$c find withtag selected]
	set x1 [lindex $coords [expr 2*$dblselpt_index]]
	set y1 [lindex $coords [expr 2*$dblselpt_index+1]]
	set x2 [lindex $coords [expr 2*$dblselpt_index+2]]
	set y2 [lindex $coords [expr 2*$dblselpt_index+3]]
	# x,y coords of the midpoint
	set x [expr ($x1+$x2)*0.5]
	set y [expr ($y1+$y2)*0.5]
	set point [$c create rectangle \
	        [expr $x-2] [expr $y-2] [expr $x+2] [expr $y+2] \
	        -fill red -outline red]
	$c addtag selectedpoint withtag $point
	eval $c coords $edge [linsert $coords \
		[expr 2*$dblselpt_index+2] $x $y]
	# move the arc label
	$this adjustArcLabel $edge
	# update the edgeInfo array
	set edgeInfo($edge,points) [linsert $edgeInfo($edge,points) \
		[expr $dblselpt_index+1] $point]
	# since the new point is added to the downstream of the doubly-
	# selected point, the index of the doubly-selected point stays 
	# the same.
	$this markModified
    }
}

####################################################################
#### deletePoint
# Delete the doubly-selected point on an arc.
#
body ::tycho::EditBubbleAndArc::deletePoint {} {
    # return immediately if no doubly-selected point to delete
    if {[$c find withtag dblselpt] == {}} return
    
    # the index of the doubly-selected point is recorded in the
    # member dblselpt_index.  Get the coords of the edge.
    set coords [$c coords selected]
    if {$dblselpt_index == 0 || \
	    $dblselpt_index == [expr [llength $coords]/2 - 1]} {
	# Can't delete endpoint
	inform "Can't delete an endpoint"
    } else {
	# an internal point
	# delete it from canvas
	$c delete dblselpt
	# update the edge coords
	set edge [$c find withtag selected]
	eval $c coords $edge [lreplace $coords \
	        [expr 2*$dblselpt_index] [expr 2*$dblselpt_index+1]]
	# move the arc label
	$this adjustArcLabel $edge
	# update the edgeInfo array
	set edgeInfo($edge,points) [lreplace $edgeInfo($edge,points) \
		$dblselpt_index $dblselpt_index]
	if {[llength $edgeInfo($edge,points)] == 2} {
	    # if the edge has only two points left, it can't be a
	    # Bezier spline curve.  
	    $c itemconfigure $edge -smooth 0
	}
	set dblselpt_index {}
	$this markModified
    }
}

######################################################################
# The following are utility functions.

######################################################################
#### lineMidpoint
# Return the (x,y) coordinates of the midpoint of a line
#
body ::tycho::EditBubbleAndArc::lineMidpoint {arc} {
    set coords [$c coords $arc]
    # n is the number of coordinates, hence twice the number
    # of points
    set n [llength $coords]
    if {$n == 4*($n/4)} {
	# there are an even number of points.  the midpoint
	# is halfway between the two middle points.
	set k [expr $n/2]
	set x1 [lindex $coords [expr $k-2]]
	set y1 [lindex $coords [expr $k-1]]
	set x2 [lindex $coords $k]
	set y2 [lindex $coords [expr $k+1]]
	return [list [expr ($x1+$x2)*0.5] [expr ($y1+$y2)*0.5]]
    } else {
	# there is an odd number of points.  the midpoint 
	# is the middle point.
	return [lrange $coords [expr ($n/2)-1] [expr $n/2]]
    }
}

#################################################################
#### snap_to_oval
# Snap point (x,y) to the oval.  Return the snapped-to point
# on the oval.
#
body ::tycho::EditBubbleAndArc::snap_to_oval {oval x y} {
    set coords [$c coords $oval]
    set x1 [lindex $coords 0]
    set y1 [lindex $coords 1]
    set x2 [lindex $coords 2]
    set y2 [lindex $coords 3]
    
    # center of the oval
    set xc [expr ($x1+$x2)/2]
    set yc [expr ($y1+$y2)/2]

    # handle vertical slopes
    if {$x == $xc} {
	if {$y < $yc} {
	    # slope is tangent of 90 degrees, value of 4th list item
	    # not important (0 here)
	    return [list $xc $y1 tan90 0]
	} else {
	    # slope is tangent of 270 degrees, value of 4th list item
	    # not important (0 here)
	    return [list $xc $y2 tan270 0]
	}
    }

    # x "radius" of the oval
    set a [expr $xc-$x1]
    # y "radius" of the oval
    set b [expr $yc-$y1]

    # Note: Now I perform a change of coordinate axes.
    # X increases to the right, same as the canvas coords.
    # But y increased to the top, opposite to the canvas coords.
    # (x,y) with respect to oval center
    set x3 [expr $x-$xc]
    set y3 [expr $yc-$y]

    # slope
    set m [expr double($y3)/$x3]
    
    # snapped-to x and y, with respect to oval center
    set xsnap [expr $a*$b/sqrt($b*$b+$a*$a*$m*$m)]
    # decide quadrant
    if {$x3 < 0} {set xsnap [expr -$xsnap]}
    set ysnap [expr $m*$xsnap]
    
    return [list [expr $xc+$xsnap] [expr $yc-$ysnap] $m [expr $x3 < 0]]
}

#################################################################
#### find_close_node
# return the close node within "gravity", if none, return
# empty list
#
body ::tycho::EditBubbleAndArc::find_close_node {x y} {
    # gravity = 5
    set close_items [$c find overlapping [expr $x-5] [expr $y-5] \
	    [expr $x+5] [expr $y+5]]
    # see if any of the close items is a node
    set close_node {}
    foreach item $close_items {
	if {[lsearch -exact [$c gettags $item] node] >= 0} {
	    set close_node $item
	    break
	}
    }
    return $close_node
}

proc close_enough {x1 y1 x2 y2} {
    if {abs($x1-$x2) < 5 && abs($y1-$y2) < 5} {
	return 1
    } else {
	return 0
    }
}

#################################################################
#### adjustArcLabel
# Adjust the arc label when the arc has changed.
#
body ::tycho::EditBubbleAndArc::adjustArcLabel {arc} {
    # Move the label relative to the midpoint of the arc.
    set mid_xy [$this lineMidpoint $arc]
    set mid_x [lindex $mid_xy 0]
    set mid_y [lindex $mid_xy 1]
    $c coords $edgeInfo($arc,label) \
            [expr $mid_x + $edgeInfo($arc,label_deltax)] \
            [expr $mid_y + $edgeInfo($arc,label_deltay)]
}

#################################################################
#### unselect
#
body ::tycho::EditBubbleAndArc::unselect {} {
    # Different items have different options for specifying their
    # colors.
    set sel_item [$c find withtag selected]
    if {[lsearch -exact [$c gettags selected] node] >= 0} {
	$c itemconfigure selected -outline black
	$c itemconfigure $nodeInfo($sel_item,label) \
		-fill black
    } elseif {[lsearch -exact [$c gettags selected] arc] >= 0} {
	$c itemconfigure selected -fill black
	# hide the points
	foreach point $edgeInfo($sel_item,points) {
	    $c itemconfigure $point -fill {} -outline {}
	    $c lower $point
	}
	# de-highlight the label
	$c itemconfigure $edgeInfo($sel_item,label) \
		-fill black
	$c dtag selectedpoint
	$c dtag dblselpt
	$c dtag selarclabel
    }
    $c dtag selected
}

#############################################################
#### chooseCursor
#
body ::tycho::EditBubbleAndArc::chooseCursor {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    if {[lsearch -exact [$c gettags current] node] >= 0} {
	# current item is a node
	$this chooseCursorOverNode $x $y
    } elseif {[lsearch -exact [$c gettags current] arc] >= 0} {
	# current item is an arc
	$this chooseCursorOverArc $x $y
    } else {
	puts stdout "Cursor over an item other than node and arc?"
    }
}

body ::tycho::EditBubbleAndArc::chooseCursorOverNode {x y} {
    set coords [$c coords selected]
    set x1 [lindex $coords 0]
    set y1 [lindex $coords 1]
    set x2 [lindex $coords 2]
    set y2 [lindex $coords 3]
    # -cursor bottom_left_corner etc not implemented now
    if [close_enough $x $y $x1 [expr ($y1+$y2)/2]] {
	$c config -cursor {left_side red white}
	set drag_action left
    } elseif [close_enough $x $y $x2 [expr ($y1+$y2)/2]] {
	$c config -cursor {right_side red white}
	set drag_action right
    } elseif [close_enough $x $y [expr ($x1+$x2)/2] $y1] {
	$c config -cursor {top_side red white}
	set drag_action top
    } elseif [close_enough $x $y [expr ($x1+$x2)/2] $y2] {
	$c config -cursor {bottom_side red white}
	set drag_action bottom
    } else {
	$c config -cursor {top_left_arrow red white}
	set drag_action move
    }
}

body ::tycho::EditBubbleAndArc::chooseCursorOverArc {x y} {
    # For now, just change color to red.
    # To be refined.
    $c config -cursor {top_left_arrow red white}
}

################################################################
# Item creation commands

################################################################
#### stateButtonCmd
#
body ::tycho::EditBubbleAndArc::stateButtonCmd {} {
    $this unselect
    $c configure -cursor crosshair
}

################################################################
#### arcButtonCmd
#
body ::tycho::EditBubbleAndArc::arcButtonCmd {} {
    $this unselect
    set point_to_draw first
    # In item creation mode, cursor is crosshair.
    $c configure -cursor crosshair
}

###############################################################
# The following methods are handlers for events on the "node" tag.

# Select and un-select
# When a node is selected, its outline becomes red.  When it's
# un-selected, its outline is black.  Click mouse button 1 over
# a node to select it.  Click mouse button 1 in the empty area
# to un-select the selected node, if there is any.
body ::tycho::EditBubbleAndArc::bind_node_B1 {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # debug message
    #puts stdout "node <Button-1>"
    
    # return immediately if we are in item-creating state
    if {$create_item($this) != {}} return

    if {[$c find withtag current] != [$c find withtag selected]} {
	$this unselect
	
	$c itemconfigure current -outline red
	$c addtag selected withtag current
	$c raise current
	$this chooseCursorOverNode $x $y
	$c itemconfigure $nodeInfo([$c find withtag current],label) \
		-fill red
	$c raise $nodeInfo([$c find withtag current],label)
    }
    set oldx $x
    set oldy $y
    set over_selected 1
}

###############################################################
# The following methods are handlers for events on the "arc" tag.
#
body ::tycho::EditBubbleAndArc::bind_arc_B1 {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # debug message
    #puts stdout "arc <Button-1>"
    
    if {$create_item($this) == {}} {
	# not creating an item: unselect and select
	set arc [$c find withtag current]
	if {$arc != [$c find withtag selected]} {
	    $this unselect
	    
	    # select the current arc
	    # selected arc will be red
	    $c itemconfigure current -fill red
	    $c addtag selected withtag current
	    $c raise current
	    $this chooseCursorOverArc $x $y
	    
	    # show the points
	    foreach point $edgeInfo($arc,points) {
		$c itemconfigure $point -fill red -outline red
		$c addtag selectedpoint withtag $point
		$c raise $point
	    }
	    
	    # highlight the label
	    $c itemconfigure $edgeInfo($arc,label) -fill red
	    $c addtag selarclabel withtag $edgeInfo($arc,label)
	}
	set oldx $x
	set oldy $y
    }
    set over_selected 1
}

###############################################################
# The following methods are handlers for events on the "selected" tag.
#
body ::tycho::EditBubbleAndArc::bind_selected_Enter {x y} {
    # wtc debug msg
    #puts stdout "bind_selected_Enter invoked"
    set over_selected 1
    if !$button1_down {
	$this chooseCursor $x $y
    }
}

body ::tycho::EditBubbleAndArc::bind_selected_Leave {} {
    # wtc debug msg
    #puts stdout "bind_selected_Leave invoked"
    set over_selected 0
    if !$button1_down {
	$c config -cursor {top_left_arrow black white}
    }
}

body ::tycho::EditBubbleAndArc::bind_selected_B1_Motion {x y} {
    # wtc debug msg
    #puts stdout "bind_selected_B1_Motion invoked"
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    if {[lsearch -exact [$c gettags selected] node] >= 0} {
	# selected item is a node
	$this bind_selected_node_B1_Motion $x $y
    } elseif {[lsearch -exact [$c gettags selected] arc] >= 0} {
	# selected item is an arc, do nothing
	return
    } else {
	puts stdout "Selected item not a node or arc?"
    }
}

body ::tycho::EditBubbleAndArc::bind_selected_node_B1_Motion {x y} {
    set coords [$c coords selected]
    set x1 [lindex $coords 0]
    set y1 [lindex $coords 1]
    set x2 [lindex $coords 2]
    set y2 [lindex $coords 3]
    
    switch $drag_action {
	left {
	    set new_x1 [expr $x1+$x-$oldx]
	    if {$new_x1 > $x2} {
		set drag_action right
	    }
	    $this resizeNode selected $new_x1 $y1 $x2 $y2
	}
	right {
	    set new_x2 [expr $x2+$x-$oldx]
	    if {$x1 > $new_x2} {
		set drag_action left
	    }
	    $this resizeNode selected $x1 $y1 $new_x2 $y2
	}
	top {
	    set new_y1 [expr $y1+$y-$oldy]
	    if {$new_y1 > $y2} {
		set drag_action bottom
	    }
	    $this resizeNode selected $x1 $new_y1 $x2 $y2
	}
	bottom {
	    set new_y2 [expr $y2+$y-$oldy]
	    if {$y1 > $new_y2} {
		set drag_action top
	    }
	    $this resizeNode selected $x1 $y1 $x2 $new_y2
	}
	move {
	    # move the node
	    set node [$c find withtag selected]
	    set xdelta [expr $x-$oldx]
	    set ydelta [expr $y-$oldy]
	    $c move $node $xdelta $ydelta
	    # move the label
	    $c move $nodeInfo($node,label) $xdelta $ydelta
	    # move the edges
	    foreach edge $nodeInfo($node,outEdges) {
		# move first point of edge
		set coords [$c coords $edge]
		set x1 [lindex $coords 0]
		set y1 [lindex $coords 1]
		set x1 [expr $x1+$xdelta]
		set y1 [expr $y1+$ydelta]
		eval $c coords $edge $x1 $y1 [lrange $coords 2 end]
		# update coords of the first point
		$c coords [lindex $edgeInfo($edge,points) 0] \
			[expr $x1-2] [expr $y1-2] [expr $x1+2] [expr $y1+2]
		$this adjustArcLabel $edge
	    }
	    foreach edge $nodeInfo($node,inEdges) {
		# move last point of edge
		set coords [$c coords $edge]
		set len [llength $coords]
		set x_last [lindex $coords [expr $len - 2]]
		set y_last [lindex $coords [expr $len - 1]]
		set x_last [expr $x_last+$xdelta]
		set y_last [expr $y_last+$ydelta]
		eval $c coords $edge [lrange $coords 0 [expr $len - 3]] \
			$x_last $y_last
		# update coords of the last point
		$c coords [lindex $edgeInfo($edge,points) \
			[expr [llength $edgeInfo($edge,points)] - 1]] \
			[expr $x_last-2] [expr $y_last-2] \
			[expr $x_last+2] [expr $y_last+2]
		$this adjustArcLabel $edge
	    }
	}
    }
    set oldx $x
    set oldy $y
    $this markModified
}

#################################################################
#### resizeNode
# Only used by bind_selected_node_B1_Motion
#
body ::tycho::EditBubbleAndArc::resizeNode {tag x1 y1 x2 y2} {
    set node [$c find withtag $tag]
    
    # resize the node
    $c coords $node $x1 $y1 $x2 $y2
    
    # move the node label
    $c coords $nodeInfo($node,label) [expr ($x1+$x2)*0.5] \
	    [expr ($y1+$y2)*0.5]
    
    # move the edges
    foreach edge $nodeInfo($node,outEdges) {
	# move first point of edge
	set coords [$c coords $edge]
	# Snap (x_first,y_first) to the node
	set snap [oval_slope $node \
		$edgeInfo($edge,outSlope) $edgeInfo($edge,outXneg)]
	set x_first [lindex $snap 0]
	set y_first [lindex $snap 1]
	eval $c coords $edge $x_first $y_first [lrange $coords 2 end]
	# update coords of the first point
	$c coords [lindex $edgeInfo($edge,points) 0] \
		[expr $x_first-2] [expr $y_first-2] \
		[expr $x_first+2] [expr $y_first+2]
	$this adjustArcLabel $edge
    }
    foreach edge $nodeInfo($node,inEdges) {
	# move last point of edge
	# Snap (x_last,y_last) to the node
	set snap [oval_slope $node \
		$edgeInfo($edge,inSlope) $edgeInfo($edge,inXneg)]
	set x_last [lindex $snap 0]
	set y_last [lindex $snap 1]
	
	set coords [$c coords $edge]
	eval $c coords $edge [lrange $coords 0 \
		[expr [llength $coords] - 3]] $x_last $y_last
	# update coords of the last point
	$c coords [lindex $edgeInfo($edge,points) \
		[expr [llength $edgeInfo($edge,points)] - 1]] \
		[expr $x_last-2] [expr $y_last-2] \
		[expr $x_last+2] [expr $y_last+2]
	$this adjustArcLabel $edge
    }
}

#################################################################
#### oval_slope
# Only used by resizeNode
#
body ::tycho::EditBubbleAndArc::oval_slope {oval m xneg} {
    set coords [$c coords $oval]
    set x1 [lindex $coords 0]
    set y1 [lindex $coords 1]
    set x2 [lindex $coords 2]
    set y2 [lindex $coords 3]
    
    # center of the oval
    set xc [expr ($x1+$x2)/2]
    set yc [expr ($y1+$y2)/2]
    
    # handle vertical slopes
    if {$m == "tan90"} {
	return [list $xc $y1]
    } elseif {$m == "tan270"} {
	return [list $xc $y2]
    }
    
    # x "radius" of the oval
    set a [expr $xc-$x1]
    # y "radius" of the oval
    set b [expr $yc-$y1]
    
    # Find intersection of oval and line with slope m
    set x [expr $a*$b/sqrt($b*$b+$a*$a*$m*$m)]
    # decide quadrant
    if {$xneg} {set x [expr -$x]}
    set y [expr $m*$x]
    
    return [list [expr $xc+$x] [expr $yc-$y]]
}

#################################################################
#### bind_selected_BR1
# Handler for <ButtonRelease-1> over "selected" item.
#
body ::tycho::EditBubbleAndArc::bind_selected_BR1 {x y} {
    # Just update the cursor, and drag_action if over
    # a selected item.  Note that the current item does
    # not change while a button is down, so when the button
    # is released, the mouse cursor may not be over the
    # current item.
    if $over_selected {
	$this chooseCursor $x $y
    } else {
	$c config -cursor {top_left_arrow black white}
    }
}

###############################################################
# The following methods are handlers for events on the "selectedpoint" tag.
#
body ::tycho::EditBubbleAndArc::bind_selectedpoint_B1 {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # debug message
    #puts stdout "selectedpoint <Button-1>"
    
    if {[$c find withtag current] != [$c find withtag dblselpt]} {
	$c itemconfigure dblselpt -outline red -fill red
	$c dtag dblselpt
	
	$c itemconfigure current -outline blue -fill blue
	$c addtag dblselpt withtag current
	#$this chooseCursorOverNode $x $y
	# figure out which point it is on the arc, and record this
	# index
	set dblselpt_index [lsearch -exact \
		$edgeInfo([$c find withtag selected],points) \
		[$c find withtag dblselpt]]
    }
    set oldx $x
    set oldy $y
}

body ::tycho::EditBubbleAndArc::bind_selectedpoint_B1_Motion {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # move the doubly-selected point
    # move the edge
    # the index of the doubly-selected point is recorded in the
    # variable dblselpt_index.  Get the coords of the edge.
    set coords [$c coords selected]
    set id [$c find withtag selected]
    if {$dblselpt_index == 0} {
	# source endpoint, it has to be snapped to the oval
	set node $edgeInfo($id,src)
	# Snap (x,y) to the node
	set snap [snap_to_oval $node $x $y]
	# Change x and y to the new snapped-to values.
	# "snap" is a list: {x y m xneg}
	# get the coord (x,y)
	set x [lindex $snap 0]
	set y [lindex $snap 1]
	set edgeInfo($id,outSlope) [lindex $snap 2]
	set edgeInfo($id,outXneg) [lindex $snap 3]
	$c coords dblselpt [expr $x-2] [expr $y-2] [expr $x+2] [expr $y+2]
	eval $c coords $id [lreplace $coords 0 1 $x $y]
    } elseif {$dblselpt_index == [expr [llength $coords]/2 - 1]} {
	# terminating  endpoint, it has to be snapped to the oval
	set node $edgeInfo($id,dest)
	# Snap (x,y) to the node
	set snap [snap_to_oval $node $x $y]
	# Change x and y to the new snapped-to values.
	set x [lindex $snap 0]
	set y [lindex $snap 1]
	set edgeInfo($id,inSlope) [lindex $snap 2]
	set edgeInfo($id,inXneg) [lindex $snap 3]
	$c coords dblselpt [expr $x-2] [expr $y-2] [expr $x+2] [expr $y+2]
	eval $c coords $id [lreplace $coords \
		[expr 2*$dblselpt_index] end $x $y]
    } else {
	# an internal point
	# change the index'th coords by the move delta, and set the
	# new coords.
	$c move dblselpt [expr $x-$oldx] [expr $y-$oldy]
	set x1 [expr [lindex $coords \
		[expr 2*$dblselpt_index]]+$x-$oldx]
	set y1 [expr [lindex $coords \
		[expr 2*$dblselpt_index+1]]+$y-$oldy]
	eval $c coords selected [lreplace $coords \
		[expr 2*$dblselpt_index] \
		[expr 2*$dblselpt_index+1] $x1 $y1]
	set oldx $x
	set oldy $y
    }
    # adjust the arc label
    $this adjustArcLabel $id
    $this markModified
}

###############################################################
# The following methods are handlers for events on the "selarclabel" tag.
#
body ::tycho::EditBubbleAndArc::bind_selarclabel_B1 {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # debug message
    #puts stdout "selarclabel <Button-1>"
    
    # change color to blue
    $c itemconfigure selarclabel -fill blue
    
    set oldx $x
    set oldy $y
}

body ::tycho::EditBubbleAndArc::bind_selarclabel_B1_Motion {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # move the label
    $c move selarclabel [expr $x-$oldx] [expr $y-$oldy]
    set oldx $x
    set oldy $y
}

body ::tycho::EditBubbleAndArc::bind_selarclabel_BR1 {} {
    $c itemconfigure selarclabel -fill red
    set coords [$c coords selarclabel]
    set x [lindex $coords 0]
    set y [lindex $coords 1]
    set arc [$c find withtag selected]
    set mid_xy [$this lineMidpoint $arc]
    set mid_x [lindex $mid_xy 0]
    set mid_y [lindex $mid_xy 1]
    set newDeltax [expr $x-$mid_x]
    if {$edgeInfo($arc,label_deltax) != $newDeltax} {
	set edgeInfo($arc,label_deltax) $newDeltax
	$this markModified
    }
    set newDeltay [expr $y-$mid_y]
    if {$edgeInfo($arc,label_deltay) != $newDeltay} {
	set edgeInfo($arc,label_deltay) $newDeltay
	$this markModified
    }
}

###############################################################
# The following methods are handlers for canvas-wide events.
#

# Binding of <Button-1>
body ::tycho::EditBubbleAndArc::bind_B1 {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    # debug message
    #puts stdout <Button-1>
    
    set button1_down 1
    
    switch $create_item($this) {
	state {
	    $this mkNode $x $y
	}
	arc {
	    # wtc comment out
	    #$this mkArc $x $y
	}
	default {
	    # If we are not in item-creating state, and mouse
	    # is not over any item, unselect the selected item.
	    if {[$c find withtag current] == {}} {
		$this unselect
	    }
	}
    }
}

# Create new node at (x,y)
body ::tycho::EditBubbleAndArc::mkNode {x y} {
    set oldx $x
    set oldy $y
    set node_id [$c create oval $x $y $x $y -outline brown -fill white]
}

body ::tycho::EditBubbleAndArc::mkArc {x y} {
    if {[string compare $point_to_draw first] == 0} {
	# Drawing the first endpoint, which must be over a node.
	set close_node [find_close_node $x $y]
	if {$close_node == {}} return  # no close node
	# Snap (x,y) to the node
	set snap [snap_to_oval $close_node $x $y]
	# Change x and y to the new snapped-to values.
	# "snap" is a list: {x y m xneg}
	# get the coord (x,y)
	set x [lindex $snap 0]
	set y [lindex $snap 1]
	set arc_coords [lrange $snap 0 1]
	set arc_id [$c create line $x $y $x $y \
		-arrow last -tags arc -fill brown]
	# the first point has been drawn
	set point_to_draw nonfirst
	lappend nodeInfo($close_node,outEdges) $arc_id
	set edgeInfo($arc_id,src) $close_node
	set edgeInfo($arc_id,outSlope) [lindex $snap 2]
	set edgeInfo($arc_id,outXneg) [lindex $snap 3]
	set edgeInfo($arc_id,points) [$c create rectangle \
		[expr $x-2] [expr $y-2] [expr $x+2] [expr $y+2] \
		-fill {} -outline {}]
	# debug messages
	#puts stdout "Setting edgeInfo($arc_id,src) = \
		$edgeInfo($arc_id,src)"
	#puts stdout "Setting edgeInfo($arc_id,outSlope) = \
		$edgeInfo($arc_id,outSlope)"
	#puts stdout "Setting edgeInfo($arc_id,outXneg) = \
		$edgeInfo($arc_id,outXneg)"
    } else {
	# Drawing non-first points.
	set close_node [find_close_node $x $y]
	if {$close_node == {}} {
	    # no close node
	    # this is just an internal point
	    lappend arc_coords $x $y
	    eval $c coords $arc_id $arc_coords
	    lappend edgeInfo($arc_id,points) [$c create rectangle \
		    [expr $x-2] [expr $y-2] [expr $x+2] [expr $y+2] \
		    -fill {} -outline {}]
	} else {
	    # over a node
	    # this is the other endpoint
	    #create the other endpoint and do other stuff
	    # Snap (x,y) to the node
	    set snap [snap_to_oval $close_node $x $y]
	    # Change x and y to the new snapped-to values.
	    set x [lindex $snap 0]
	    set y [lindex $snap 1]
	    eval $c coords $arc_id $arc_coords $x $y
	    $c itemconfigure $arc_id -fill black
	    lappend edgeInfo($arc_id,points) [$c create rectangle \
		    [expr $x-2] [expr $y-2] [expr $x+2] [expr $y+2] \
		    -fill {} -outline {}]
	    # if the arc has more than two points, make it a Bezier
	    # spline curve.
	    if {[llength [$c coords $arc_id]] > 4} {
		$c itemconfigure $arc_id -smooth 1
	    }
	    # arc has been created
	    set create_item($this) {}
	    # change cursor back to normal
	    $c configure -cursor {top_left_arrow black white}
	    lappend nodeInfo($close_node,inEdges) $arc_id
	    set edgeInfo($arc_id,dest) $close_node
	    set edgeInfo($arc_id,inSlope) [lindex $snap 2]
	    set edgeInfo($arc_id,inXneg) [lindex $snap 3]
	    set edgeInfo($arc_id,label) [eval $c create text \
		    [$this lineMidpoint $arc_id] -fill black]
	    set edgeInfo($arc_id,label_deltax) 0
	    set edgeInfo($arc_id,label_deltay) 0
	    # debug messages
	    #puts stdout "Setting edgeInfo($arc_id,dest) = \
		    $edgeInfo($arc_id,dest)"
	    #puts stdout "Setting edgeInfo($arc_id,inSlope) = \
		    $edgeInfo($arc_id,inSlope)"
	    #puts stdout "Setting edgeInfo($arc_id,inXneg) = \
		    $edgeInfo($arc_id,inXneg)"
	    $this markModified
	}
    }
}

body ::tycho::EditBubbleAndArc::bind_B1_Motion {x y} {
    # wtc debug msg
    #puts stdout "bind_B1_Motion invoked"
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    if {$create_item($this) == "state"} {
	$c coords $node_id $oldx $oldy $x $y
    }
}

body ::tycho::EditBubbleAndArc::bind_BR1 {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    set button1_down 0
    if {$create_item($this) == "state"} {
	if [close_enough $oldx $oldy $x $y] {
	    # too small! abort and retry
	    set node_create_state first
	    $c delete $node_id
	    return
	} else {
	    # creation of new node completed
	    $c coords $node_id $oldx $oldy $x $y
	    $c itemconfigure $node_id -outline black -tags node
	    # change cursor back to normal
	    $c configure -cursor {top_left_arrow black white}
	    set nodeInfo($node_id,inEdges) {}
	    set nodeInfo($node_id,outEdges) {}
	    # id of the associated text item which displays the label
	    # of this node at the center
	    set nodeInfo($node_id,label) [$c create text \
		    [expr ($oldx+$x)*0.5] [expr ($oldy+$y)*0.5]]
	    # new node has been created
	    set create_item($this) {}
	    $this markModified
	}
    } elseif {$create_item($this) == "arc"} {
	$this mkArc $x $y
    }
}

body ::tycho::EditBubbleAndArc::bind_Motion {x y} {
    set x [$c canvasx $x]
    set y [$c canvasy $y]
    if {[string compare $create_item($this) arc] == 0 && \
	    [string compare $point_to_draw nonfirst] == 0} {
	eval $c coords $arc_id $arc_coords $x $y
    }
}

#################################################################
#### setUpCanvasBindings
# Establish bindings for the canvas.
#
body ::tycho::EditBubbleAndArc::setUpCanvasBindings {} {
    # Bindings for the "node" tag.
    $c bind node <Button-1> [list $this bind_node_B1 %x %y]
    
    # Bindings for the "arc" tag.
    $c bind arc <Button-1> [list $this bind_arc_B1 %x %y]
    
    # Bindings for the "selected" tag.
    # The "selected" item is either a "node" or an "arc".
    # Note that <Button-1> is dealt with by the two bindings above.
    $c bind selected <Enter> [list $this bind_selected_Enter %x %y]
    $c bind selected <Motion> [list $this chooseCursor %x %y]
    $c bind selected <Leave> [list $this bind_selected_Leave]
    $c bind selected <B1-Motion> [list $this bind_selected_B1_Motion %x %y]
    $c bind selected <ButtonRelease-1> [list $this bind_selected_BR1 %x %y]
    
    # Bindings for the "selectedpoint" tag.
    # The "selectedpoint" is the selected point on the "selected" arc.
    $c bind selectedpoint <Enter> [list $c config -cursor \
	    {top_left_arrow red white}]
    $c bind selectedpoint <Button-1> [list $this bind_selectedpoint_B1 \
	    %x %y]
    $c bind selectedpoint <B1-Motion> [list $this \
	    bind_selectedpoint_B1_Motion %x %y]
    $c bind selectedpoint <Leave> [list $c config -cursor \
	    {top_left_arrow black white}]
    
    # Bindings for the "selarclabel" tag.
    # The "selarclabel" is the label of the "selected" arc.
    # The selarclabel is normally red.  When button 1 is pressed, it
    # becomes blue.  When button 1 is released, it changes back to red.
    $c bind selarclabel <Enter> [list $c config -cursor \
	    {top_left_arrow red white}]
    $c bind selarclabel <Button-1> [list $this bind_selarclabel_B1 \
	    %x %y]
    $c bind selarclabel <B1-Motion> [list $this bind_selarclabel_B1_Motion \
	    %x %y]
    $c bind selarclabel <Leave> [list $c config -cursor \
	    {top_left_arrow black white}]
    $c bind selarclabel <ButtonRelease-1> [list $this bind_selarclabel_BR1]
    
    # Canvas-wide bindings.
    bind $c <Button-1> [list $this bind_B1 %x %y]
    bind $c <B1-Motion> [list $this bind_B1_Motion %x %y]
    bind $c <ButtonRelease-1> [list $this bind_BR1 %x %y]
    bind $c <Motion> [list $this bind_Motion %x %y]
}
