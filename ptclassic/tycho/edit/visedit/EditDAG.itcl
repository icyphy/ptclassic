# A viewer and editor window for a DAG (directed acyclic graph) data structure.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditDAG
# A directed acyclic graph (DAG) is a data structure is a set of nodes
# with any number of parents and children such that no subset of these
# nodes forms a cycle. This class provides a top-level window to
# interactively build, view, and edit such a data structure. Data
# stored on the nodes are Tcl lists in the form of {key value key value
# ... }. The keys and values can be arbitrary, although certain keys
# are recognized and control the display. See the documentation for <a
# href="EditDAGWidget.html"><code>EditDAGWidget</code></a>.
# <p>
# Menu commands for adding new nodes, deleting nodes, and editing
# the name or contents of the nodes are provided.
# <p>
# Here is an example of how to use the EditDAG:
# <tcl><pre>
#     catch {delete object .f}
#     ::tycho::EditDAG .f -file &#92
#          $TYCHO/editors/visedit/test/sample.dag
#     .f centerOnScreen
# </pre></tcl>
#
class ::tycho::EditDAG {
    inherit ::tycho::Graphics

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    # Specify the graph object to display and edit.
    itk_option define -graph graph Graph {}

    ###################################################################
    ####                         public methods                    ####

    # Clear the display, discarding the current DAG.
    method clear {}

    # Open a help window.
    method help {}

    # Reload data from the current file.
    method reload {}

    # Find the node in the DAG identified by "name".
    # FIXME: Implement this.
    # method seePoint {name}

    # Specify whether or not modifications are allowed in the displayed DAG.
    method setReadOnly {bool}

    ###################################################################
    ####                   protected methods                       ####

    # Return the name of the class of graphics widget to use.
    protected method graphicsWidget {} {return ::tycho::EditDAGWidget}
}

#######################################################################
#### -graph option configuration
# If an non-empty string is given as the value to this argument, it is
# taken to be the name of an instance of class
# <code>DirectedAcyclicGraph</code> to display and edit. The instance
# must exist already and be accessible in the current scope.
#
configbody ::tycho::EditDAG::graph {
    set gph $itk_option(-graph)
    if {$gph != {}} {
        $itk_component(graphics) configure -graph $gph
    }
}

#######################################################################
#### constructor
#
body ::tycho::EditDAG::constructor {args} {
    addMenuSeparator Edit

    addMenuItem {New Root} Edit -underline 4 -accelerator "R" \
	    -command "$this component graphics addRoot"

    addMenuItem {New Child} Edit -underline 4 -accelerator "C" \
	    -command "$this component graphics addChild"

    eval itk_initialize $args
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### clear
# Clear the display, discarding the current graph.
#
body ::tycho::EditDAG::clear {} {
    if [getReadOnly] {bell; return}
    [component graphics graph] clear
    ::tycho::Graphics::clear
}

#######################################################################
#### help
# Open a help window.
#
body ::tycho::EditDAG::help {} {
    hyperJump "\$TYCHO/editors/visedit/doc/usersGuides/EditDAGHelp.html" {}
}

#######################################################################
#### reload
# Reload the current file. This is redefined in order to redraw the
# graph. Also, the graph is checked to make sure that all referenced
# parents and children are present, and that the graph is acyclic. It
# is repaired if not by deleting the offending references.
#
body ::tycho::EditDAG::reload {} {
    component graphics undoBoundary
    ::tycho::File::reload
    component graphics verify repair
    component graphics redrawGraph
}

#####################################################################
#### setReadOnly
# Specify whether or not modifications are allowed in the displayed text.
# Note that this is independent of whether the associated file is readonly.
# It merely determines whether the buffer can be modified, not whether the
# file can be modified.  To control the file, use <code>toggleReadOnly</code>.
#
body ::tycho::EditDAG::setReadOnly {bool} {
    ::tycho::Graphics::setReadOnly $bool
    if [winfo exists $prefix] {
	if {$bool} {
            disableMenuItem {New Root} Edit
            disableMenuItem {New Child} Edit
	} {
            enableMenuItem {New Root} Edit
            enableMenuItem {New Child} Edit
	}
    }
}
