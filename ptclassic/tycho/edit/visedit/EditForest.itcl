# A viewer and editor window for a forest (set of trees) data structure.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditForest
# A forest is a data structure that includes any number of trees. A
# tree is a data structure with nodes that are either a root or have
# exactly one parent, and that have any number of children. This class
# provides a top-level window to interactively build, view, and edit such a
# data structure. Data stored on the nodes of the trees are arbitrary
# Tcl strings, although particular fields can be inserted to control
# the format (see the documentation for
# <a href="EditForestWidget.html"><code>EditForestWidget</code></a>.
# <p>
# Menu commands for adding new nodes, deleting nodes, and editing
# the name or contents of the nodes are provided.
# <p>
# Here is an example of how to use the EditForest:
# <tcl><pre>
#     catch {delete object .f}
#     ::tycho::EditForest .f -file &#92
#          $TYCHO/editors/visedit/test/sample.fst
#     .f centerOnScreen
# </pre></tcl>
#
class ::tycho::EditForest {
    inherit ::tycho::EditDAG

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Open a help window.
    method help {}

    # Find the node in the forest identified by "name".
    # FIXME: Implement this.
    # method seePoint {name}

    ###################################################################
    ####                   protected methods                       ####

    # Return the name of the class of graphics widget to use.
    protected method graphicsWidget {} {return ::tycho::EditForestWidget}
}

#######################################################################
#### constructor
#
body ::tycho::EditForest::constructor {args} {
    eval itk_initialize $args
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### help
# Open a help window.
#
body ::tycho::EditForest::help {} {
    hyperJump "\$TYCHO/editors/visedit/doc/usersGuides/EditForestHelp.html" {}
}
