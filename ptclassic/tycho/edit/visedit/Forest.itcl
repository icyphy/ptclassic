# A forest (set of trees) data structure.
#
# @Author: Edward A. Lee
#
# @Version: @(#)Forest.itcl	1.11	07/21/98
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### Forest
# A forest is a data structure that includes any number of trees. A
# tree is a directed acyclic graph with nodes that are either a root or
# have exactly one parent, and that have any number of children. This
# class provides methods to build, browse, and edit such a data
# structure. Data stored on the nodes of the trees are as in the base
# class <code>Graph</code>. A method is provided to encode the data
# structure as a list, which can, for example, be written to a file. A
# method is also provided to convert this list back into a forest.
# <p>
# Here is an example of how to use the Forest:
# <tcl><pre>
#    catch {delete object foo}
#    ::tycho::Forest foo
#    foo add a {}
#    foo add c {} a
#    foo add d {} a
#    foo describe
# </pre></tcl>
# The description that is posted in the last line will be:
# {{a {} {}} {c {} a} {d {} a}}, which is a list of nodes
# in the forest.  Each node is a list of three items, the name,
# contents, and parent of the node.
# All contents in this case are empty strings.
# Notice that in this example there is only one tree in the forest.
#
class ::tycho::Forest {
    inherit ::tycho::DirectedAcyclicGraph

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Add a node to the forest.
    method add {nodename contents {parents {}}}

    # Trigger an error (disabling base class methods).
    method addArc {parent child}

    # Return a list of node names in depth-first sort order.
    method depthFirstSort {{roots {}}}
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### add
# Add a node to a tree in the forest.  Only one parent can be specified.
#
body ::tycho::Forest::add {nodename contents {parents {}}} {
    if {[llength $parents] > 1} {
        error "Specified multiple parents when only one is allowed: $parents"
    }
    ::tycho::Graph::add $nodename $contents $parents
}

#######################################################################
#### addArc
# Trigger an error (disabling base class methods).
#
body ::tycho::Forest::addArc {parent child} {
    error "Cannot add arcs to a forest."
}

#######################################################################
#### depthFirstSearch
# Return a list of node names in the subgraph with the given roots. This
# includes the roots themselves and all descendants. The returned list
# contains one element for each node in the subgraph, beginning with
# the first root, then, in depth-first order, all descendants. Parents
# are always listed before their children.  If no arguments are given,
# then the entire graph is sorted.
#
body ::tycho::Forest::depthFirstSort {{roots {}}} {
    if {$roots == {}} {set roots $rootnames}
    set result {}
    foreach node $roots {
        lappend result $node
        foreach child $childrennames($node) {
            set result [concat $result [depthFirstSort [list $child]]]
        }
    }
    return $result
}
