# A graph data structure.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### Graph
# A graph is a collection of nodes that may have other nodes as parents
# or children. This class
# provides methods to build, browse, and edit such a data structure.
# Data stored on the nodes of the graph are arbitrary Tcl strings. A
# method is provided to encode the data structure as a list, which can,
# for example, be written to a file. A method is also provided to
# convert this list back into a graph.
# <p>
# Here is an example of how to use the Graph:
# <tcl><pre>
#    catch {delete object foo}
#    ::tycho::Graph foo
#    foo add a aa
#    foo add c cc a
#    foo add d dd a
#    foo add e ee a c
#    foo add f ff e a
#    foo addArc d e
#    ::tycho::post [foo describe]
# </pre></tcl>
# The description that is posted in the last line will be:
# {{d dd a {}} {e ee a {c f}} {a aa {} {c d e}} {f ff e a} {c cc a {}}},
# or some permutation of these list items. This is a list of nodes
# in the graph.  Each node is a list of four items, the name,
# contents, parents, and children of the node.  The <code>verifyAll</code>
# method can be used to check the graph to make sure that all parents
# and children that are mentioned are present.
#
class ::tycho::Graph {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Add a node to the graph.
    method add {nodename contents {parents {}} {children {}}}

    # Add an arc between existing nodes, if it does not already exist.
    method addArc {parent child}

    # Return the list of children of a node.
    method children {nodename}

    # Remove all nodes from the graph.
    method clear {}

    # Return the contents of a node in the graph.
    method contents {nodename}

    # Delete a node from the graph.
    method delete {nodename}

    # Return a list that describes the graph.
    method describe {}

    # Return 1 if the specified node exists, otherwise, return 0.
    method exists {nodename}

    # Initialize the graph from a description
    method init {description}

    # Return the parents of a node.
    method parents {nodename}

    # Return a list of names of the roots of the graph (nodes with no parents).
    method roots {}

    # Set a new name and contents for the specified node.
    method setNode {oldname newname contents}

    # Verify that a node is present.
    method verify {nodename}

    ###################################################################
    ####                   protected methods                       ####

    # In listname, remove the olditem and append the newitem.
    protected method listreplace {listname olditem newitem}

    # Verify that all parents and children of nodes are present.
    method verifyAll {}

    ###################################################################
    ####                   protected variables                     ####

    # List of the names of the roots of the trees in the forest.
    protected variable rootnames {}

    # Array storing the contents of each node of the tree.
    protected variable contentsstring

    # Array storing the parent name for each node of the tree.
    protected variable parentnames

    # Array storing the list of children for each node.
    protected variable childrennames
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### add
# Add a node to the graph with the specified parents and children (if
# any). It is not verified whether the parents or children exist, so
# when the complete graph has been constructed, <code>verifyAll</code>
# should be invoked. It is an error if the specified node name already
# exists in the graph.
#
body ::tycho::Graph::add {nodename contents {parents {}} {children {}}} {
    if {$nodename == {}} {
        error "Graph: Blank node name is not allowed."
    } elseif {$nodename == {all}} {
        error "Graph: Cannot use \"all\" for a node name."
    }
    if [info exists contentsstring($nodename)] {
        error "Graph: Duplicate node name in graph: $nodename"
    }
    if {$parents == {}} {
        lappend rootnames $nodename
    } {
        foreach parent $parents {
            if {$parent != {}} {
                lappend childrennames($parent) $nodename
            }
        }
    }
    set parentnames($nodename) $parents
    set childrennames($nodename) $children
    set contentsstring($nodename) $contents
}

#######################################################################
#### addArc
# Add an arc between existing nodes, if it doesn't already exist.
# If it does exist, ignore.
#
body ::tycho::Graph::addArc {parent child} {
    verify $parent
    verify $child
    if {[lsearch -exact $childrennames($parent) $child] < 0} {
        # The arc does not exist.
        lappend childrennames($parent) $child
        lappend parentnames($child) $parent
    }
}

#######################################################################
#### children
# Return the list of children of a node.
#
body ::tycho::Graph::children {nodename} {
    verify $nodename
    return $childrennames($nodename)
}

#######################################################################
#### clear
# Remove all nodes from the graph.
#
body ::tycho::Graph::clear {} {
    set rootnames {}
    # The catch is in case the forest is already clear
    catch {
        unset contentsstring
        unset parentnames
        unset childrennames
    }
}

#######################################################################
#### contents
# Return the contents of a cell of the forest.
# The contents can be any arbirary Tcl string or list.
#
body ::tycho::Graph::contents {nodename} {
    verify $nodename
    return $contentsstring($nodename)
}

#######################################################################
#### delete
# Delete a node from the graph.  If the node has children, then
# the parents of the node are appended as parents of the children.
#
body ::tycho::Graph::delete {nodename} {
    verify $nodename
    set parents $parentnames($nodename)
    if {$parents == {}} {
        # Remove from the root list
        set ind [lsearch -exact $rootnames $nodename]
        set rootnames [lreplace $rootnames $ind $ind]
    } {
        # Remove node from the list of children in each parent
        foreach parent $parents {
            set ind [lsearch -exact $childrennames($parent) $nodename]
            set childrennames($parent) \
                    [lreplace $childrennames($parent) $ind $ind]
        }
    }
    # Remove me from the parent list of each child, and append my parents.
    foreach child $childrennames($nodename) {
        set ind [lsearch -exact $parentnames($child) $nodename]
        set parentnames($child) [lreplace $parentnames($child) $ind $ind]
        foreach parent $parents {
            lappend childrennames($parent) $child
            lappend parentnames($child) $parent
        }
        if {$parentnames($child) == {}} {
            lappend rootnames $child
        }
    }
    # Finally, remove from the database.
    unset parentnames($nodename)
    unset contentsstring($nodename)
    unset childrennames($nodename)
}

#######################################################################
#### describe
# Return a list that describes the graph. The returned list contains
# one element for each node in the graph, in arbitrary order. Each node
# is described as a list with four elements: the node name, the
# contents, the list of parents, and the list of children.
#
body ::tycho::Graph::describe {} {
    set result {}
    foreach node [array names contentsstring] {
        lappend result [list \
                $node \
                $contentsstring($node) \
                $parentnames($node) \
                $childrennames($node)]
    }
    return $result
}

#######################################################################
#### exists
# Return 1 if the specified node exists, otherwise, return 0.
#
body ::tycho::Graph::exists {nodename} {
    return [info exists contentsstring($nodename)]
}

#######################################################################
#### init
# Initialize the graph from a description. The format of the
# description should be compatible with that produced by the
# <code>describe</code> method.
#
body ::tycho::Graph::init {description} {
    clear
    foreach node $description {
        set nodename [lindex $node 0]
        set contentsstring($nodename) [lindex $node 1]
        set parents [lindex $node 2]
        set children [lindex $node 3]
        set parentname($nodename) $parents
        set childrennames($nodename) $children
        if {$parents == {}} {
            lappend rootnames $nodename
        } {
            # A parent is specified
            lappend childrennames($parent) $nodename
        }
        foreach child $children {
            lappend parentnames($child) $child
        }
    }
    verifyAll
}

#######################################################################
#### parents
# Return the list of parents of a node.
# If the node is a root, return an empty string.
#
body ::tycho::Graph::parents {nodename} {
    verify $nodename
    return $parentnames($nodename)
}

#####################################################################
#### roots
# Return a list the names of the root nodes (those with no parents).
#
body ::tycho::Graph::roots {} {
    return $rootnames
}

#######################################################################
#### setNode
# Set a new name and contents for the specified node.
# It is an error if the new name is already the name of another node.
#
body ::tycho::Graph::setNode {oldname newname contents} {
    verify $oldname
    if {$newname != $oldname && [info exists contentsstring($newname)]} {
        error "Duplicate node name in graph: $newname"
    }
    set parents $parentnames($oldname)
    if {$parents == {}} {
        listreplace rootnames $oldname $newname
    } {
        foreach parent $parents {
            verify $parent
            listreplace childrennames($parent) $oldname $newname
        }
    }
    foreach child $childrennames($oldname) {
        verify $child
        listreplace parentnames($child) $oldname $newname
    }
    set parentnames($newname) $parents
    set childrennames($newname) $childrennames($oldname)
    set contentsstring($newname) $contents
    if {$oldname != $newname} {
        unset parentnames($oldname)
        unset childrennames($oldname)
        unset contentsstring($oldname)
    }
}

#######################################################################
#### verify
# Verify that a node exists in the graph with the name given by the
# argument. Trigger an error if not. In other words, if this method
# returns, the nodename is valid.
#
body ::tycho::Graph::verify {nodename} {
    if ![::info exists contentsstring($nodename)] {
        error "No node in forest $this with name $nodename"
    }
}


    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#######################################################################
#### listreplace
# For the list <i>listname</i>, remove the <i>olditem</i> and append
# the <i>newitem</i>.  The items are strings, and <i>olditem</i> must
# match exactly a string in the list.
# Issue a warning <i>olditem</i> is not present in the list.
#
body ::tycho::Graph::listreplace {listname olditem newitem} {
    set idx [lsearch -exact [set $listname] $olditem]
    if {$idx < 0} {
        ::tycho::warn "Missing item in list $listname: $olditem"
    } {
        set $listname [lreplace [set $listname] $idx $idx]
    }
    lappend $listname $newitem
}

#######################################################################
#### verifyAll
# Verify that all parents and children exist as nodes in the graph.
# Trigger an error on the first invalid one encountered.
#
body ::tycho::Graph::verifyAll {} {
    set id [array startsearch parentnames]
    while {[set node [array nextelement parentnames $id]] != {}} {
        foreach parent $parentnames($node) {
            verify $parent
        }
        foreach child $childrennames($node) {
            verify $child
        }
    }
    array donesearch parentnames $id
}
