# A code profiler for Tcl and Itcl code, using the TclX extension.
#
# @Author: Edward A. Lee
# @Contributor: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### ProfileTcl
# A code profiler for Tcl and Itcl code, using the TclX extension.
# To start profiling a section of code, hit the "Start Profiling" button.
# To display the call tree of the current profile, hit the "Display Profile"
# button.  To cancel profiling without displaying the call tree,
# hit the "Cancel Profile" button.
# <p>
# Here is an example of how to use the ProfileTcl:
# <tcl><pre>
#     ::tycho::view ProfileTcl
# </pre></tcl>
#
class ::tycho::ProfileTcl {
    inherit ::tycho::EditForest

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Open a help window.
    method help {}

    # Cancel ongoing profiling.
    method profileCancel {}

    # Turn profiling off and report the results
    method profileDisplay {}

    # Turn profiling on
    method profileStart {}

    # Update the times displayed at the bottom.
    method updateTimes {}

    ###################################################################
    ####                         protected methods                 ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ###################################################################
    ####                         private variables                 ####

    # Controls whether profiling is stopped.
    private variable cancel 0

    ###################################################################
    ####                          private methods                  ####

    # Initialize the tool bar.
    private method _initializeToolbar {toolbar}
}

#######################################################################
#### constructor
#
body ::tycho::ProfileTcl::constructor {args} {
    global env tycho
 
    # Add a display at the bottom for the profile stats.
    addInfo count {Call count} 0 10 \
            "Number of times the function under the cursor was called."
    addInfo real {Real time} 0 10 \
            "Amount of Real time in milliseconds the function under the \
            cursor consumed."
    addInfo realPercent {Real %} 0 8 \
            "Percentage of the total Real time in milliseconds the function \
            under the cursor"
    addInfo cpu {CPU time} 0 10 \
            "Amount of CPU time in milliseconds the function under the \
            cursor consumed"
    addInfo cpuPercent {CPU %} 0 8 \
            "Percentage of the total CPU time in milliseconds the function \
            under the cursor"
    eval itk_initialize $args

    set packagePathList {}

    if {[info exists env(PTARCH)]} {
	# Look in tycho/lib.$PTARCH
	if [file exists [file join $tycho lib.$env(PTARCH)]] {
	    lappend packagePathList [list tclXprofile \
		    [file join $tycho lib.$env(PTARCH)]]
	}
	# Look in /users/ptdesign/tycho/lib.$PTARCH
	if [file exists [file join \
		/ users ptdesign tycho lib.$env(PTARCH)]] {
	    lappend packagePathList [list tclXprofile \
		    [file join \
		    / users ptdesign tycho lib.$env(PTARCH)]] 
	}
    }
    ::tycho::loadIfNotPresent profile tclx $packagePathList
    
    # Set up bindings to update the times.
    $slate bind node <Enter> "$this updateTimes"
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### help
# Open a help window.
#
body ::tycho::ProfileTcl::help {} {
    hyperJump [file join \$TYCHO editors visedit doc \
	    usersGuides ProfileTclHelp.html] {}
}

#######################################################################
#### profileCancel.
# Turn profiling off and do not report the results.
#
body ::tycho::ProfileTcl::profileCancel {} {
    set cancel 1
    toolbar disable off
    toolbar disable cancel
    toolbar enable on
    profile off results

}

#######################################################################
#### profileDisplay.
# Turn profiling off and report the results.
#
body ::tycho::ProfileTcl::profileDisplay {} {
    profile off results
    #parray results
    clear
    set cancel 0
    set depth 1
    set maxdepth 1

    # If we knew we had TclX, then we could use lassign in the inner loop
    # However, the user might have installed our standalone
    # version of profile, in which case lassign is not present.

    # Place this outside the loop for performance
    set colors [list black navyblue blue cyan purple magenta red orange \
            yellow white white]

    while {$depth <= $maxdepth} {
        set count 0
        set resultssize [array size results]
        set id [array startsearch results]
        statusbar puts \
                "depth= $depth of $maxdepth, array is $resultssize elements"
        while {[set entry [array nextelement results $id]] != {}} {
	    if { $cancel == 1 } {
		set cancel 0
		toolbar disable off
		toolbar disable cancel
		toolbar enable on
		redrawGraph
		return
	    }
	    ::tycho::safeUpdate $this
            set len [llength $entry]
            if {$len > $maxdepth} {set maxdepth $len}
            if {$len == $depth} {
                set resent $results($entry)
		set count [lindex $resent 0]
		set real [lindex $resent 1] 
		set cpu [lindex $resent 2] 

                set parent [join [lrange $entry 1 end] +]
                if {$parent == {}} {
                    set color white
                    set globaltime $cpu
                } {
                    set fst [graph]
                    array set parcontents [$fst contents $parent]
                    set partime $parcontents(cpu)
                    if {$partime > 0} {
                        set fraction [expr $cpu*10/$partime]
                        set color [lindex $colors $fraction]
                    } {
                        if {$globaltime > 0} {
                            set fraction [expr $cpu*10/$globaltime]
                            set color [lindex $colors $fraction]
                        } {
                            set color black
                        }
                    }
                }
                if {$depth >= 20} {
                    set open 0
                } {
                    set open 1
                }
                set contents [list \
                        label [list [lindex $entry 0] $resent] \
                        color $color \
                        count $count \
                        real $real \
                        cpu $cpu \
                        open $open]
                add [join $entry +] $contents $parent
            }
        }
        array donesearch results $id
        incr depth
    }
    
    toolbar disable off
    toolbar disable cancel
    toolbar enable on
    redrawGraph
}

#######################################################################
#### profileStart
# Turn profiling on.
#
body ::tycho::ProfileTcl::profileStart {} {
    set cancel 0
    toolbar enable off
    toolbar enable cancel
    toolbar disable on
    profile -commands on
}

#######################################################################
#### updateTimes
# Update the times displayed at the bottom to those of the node closest
# to the current position of the mouse.
#
body ::tycho::ProfileTcl::updateTimes {} {
    set node [current]
    if {$node == {}} {return}
    set root [[graph] roots]
    set fst [graph]

    # Determine the total about of Real and CPU time 
    array set contents [$fst contents $root]
    set totalReal $contents(real)
    set totalCPU $contents(cpu)

    array set contents [$fst contents $node]

    addInfo count {Call count} $contents(count) 
    addInfo real {Real time} $contents(real) 
    if {$totalReal != 0.0} {
        addInfo realPercent {Real %} \
                [format "%5.3f" \
                [expr {$contents(real) / ($totalReal + 0.0) *100}]]
    }
    addInfo cpu {CPU time} $contents(cpu) 
    if {$totalCPU != 0.0} {
        addInfo cpuPercent {CPU %} \
                [format "%5.3f" \
                [expr {$contents(cpu) / ($totalCPU + 0.0) *100}]]
    }
}


####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::ProfileTcl::_initializeBars {menubar statusbar toolbar} {
        {{menubar {}} {statusbar {}} {toolbar {}}} {
    chain $menubar $statusbar $toolbar

    if {$toolbar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::ProfileTcl::_initializeToolbar $toolbar
    }

    # Give the window a title
    displayer configure -title {[Incr Tcl] Profiler}
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### _initializeToolbar
# Initialize the tool bar.  Adds entries specific to this class.
#
body ::tycho::ProfileTcl::_initializeToolbar {toolbar} {
    $toolbar button on \
            -text "Start" \
            -description {Start collecting profiling data} \
            -command "$this profileStart"
    $toolbar button off \
            -text Display \
            -description {Display profile as a call tree} \
            -command "$this busy $this profileDisplay"
    $toolbar button cancel \
            -text Cancel \
            -description {Cancel profile collection or profile rendering} \
            -command "$this profileCancel"

    $toolbar disable off
    $toolbar disable cancel
}

