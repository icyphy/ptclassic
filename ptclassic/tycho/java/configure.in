dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run to configure the
dnl	Makefile in this directory.

# Version: $Id$
# Copyright (c) 1997-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY


dnl Don't look for ptolemy/kernel/util/NamedObj.java here, or
dnl else we won't be able to rebuild after make extraclean.
AC_INIT(mk/ptII.mk.in)

# We must have PTII set before running configure.
if test -z "$PTII"; then
    if test -n "$PTOLEMY"; then
	if test -d "$PTOLEMY/tycho/java"; then
	    echo "\$PTOLEMY/tycho/java exists, setting PTII to that value"
	    PTII="$PTOLEMY/tycho/java"
	    # We should not have to call AC_PREFIX_DEFAULT($PTII) here
	    # but autoconf shuffles things around, so the call to
	    # AC_PREFIX_DEFAULT($PTII) that is 15 or so lines below
	    # actually appears at the top of configure.
	    ac_default_prefix=$PTII
	else
	    exit 3
	fi    
    else
	echo "You must set the PTII environment variable before running configure"
	exit 3
    fi

fi 

if test  ! -d "$PTII"; then
    echo "\$PTII is set to '$PTII', but it does not exist"
    exit 3	
fi 

if test  ! -w "$PTII"; then
    echo "\$PTII is set to '$PTII', but it is not writable by you"
    exit 3	
fi 
PTII_DEFAULT=$PTII
# The default value of prefix
AC_PREFIX_DEFAULT($PTII)


#--------------------------------------------------------------------
#	See if there was a command-line option for where Java is;  if
#	not, check to see if the PTJAVA_DIR environment variable is set;
#       if it is not, look for javac on the path.
#--------------------------------------------------------------------

AC_ARG_WITH(java, [  --with-java=DIR         use Java binaries from DIR,
                           defaults to the value of the
                           PTJAVA_DIR environment variable],
    PTJAVA_DIR=$withval)

if test ! -d "$PTJAVA_DIR"; then
    if test -z "$PTJAVA_DIR"; then
	AC_MSG_WARN([PTJAVA_DIR environment variable was not set,
so we search for the java compiler.])

    else
	AC_MSG_WARN([PTJAVA_DIR environment variable is set to
'${PTJAVA_DIR}', which is not a directory,
so we search for the java compiler.])
    fi 
    AC_PATH_PROG(JAVAC, javac)
    if test -x "$JAVAC"; then	
	JAVABIN=`dirname $JAVAC`
	PTJAVA_DIR=`dirname $JAVABIN`
	if test "$PTJAVA_DIR" = "/"; then
	    if test -d /usr/java; then
		PTJAVA_DIR=/usr/java
	        AC_MSG_WARN([ Found javac in '$JAVABIN', /usr/java exists, so
  we are setting PTJAVA_DIR to '$PTJAVA_DIR'])
	    fi	
	fi

    else
        AC_MSG_WARN([ Failed to find javac, perhaps Java is not installed?])
    fi

    # The default location that we look for the JDK.  This should probably
    # be a list that includes /usr/local/jdk and /opt/jdk
    if test ! -d "$PTJAVA_DIR"; then
	DEFAULT_JDK=/opt/jdk1.1.6
	if test -d "$DEFAULT_JDK"; then
	    PTJAVA_DIR=`cd $DEFAULT_JDK; pwd`	
	    AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])

	else 
	    DEFAULT_JDK=/usr/java
	    if test -d "$DEFAULT_JDK"; then
		PTJAVA_DIR=`cd $DEFAULT_JDK; pwd`	
		AC_MSG_WARN(['${PTJAVA_DIR}' is not a directory, using the default '${DEFAULT_JDK}'])
	    else
			    AC_MSG_ERROR([
Java directory $DEFAULT_JDK doesn't exist.
Try --with-java=DIR, or set the PTJAVA_DIR environment variable.])
	    fi
	fi	
    fi	
fi

#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java runtime in $PTJAVA_DIR/bin])
if test -f $PTJAVA_DIR/bin/java; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/java)
    AC_MSG_CHECKING([that you have the right java in your path.])
    AC_PATH_PROG(JAVA, java)
    if test "$PTJAVA_DIR/bin/java" = "$JAVA"; then
	AC_MSG_RESULT([  You have the right java in your path, $PTJAVA_DIR/bin/java = $JAVA])
    else
	AC_MSG_WARN([$PTJAVA_DIR/bin/java is not the same as $JAVA.
Be sure that you don't have a mismatch in JDK versions.])
	JAVA=$PTJAVA_DIR/bin/java
    fi
else
    AC_MSG_ERROR([
  Cannot find $PTJAVA_DIR/bin/java.
  Try --with-java=DIR, or set the PTJAVA_DIR environment variable.]) 
fi


#
# Check that we have the javac that corresponds with PTJAVA_DIR in our path
#
AC_MSG_CHECKING([for the java compiler in $PTJAVA_DIR/bin])
if test -f $PTJAVA_DIR/bin/javac; then
    AC_MSG_RESULT($PTJAVA_DIR/bin/javac)
    AC_MSG_CHECKING([that you have the right javac in your path.])
    AC_PATH_PROG(JAVAC, javac)
    if test "$PTJAVA_DIR/bin/javac" = "$JAVAC"; then
        AC_MSG_RESULT([  You have the right javac in your path, $PTJAVA_DIR/bin/javac = $JAVAC])
    else
        AC_MSG_WARN([$PTJAVA_DIR/bin/javac is not the same as $JAVAC.
Be sure that you don't have a mismatch in JDK versions.])
	JAVAC=$PTJAVA_DIR/bin/javac
    fi
else
    AC_MSG_ERROR([
  Cannot find $PTJAVA_DIR/bin/javac.
  Try --with-java=DIR, or set the PTJAVA_DIR environment variable.])
fi


#--------------------------------------------------------------------
#	Figure out whether to use javac -Xdepend or javac -depend
#--------------------------------------------------------------------
AC_MSG_CHECKING([the Java compiler with a simple compile])
# We need to run javac in the config directory so that javac from jdk1.1.6
# under NT and cygwin works properly
startdir=`pwd`
cd $srcdir/config
# Don't use 'env $JAVAC . . .' here, it will not work under Cygwin
if $JAVAC confTest.java ; then
    AC_MSG_RESULT(ok)

    AC_MSG_CHECKING([the value of the java.version Property ])
    # Strip out the JDK1.3beta messages under Solaris2.5.1
    JVERSION=`CLASSPATH=$PTII/config $JAVA confTest | 
	grep -v "Warning! The libthread.so on your system is an older version than" |
	grep -v "the one this VM was tested with. Please read the install documentation for" |
	grep -v "patch installation instructions."`	
    AC_MSG_RESULT($JVERSION)

    JDEPENDFLAG="-Xdepend"
    AC_MSG_CHECKING([javac $JDEPENDFLAG])
    if $JAVAC -d $startdir $JDEPENDFLAG confTest.java ; then
	AC_MSG_RESULT(yes)
    else
	AC_MSG_RESULT(no)
	JDEPENDFLAG="-depend"
	AC_MSG_CHECKING([javac $JDEPENDFLAG])
	if $JAVAC -d $startdir $JDEPENDFLAG confTest.java ; then
	    AC_MSG_RESULT(yes)
	else
	    AC_MSG_RESULT(no)
	    AC_MSG_WARN(['$JAVAC -d $startdir -Xdepend confTest.java' and
'$JAVAC -d $startdir -depend confTest.java' both failed, so we don't
know how to build with dependencies taken into account.  This could
cause problems later if you modify .java files that other .java
files depend on])
	    AC_MSG_RESULT($JDEPENDFLAG)
	fi
    fi
else
    JDEPENDFLAG="-depend"
   AC_MSG_WARN(['$JAVAC confTest.java' failed,
so we can't figure out whether to use -Xdepend or -depend.
Defaulting to $JDEPENDFLAG]);
fi
cd $startdir


#--------------------------------------------------------------------
#	Figure out which separator to use for CLASSPATH
#	So much for write once, run everywhere.
#--------------------------------------------------------------------
AC_MSG_CHECKING([for the proper CLASSPATH separator])
case "`uname -s`" in
    CYGWIN_NT-4.0) CLASSPATHSEPARATOR=";";;
    *) CLASSPATHSEPARATOR=":";;
esac
AC_MSG_RESULT(['$CLASSPATHSEPARATOR'])

#--------------------------------------------------------------------
#	See if there was a command-line option for where javacc is;  if
#	not, check to see if $PTII/vendors/sun/JavaCC exists
#       if it is does not, look for javacc on the path.
#--------------------------------------------------------------------

# We only need to look for JavaCC if $PTII/ptolemy/data/expr exists
if test ! -d "$PTII/ptolemy/data/expr"; then
    AC_MSG_RESULT([$PTII/ptolemy/data/expr is not present, so we need not
find JavaCC])
    JAVACC_DIR=$PTII/vendors/sun/JavaCC
    JAVACC=javacc
    JJTREE=jjtree
else
    AC_MSG_CHECKING([for JavaCC])
    AC_ARG_WITH(javacc, [  --with-javacc=DIR       use JavaCC.zip from DIR,
                           defaults to \$PTII/vendors/sun/JavaCC],
	JAVACC_DIR=$withval, JAVACC_DIR=$PTII/vendors/sun/JavaCC)

    if test "`uname -s`" = "CYGWIN_NT-4.0"; then
	JJTREE='\$(JAVA) COM.sun.labs.jjtree.Main'
	JAVACC='\$(JAVA) COM.sun.labs.javacc.Main'
	AC_MSG_WARN([Be sure that your CLASSPATH includes JavaCC.zip]);
    else
	if test ! -d "$JAVACC_DIR"; then
	    AC_MSG_WARN(['${JAVACC_DIR}' is not a directory, 
so we search for the jjtree command.])
	    AC_PATH_PROG(JJTREE, jjtree)
	    if test -x "$JJTREE"; then	
		AC_MSG_RESULT([$JJTREE]);
		JAVACCBIN=`dirname $JJTREE`
		JAVACC_DIR=`dirname $JAVACCBIN`
	    else  	
		AC_MSG_WARN([Failed to find jjtree]);
	    fi
	fi	
	if test -d "$JAVACC_DIR"; then
	    AC_MSG_RESULT([$JAVACC_DIR])
	    AC_MSG_CHECKING([for jjtree])
	    if test -x "$JAVACC_DIR/bin/jjtree"; then
		# Note that we don't substitute in the $(JAVACC_DIR) here
		JJTREE='$(JAVACC_DIR)/bin/jjtree'
		AC_MSG_RESULT([$JJTREE])
	    else    
		AC_MSG_WARN([Failed to find jjtree in '$JAVACC_DIR/bin']);
	    fi    
	    AC_MSG_CHECKING([for javacc])
	    if test -x "$JAVACC_DIR/bin/javacc"; then
		# Note that we don't substitute in the $(JAVACC_DIR) here
		JAVACC='$(JAVACC_DIR)/bin/javacc'
		AC_MSG_RESULT([$JAVACC])
	    else    
		AC_MSG_WARN([Failed to find javacc in '$JAVACC_DIR/bin']);
	    fi    
	fi
    fi

    if test ! -d "$JAVACC_DIR"; then
        AC_MSG_WARN([Failed to find javacc, perhaps JavaCC is not installed?
You need not download JavaCC unless you plan on modifying certain files 
in ptolemy/data/expr. 
JavaCC can be downloaded from http://www.sun.com/suntest'])
	JJTREE=touch
	JAVACC=touch
    fi
fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where javasound is;  if
#	not, check to see if $PTII/vendors/sun/javasound exists
#
#--------------------------------------------------------------------

# We only need to look for javasound if $PTII/ptolemy/media/javasound exists
if test ! -d "$PTII/ptolemy/media/javasound"; then
    AC_MSG_RESULT([$PTII/ptolemy/media/javasound is not present, so we need not
find JavaSound])
    JAVASOUND_LIBDIR=$PTII/vendors/sun/javasound/lib
else
    AC_MSG_CHECKING([for JavaSound])
    AC_ARG_WITH(javacc, [  --with-javasound-lib=DIR    use sound.jar from DIR,
                           defaults to \$PTII/vendors/sun/javasound/lib],
	JAVASOUND_LIBDIR=$withval,
	JAVASOUND_LIBDIR=$PTII/vendors/sun/javasound/lib)

    if test ! -f "$JAVASOUND_LIBDIR/sound.jar"; then
        AC_MSG_WARN([Failed to find $JAVASOUND_LIBDIR/sound.jar,
  perhaps JavaSound is not installed?
  You need not download JavaSound unless you plan using the
  files in ptolemy/media/javasound.
  JavaSound can be downloaded from
  http://developer.java.sun.com/developer/earlyAccess/sound/index.html'])
	# Directories that require javasound.
	# JAVASOUND_NEEDED_DIRS is used in ptolemy/media/makefile
	# to add the javasound directory to the list of directories
	# to run submakes in if we found sound.jar
	JAVASOUND_NEEDED_DIRS=""
   else 
	JAVASOUND_NEEDED_DIRS="javasound"
	AC_MSG_RESULT([$JAVASOUND_LIBDIR])
    fi
fi

#--------------------------------------------------------------------
#	See if there was a command-line option for where Jacl is
#--------------------------------------------------------------------

# We only need to find Jacl if $PTII/util/testsuite
# exists.  If we are shipping ptplot, then this directory might not
# exist
PTJACL_JAR=$PTII/lib/ptjacl.jar
# The reference version of JDK 1.2 has a -native flag
# If we don't use -native, then some of the threading tests fail
PTJACL_JFLAG=-native
JTCLSH='[$(JAVA) $(PTJACL_JFLAG) tcl.lang.Shell]'

if test ! -d "$PTII/util/testsuite"; then
    AC_MSG_RESULT([$PTII/util/testsuite is not a directory, so we need not
find Jacl])
else
    AC_MSG_CHECKING([for ptjacl.jar])
    AC_ARG_WITH(ptjacl_jar, [  --with-ptjacl_jar=PTJACL.JAR  ptjacl.jar file,
                           used for running the test scripts],
	PTJACL_JAR=$withval, PTJACL_JAR=$PTII/lib/ptjacl.jar)

    if test -f "$PTJACL_JAR"; then
	AC_MSG_RESULT([$PTJACL_JAR])
	AC_MSG_CHECKING([for how to run jacl])
	# This command starts up Jacl
	if echo "set java::jdkVersion; exit" | CLASSPATH=$PTJACL_JAR $JAVA $PTJACL_JFLAG tcl.lang.Shell; then
		AC_MSG_RESULT([CLASSPATH=$PTJACL_JAR $JAVA $PTJACL_JFLAG tcl.lang.Shell])
	else
		PTJACL_JFLAG=
		AC_MSG_RESULT(['$JAVA -native' failed,
  use CLASSPATH=$PTJACL_JAR $JAVA tcl.lang.Shell])
		JTCLSH='[$(JAVA) tcl.lang.Shell]'
	fi
    else
	AC_MSG_WARN([The ptjacl.jar file was not found at '$PTJACL_JAR'
  ptjacl.jar is only necessary if you plan on running the test suite.
  You can download ptjacl.jar from
  http://ptolemy.eecs.berkeley.edu/~cxh/java/jacl/ptjacl.html])
    fi	 
fi



# Keep these substitutions alphabetical, with a description

# Separator in CLASSPATH,  For Unix, this should be :, for Cygwin use ;
AC_SUBST(CLASSPATHSEPARATOR)

# javacc binary
AC_SUBST(JAVACC)

# Directory that contains JavaCC, which is used in ptolemy/data/expr
AC_SUBST(JAVACC_DIR)

# Directory that contains sound.jar, which is part of JavaSound, and
# used by ptolemy/media/javasound
AC_SUBST(JAVASOUND_LIBDIR)

# JAVASOUND_NEEDED_DIRS is used in ptolemy/media/makefile
# to add the javasound directory to the list of directories
# to run submakes in if we found sound.jar
AC_SUBST(JAVASOUND_NEEDED_DIRS)

# Arguments to pass to javac.  Usually something like '-g -depend'
AC_SUBST(JDEPENDFLAG)

# jtclsh script, used for test suites
AC_SUBST(JTCLSH)

# jtree binary
AC_SUBST(JTREE)

# JDK Version determined by running confTest.class and getting java.version
AC_SUBST(JVERSION)

# ptjacl.jar file, used to run the test suites
AC_SUBST(PTJACL_JAR)

# Flag to pass to java when we start up jacl
AC_SUBST(PTJACL_JFLAG)

# Location of the JDK
AC_SUBST(PTJAVA_DIR)

# Location of the PtII directory
AC_SUBST(PTII_DEFAULT)

# Files we substitute in
AC_OUTPUT(mk/ptII.mk bin/ptjacl ptolemy/plot/ptplot, chmod a+x bin/ptjacl; cp bin/ptjacl bin/ptjaclapp)

