# Build derived files in Tycho, such as itcl html docs and indexes.
#
# @Author: Christopher Hylands
#
# @Version: @(#)Builder.itcl	1.24 06/29/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### Builder
# The Builder class builds derived files such as Itcl HTML documentation
# concept and code indexes and the class diagram.
#
# The Builder class is primarily for use on platforms such as the Mac
# that do not have 'make'
#
# The procs in this class should be named such that similar procs 
# share similar prefixes so that they are grouped together.  For example,
# testAll and testDir.
#
# See the BuilderDialog class for a graphical interface.
#
# FIXME: it would be nice if we could parse makefiles to get variables.
#
# FIXME: No tests as of yet
#
class ::tycho::Builder {
    inherit ::tycho::Uninstantiable

    ###################################################################
    ####                         public procs                      ####

    # Get the latest sources from version control and create tclIndex files.
    proc all {}

    # Do what ever is necessary to Build Tycho.
    proc build {}

    # Do build in subdirectories.
    proc buildSubDirectories {}

    # Create the class diagram. 
    proc classDiagram {}

    # Create a Full Tycho distribution.
    proc distFull {}

    # Return the directory where the distribution is built.
    proc getDistBuildDir {} {return $distbuilddir}

    # Create glimpse files.
    proc glimpse {}

    # Create idocs in the subdirectories.
    proc idocs {}

    # Create the concept and code indices.
    proc indices {}

    # Create itcldocs in the subdirectories.
    proc itcldocs {}

    # Return a list of files that correspond with the autoloaded classes.
    proc filesLoaded { {namespace ::tycho} }

    # Build the Ptolemy domain Index.
    proc ptDomainIndex {}

    # Build the Ptolemy facet forest at $TYCHO/typt/lib/PtolemyFacets.fst
    proc ptolemyFacetsForest {}

    # Get the sources from version control system.
    proc sources {}

    # Build tcl extensions in %TYCHO/obj.$PTARCH.
    proc tclexts {}

    # Run all the Tycho tests.
    proc testAll {}

    # Run all the Tycho tests in a directory
    proc testDir { dir {testfile alltests.itcl}}

    # Create tclIndex files.
    proc tclIndex {}

    ###################################################################
    ####                   protected variables                     ####

    # Location of the directory where the distribution is built
    protected common distbuilddir [file join $TYCHO adm gen-$tycho_version]

    # List of directories that contain Itcl sources.
    protected common itcldirs [list \
	    [file join \$TYCHO kernel basic] \
	    [file join \$TYCHO kernel model] \
	    [file join \$TYCHO kernel gui] \
	    [file join \$TYCHO kernel html] \
	    [file join \$TYCHO edit textedit] \
	    [file join \$TYCHO edit slate] \
	    [file join \$TYCHO edit visedit] \
	    [file join \$TYCHO edit graphedit] \
	    [file join \$TYCHO typt kernel] \
	    [file join \$TYCHO typt edit]]
}

    ###################################################################
    ###################################################################
    ####                      public procs                       ####


#######################################################################
#### all
# Get the latest sources from version control and create tclIndex files.
#
body ::tycho::Builder::all {} {
    global TYCHO
    ::tycho::view Monitor -toolbar 1 \
            -command {make all} \
            -dir $TYCHO \
            -autostart 1 -autodestroy 1
}


#######################################################################
#### build
# Do what ever is necessary to build the documentation, indices and other
# files from Tycho source files.
#
body ::tycho::Builder::build {} {
    global TYCHO
    puts "Running build in $TYCHO"
    #buildSubDirectories
    classDiagram
    itcldocs
    idocs
    indices
    puts "Running itcldocs again so we get the cross refs"
    itcldocs
    ptDomainIndex
    ptolemyFacetsForest

}

#######################################################################
#### buildSubDirectories
# Run build in subdirectories.
#
body ::tycho::Builder::buildSubDirectories {} {
    # FIXME: buildSubDirectories is not implemented yet
    error "buildSubDirectories is not implemented yet."
}

#######################################################################
#### classDiagram
# Create the Tycho class diagram.
#
body ::tycho::Builder::classDiagram {} {
    global TYCHO errorInfo
    puts "Creating [file join $TYCHO doc tychoClasses.dag]"
    update
    if { [info command tychoStandardDAG] == {} } {
	source [file join $TYCHO kernel basic tychoMakeClassDAG.tcl]
    }
    set savedir [pwd]
    cd [file join $TYCHO doc]

    if [ catch {::tychoStandardDAG} errmsg] {
        cd $savedir
        error "$errmsg $errorInfo"
    }
    cd $savedir
}

#######################################################################
#### distFull
# Create a Full Tycho distribution for redistribution off-site.
# 
body ::tycho::Builder::distFull {} {
    global TYCHO

    if ![file writable $distbuilddir] {
        error "Cannot build Tycho distribution, the\ndirectory\
                '$distbuilddir' either does not exist or is not writable."
    }
    #set win [::tycho::autoName .distFullExec]
    ::tycho::view Monitor -toolbar 1 \
            -command {make clean all} \
            -dir $distbuilddir \
            -autostart 1 -autodestroy 1

}

#######################################################################
#### glimpse
# Create glimpse files.
#
body ::tycho::Builder::glimpse {} {
    ::tycho::Glimpse::updateTychoDatabase
}

#######################################################################
#### idocs
# Create idocs in the subdirectories.
# See $TYCHO/util/tydoc/idoc for more information.
#
body ::tycho::Builder::idocs {} {
    global TYCHO
    puts "Running idocs"
    set generateIndex 1
    set debug 1

    set savedir [pwd]
    foreach idir $itcldirs {
	puts "Running idocs in $idir"
        update

	eval cd $idir
	set title "Index of classes in $idir"
	set retval [::tycho::ClassParser::generateIDoc $debug \
		$generateIndex $title \
		[glob -nocomplain *.itcl *.tcl]]
	if {$retval != ""} {
	    puts $retval
	}
    }
    cd $savedir
}

#######################################################################
#### indices
# Create the concept and code indices.
#
body ::tycho::Builder::indices {} {
    global TYCHO
    if { [info command tychoStandardIndex] == {} } {
	source [file join $TYCHO lib idx tychoMakeIndex.tcl]
    }
    puts "Creating [file join $TYCHO lib idx tycho.idx]"
    update
    set savedir [pwd]
    cd [file join $TYCHO lib idx]
    tychoStandardIndex
    puts "Creating [file join $TYCHO lib idx codeDoc.idx]"
    update
    cd [file join $TYCHO lib idx]
    tychoCodeDocIndex
    cd $savedir
}

#######################################################################
#### itcldocs
# Create itcldocs in the subdirectories.
# See $TYCHO/util/tydoc/tydoc for more information.
#
body ::tycho::Builder::itcldocs {} {
    global TYCHO
    puts "Running itcldocs"
    set verbose 1
    set generateIndex 1
    set debug 1

    set savedir [pwd]
    foreach itcldir $itcldirs {
	puts "Running itcldocs in $itcldir"
        update

	eval cd $itcldir
	set title "Index of classes in $itcldir"
	set retval [::tycho::HTMLDocSys::generateHTML $verbose $debug \
		$generateIndex $title \
		[glob -nocomplain *.itcl *.tcl]]
	if {$retval != ""} {
	    puts $retval
	}
    }
    cd $savedir
}

#######################################################################
#### ptDomainIndex
# Build the Ptolemy domain index at $PTOLEMY/src/domains/domain.idx
#
body ::tycho::Builder::ptDomainIndex {} {
    global PTOLEMY
    if [ file exists [file join $PTOLEMY src domains makefile ]] { 
	puts "Generating domain.idx may take an hour"
	#set win [::tycho::autoName .starIndices]
	::tycho::view Monitor -toolbar 1 \
		-command {make src/domains/domain.idx} \
		-dir $PTOLEMY \
		-autostart 1 -autodestroy 1
    }
}

#######################################################################
#### ptolemyFacetsForest
# Build the Ptolemy facet forest at $TYCHO/typt/lib/PtolemyFacets.fst
#
body ::tycho::Builder::ptolemyFacetsForest {} {
    global PTOLEMY TYCHO
    if [ file exists [file join $PTOLEMY src domains makefile ]] { 
	set win [::tycho::autoName .ptolemyFacetForest]
	file delete -force [file join $TYCHO typt lib PtolemyFacets.fst]
	::tycho::view Monitor -toolbar 1 \
		-command {make PtolemyFacets.fst} \
		-dir [file join $TYCHO typt lib] \
		-autostart 1 -autodestroy 1
    }
}

#######################################################################
#### sources
# Do 'make sources'
#
body ::tycho::Builder::sources {} {
    global TYCHO
    #set win [::tycho::autoName .tclextsExec]
    ::tycho::view Monitor -toolbar 1 \
            -command {make sources} \
            -dir $TYCHO \
            -autostart 1 -autodestroy 1
}


#######################################################################
#### filesLoaded
# Return a list of files that correspond with the classes that have been
# loaded. This method assumes that the file is named after the class. 
# If, for a particular class, a file can't be found, then error is called.
#
body ::tycho::Builder::filesLoaded { {namespace ::tycho} } {
    global auto_path
    set filelist {}
    set loadedclasslist [namespaceChildren $namespace]
    foreach loadedclass $loadedclasslist {
	foreach dir $auto_path {
	    foreach file [glob -nocomplain [file join $dir *]] {
		if {[file rootname $dir] \
			== [namespaceTail $loadedclass]} {
		    lappend filelist $file
		}
	    }
	}
	error "Could not find File for $loadedclass"
    }
    return $filelist
}

#######################################################################
#### tclexts
# Build tcl extensions in $TYCHO/obj.$PTARCH.
#
body ::tycho::Builder::tclexts {} {
    global TYCHO
    #set win [::tycho::autoName .tclextsExec]
    ::tycho::view Monitor -toolbar 1 \
            -command {make tclexts} \
            -dir $TYCHO \
            -autostart 1 -autodestroy 1
}

#######################################################################
#### testAll
# Run all the Tycho tests.
# See $TYCHO/doc/coding/testing.html for more information.
#
body ::tycho::Builder::testAll {} {
    global TYCHO reallyExit
    set reallyExit 0
    set savedir [pwd]
    cd $TYCHO
    source [file join kernel gui test alltychotests.tcl]
    cd $savedir
}

#######################################################################
#### testDir
# Run all the Tycho tests in a directory
#
body ::tycho::Builder::testDir { dir {testfile alltests.itcl}} {
    global TYCHO reallyExit
    set reallyExit 0
    set savedir [pwd]
    cd $dir
    uplevel #0 source $testfile
    cd $savedir
}

#######################################################################
#### tclIndex
# Create tclIndex
#
body ::tycho::Builder::tclIndex {} {
    # FIXME: tclIndex is not implemented yet
    error "Sorry, not implemented yet"
}
