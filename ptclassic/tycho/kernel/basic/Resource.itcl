# The abstract superclass of file-like "resources"
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Resource
#
# The Resource class abstracts the notion of files and (t some extent)
# a file system. A given Resource object can be used as a directory
# or as a file, making it very convenient for both moving around
# file systems and accessing files within it. The data accessed by a
# resource could be a local file system, an HTTP server, a database,
# or anywhere else. Streamable resources act like regular files;
# non-streamable resource act like data repositories. In all cases,
# file and directory paths use a URL-like naming scheme.
#
class ::tycho::Resource {
    inherit ::tycho::Object

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Close the resource
    method close {}

    # Make a duplicate of the contents of this resource
    method copy {target}

    # Delete this resource
    method delete {}

    # Test if a given resource is openable by this object
    method exists {}

    # Flush buffered output to a streamable resource 
    method flush {}

    # Read a string from a streamable resource 
    method gets {}

    # Return files relative to the current directory 
    method glob {{pattern *}}

    # Return true if the current resource is a file 
    method isfile {{name ""}}

    # Create a new directory
    method mkdir {name}

    # Get the current full resource name
    method name {}

    # Open a new resource
    method new {{name {}}}

    # Open the resource
    method open {name {mode "r+"}}

    # Write a string to a streamable resource 
    method puts {}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return true if the resource is readable
    method readable {{name ""}}

    # Source a streamable resource as a Tcl script
    method source {}

    # Get the status of a resource
    method stat {}

    # Return 1 if a resource is streamable
    method streamable {}

    # Return true if the resource is writable
    method writeable {{name ""}}

    # Write a string to a streamable resource
    method write {}

    ###################################################################
    ####                           public procs                    ####

	# Create and open a new resource
	proc openResource {name}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected variables                ####

	# The access mode
	protected variable accessMode

	# The name of the current directory
	protected variable currentDirectory

	# The name of the current file (relative to the directory)
	protected variable currentFile

	# True if a file is open
	protected variable fileIsOpen

    ###################################################################
    ####                         private variables               ####
}


#######################################################################
#### constructor
#
body ::tycho::Resource::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::Resource::destructor {} {
    close
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::Resource::close {} {
	::tycho::abstractMethod close
}

#####################################################################
#### copy
body ::tycho::Resource::copy {} {
	::tycho::abstractMethod clocopyse
}

#####################################################################
#### delete
body ::tycho::Resource::delete {} {
	::tycho::abstractMethod delete
}

#####################################################################
#### exists
body ::tycho::Resource::exists {} {
	::tycho::abstractMethod exists
}

#####################################################################
#### flush
body ::tycho::Resource::flush {} {
	::tycho::abstractMethod flush
}

#####################################################################
#### gets
body ::tycho::Resource::gets {} {
	::tycho::abstractMethod gets
}

#####################################################################
#### glob
body ::tycho::Resource::glob {{pattern *}} {
	::tycho::abstractMethod glob
}

#####################################################################
#### isfile
body ::tycho::Resource::isfile {{name {}}} {
	::tycho::abstractMethod isfile
}

#####################################################################
#### mkdir
body ::tycho::Resource::mkdir {name} {
	::tycho::abstractMethod mkdir
}

#####################################################################
#### name
body ::tycho::Resource::name {} {
	join [list $currentDirectory $currentFile] "/"
}

#####################################################################
#### new
body ::tycho::Resource::new {{name {}}} {
	set new [[info class] [::tycho::autoName resource]]
	if { $name == "" } {
		$new open $currentDirectory/$currentFile
	} else {
		$new open $currentDirectory/$name
	}
	return $new
}

#####################################################################
#### open
body ::tycho::Resource::open {name {mode "w+"}} {
	::tycho::abstractMethod open
}

#####################################################################
#### puts
body ::tycho::Resource::puts {string} {
	::tycho::abstractMethod puts
}

#####################################################################
#### read
body ::tycho::Resource::read {} {
	::tycho::abstractMethod read
}

#####################################################################
#### readable
body ::tycho::Resource::readable {{name {}}} {
	return 0
}

#####################################################################
#### source
body ::tycho::Resource::source {{name {}}} {
	::tycho::abstractMethod source
}

#####################################################################
#### stat
body ::tycho::Resource::stat {} {
	::tycho::abstractMethod stat
}

#####################################################################
#### streamable
body ::tycho::Resource::streamable {{name {}}} {
	return 0
}

#####################################################################
#### writable
body ::tycho::Resource::writable {} {
	return 0
}

#####################################################################
#### write
body ::tycho::Resource::write {data} {
	::tycho::abstractMethod write
}

#####################################################################
#### openResource
body ::tycho::Resource::openResource {name} {
	if { [regexp {$http://} $name] } {
		set new [::tycho::HTTPFile [::tycho::autoName httpfile]]
	} else {
		set new [::tycho::LocalFile [::tycho::autoName localfile]]
	}
	$new open $name
	return $new
}

#########################################################################
#########################################################################
####                        public procs                             ####

#########################################################################
#########################################################################
####                     protected methods                           ####

