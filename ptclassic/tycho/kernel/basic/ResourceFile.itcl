# The class representing files on a local file system
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceFile
#
# The ResourceFile class abstracts the notion of files and (t some extent)
# a file system. A given ResourceFile object can be used as a directory
# or as a file, making it very convenient for both moving around
# file systems and accessing files within it. The data accessed by a
# resource could be a local file system, an HTTP server, a database,
# or anywhere else. Streamable resources act like regular files;
# non-streamable resource act like data repositories. In all cases,
# file and directory paths use a URL-like naming scheme.
#
class ::tycho::ResourceFile {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Change the permissions
    method chmod {permissions {path {}}}

    # Close the resource
    method close {}

    # Return the content type of the current file
    method contenttype {}

    # Make a duplicate of the contents of this resource
    method copy {source target args}

    # Delete a resource
    method delete {path}

    # Test if a file is executable
    method executable {path}

    # Test if a given resource exists
    method exists {path}

    # Return the current file type 
    method filetype {}

    # Flush buffered output to a streamable resource 
    method flush {}

    # Read a string from a streamable resource 
    method gets {}

    # Return files at a given path
    method glob {pattern}

    # Return true if a given path is a file
    method isfile {path}

    # Create a new directory
    method mkdir {path}

    # Open a new resource
    method new {{path {}}}

    # Open the resource
    method open {{path {}} {mode "r"}}

    # Get the current full resource path
    method path {}

    # Write a string to a streamable resource 
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return true if a given resource is readable
    method readable {path}

    # Source a streamable resource as a Tcl script
    method source {{path {}}}

    # Get the status of a resource
    method stat {path varName}

    # Return 1 if this resource is streamable
    method streamable {}

    # Return true if a resource is writable
    method writable {{path {}}}

    # Write a string to a streamable resource
    method write {data}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected variables                ####

    ###################################################################
    ####                          private variables                ####
    
    # The current access mode
    private variable accessMode ""
    
    # The current channel (file) ID
    private variable fileid ""
}


#######################################################################
#### constructor
#
body ::tycho::ResourceFile::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::ResourceFile::destructor {} {
    $this close
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### chmod
body ::tycho::ResourceFile::chmod {permissions {path {}}} {
    # NOTE: Unix-dependent implementation
    if { $path == "" } {
        if { $currentFile != "" } {
            exec chmod $permissions $currentFile
        } else {
            error "No path name specified"
        }
    } else {
        exec chmod $permission $path
    }
}

#####################################################################
#### close
body ::tycho::ResourceFile::close {} {
    if { $fileid != "" } {
	::close $fileid
    }
    set fileid ""
    set fileIsOpen 0
}

#####################################################################
#### contenttype
# Return the content type of the open file.
body ::tycho::ResourceFile::contenttype {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    # For now, just return "text/plain". Later on, look at the
    # file extension and/or contents.
    return "text/plain"
}

#####################################################################
#### copy
body ::tycho::ResourceFile::copy {source target args} {
    if { $args != "" } {
	::file copy $args $source $target
    } else {
	::file copy $source $target
    }
}

#####################################################################
#### delete
body ::tycho::ResourceFile::delete {path} {
    if { $path == $currentFile } {
	close
    }
    ::file delete $path
}

#####################################################################
#### executable
body ::tycho::ResourceFile::executable {path} {
    ::file executable $path
}

#####################################################################
#### exists
body ::tycho::ResourceFile::exists {path} {
    ::file exists $path
}

#####################################################################
#### filetype
body ::tycho::ResourceFile::filetype {} {
    return "file"
}

#####################################################################
#### flush
body ::tycho::ResourceFile::flush {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::flush $fileid
}

#####################################################################
#### gets
body ::tycho::ResourceFile::gets {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::gets $fileid
}

#####################################################################
#### glob
body ::tycho::ResourceFile::glob {pattern} {
    ::glob $pattern
}

#####################################################################
#### isfile
body ::tycho::ResourceFile::isfile {path} {
    expr { [::file exists $path] && [::file type] == "file" }
}

#####################################################################
#### mkdir
body ::tycho::ResourceFile::mkdir {path} {
    ::file mkdir $path
}

#####################################################################
#### open
body ::tycho::ResourceFile::open {{path {}} {mode "r"}} {
    if $fileIsOpen {
	$this close
    }
    if { $path == "" } {
	if { $currentFile == "" } {
	    error "No path specified"
	}
	set path $currentFile
	set mode $accessMode
    } else {
	set currentFile $path
	set accessMode $mode
    }
    set fileid [::open $path $mode]
    set fileIsOpen 1
    return 1
}

#####################################################################
#### path
body ::tycho::ResourceFile::path {} {
    return $currentFile
}

#####################################################################
#### puts
body ::tycho::ResourceFile::puts {string} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::puts $fileid $string
}

#####################################################################
#### read
body ::tycho::ResourceFile::read {} {
    if !$fileIsOpen {
	$this open
	set data [::read $fileid]
	$this close
	return $data
    } else {
	::read $fileid
    }
}

#####################################################################
#### readable
body ::tycho::ResourceFile::readable {{path {}}} {
    if { $path == "" } {
	if { $currentFile != "" } {
	    ::file readable $currentFile
	} else {
	    error "No path name specified"
	}
    } else {
	::file readable $path
    }
}

#####################################################################
#### source
body ::tycho::ResourceFile::source {{path {}}} {
    if { $path == "" } {
	if { $currentFile != "" } {
	    ::source $currentFile
	} else {
	    error "No path name specified"
	}
    } else {
	::source $path
    }
}

#####################################################################
#### stat
body ::tycho::ResourceFile::stat {path varName} {
    # FIXME!!!!
    ::stat $path $varName
}

#####################################################################
#### streamable
body ::tycho::ResourceFile::streamable {} {
    return 1
}

#####################################################################
#### writable
body ::tycho::ResourceFile::writable {{path {}}} {
    if { $path == "" } {
	if { $currentFile != "" } {
	    ::file writable $currentFile
	} else {
	    error "No path name specified"
	}
    } else {
	::file writable $path
    }
}

#####################################################################
#### write
body ::tycho::ResourceFile::write {data} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::puts $fileid $data
}
