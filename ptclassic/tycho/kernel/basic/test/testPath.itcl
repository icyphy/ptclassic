# Test suite for testPath that will work from within itclsh
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source testDefs.tcl
} {}
source [file join .. Path.tcl]


test Path-1.1 { Check out files in the current dir vs. paths with env vars} {
    global env
    set env(MYVAR) [pwd]
    set localfile [::tycho::expandPath foo]
    set envfile [::tycho::expandPath \
	    [file join \$MYVAR foo]]

    # Verify that expanding a local file results in part
    # of the directory being tycho/kernel/test
    set localfilecheck [string range $localfile \
	    [ expr {[string length $localfile] - \
	    [string length [file join tycho kernel test foo]]}] end]

    set envfilecheck [string range $envfile \
	    [ expr {[string length $envfile] - \
	    [string length [file join tycho kernel test foo]]}] end]
    
    # Verify that localfile is the same as envfile
    list [expr {$localfile == $envfile}] $localfilecheck $envfilecheck
} {1 tycho/kernel/test/foo tycho/kernel/test/foo}

test Path-1.2 { tilde expand a user that does not exist} {
    catch {::tycho::expandPath ~anonexistantUser} errMsg
    list $errMsg
} {{user "anonexistantUser" doesn't exist}}

test Path-1.3 { tilde expand a user that does exist (Unix only)} {
    global tcl_platform
    if { $tcl_platform(platform) == "unix" } {
	set rootHome [::tycho::expandPath ~root/etc/passwd]
    } else {
	# If we are not running under Unix, then just return the right value.
	set rootHome /etc/passwd
    }
    list $rootHome
} {/etc/passwd}

test Path-2.1 { Test out uniqueFileName } {
    set file1 [::tycho::uniqueFileName]
    set file2 [::tycho::uniqueFileName]
    set file3 [::tycho::uniqueFileName myfile]
    set file4 [::tycho::uniqueFileName myfile]
    set file5 [::tycho::uniqueFileName myfile .itcl]
    set file6 [::tycho::uniqueFileName myfile .itcl]
    list [expr {$file1 == $file2}] [expr {$file3 == $file4}] \
	    [expr {$file5 == $file6}]
} {0 0 0}

test Path-2.2 { Test out tmpFileName } {
    set file1 [::tycho::tmpFileName]
    set file2 [::tycho::tmpFileName]
    set file3 [::tycho::tmpFileName myfile]
    set file4 [::tycho::tmpFileName myfile]
    set file5 [::tycho::uniqueFileName myfile .itcl]
    set file6 [::tycho::uniqueFileName myfile .itcl]
    if [info exists env(TMPDIR)] {
	set oldTMPDIR $env(TMPDIR)
    }
    set env(TMPDIR) $env(HOME)
    set file7 [::tycho::tmpFileName]
    set file8 [::tycho::tmpFileName]
    if [info exists env(TMPDIR)] {
	set env(TMPDIR) $oldTMPDIR
    }

    list [expr {$file1 == $file2}] [expr {$file3 == $file4}] \
	    [expr {$file5 == $file6}] [expr {$file7 == $file8}]
} {0 0 0 0}

test Path-3.1 {Test out mkdir and rm} {
    set myTmpDir [::tycho::tmpFileName myTmpDir .dir]
    ::tycho::mkdir  $myTmpDir
    set shouldExist [file isdirectory $myTmpDir]
    ::tycho::rm -rf $myTmpDir
    set shouldNotExist [file isdirectory $myTmpDir]
    list $shouldExist $shouldNotExist
} {1 0}

test Path-4.1 {Test out relativePath} {
    set r1 [::tycho::relativePath [file join / a b c d e] \
	    [file join / a b c h i]]
    set r2 [::tycho::relativePath [file join / a b c d e] \
	    [file join .. .. h i]]

    set r3 [::tycho::relativePath . .]
    set r4 [::tycho::relativePath .. ..]
    set r5 [::tycho::relativePath . [file join .. a]]
    set r6 [::tycho::relativePath [file join / a b c d e] [file join / a b c d e]]
    set r7 [::tycho::relativePath [file join / a b ] [file join / a b c d e]]
    set r8 [::tycho::relativePath  [file join / a b c d e] [file join / a b ]]
    set r9 [::tycho::relativePath  [file join a b c d e] [file join / a b ]]
    set r10 [::tycho::relativePath  [file join a b ] [file join a b .. c]]
    set r11 [::tycho::relativePath  \
	    /export/watson/watson3/cxh/pt/tycho/typt/editors/doc/codeDoc \
	    \$TYCHO/editors/visedit/doc/codeDoc/EditForest.html]
    list $r1 $r1 $r3 $r4 $r5 $r6 $r7 $r8 $r9 $r10 $r11
} {../../h/i ../../h/i . .. ../a e c/d/e ../../.. /a/b a/b/../c}
doneTests
