# A button box widget
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1995-1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME: The buttons are not evenly spaced. I thought the grid
# geometry manager would do this but apparently it doesn't.
# We might have to kludge something up.

#######################################################################
#### ButtonBox
# This class implements a reasonably useful button box widget. It is
# based on the grid geometry manager, and so allows you to add
# buttons at arbitrary locations if you want to.
#
# Note that this widget is fairly simple, and that the following
# options should not be changed once any buttons have been created:
# -statusbar, -columns.
#
class ::tycho::ButtonBox {
    inherit ::tycho::TWidget

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    # The number of columns in the grid. Zero means a horizontal layout,
    # gives a vertical layout, any other number gives a rectangular
    # layout.
    # Note: Cannot be reliably changed once buttons have been added
    itk_option define -columns columns Columns 0

    # The horizontal padding of buttons
    itk_option define -padx padX Pad 11

    # The vertical padding of buttons
    itk_option define -pady padY Pad 4

    # The font to use for the buttons
    itk_option define -font font Font [::tycho::font helvetica]

    # The width of the default ring
    itk_option define -ringwidth ringWidth RingWidth 4

    # The status bar to print help info to
    itk_option define -statusbar statusBar StatusBar ""

    ###################################################################
    ####                         public methods                    ####

    # Add a button to the box
    method add {tag args}

    # Get an option of a button
    method buttoncget {tag option}

    # Configure a button
    method buttonconfigure {tag {option {}} args}

    # Set the "default" button
    method default {tag}

    # Delete a button
    method delete {tag}

    # Execute the command of a specified button
    method invoke {tag}

    # Return the location of the given button as row.column
    method location {tag}

    ###################################################################
    ####                         protected variables               ####

    # The current column
    protected variable currentColumn 0

    # The current row
    protected variable currentRow 0

    # The default button
    protected variable defaultButton ""

    # The row of each button
    protected variable _row

    # The column of each button
    protected variable _column

    # The description of each button
    protected variable _description

    ###################################################################
    ####                       private variables                   ####

    # The names of the locally-stored options
    protected common localoptions {-row -column -description}
}

#######################################################################
#### constructor
#
body ::tycho::ButtonBox::constructor {args} {

    eval itk_initialize $args
    eval preference exclude $this $args
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### add
# Add a button to the button box. Any legal option for regular Tk
# buttons are allowed, except for the ones overridden by this
# widget: -font, -padx, -pady. In addition, the following options
# are allowed:
#
# <ul>
# <li>*-row*: Specify the row into which the button is placed.
# <li>*-column*: Specify the column into which the button is placed.
# <li>*-description*: If specified, this string is printed to the
# status bar widget when the mouse moves over the button.
# </ul>
#
# If either is given, then both of the row and column buttonopts
# must be given. If neither is given (what you would usually do),
# then the grid fills up from left to right and top to bottom.
#
body ::tycho::ButtonBox::add {tag args} {
    array set buttopts [concat [list -row $currentRow \
	    -column $currentColumn -description {}] $args]

    # Adjust row and column for next time if not explicitly set
    if { ! [::info exists _row($tag)] } {
	incr currentColumn
	if { $itk_option(-columns) > 0 \
		&& $currentColumn >= $itk_option(-columns) } {
	    set currentColumn 0
	    incr currentRow
	}
    }

    # Check that both or neither row/column are specified
    if { [::info exists buttopts(-row)] \
	    ^ [::info exists buttopts(-column)] } {
	error "Both row and column options must be specified"
    }
 
    # Check that no-one already has this row/column!
    foreach {t r} [array get _row] {q c} [array get _column] {
	if { $r == $buttopts(-row) && $c == $buttopts(-column) } {
	    error "Row $r, column $c is already used"
	}
    }

    # Get button options and extract non-button ones
    foreach opt $localoptions {
	if { [::info exists buttopts($opt)] } {
	    ::set _[string range $opt 1 end]($tag) $buttopts($opt)
	    unset buttopts($opt)
	}
    }

    # Create a frame for the button: this gives the default ring
    itk_component add frame$tag {
	frame $itk_component(childsite).frame$tag -borderwidth 2
    } {
	keep -background -cursor
    }

    # Create the button
    itk_component add $tag {
	eval button $itk_component(childsite).$tag \
		-highlightthickness 0 \
		[array get buttopts]
    } {
        keep -font -padx -pady
    }

    # Pack the button inside the frame and grid the frame
    pack $itk_component($tag) -in $itk_component(frame$tag) \
	    -padx $itk_option(-ringwidth) -pady $itk_option(-ringwidth) \
	    -fill x -expand on
    grid $itk_component(frame$tag) -row $_row($tag) \
	    -column $_column($tag) -sticky ew

    # Bind description output.
    if { $itk_option(-statusbar) != "" && $_description($tag) != "" } {
	bind $itk_component($tag) <Enter> \
		[list $itk_option(-statusbar) puts $_description($tag)]
	bind $itk_component($tag) <Leave> \
		"$itk_option(-statusbar) puts {}"
    }
}

#####################################################################
#### buttoncget
# Get a configuration option of a button.
#
body ::tycho::ButtonBox::buttoncget {tag option} {
    if { ! [::info exists _row($tag)] } {
	error "Button $tag does not exist"
    }

    # Get the option locally
    if { [lmember $localoptions $option] } {
	return [set _[string range $opt 1 end]($tag)]
    }

    # Get the option from the button
    return [$itk_component cget $option]
}
 
####################################################################
#### buttonconfigure
# Set the configuration options of a button. If only one argument
# is supplied, return all the current option values as an option
# value list. If the second argument is supplied, return a
# single option-value pair. Otherwise set the given options
# to the given values.
#
# Note: if you want to change the position of a button, you can do
# so by using these methods. However, you still have to ensure that
# the button is moved to a position notr already occupied.
#
body ::tycho::ButtonBox::buttonconfigure {tag {option {}} args} {
    if { $option == "" } {
	# We have been asked for a list of all options
	set result {}
	foreach opt $localoptions {
	    lappend result $opt [set _[string range $opt 1 end]($tag)]
	}
	foreach {opt bogus hocus pocus val} [$itk_component($tag) configure] {
	    lappend result $opt $val
	}
    } elseif { $args == "" } {
	# We have been asked for just one option
	return [list $opt [cget $tag $opt]]
    } else {
	# We have been asked to set options
	# First process each option individually
	set row $_row($tag)
	set column $_column($tag)
	set move 0
	foreach {opt val} [concat $option $args] {
	    if { [lmember $localoptions $opt] } {
		switch /$opt {
		    "/-row" {
			set row $val
			set move 1
		    }
		    "/-column" {
			set column $val
			set move 1
		    }
		    default {
			::set _[string range $opt 1 end]($tag) $val
		    }
		}
	    } else {
		$itk_component($tag) configure $opt $val
	    }
	}

	# If a button is being moved, check that no-one already has
	# ths posiion it's being moved to
	if { $move } {
	    foreach {t r} [array get _row] {q c} [array get _column] {
		if { $r == $row && $c == $column } {
		    error "Row $r, column $c is already used"
		}
	    }
	    # Now regrid it
	    grid configure $itk_component(frame$tag) -row $row -column $column
	}
    }
}

#####################################################################
#### default
# Set the default ring around the specified button and bind the
# return key to its command.
#
body ::tycho::ButtonBox::default {tag} {
    if { ! [::info exists _row($tag)] } {
	error "Button $tag does not exist"
    }

    if { $defaultButton != "" } {
	$itk_component(frame$defaultButton) configure -relief flat
    }
    $itk_component(frame$tag) configure -relief sunken
    set defaultButton $tag
}
 
####################################################################
#### delete
# Delete the specified button.
#
body ::tycho::ButtonBox::delete {tag} {
    if { [::info exists _row($tag)] } {
	pack forget $itk_component($tag)
	destroy $itk_component($tag)
	unset itk_component($tag)
 
	grid forget $itk_component(frame$tag)
	destroy $itk_component(frame$tag)
	unset itk_component(frame$tag)

	unset _row($tag)
	unset _column($tag)
	unset _description($tag)
    }
}

####################################################################
#### invoke
# Invoke the command of a specified button.
#
body ::tycho::ButtonBox::invoke {tag} {
    if { ! [::info exists _row($tag)] } {
	error "Button $tag does not exist"
    }

    uplevel #0 [$itk_component($tag) cget -command]
}

####################################################################
#### location
# Get the location of the specified button.
#
body ::tycho::ButtonBox::location {tag} {
    if { ! [::info exists _row($tag)] } {
	error "Button $tag does not exist"
    }

    set opts [array set [grid info $itk_component(childsite)]]
    return [join $opts(-row) $opts(-column) "."]
}
