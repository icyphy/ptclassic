# Definition of an editable text window.
#
# Author: Edward A. Lee
# Contributors: Joel King
#
# Version: $Id$
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# FIXME - to do
#  - revert should go back to the original position in the file,
#    and also mark the file unmodified.  This should be done by
#    implementing a mechanism for tagging positions in EditText,
#    giving them names.
#  - Revert should also be undoable.

#######################################################################
# options
#
# base command.
option add *Edit.revcom sccs widgetDefault
# check in command. (ci for RCS)
option add *Edit.cicom delget widgetDefault
# check out command. (co for RCS)
option add *Edit.cocom edit widgetDefault
# revision control directory name. (RCS for RCS)
option add *Edit.revdir SCCS widgetDefault
# command to place current file under rev control. (??? for RCS)
option add *Edit.createcom create widgetDefault

#######################################################################
#### Edit
# This class defines a window for editing plain text. It supports
# emacs-like key bindings plus mouse movements. It interfaces to a
# find/change dialog box, and supports filling of text, with an
# optional prefix added on each line.  To create an example,
# <tcl><pre>
# Edit .e
# wm deiconify .e
# </pre></tcl>
#
class ::tycho::Edit {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####

    #### altFile
    # Prompt the user for a file name and load this into the current editor.
    method altFile {}

    #### focusin
    # Call this to give the text subwindow the focus.
    method focusin {}

   #### help
    # Open a help window.  This should be redefined in derived classes.
    method help {}

    #### insertFile
    # Insert the contents of a file at the insertion cursor.
    method insertFile {}

    #### loadFile
    # Directly load the contents of the file.
    method loadFile {loadfile} 

    #### revert
    # Revert to previously saved file contents.
    method revert {}

    #### reload
    # Reload the current file. 
    method reload {{askuser 1} {filename ""}}

    #### nextRevAction
    # Check in a file using the selected revision control program command
    # if the file is writeable. Otherwise check the file out using the
    # specified revision control program command. 
    method nextRevAction {}

    #### save
    # Save text to a file (by default, the file given by the -file option).
    method save {{name ""}}

    #### seeName
    # Go to the point in the text given by the specified regular expression.
    method seeName {regexpr}

    ###################################################################
    ####                     protected methods                     ####

    #### textWidget
    # Return the name of the type of text widget to use. It must be
    # derived from EditText.
    method textWidget {} {return ::tycho::EditText}
}

###################################################################
#
body ::tycho::Edit::constructor {args} {

    # The text widget.
    itk_component add text {
	[textWidget] $itk_component(childsite).text \
		-markmodified "$this markModified"
    } {
	keep -text -readonly -textfont -width -height -background \
		-highlightbackground -highlightcolor -selectforeground \
		-cursor -insertbackground -foreground -textfont \
		-textbackground
    }
    pack $itk_component(text) -expand yes -fill both

    # Add an Edit menu
    itk_component add editMenuButton {
	menubutton $itk_component(menuFrame).edit \
		-text Edit \
		-underline 0 \
		-menu $itk_component(menuFrame).edit.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(editMenuButton) -side left \
	    -before $itk_component(windowMenuButton)
    
    # Edit menu contents
    itk_component add editMenu {
	menu $itk_component(editMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(editMenu) add command \
	    -label {Undo/Redo} \
	    -accelerator "C-x u" \
	    -underline 0 \
	    -command "$itk_component(text) undo"
    
    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label Cut \
	    -underline 0 \
	    -accelerator "C-w" \
	    -command "$itk_component(text) cut"
    
    $itk_component(editMenu) add command \
	    -label Copy \
	    -underline 1 \
	    -accelerator "M-w" \
	    -command "$itk_component(text) copy"
    
    $itk_component(editMenu) add command \
	    -label Paste \
	    -underline 0 \
	    -accelerator "C-y" \
	    -command "$itk_component(text) paste"
    
    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label "Select All" \
	    -underline 0 \
	    -accelerator "C-/" \
	    -command "$itk_component(text) selectAll"
    
    $itk_component(editMenu) add command \
	    -label "Unselect" \
	    -underline 0 \
	    -accelerator "C-\\" \
	    -command "$itk_component(text) unselectAll"
    
    $itk_component(editMenu) add command \
	    -label "Find/Change..." \
	    -underline 0 \
	    -accelerator "C-s" \
	    -command "$itk_component(text) search"
    
    $itk_component(editMenu) add command \
	    -label Goto\
	    -underline 0 \
	    -accelerator "C-c C-g" \
	    -command "$itk_component(text) gotoLine"

    $itk_component(editMenu) add command \
	    -label "Next Rev Action " \
	    -underline 0 \
	    -accelerator "C-x v" \
	    -command "$this nextRevAction"

    # Add a Format menu
    itk_component add formatMenuButton {
	menubutton $itk_component(menuFrame).format \
		-text Format \
		-underline 1 \
		-menu $itk_component(menuFrame).format.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(formatMenuButton) -side left
    
    # Format menu contents
    itk_component add formatMenu {
	menu $itk_component(formatMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(formatMenu) add command \
	    -label "Fill Region" \
	    -accelerator "M-q" \
	    -underline 2 \
	    -command "$itk_component(text) fillSelection"
    
    $itk_component(formatMenu) add command \
	    -label "Right Fill Column" \
	    -accelerator "C-x f" \
	    -underline 2 \
	    -command "$itk_component(text) queryFillColumn"
    
    $itk_component(formatMenu) add command \
	    -label "Set Fill Prefix" \
	    -accelerator "C-x ." \
	    -underline 1 \
	    -command "$itk_component(text) queryFillPrefix"
    
    # The following initialize options and then invoke any
    # configuration options, assuming there are options specified.
    eval itk_initialize $args

    $this loadFile $file

    bind $itk_component(hull) <Control-x><v> "$this nextRevAction; break"

    markUnmodified
}

###################################################################
###################################################################
####                      public methods                       ####

###################################################################
#### altFile
# Query the user for a filename, insert it into the current editor.
#
body ::tycho::Edit::altFile {} {
    if {$modified} {
	if [askuser "Do you want modifications saved before opening new \
		file?"] {
	    # update changes since last save
	    $this save 
	}
    }
    set filename [DialogWindow::newModal FileBrowser [autoName .fileBrowser] \
	    -text "Alternate file to load:"]
    if {$filename != {}} {
	reload 0 $filename
	$itk_component(text) setInsert 1.0
    }
}

###################################################################
#### focusin
# Hand the focus to the text window.
#
body ::tycho::Edit::focusin {} {
    focus [$itk_component(text) textWinName]
}

###################################################################
#### help
# Open a window with help on the current widget.
# This should be redefined in derived classes.
#
body ::tycho::Edit::help {} {
    global TYCHO
    ::tycho::File::openContext $TYCHO/kernel/doc/EditHelp.html
}

###################################################################
#### insertFile
# Open a file browser to query the user for a filename, and then
# insert the contents of that file at the insertion cursor.
#
body ::tycho::Edit::insertFile {} {
    set filename [DialogWindow::newModal FileBrowser [autoName .filebr] \
	    -text {File to Insert}]
    $itk_component(text) readFile $filename
    markModified
}

#####################################################################
#### loadFile
# Load the specified file.
#
body ::tycho::Edit::loadFile {loadfile} {
    # Read contents from the specified file, unless the name is "NoName".
    if {$loadfile != {NoName} && $loadfile != {}} {
	if [file exists $loadfile] {
	    if [file readable $loadfile] {
		set savereadonly [$itk_component(text) cget -readonly]
		$itk_component(text) configure -readonly 0
		$itk_component(text) readFile $loadfile
		$itk_component(text) configure -readonly $savereadonly
	    } else {
		# FIXME: This error does not cause the object to be
		# properly deleted.  This window will remain in existence,
		# but cannot be accessed.  Using centerOnScreen, for example,
		# causes a core dump.
		error "File $loadfile is not readable"
	    }
	}
    }
}

###################################################################
#### nextRevAction
# If this is called from within a Console class then give the user a 
# directory listing of the current file and perform the selected 
# action (currently unimplemented.). Otherwise check to see if a 
# filename is associated with the editor, if not fail and inform 
# the user. If the file has not been saved we will do so at this 
# point. Then check in the file if it is writeable, prompting for a
# message, and reload the new file with the insert cursor at the same 
# location. If the file is not writeable then check the file out and 
# reload the new file with the insert cursor at the same location. 
# If the file is not under revision control, then we place it
# under control after asking the user if this is what he wants.
# If the necessary revision control directory does not exist then 
# create it if we can.
#
body ::tycho::Edit::nextRevAction {} {
    if {[info class] == "::tycho::Console"} {
	# we are being called by a console.
	tycho::inform "This function is not currently implemented for\
		consoles."
	return 
    }
    set currentfile [$this filename]
    if {$currentfile == "NoName"} {
	# The contents of this editor does not currently have a name.
	tycho::inform "You must name the file before attempting any\
		revision actions."
	return 
    }
    if {$modified} {
	if [askuser "Do you want modifications saved before checking\
		in file?"] {
	    # update changes since last save, so they will appear in delta
	    $this save 
	}
    }
    set dir [file dirname $currentfile]
    #set revdir [option get $itk_component(hull) revdir Edit]	    
    set revdir [format "%s/SCCS" $dir]
    if {![file exists $revdir]} {
	if {![file writable $dir]} {
	    tycho::inform "The necessary revision control directory doesn't\
		    exist, and you do not have write permission to be able\
		    to create it."
	    return 
	}   
	exec mkdir $revdir
    }
    # NOTE: the following check is specific to sccs.
    #set revcom [option get $itk_component(hull) revcom Edit]
    set revcom sccs
    set basefile [file tail $currentfile]
    if {![file exists [format "%s/s.%s" $revdir $basefile]] && \
	    [file exists [format "%s/p.%s" $revdir $basefile]]} { 
	# File is not currently under revision control.
	if {![askuser "This file is not currently under revision\
		control, do you want it to be placed under revision\
		control?"]} {
	    return
	} else {
	    #set createcom [option get $itk_component(hull) createcom Edit]
	    set createcom create
	    catch {exec $revcom $createcom $currentfile} output
	    if {![regexp "^\[1-9\]+.\[0-9\]+" $output]} {
		tycho::inform "Unable to place the file under revision\
			control."
		return 
	    }   
	    $this reload 0	    
	    return
	}	    
    }
    if {[$itk_component(hull) cget -readonly] != 0} {
	# check out the file 
	#set cocom [option get $itk_component(hull) cocom Edit]
	set cocom edit
	catch {exec $revcom $cocom $currentfile} output
    } else {
	#check in the file
	set comments [::tycho::queryinfo "Enter comments:" "" 60]
	# FIXME: this is a bogus solution to the problem of getting 
	# a comment into sccs delget.
	exec echo $comments > #tycho#temp
	#set cicom [option get $itk_component(hull) cicom Edit]
	set cicom delget
	catch {exec $revcom $cicom $currentfile < #tycho#temp} output
	exec rm -f #tycho#temp
    }
    # Load the new file.
    $this reload 0
}

###################################################################
#### revert
# Revert to previously saved file contents after obtaining confirmation.
# This command does nothing if either the text is not modified or
# no file has been specified by the -file option.
#
body ::tycho::Edit::revert {} {
    if {$modified && $file != "NoName" && $file != ""} {
	if [askuser "OK to discard changes in [file tail $file]?"] {
	    $itk_component(text) deleteRange 1.0 end
	    $itk_component(text) readFile $file
	    markUnmodified
	}
    }
}

###################################################################
#### reload
# Reload the current file. If the contents are modified, then we 
# ask the user if they want to procede.
#
body ::tycho::Edit::reload {{askuser 1} {filename ""}} {
    if {$filename == ""} {
	set filename $file
    }
    # Save the position of the cursor.
    set ins [$itk_component(text) returnInsert]
    if {$modified && $askuser} {
	if {![askuser "This file has been modified. Reload anyway?"]} {
	    return 
	}
    }
    $itk_component(hull) configure -readonly 0
    $itk_component(text) deleteRange 1.0 end
    $this loadFile $filename
    $itk_component(text) setInsert $ins
    $itk_component(text) center
    markUnmodified
    if {[file writable $filename]} {
	$itk_component(hull) configure -readonly 0
    } else {
	$itk_component(hull) configure -readonly 1
    }
    # change title 
    wm title $itk_component(hull) $filename 
}

###################################################################
#### save
# Save text to a file. If no argument is given, the filename is taken
# from the -file option for the class. If the value of the -file option
# is "NoName" (the default), then saveAs is invoked. Remove backup
# files (auto-save or crash-recovery) if the write succeeds. If the
# specified file is not writable, trigger an error. Return 1 if the
# write succeeds, 0 otherwise.
#
body ::tycho::Edit::save {{name ""}} {
    if {$name == ""} {
	set filename $file
    } {
	set filename $name
    }
    if {$filename != "" && $filename != "NoName"} {
	set fd [open $filename w+]
	puts -nonewline $fd [$itk_component(text) get 1.0 {end -1 char}]
	close $fd
    } {	
	# The file has not been specified.  Invoke saveAs
	if {[saveAs] == 0} {return 0}
    }
    if {$name == ""} {
	removeBackupFiles
    }
    markUnmodified
    return 1
}

###################################################################
#### seeName
# This method just calls seeName for the text widget. In the default
# plain text widget, this just finds the first occurrence in the text
# of a string that matches the regular expression given by the
# argument, and makes sure it is visible. In other implementations, it
# may find hypertext points or procedure definitions or things of that
# sort.
#
body ::tycho::Edit::seeName {regexpr} {
    $itk_component(text) seeName $regexpr
}
