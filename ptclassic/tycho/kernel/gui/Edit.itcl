# Definition of an editable text window.
#
# @Author: Edward A. Lee
# @Contributors: Joel King
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Edit
# This class defines a window for editing plain text. It supports
# emacs-like key bindings plus mouse movements. It interfaces to
# find/change and spell check dialog boxes, and supports filling of
# text, with an optional prefix added on each line. It provides an Edit
# menu and a Format menu. It has an undo mechanism and supports filling
# text. It also provides an infrastructure, exploited in derived
# classes, for parsing text in order to color it, control the font,
# etc. To create an example,
# <tcl><pre>
# ::tycho::Edit .e
# wm deiconify .e
# </pre></tcl>
#
class ::tycho::Edit {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####

    # Clear the text.
    method clear {} {$itk_component(text) deleteRange 1.0 end}

    # Return the current insertion point in a form usable by seePoint.
    method currentPoint {}

    # Hand the focus to the text subwindow.
    method focusin {}

    # Open a help window.
    method help {}

    # Insert the given data at the insertion cursor.
    method insertData {data}

    # Return 1 if the text has been modified since the last save, 0 otherwise.
    method isModified {}

    # Reload from the last saved version of the file.
    method reload {}

    # Go to the specified point in the text.
    method seePoint {point}

    # Query the user for an alternative font.
    method setFont {}

    ###################################################################
    ####                     protected methods                     ####

    # Return the text to save.
    protected method saveText {}

    # Return the name of the type of text widget to use (EditText).
    protected method textWidget {} {return ::tycho::EditText}
}


###################################################################
#
body ::tycho::Edit::constructor {args} {

    # The text widget.
    itk_component add text {
	[textWidget] $itk_component(childsite).text -top $this
    } {
	keep -text -readonly \
		-highlightbackground -highlightcolor -selectforeground \
		-cursor -insertbackground -textforeground -textfont \
		-textbackground
        rename -width -textwidth textWidth TextWidth
        rename -height -textheight textHeight TextHeight
    }
    pack $itk_component(text) -expand yes -fill both

    # Add an Edit menu
    itk_component add editMenuButton {
	menubutton $itk_component(menuFrame).edit \
		-text Edit \
		-underline 0 \
		-menu $itk_component(menuFrame).edit.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(editMenuButton) -side left \
	    -before $itk_component(windowMenuButton)
    
    # Edit menu contents
    itk_component add editMenu {
	menu $itk_component(editMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(editMenu) add command \
	    -label {Undo/Redo} \
	    -accelerator "C-x u" \
	    -underline 0 \
	    -command "$this component text undo"
    
    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label Cut \
	    -underline 0 \
	    -accelerator "C-w" \
	    -command "$this component text cut"
    
    $itk_component(editMenu) add command \
	    -label Copy \
	    -underline 1 \
	    -accelerator "M-w" \
	    -command "$this component text copy"
    
    $itk_component(editMenu) add command \
	    -label Paste \
	    -underline 0 \
	    -accelerator "C-y" \
	    -command "$this component text paste"
    
    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label "Select All" \
	    -underline 0 \
	    -accelerator "C-/" \
	    -command "$this component text selectRange 1.0 end"
    
    $itk_component(editMenu) add command \
	    -label "Unselect" \
	    -underline 0 \
	    -accelerator "C-\\" \
	    -command "$this component text unselectRange 1.0 end"
    
    $itk_component(editMenu) add command \
	    -label "Find/Change..." \
	    -underline 0 \
	    -accelerator "C-s" \
	    -command "$this component text search"
    
    $itk_component(editMenu) add command \
	    -label "Spelling..." \
	    -underline 2 \
	    -accelerator "M-$" \
	    -command "$this component text spellCheck"
    
    $itk_component(editMenu) add command \
	    -label {Goto Line...}\
	    -underline 0 \
	    -accelerator "C-c C-g" \
	    -command "$this component text gotoLine"

    # Add a Format menu
    itk_component add formatMenuButton {
	menubutton $itk_component(menuFrame).format \
		-text Format \
		-underline 1 \
		-menu $itk_component(menuFrame).format.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(formatMenuButton) -side left
    
    # Format menu contents
    itk_component add formatMenu {
	menu $itk_component(formatMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(formatMenu) add command \
	    -label "Font..." \
	    -underline 0 \
	    -command "$this setFont"
 
    $itk_component(formatMenu) add separator

    $itk_component(formatMenu) add command \
	    -label "Fill Region" \
	    -accelerator "M-q" \
	    -underline 2 \
	    -command "$this component text busy fillSelection"
    
    $itk_component(formatMenu) add command \
	    -label "Right Fill Column" \
	    -accelerator "C-x f" \
	    -underline 2 \
	    -command "$this component text queryFillColumn"
    
    $itk_component(formatMenu) add command \
	    -label "Set Fill Prefix" \
	    -accelerator "C-x ." \
	    -underline 1 \
	    -command "$this component text queryFillPrefix"
    
    # The following initialize options and then invoke any
    # configuration options, assuming there are options specified.
    eval itk_initialize $args
}

###################################################################
###################################################################
####                      public methods                       ####

###################################################################
#### currentPoint
# Return the current insertion point in a form usable by seePoint.
#
body ::tycho::Edit::currentPoint {} {
    set idx [[component text textWinName] index insert]
    return [list range $idx $idx]
}

###################################################################
#### focusin
# Hand the focus to the text window.
#
body ::tycho::Edit::focusin {} {
    focus [$itk_component(text) textWinName]
}

###################################################################
#### help
# Open a help window.
# This should be redefined in derived classes.
#
body ::tycho::Edit::help {} {
    global ::TYCHO
    ::tycho::File::openContext $TYCHO/kernel/doc/usersGuides/EditHelp.html
}

###################################################################
#### insertData
# Insert the given data at the insertion cursor.
#
body ::tycho::Edit::insertData {data} {
    $itk_component(text) insertString insert $data
}

###################################################################
#### isModified
#
body ::tycho::Edit::isModified {} {
    return $modified
}

#####################################################################
#### reload
# Reload from the last saved version of the current file. This method
# first disables read-only status (if it is set), then replaces the
# current data with data from the current file, and then sets read-only
# status based on the permissions of the file. The data is marked
# unmodified after loading the file, and the clipboard is restored
# to its state before the method was called. If the file does not exist, then
# the current data is cleared, leaving a blank slate. If the current
# file exists but is not readable, an error occurs. The actual
# replacement of the data occurs via the method
# <code>insertData</code>.
#
body ::tycho::Edit::reload {} {
    set saveclipboard [component text getClipboard]
    File::reload
    component text setClipboard $saveclipboard
}

###################################################################
#### seePoint
# Go to the specified point in the text, moving the insertion cursor
# to that point, and adjusting the view so that the point is in view.
# The point can be specified in any of three ways:
# <pre>
#    {line <i>linenumber</i>}
#    {range <i>startindex endindex</i>}
#    <i>regexp</i>
# <pre>
# In the first two forms, the point is a list beginning with the keyword
# "line" or "range".  If the point has neither of these forms, then
# it is interpreted as a regular expression, and the first match of
# the regular expression is taken to be the specified point.
# In all cases, the background color of the matching text is changed
# temporarily.  Notice that this will not be visible if the "range" form
# is used and the two indices are equal.
#
body ::tycho::Edit::seePoint {point} {
    $itk_component(text) seePoint $point
}

###################################################################
#### setFont
# Query the user for an alternative font.  This may be replaced in
# the future with a simpler font handler that just controls the size.
#
body ::tycho::Edit::setFont {} {
    set ifont [cget -textfont]
    set wname [::tycho::autoName $itk_component(hull).font]
    ::tycho::DialogWindow::new FontManager $wname \
	    -initialfont $ifont \
	    -okcommand \
	    "$this configure -textfont \[$wname getCurrentFont\]"
}

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

###################################################################
#### saveText
# Return the text to save.
#
body ::tycho::Edit::saveText {} {
    return [$itk_component(text) get 1.0 {end -1 char}]
}
