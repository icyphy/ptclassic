# Definition of an editable text window.
#
# @Author: Edward A. Lee
# @Contributors: Joel King
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Edit
# This class defines a window for editing plain text. It supports
# emacs-like key bindings plus mouse movements. It interfaces to a
# find/change dialog box, and supports filling of text, with an
# optional prefix added on each line.  To create an example,
# <tcl><pre>
# Edit .e
# wm deiconify .e
# </pre></tcl>
#
class ::tycho::Edit {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####

    # Hand the focus to the text subwindow.
    method focusin {}

    # Open a help window.  This should be redefined in derived classes.
    method help {}

    # Return $modified.
    method isModified {}

    # Insert the given data into the display.
    method insertData {data}

    # Insert the contents of a file at the insertion cursor.
    method insertFile {}

    # Directly load the contents of the file.
    method loadFile {loadfile} 

    # Reload the current file. 
    method reload {}

    # Save text to a file (by default, the file given by the -file option).
    method save {{name ""}}

    # Go to the point in the text given by the specified regular expression.
    method seeName {regexpr}

    # Query the user for an alternative font.
    method setFont {}

    # Set the insertion point to the value of position.
    method setInsert {position}

    ###################################################################
    ####                     protected methods                     ####

    # Return the name of the type of text widget to use. It must be
    # derived from EditText.
    method textWidget {} {return ::tycho::EditText}
}

###################################################################
#
body ::tycho::Edit::constructor {args} {

    # The text widget.
    itk_component add text {
	[textWidget] $itk_component(childsite).text -top $this
    } {
	keep -text -readonly \
		-highlightbackground -highlightcolor -selectforeground \
		-cursor -insertbackground -textforeground -textfont \
		-textbackground
        rename -width -textwidth textWidth TextWidth
        rename -height -textheight textHeight TextHeight
    }
    pack $itk_component(text) -expand yes -fill both

    # Add an Edit menu
    itk_component add editMenuButton {
	menubutton $itk_component(menuFrame).edit \
		-text Edit \
		-underline 0 \
		-menu $itk_component(menuFrame).edit.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(editMenuButton) -side left \
	    -before $itk_component(windowMenuButton)
    
    # Edit menu contents
    itk_component add editMenu {
	menu $itk_component(editMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(editMenu) add command \
	    -label {Undo/Redo} \
	    -accelerator "C-x u" \
	    -underline 0 \
	    -command "$this component text undo"
    
    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label Cut \
	    -underline 0 \
	    -accelerator "C-w" \
	    -command "$this component text cut"
    
    $itk_component(editMenu) add command \
	    -label Copy \
	    -underline 1 \
	    -accelerator "M-w" \
	    -command "$this component text copy"
    
    $itk_component(editMenu) add command \
	    -label Paste \
	    -underline 0 \
	    -accelerator "C-y" \
	    -command "$this component text paste"
    
    $itk_component(editMenu) add separator
    
    $itk_component(editMenu) add command \
	    -label "Select All" \
	    -underline 0 \
	    -accelerator "C-/" \
	    -command "$this component text selectAll"
    
    $itk_component(editMenu) add command \
	    -label "Unselect" \
	    -underline 0 \
	    -accelerator "C-\\" \
	    -command "$this component text unselectAll"
    
    $itk_component(editMenu) add command \
	    -label "Find/Change..." \
	    -underline 0 \
	    -accelerator "C-s" \
	    -command "$this component text search"
    
    $itk_component(editMenu) add command \
	    -label "Spelling..." \
	    -underline 2 \
	    -accelerator "M-$" \
	    -command "$this component text spellCheck"
    
    $itk_component(editMenu) add command \
	    -label {Goto Line...}\
	    -underline 0 \
	    -accelerator "C-c C-g" \
	    -command "$this component text gotoLine"

    # Add a Format menu
    itk_component add formatMenuButton {
	menubutton $itk_component(menuFrame).format \
		-text Format \
		-underline 1 \
		-menu $itk_component(menuFrame).format.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }
    pack $itk_component(formatMenuButton) -side left
    
    # Format menu contents
    itk_component add formatMenu {
	menu $itk_component(formatMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(formatMenu) add command \
	    -label "Font..." \
	    -underline 0 \
	    -command "$this setFont"
 
    $itk_component(formatMenu) add separator

    $itk_component(formatMenu) add command \
	    -label "Fill Region" \
	    -accelerator "M-q" \
	    -underline 2 \
	    -command "$this component text busy fillSelection"
    
    $itk_component(formatMenu) add command \
	    -label "Right Fill Column" \
	    -accelerator "C-x f" \
	    -underline 2 \
	    -command "$this component text queryFillColumn"
    
    $itk_component(formatMenu) add command \
	    -label "Set Fill Prefix" \
	    -accelerator "C-x ." \
	    -underline 1 \
	    -command "$this component text queryFillPrefix"
    
    # The following initialize options and then invoke any
    # configuration options, assuming there are options specified.
    eval itk_initialize $args

    loadFile $file

    markUnmodified
}

###################################################################
###################################################################
####                      public methods                       ####

###################################################################
#### focusin
# Hand the focus to the text window.
#
body ::tycho::Edit::focusin {} {
    focus [$itk_component(text) textWinName]
}

###################################################################
#### help
# Open a window with help on the current widget.
# This should be redefined in derived classes.
#
body ::tycho::Edit::help {} {
    global ::TYCHO
    ::tycho::File::openContext $TYCHO/kernel/doc/usersGuides/EditHelp.html
}

###################################################################
#### insertData
# Insert the given data into the display.
#
body ::tycho::Edit::insertData {data} {
    $itk_component(text) insertString insert $data
}

###################################################################
#### insertFile
# Open a file browser to query the user for a filename, and then
# insert the contents of that file at the insertion cursor.
#
body ::tycho::Edit::insertFile {} {
    set filename [::tycho::DialogWindow::newModal FileBrowser \
	    [::tycho::autoName .filebr] -text {File to Insert}]
    $itk_component(text) readFile $filename
    markModified
}

###################################################################
#### isModified
#
body ::tycho::Edit::isModified {} {
    return $modified
}

#####################################################################
#### loadFile
# Load the specified file, if it exists.  Otherwise, do nothing.
# If the file exists but is not readable, flag an error.
#
body ::tycho::Edit::loadFile {loadfile} {
    # Read contents from the specified file, unless the name is "NoName".
    if {$loadfile != {NoName} && $loadfile != {}} {
	if [file exists $loadfile] {
	    if [file readable $loadfile] {
		$itk_component(text) initFile $loadfile
	    } else {
		error "File $loadfile is not readable"
	    }
	}
    }
}

###################################################################
#### reload
# Reload the current file. If the contents are modified, then we 
# ask the user if they want to proceed. The text is reparsed for
# coloration, etc.
#
body ::tycho::Edit::reload {} {
    if {$file == "NoName" || $file == ""} {
	return 
    }
    set hull $itk_component(hull)
    set text $itk_component(text)

    # Save the position of the cursor.
    set ins [$text returnInsert]
    if {$modified} {
	if {![::tycho::askuser \
		"This file has been modified. Proceed anyway?"]} {
	    return 
	}
    }
    $hull configure -readonly 0
    $text deleteRange 1.0 end
    loadFile $file
    $text setInsert $ins
    $text center
    markUnmodified
    if {[file writable $file]} {
	$hull configure -readonly 0
    } else {
	$hull configure -readonly 1
    }
    # change title 
    wm title $hull $file
    $text parseRegion 1.0 end
}

###################################################################
#### save
# Save text to a file. If no argument is given, the filename is taken
# from the -file option for the class. If the value of the -file option
# is "NoName" (the default), then saveAs is invoked. Remove backup
# files (auto-save or crash-recovery) if the write succeeds. If the
# specified file is not writable, trigger an error. Return 1 if the
# write succeeds, 0 otherwise.
#
body ::tycho::Edit::save {{name ""}} {
    if {$name == ""} {
	set filename $file
    } {
	set filename $name
    }
    if {$filename != "" && $filename != "NoName"} {
	set fd [open $filename w+]
	puts -nonewline $fd [$itk_component(text) get 1.0 {end -1 char}]
	close $fd
    } {	
	# The file has not been specified.  Invoke saveAs
	if {[saveAs] == 0} {return 0}
    }
    if {$name == ""} {
	removeBackupFiles
    }
    markUnmodified
    return 1
}

###################################################################
#### seeName
# This method just calls seeName for the text widget. In the default
# plain text widget, this just finds the first occurrence in the text
# of a string that matches the regular expression given by the
# argument, and makes sure it is visible. In other implementations, it
# may find hypertext points or procedure definitions or things of that
# sort.
#
body ::tycho::Edit::seeName {regexpr} {
    $itk_component(text) seeName $regexpr
}

###################################################################
#### setFont
# Query the user for an alternative font.
#
body ::tycho::Edit::setFont {} {
    set ifont [cget -textfont]
    set wname [::tycho::autoName $itk_component(hull).font]
    ::tycho::DialogWindow::new FontManager $wname \
	    -initialfont $ifont \
	    -okcommand \
	    "$this configure -textfont \[$wname getCurrentFont\]"
}

###################################################################
#### setInsert
# Set the insert point to the given position.
#
body ::tycho::Edit::setInsert {position} {
    $itk_component(text) setInsert $position
}
