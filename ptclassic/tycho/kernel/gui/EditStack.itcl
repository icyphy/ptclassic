# Stack display for Tcl errors.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### EditStack
# This class defines a text widget for displaying Tcl stack trace information.
#
class ::tycho::EditStack {
    inherit ::tycho::Edit

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Open a help window.
    method help {}

    # Color the stack information in a region.
    method parseNow {start stop}

    ##########################################################################
    ####                       protected methods                          ####

    # Access the "stacktrace" preferences
    protected method preference {mode args}
}

###################################################################
#
body ::tycho::EditStack::constructor {args} {

    eval itk_initialize $args

    displayer configure -title "Stack Trace"

    markUnmodified

    # Remove irrelevant capabilities from the menus.
    menubar delete  "Switch File..."
    menubar delete  "Insert..."
    menubar delete  "Save"
    menubar delete  "Reload"
    menubar delete  "Revision Control..."

    menubar delete "Undo/Redo"
    menubar delete "Cut"
    menubar delete "Paste"

    menubar delete "Fill Region"
    menubar delete "Right Fill Column"
    menubar delete "Set Fill Prefix"
    
    # The default fill prefix works for Tcl and shell scripts.
    set fillPrefix "#"
}

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditStack::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO kernel doc usersGuides EditStackHelp.html]

}

#####################################################################
#### parseNow
# Parse the stack information, coloring it for better readability.
# Eventually, this should insert hyperlinks to the code referenced in
# the stack.
#
body ::tycho::EditStack::parseNow {start stop} {

    set hull $itk_component(hull)
    set text $itk_component(text)

    # The first line is always a title
    $text tag add title 1.0 "0.0 lineend"
    $text tag configure title -foreground \
	    [preference get titleColor]

    set comments {while executing|invoked from within|\(while constructing [^)]*\)|\(command bound to event\)}
    set point $start
    set first {}
    while {[set st [$text search -count cnt -regexp $comments $point $stop]] \
	    != {}} {
	set end [$text index "$st + $cnt chars"]
	if {$first == {}} {
	    # Color the error message
	    $text tag add error 2.0 "$st -1 chars"
	    set first 0
	}
	$text tag add comment $st "$st + $cnt chars"
	set point $end
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $point >= end] {break}
    }

    # Eventually the following will be hyperlinks, I hope.
    set links {\([^\)]* body line [0-9]*\)|\(procedure [^\)]*\)}
    set point $start
    while {[set st [$text search -count cnt -regexp $links $point $stop]] \
	    != {}} {
	set end [$text index "$st + $cnt chars"]
	$text tag add link $st "$st + $cnt chars"
	set point $end
    }
    
    # Set the visual characteristics of the tagged text
    $text tag configure error -foreground \
	    [preference get errorColor]
    $text tag configure comment -foreground \
	    [preference get commentColor]
    $text tag configure link -foreground \
	    [preference get linkColor]
}


#####################################################################
#####################################################################
####                     protected methods                       ####


#####################################################################
#### preference
# Access the preferences associated with this widget. This method
# overrides the default method in ::tycho::TWidget to access the
# "stacktrace" preferences.
#
body ::tycho::EditStack::preference {mode args} {
    eval ::tycho::preference $mode "stacktrace" $args
}

