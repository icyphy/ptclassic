# Ptolemy Tycho class that exec's a process and displays the output
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### options
#

#######################################################################
#### Exec
# Exec a process, and if there is output, display the output.
#
# <p>
# Here is an example of how to use the Exec:
# <tcl><pre>
#     ::tycho::Exec .x ...
# </pre></tcl>
#
class ::tycho::Exec {
    inherit ::tycho::EntryQuery
    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    # One line description of command option; listed in alphabetical order
    itk_option define -command command Command "make"

    ###################################################################
    ####                         public methods                    ####

    # Cleanup the windows
    method cleanup {}

    # exec a process, if there is any output, bring up a window and display it
    method execProcess {}
}

#######################################################################
#### -command configuration
# Description of command option.
#
configbody ::tycho::Exec::command {
    clear commandToExec
    insert commandToExec $itk_option(-command)
}


#######################################################################
#### constructor
#
body ::tycho::Exec::constructor {args} {
    configure -queries [list \
            { commandToExec {Command to Exec:} make}
    ]

    eval itk_initialize $args

    # If the command option has not been set, set the default now.
    # This has to be done in the constructor rather than in the class
    # definition (as a default) because "$this" is known here.
    if {$itk_option(-command) == {}} {
	configure -command "$this exec"
    }

    $itk_component(bbox) buttonconfigure ok \
	    -text {Exec <Ret>} \
	    -command "$this execProcess"

    $itk_component(bbox) buttonconfigure cancel \
	    -text {Cancel <Esc>} \
	    -command "$this cleanup"
}


#######################################################################
#### destructor
#
body ::tycho::Exec::destructor {} {
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####
#####################################################################
#### cleanup
# Clear the edit widget so that we are not prompted as to whether
# we want to save it.
#
body ::tycho::Exec::cleanup {} {
    if {[info exists itk_component(history)] && \
            [winfo exists $itk_component(history)]} {
        $itk_component(history) configure -readonly 0
        $itk_component(history) clear
        $itk_component(history) markUnmodified
    }
    $this nextWindow
    delete object $this
}

#######################################################################
#### execProcess
# Execute a process.  If there is any output, display it.
#
body ::tycho::Exec::execProcess {} {
    # Clear the history if it is present
    if {[info exists itk_component(history)] && \
        [winfo exists $itk_component(history)]} {
        $itk_component(history) configure -readonly 0
        $itk_component(history) clear
        $itk_component(history) configure -readonly 1
        # FIXME! Calling update idletasks is entirely unsafe!!!
        update idletasks
        #::tycho::safeUpdate $this
    }
    set commandToExec [get commandToExec]
    set fd [open |$commandToExec r+]
 
    # Read until we get a blank line
    while ![eof $fd] {
        set line [gets $fd]
        if ![string length $line] { break}
        
        if {![info exists itk_component(history)] || \
                ![winfo exists $itk_component(history)]} {
            # Ok, we have some output, so bring up a window
            itk_component add history {
                ::tycho::Edit $itk_component(hull).history -textheight 30
            } {
                keep -readonly -textwidth -background \
                        -highlightbackground -highlightcolor -selectforeground \
                        -cursor -insertbackground -textforeground -textfont \
                        -textbackground
            }
            pack $itk_component(history) -expand yes -fill both
            $itk_component(history) configure -readonly 1
        }
        $itk_component(history) configure -readonly 0
        $itk_component(history) insertData "$line\n"
        $itk_component(history) configure -readonly 1
        # FIXME! Calling update idletasks is entirely unsafe!!!
        update idletasks
        #::tycho::safeUpdate $this
    }
    close $fd
}
