# File browser.
#
# Author: Edward A. Lee
# Based on a Tcl/Tk version by Wei-Jen Huang and Mario Jorge Silva.
#
# Version: $Id$
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Options from the derived class
option add *FileBrowser*entryWidth 30 widgetDefault

option add *FileBrowser*entryBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *FileBrowser*entryForeground \
	[ptkColor black black] widgetDefault

option add *FileBrowser*textBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *FileBrowser*textForeground \
	[ptkColor black black] widgetDefault

option add *FileBrowser.entryfont \
	[.tychoFonts defaultFont fixed] widgetDefault
option add *FileBrowser.width 30 widgetDefault
option add *FileBrowser.height 12 widgetDefault

########################################################################
#### expandPath
# Procedure to expand a filename that might begin with
# an environment variable.  For example, if the value of
# of the environment variable TYCHO is /usr/tools/tycho, then
# <pre>
#       ::tycho::expandPath \$TYCHO/tmp
# </pre>
# returns /usr/tools/tycho/tmp.
#
proc ::tycho::expandPath { path } {
    if {[string first \$ $path] == 0} {
        global ::env
        set slash [string first / $path]
        set envvar [string range $path 1 [expr {$slash-1}]]
        set envval $env($envvar)
        return "$envval[string range $path $slash end]"
    } else {
        return $path
    }
}

# COMPATIBILITY with pigi
proc ::ptkExpandEnvVar { path } {::tycho::expandPath $path}

##########################################################################
#### filename
# Query the user for a filename and return it.  This procedure brings up
# a file browser, and returns only when that file browser is dismissed.
#
proc ::tycho::filename {} {
    return [::tycho::DialogWindow::newModal FileBrower [autoName .file]]
}

##########################################################################
#### FileBrowser
# Create a file browser window that is destroyed when the user has
# selected a file. If the -command option is specified, then the value
# of the option is taken as a command to execute when the user has
# selected a filename. Before executing the command, the filename
# selected by the user (which may represent a file that does not exist)
# is appended to the command as an argument.
# <p>
# Note that I considered using the file browser in the iwidgets library,
# which is more like the standard Motif file browser.  I rejected it for
# aesthetic reasons, settling on this simpler browser.  This one is
# fashioned after the file browser in FrameMaker.
# <p>
# For example, the following command will query the user for a file name,
# and then post that filename in top-level window:
# <tcl><pre>
# ::tycho::FileBrowser .w -command ::tycho::post
# .w centerOnScreen
# </pre></tcl>
#
class ::tycho::FileBrowser {
    inherit ::tycho::ListBrowser

    constructor {args} {}

    ##################################################################
    ####                     public methods                       ####

    # Open a help window.
    method help {}

    # Make a new directory and go to it.
    method mkdir {}

    ##################################################################
    ####                   protected methods                      ####

    # Process a file or directory selection.
    protected method processItem {filename}

    # Fill the listbox with file and directory names.
    protected method updateListbox {}

    ##################################################################
    ####                   protected variables                    ####

    # Common variables store the name of the last file opened
    # and the directory last visited.
    protected common fileLastOpened
    protected common CWD

    # A local version of the CWD is kept in case multiple file browsers
    # are open at once (each has to have its own notion of the current
    # working directory).
    protected variable localCWD
}

######################################################################
#
body ::tycho::FileBrowser::constructor {args} {
    
    # The text to insert at the top of the file browser
    configure -text "Select File:"
    
    global ::env
    
    if {! [info exists fileLastOpened]} {
	# First FileBrowser window constructed.
	# If the environment variable PTPWD exists, it gives the directory.
	# Otherwise, we issue the Unix command pwd.
	set fileLastOpened ""
	if [info exists env(PTPWD)] {
	    set CWD $env(PTPWD)
	} {
	    set CWD [pwd]
	}
    }

    set localCWD $CWD

    # Current directory display.
    itk_component add dir {
	label $itk_component(childsite).dir -text $localCWD -width 35 -anchor e
    } {
	keep -background -cursor -foreground -font
    }
    pack $itk_component(dir) -side top -fill x -after $itk_component(listscroll)
    
    # In case updateListbox inserts into the entry; to avoid repetition
    clear entry
    insert entry $fileLastOpened

    # Create directory button.
    $itk_component(buttons) add mkdir -text "New Directory" \
	    -command "$this mkdir"

    # Process any unevaluated arguments.
    eval itk_initialize $args
}


    ##################################################################
    ##################################################################
    ####                     public methods                       ####

######################################################################
#### help
# Open a help window.
#
body ::tycho::FileBrowser::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/kernel/doc/usersGuides/FileBrowserHelp.html
}

######################################################################
#### mkdir
# Make a new directory and go to it.
#
body ::tycho::FileBrowser::mkdir {} {
    set dirname [::tycho::queryinfo "Directory name" "$localCWD/" 80]
    if {$dirname != {}} {
	# FIXME: Unix command built in
	exec mkdir $dirname
	processItem $dirname
    }
}

    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

######################################################################
#### processItem
# This procedure checks and processes the user selection. If the user
# has selected a file, then the specified command is invoked with that
# filename as an argument, and a 1 is returned. If the user specified a
# directory, then the listbox is updated with the contents of the
# directory and a 0 is returned. If the specified filename is an empty
# string, then nothing is done and a zero is returned. If the specified
# filename exists but is not readable, an error is triggered.  If the
# filename does not exist as either a file or a directory, then the
# command given by the -command option is invoked on that file.
# If the entry is invalid for some reason, the user is warned and
# the method returns 0.
#
body ::tycho::FileBrowser::processItem {filename} {

    # In case the filename starts with an environment variable, expand
    set file [::tycho::expandPath $filename]
    
    set file [string trim $file]
    if {$file == ""} {return 0}
    
    # Name of the file before calculating the absolute path.
    set relPath $file
    
    # If the name is relative, calculate the absolute path.
    set char [string index $file 0]
    if {$char != "/" && $char != "~"} {
	set file $localCWD/$file
    }

    # If the file does not exist, check to see whether the
    # directory exists.  If it does, execute the command given by -command
    # (which will probably create the file).  Otherwise, trigger an error.
    if {! [file exist $file]} {
	set dir [file dirname $file]
	if {[file exist $dir] && [file isdir $dir]} {
	    execCommand -command $file
	    set fileLastOpened $relPath
	    return 1
	} {
	    ::tycho::warn "Directory does not exist: $dir"
	    return 0
	}
    } 
    
    # If the file does exist, and is a directory
    if {[file isdir $file]} {
	if {[file readable $file] && [file executable $file]} {
	    
	    # Non-relative path
	    if {$char == "~"} {
		set dir [glob -nocomplain $relPath]
		if {! [file exist $dir]} {
		    ::tycho::warn "\"$dir\" does not exist!"
		    return 0
		} else {
		    set CWD $dir
		    $itk_component(dir) config -text $CWD
		    set localCWD $CWD
		    set fileLastOpened ""
		    updateListbox
		    return 0
		}
	    } elseif {$char == "/"} {
		set CWD $relPath
		$itk_component(dir) config -text $CWD
		set localCWD $CWD
		set fileLastOpened ""
		updateListbox
		return 0
	    }
	    # Else relative path
	    set newPath $localCWD
	    while {[regsub {^([^/]+)(/.*$|$)} $relPath {\1 \2} temp]} {
		set partOfPath [lindex $temp 0]
		set relPath [string trimleft [lindex $temp 1] "/"]
		if {$partOfPath == "."} {
		    continue
		} elseif {$partOfPath == ".."} {
		    if [regsub {(.*)/[^/]+$} $newPath {\1} temp] {
			set newPath $temp
		    } else {
			::tycho::warn "Invalid component: \"$partOfPath\""
			return 0
		    }
		} else {
		    if {$newPath == "/"} {
			if [file exists /$partOfPath] {
			    set newPath /$partOfPath
			} else {
			    ::tycho::warn "Invalid component: \"$partOfPath\""
			    return 0
			}
		    } else {
			if [file exists $newPath/$partOfPath] {
			    set newPath $newPath/$partOfPath
			} else {
			    ::tycho::warn "Invalid component: \"$partOfPath\""
			    return 0
			}
		    }
		}
	    }
	    if {$newPath == ""} {
		set CWD "/"
	    } else {
		set CWD $newPath
	    }
	    set localCWD $CWD
	    $itk_component(dir) config -text $localCWD
	    set fileLastOpened ""
	    updateListbox
	    return 0
	} else {
	    ::tycho::warn \
		    "Directory \"[string trimright $file /]\" is unreadable"
	    return 0
	}
    } else {
	# It's a plain file
	if {[file readable $file]} {
	    execCommand -command $file
	    # Store last file opened
	    set fileLastOpened $relPath
	    return 1
	} {
	    ::tycho::warn "\"$file\" is unreadable"
	    return 0
	}
    }
}

######################################################################
#### updateListbox
# This procedure fills the listbox with filenames. It classifies
# directories and files. Directories are inserted at the top
# and are arranged alphabetically.  Files are listed next, also
# alphabetically.
#
body ::tycho::FileBrowser::updateListbox {} {
    
    # clear the list box
    $itk_component(listbox) delete 0 end
    
    # Get a list of filenames in the current working directory
    set files [glob -nocomplain $localCWD/*]
    
    # Split the filename list into directories and plain files
    set dirList ""
    set fileList ""
    foreach file $files {
	set tail [file tail $file]
	if [file isdirectory $file] {
	    lappend dirList $tail
	} {
	    lappend fileList $tail
	}
    }
    
    set dirList [lsort $dirList]
    set fileList [lsort $fileList]
    
    # Insert directories, then files into the listbox
    foreach dir $dirList {
	$itk_component(listbox) insert end "$dir/"
    }
    foreach fname $fileList {
	$itk_component(listbox) insert end "$fname"
    }
    
    clear entry
    
    set dirLength [llength $dirList]
    set fileLength [llength $fileList]
    
    if {$localCWD != "/"} {
	$itk_component(listbox) insert 0 "../"
    }
    
    # Choose intelligently which default file or directory
    # to put in the entry box.
    if {($dirLength == 1) && ($fileLength == 0)} {
	insert entry [lindex $dirList 0]
    } elseif {($dirLength == 0) && ($fileLength == 1)} {
	insert entry [lindex $fileList 0]
    } elseif {($dirLength == 0) && ($fileLength == 0)} {
	if {$localCWD != "/"} {
	    insert entry "../"
	}
    }
}
