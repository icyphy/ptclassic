# Control the fonts in the Tycho system.
#
# @Author: Edward A. Lee
# @Version: $Id$
#
# Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
###########################################################################


#########################################################################
#### FontManager
# Manage font selection. Instances of this class are dialog windows
# that permit the user to select a font. If the instance is created
# using the <code>::tycho::DialogWindow::newModal</code> procedure, the
# procedure will return either a valid font name selected by the user
# or the null string (if the user cancels).
# <p>
# One instance of this class called <code>.tychoFonts</code> is created
# and left unmapped at all times. This instance can be used by any
# widget to select a valid font, using for example the <code>findFont</code>
# method. It is necessary to have such an instance because the way that
# the validity of a font is checked is by configuring a text widget
# with that font. Thus, it would not be sufficient to just provide
# procs with the class.
# <p>
# Unfortunately, fonts are a major weak point in the X window system,
# since there is only one font that is guaranteed to be installed on
# all systems: "fixed". This font is the fallback font of the
# <code>findFont</code> method, which always returns a valid font.
#
class ::tycho::FontManager {
    inherit ::tycho::DialogWindow

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                            options                               ####

    # Specify the initial font displayed in the window.
    itk_option define -initialfont initialFont InitialFont {9x15}

    # Specify the command to execute when user clicks OK.
    itk_option define -okcommand okcommand OkCommand ""

    ##########################################################################
    ####                         public methods                           ####

    # Reset so that no font is identified (invoked in response to Cancel).
    method clearFont {} {set commandResult($prefix) {}}

    # Get a preferred font from a list of possibilities given by an option.
    method defaultFont {optionName}

    # Return a valid font, using the given prioritized specifications.
    method findFont {specs}

    # Return 1 if the specified font is valid, otherwise return 0.
    method fontValid {font}

    # Return the current font displayed by the font manager.
    method getCurrentFont {}

    # Given a font specification, return a font name or an empty string.
    method getFont {family {size 14} {weight medium} {style r}}

    # Return the next size larger than the argument in the sizes list,
    # or the largest value in the sizes list.
    method getValidSize {proposed}

    # Open a help window.
    method help {}

    # Attempt to set the font specified by the menu radio buttons.
    method setCurrentFont {}

    # Attempt to set the font specified by the argument.
    method tryFont {font}

    ##########################################################################
    ####                      private common variables                    ####

    private common familySelection courier
    private common sizeSelection 14
    private common weightSelection medium
    private common styleSelection r

    # An array indexed by valid fonts, cached for efficiency.
    private common validFonts

    # An array indexed by font specs searched already, for efficiency.
    private common validFontSpecs

    # An array indexed by font spec lists, for efficiency.
    private common validFontSpecLists
}

#########################################################################
#### -initialfont option configuration
# Specify the initial font. If the font is not valid, trigger an error.
# If it is valid, the text sample in the window will be displayed in
# the specified font. If the specified font can be parsed so that the
# family, size, weight, and style are recognized, then the radio
# buttons in the menus will be set to match. Otherwise, they remain in
# their previous state.
# 
configbody ::tycho::FontManager::initialfont {
    set families [join [preference preferencecget fonts family -range] |]
    set sizes [join [preference preferencecget fonts size -range] |]
    set weights [join [preference preferencecget fonts weight -range] |]
    set styles [join [preference preferencecget fonts style -range] |]

    set exp "^-(\[a-z\]*|\\*)-($families)-($weights)-($styles)-(\[a-z\]*|\\*)-(\[a-z\]*|\\*)-($sizes)0-"
    if [regexp -- $exp $itk_option(-initialfont) \
	    match foundry family weight style junk1 junk2 size] {
	set familySelection $family
	set sizeSelection $size
	set weightSelection $weight
	set styleSelection $style
    }
    tryFont $itk_option(-initialfont)
}

#####################################################################
#
body ::tycho::FontManager::constructor {args} {

    # Add the OK button.
    addButton ok -text "OK <Ret>" -command \
	    "$this execCommand -okcommand; $this nextWindow; \
	    delete object $this"
    default ok

    # Add the Cancel button.
    addButton cancel -text "Cancel <Esc>" -command \
	    "$this clearFont; $this nextWindow; delete object $this"

    bind $prefix <Escape> "$this invoke cancel"

    # Set up the menubar
    itk_component add menuFrame {
	frame $itk_component(childsite).m -relief raised -bd 2
    } {
	keep -background -cursor
    }
    pack $itk_component(menuFrame) -side top -fill x \
	    -before $itk_component(top)

    # Insert items in the menubar.
    # First, a selector for miscellaneous fonts
    itk_component add miscMenuButton {
	menubutton $itk_component(menuFrame).misc \
		-text Misc \
		-underline 0 \
		-menu $itk_component(menuFrame).misc.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    # Next, the family.
    itk_component add familyMenuButton {
	menubutton $itk_component(menuFrame).family \
		-text Family \
		-underline 0 \
		-menu $itk_component(menuFrame).family.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    # Next, the size.
    itk_component add sizeMenuButton {
	menubutton $itk_component(menuFrame).size \
		-text Size \
		-underline 0 \
		-menu $itk_component(menuFrame).size.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    # Next, the weight.
    itk_component add weightMenuButton {
	menubutton $itk_component(menuFrame).weight \
		-text Weight \
		-underline 0 \
		-menu $itk_component(menuFrame).weight.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    # Next, the style
    itk_component add styleMenuButton {
	menubutton $itk_component(menuFrame).style \
		-text Style \
		-underline 0 \
		-menu $itk_component(menuFrame).style.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    # Next, the help menu.
    itk_component add helpMenuButton {
	menubutton $itk_component(menuFrame).help \
		-text Help \
		-underline 0 \
		-menu $itk_component(menuFrame).help.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    # Arrangement of menu items
    pack $itk_component(familyMenuButton) -side left
    pack $itk_component(sizeMenuButton) -side left
    pack $itk_component(weightMenuButton) -side left
    pack $itk_component(styleMenuButton) -side left
    pack $itk_component(miscMenuButton) -side left
    pack $itk_component(helpMenuButton) -side right
    
    ##################################################################
    # Insert items in the menus.
    # We severely constrain the possible fonts here in a effort to
    # guide the user to decent looking fonts.  There are many horrible
    # looking fonts installed on a typical X window installation.

    itk_component add familyMenu {
	menu $itk_component(familyMenuButton).menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    foreach family [preference preferencecget fonts family -range] {
	$itk_component(familyMenu) add radio \
		-label $family \
		-variable [scope familySelection] \
		-command "$this setCurrentFont"
    }

    itk_component add sizeMenu {
	menu $itk_component(sizeMenuButton).menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    foreach size [preference preferencecget fonts size -range] {
	$itk_component(sizeMenu) add radio \
		-label $size \
		-variable [scope sizeSelection] \
		-command "$this setCurrentFont"
    }

    itk_component add weightMenu {
	menu $itk_component(weightMenuButton).menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    foreach weight [preference preferencecget fonts weight -range] {
	$itk_component(weightMenu) add radio \
		-label $weight \
		-variable [scope weightSelection] \
		-command "$this setCurrentFont"
    }

    itk_component add styleMenu {
	menu $itk_component(styleMenuButton).menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    foreach style [preference preferencecget fonts style -range] {
	$itk_component(styleMenu) add radio \
		-label $style \
		-variable [scope styleSelection] \
		-command "$this setCurrentFont"
    }

    itk_component add miscMenu {
	menu $itk_component(miscMenuButton).menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    foreach font [preference preferencecget fonts special -range] {
	$itk_component(miscMenu) add command \
		-label $font \
		-command "$this tryFont $font"
    }

    ##################################################################
    # Help menu contents
    #
    itk_component add helpMenu {
	menu $itk_component(helpMenuButton).menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }
    
    $itk_component(helpMenu) add command \
	    -label "About Tycho" \
	    -underline 0 \
	    -command \
	    {::tycho::welcomeMessage $TychoBinaryInfo $TychoVersionInfo}
    
    $itk_component(helpMenu) add command \
	    -label "User's Guide" \
	    -underline 0 \
	    -command "$this help"

    set sample "
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
0123456789
!@#$%^&*()_+-=[]{};:'\"`~,.<>/?\\|
"
    itk_component add sampler {
	label $itk_component(childsite).sampler -text $sample
    } {
	keep -highlightthickness -background \
		-foreground -highlightbackground
	rename -font -displayfont displayFont DisplayFont
    }
    pack $itk_component(sampler) -fill both -expand yes \
	    -after $itk_component(top)

    itk_component add fontname {
	label $itk_component(childsite).label
    } {
	keep -highlightthickness -background \
		-foreground -highlightbackground
	rename -font -displayfont displayFont DisplayFont
    }
    pack $itk_component(fontname) -fill both -expand yes \
	    -after $itk_component(sampler)

    $itk_component(fontname) configure -text \
	    [$itk_component(fontname) cget -font]

    catch {setCurrentFont}

    eval itk_initialize $args
}

#########################################################################
#########################################################################
####                       public methods                            ####

########################################################################
#### defaultFont
# Get a preferred font from a list of possibilities given by an option.
# The possible options are fixed, fixedBold, fixedItalic,
# variable, variableBold, and variableItalic.
#
body ::tycho::FontManager::defaultFont {optionName} {
    return [findFont \
	    [preference get fonts $optionName]]
}

########################################################################
#### findFont
# Find a font, given a prioritized list of specifications. Each
# specification is either a font name or a list with four items. The
# items are the family, point size, weight, and style. Common families
# are "times", "courier", and "helvetica". Reasonable point sizes are
# 12, 14, 18, and 24. The weight is typically either "medium" or
# "bold", and the style is either "r" or "i" for roman or italic. If a
# valid font is found matching the first specification, that font is
# returned. Otherwise, the method steps through the list of
# specifications. if no valid font is found, it returns "fixed". The
# actual font returned will depend on what is installed on the system,
# but a valid font is always returned.
#
body ::tycho::FontManager::findFont {specs} {
    if [::info exists validFontSpecLists($specs)] {
        return $validFontSpecLists($specs)
    }
    foreach spec $specs {
	if {[llength $spec] == 1} {
	    if [fontValid $spec] {
		return $spec
	    }
	} elseif {[llength $spec] == 4} {
	    set ft [eval getFont $spec]
	    if {$ft != {}} {
                set validFontSpecLists($specs) $ft
		return $ft
	    }
	} else {
	    error "Invalid font specification: $spec"
	}
    }
    
    # No font was found.  Resort to fixed.
    return fixed
}
########################################################################
#### fontValid
# Return 0 if the specified font is not available on the current
# system, otherwise return 1.  If the font is valid, the commandResult
# variable is set to the name of the font.  This determines the value
# returned by the newModal method.  This font name is also displayed
# in the window.
#
body ::tycho::FontManager::fontValid {font} {
    if [::info exists validFonts($font)] {return 1}
    if {[catch {configure -displayfont $font}] == 0} {
	set commandResult($prefix) $font
        set validFonts($font) 1
	return 1
    }
    return 0
}

########################################################################
#### getCurrentFont
# Return the current font displayed by the font manager.
#
body ::tycho::FontManager::getCurrentFont {} {
    return [$itk_component(fontname) cget -text]
}

########################################################################
#### getFont
# Given a font specification, check to see whether the font is
# available on the current system, and if it is, return the font name.
# Otherwise, return the empty string. A font specification consists of
# four items, the family, point size, weight, and style. Common
# families are "times", "courier", and "helvetica". Reasonable point
# sizes are 12, 14, 18, and 24. The weight is typically either "medium"
# or "bold", and the style is either "r" or "i" for roman or italic. If
# the style is omitted, it defaults to "r". If the style and weight are
# omitted, they default to "medium" and "r". If the point size, style,
# and weight are omitted, they default to "14", "medium", and "r". The
# family is not optional.  If the font is found, set the variable
# commandResult to the name of this font.  Otherwise, set commandResult
# to the empty string.  This determines the value returned by the newModal
# method.
#
body ::tycho::FontManager::getFont \
	{family {size 14} {weight medium} {style r}} {
    set nm "$family-$size-$weight-$style"
    if [::info exists validFontSpecs($nm)] {return $validFontSpecs($nm)}

    set foundries \
	    [preference preferencecget fonts foundry -range]
    set resolutions \
	    [preference preferencecget fonts resolution -range]
    set encodings \
	    [preference preferencecget fonts encoding -range]
    foreach res $resolutions {
	foreach foundry $foundries {
	    foreach cod $encodings {
		set font \
"-$foundry-$family-$weight-$style-normal-*-*-${size}0-$res-$res-*-*-$cod-*"
	        if [fontValid $font] {
                    set validFontSpecs($nm) $font
		    return $font
		}
	    }
	}
    }
    set commandResult($prefix) {}
    return {}
}

#########################################################################
#### getValidSize
# Return the next size larger than or equal to the argument in the
# sizes list, or the largest value in the sizes list.
#
body ::tycho::FontManager::getValidSize {proposed} {
    set sizes [preference preferencecget fonts size -range]

    # The common case is that the proposed size is OK.  Optimize for this.
    if {[lsearch -exact $sizes $proposed] >= 0} {return $proposed}
    foreach size $sizes {
	if {$proposed <= $size} {return $size}
    }
    return $size
}

#########################################################################
#### help
# Open a help window.
#
body ::tycho::FontManager::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO kernel doc usersGuides FontManagerHelp.html]
}

#########################################################################
#### setCurrentFont
# Attempt to set the font specified by the menu radio buttons.
# If the font is not valid, report an error.
#
body ::tycho::FontManager::setCurrentFont {} {
    if {[set font [getFont $familySelection $sizeSelection \
	    $weightSelection $styleSelection]] == {}} {
	error "Invalid font specification: $familySelection, $sizeSelection, \
		$weightSelection, $styleSelection"
    }
    $itk_component(fontname) configure -text $font        
    configure -displayfont $font
}

#########################################################################
#### tryFont
# Attempt to set the font specified by the argument.
# If the font is not valid, report an error.  If the font is valid,
# set the commandResult variable to the font name.  This determines
# the value returned by the newModal method.
#
body ::tycho::FontManager::tryFont {font} {
    if [fontValid $font] {
        $itk_component(fontname) configure -text $font        
        configure -displayfont $font
	set commandResult($prefix) $font
    } {
	error "Invalid font: $font"
    }
}
