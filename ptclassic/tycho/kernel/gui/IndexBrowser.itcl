# Index browser.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Options from the derived class
option add *IndexBrowser*entryWidth 30 widgetDefault

option add *IndexBrowser*entryBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *IndexBrowser*entryForeground \
	[ptkColor black black] widgetDefault

option add *IndexBrowser*textBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *IndexBrowser*textForeground \
	[ptkColor black black] widgetDefault

option add *IndexBrowser.entryfont \
	[.tychoFonts defaultFont fixed] widgetDefault
option add *IndexBrowser.width 30 widgetDefault
option add *IndexBrowser.height 20 widgetDefault

##########################################################################
#### IndexBrowser
# A browser for an index. This is implemented as a list browser where
# the items in the list are each a list of three strings. The first
# string in each item is what is displayed in the list box. The second
# string is a file name and the third string is a point within the
# file. When the user selects an item, we make a hyperjump to the file
# and to the position given by the point.
# <p>
# If the -file option is given, that file is read for the contents of
# the listbox.  Moreover, the directory of that file is used for relative
# filenames referenced by the index.  Otherwise, the current working directory
# is used for relative file names.
# <p>
# The format of the file is as follows:
# name { items }, where each item is a list of three elements.
# The name at the beginning of the list identifies the index, and is used
# to set the -text option.  Each three element entry contains
# a label (displayed by the index browser), a file name
# (which can be relative to the index file), and a point within
# the file (in any syntax supported by the <code>seePoint</code>
# method of the target editor).
#
class ::tycho::IndexBrowser {
    inherit ::tycho::ListBrowser

    # Specify the name of the file that contains the index.
    itk_option define -file file File {}

    # FIXME: Should remove the -command option (or support it?)

    constructor {args} {}

    ##################################################################
    ####                     public methods                       ####

    # Open a help window.
    method help {}

    # Open a file and go to its internal point identified by name.
    method hyperJump {filename point}

    ##################################################################
    ####                   protected methods                      ####

    # Process a file or directory selection.
    protected method processItem {filename}

    ##################################################################
    ####                   protected variables                    ####

    # The directory of the index file.
    protected variable CWD {}
    # The entries in the index.
    protected variable entries
}

#########################################################################
#### -file configuration
# Set or change the name of the file that specifies the contents of the
# listbox.  This also specifies the directory relative to which file
# references are understood.
#
configbody ::tycho::IndexBrowser::file {
    set file $itk_option(-file)
    if [ file readable $file.fst ] {
        # Add a button that will bring up a forest browser.
        $itk_component(buttons) add browse -text "    Browse    " \
                -command "::tycho::File::openContext $file.fst"
    }
    set fd [open $itk_option(-file) r]
    set contents [read $fd]
    close $fd
    set CWD [file dirname $itk_option(-file)]
    if {[llength $contents] != 2} {
	error "Syntax error in index file $itk_option(-file) \
		Should contain the form: name { items }"
    }
    configure -text [lindex $contents 0]
    set items {}
    set count 1
    foreach item [lindex $contents 1] {
	if {[llength $item] != 3} {
	    error "Syntax error in index item: $item \n\
		    Should contain the form { id filename point }"
	}
	set name [lindex $item 0]
	# Special action to deal with duplicate entries.
	if [info exists entries($name)] {
	    incr count
	    set name "$name $count"
	} {
	    set count 1
	}
	set entries($name) $item
	lappend items $name
    }
    # We assume the items are already sorted alphabetically.
    configure -items $items
}

######################################################################
#
body ::tycho::IndexBrowser::constructor {args} {


    # Process any unevaluated arguments.
    eval itk_initialize $args
}


    ##################################################################
    ##################################################################
    ####                     public methods                       ####

######################################################################
#### help
# Open a help window.
#
body ::tycho::IndexBrowser::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/kernel/doc/usersGuides/IndexBrowserHelp.html
}

#####################################################################
#### hyperJump
# Open a file and go to its internal point identified by name. If the
# filename is relative (does not begin with "/", "~", or "$"), then
# prepend the directory of the file currently being edited or viewed.
# Then, expand the filename using <code>::tycho::expandPath</code> and
# open the resulting file with <code>::tycho::File::openContext</code>,
# which will choose an editor based on the filename extension. Finally,
# invoke <code>seePoint</code> to view the specified point within the
# file. The format for the <i>point</i> argument depends on the type of
# file being opened. For HTML files, it will normally be the name of an
# anchor in the file. For text files, it will normally be either "{line
# <i>linenumber</i>}" or "{range <i>start</i> <i>end</i>}", where
# <i>start</i> and <i>end</i> have the form
# <i>linenumber.characternumber</i>.
#
body ::tycho::IndexBrowser::hyperJump {filename point} {
    set char [string index $filename 0]
    if {$char != "/" && $char != "~" && $char != "\$" && $CWD != {}} {
        set filename [format "%s/%s" $CWD $filename]
    }
    ::tycho::TopLevel::hyperJump $filename $point
}


    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

######################################################################
#### processItem
# This procedure processes a user selection by performing a hyperjump
# to the specified file and point.
#
body ::tycho::IndexBrowser::processItem {id} {

    if {$id == {}} {return 0}

    if {![info exists entries($id)]} {
	::tycho::warn "No such item in index: $id"
	return 0
    }

    set entry $entries($id)
    set filename [lindex $entry 1]
    set point [lindex $entry 2]

    hyperJump $filename $point
    return 1
}
