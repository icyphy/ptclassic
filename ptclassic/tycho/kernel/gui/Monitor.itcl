# Ptolemy Tycho class that exec's a process and displays the output
#
# @Author: Christopher Hylands and Kevin Chang
#
# @Version: $Id$
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Monitor
# inherits from Exec, with tk widgets added. This function is added
# for fully backward compatibility with the original Exec.
# <p>
# Here is an example of how to use the Monitor:
# <tcl><pre>
#     set win [::tycho::autoName .execExample]
#     ::tycho::Exec $win -command {make all}
#     $win centerOnScreen
#     ::tycho::Dialog::wait $win
#     ::tycho::inform "We waited until the Exec window was closed"
# </pre></tcl>
# In the above example, we bring up the Exec window and then wait  
# until the user closes it.
#
# In this example, we automatically start up the subprocess, and then
# close the window if the subprocess completed without an error
# <tcl><pre>
#     set win [::tycho::autoName .execExample]
#     ::tycho::Exec $win &#92
#        -command {make all} &#92
#        -autostart 1 &#92
#        -autodestroy 1
#     $win centerOnScreen
# </pre></tcl>
# If the make in the above example had returned an error, then the window
# would not have been destroyed.
class ::tycho::Monitor {
    inherit ::tycho::Query ::tycho::Exec
    constructor {args} {}
    destructor {}

    public method insertLine {line} {
        $itk_component(history) configure -readonly 0
        $itk_component(history) insertData "$line"
        $itk_component(history) center
        $itk_component(history) configure -readonly 1
    }
    

    public method execProcessInMonitor {} {
        # Clear both history logs
        $itk_component(history) configure -readonly 0
        $itk_component(history) clear
        $itk_component(history) configure -readonly 1
        $this clearHistory

        $this execProcess [get commandToExec] [get dirToExecFrom]
    }

    ###################################################################
    ####                            options                        ####

    # If non-zero, close widget if the subprocess exits with an ok status.
    itk_option define -autodestroy autodestroy Autodestroy 0

    # If non-zero, start the subprocess automatically
    itk_option define -autostart autostart Autostart 0

    # Command to be executed.
    itk_option define -command command Command "make"

    # Directory to execute the command in.
    itk_option define -dir dir Dir {}

}

#######################################################################
#### constructor
body ::tycho::Monitor::constructor {args} {
    # This is used to initialize the interface between Exec and Monitor
    doEachLine {$this insertLine "$line"}

    # Original Tk stuff here
    configure -queries [list \
            {line commandToExec {Command to Exec:} make } \
            {line dirToExecFrom {Directory to Exec from:} {}} \
            {radio autoDestroy {Close window automatically:} {Yes No} No}]

    eval itk_initialize $args

    # If the command option has not been set, set the default now.
    # This has to be done in the constructor rather than in the class
    # definition (as a default) because "$this" is known here.
    if {$itk_option(-command) == {}} {
	configure -command {make}
    }

    $itk_component(bbox) buttonconfigure ok \
	    -text {Exec <Ret>} \
            -command "$this execProcessInMonitor"

    $itk_component(hull) addButton stop \
            -text {Stop} \
            -command "$this killProcess"
    
    $itk_component(bbox) buttonconfigure cancel \
	    -text {Close <Esc>}

    $itk_component(bbox) add help \
	    -text "Help" \
	    -command "$this help"
    if {![info exists itk_component(history)] || \
            ![winfo exists $itk_component(history)]} {
        # We have not yet created the history window, so do so now.
        itk_component add history {
            ::tycho::Edit $itk_component(hull).history -textheight 15
        } {
            keep -readonly -textwidth -background \
                    -highlightbackground -highlightcolor -selectforeground \
                    -cursor -insertbackground -textforeground -textfont \
                    -textbackground
        }
        pack $itk_component(history) -expand yes -fill both \
                -after $itk_component(querysite)
        $itk_component(history) configure -readonly 1 -save 0
    }

    #
    # A lot of old code here
    #


    # Make the entry boxes wide so we can see the entire command
    configure -entrywidth 80

    wm resizable $prefix 1 1
    # NOTE: There seems to be no way to find out the actual window size at this
    # point.  The commands "wm reqwidth" and "wm width" return 1, even after
    # a "tkwait visibility" and an "update".  So we just set some reasonable
    # minimum size.
    wm minsize $prefix 10 10

    # If autostart is not equal to zero, then start the subprocess
    # This should be at the end of the constructor
    if {$itk_option(-autostart) != 0} {
        $this execProcessInMonitor
    }
    return $this
}

#######################################################################
#### destructor
#
body ::tycho::Monitor::destructor {} {
    # Adding this close seems to hang the window manager
    #close $fd
    # Unregister our fileevent handler
    catch {fileevent $fd readable {}}

    # Mark the editor as unmodified so that we are not prompted as
    # to whether we want to save it.
    if {[info exists itk_component(history)] && \
            [winfo exists $itk_component(history)]} {
        #$itk_component(history) configure -readonly 0
        #$itk_component(history) clear
        $itk_component(history) markUnmodified
    }
    catch {unset ::tycho::Monitor::$statusVariableName}
}


#######################################################################
#### -autodestroy configuration
# If non-zero, destroy the widget if the process exits with an 'ok'
# status
configbody ::tycho::Monitor::autodestroy {
    if {$itk_option(-autodestroy) == 0} {
        insert autoDestroy No
    } else {
        insert autoDestroy Yes
    }
}

#######################################################################
#### -command configuration
# Command to be Executed.
#
configbody ::tycho::Monitor::command {
    clear commandToExec
    insert commandToExec $itk_option(-command)
}

#######################################################################
#### -dir configuration
# The directory that we should exec from.  If the value of this option
# is {}, then we don't change the current directory.  Otherwise,
# we cd to the value of this option.
#
configbody ::tycho::Monitor::dir {
    clear dirToExecFrom
    insert dirToExecFrom $itk_option(-dir)
}






