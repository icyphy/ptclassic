# Definition of the class which handles revision control using RCS.
#
# @Authors: Joel King and Edward A. Lee
#
# @Version: @(#)RevControlRCS.itcl	1.26    05/12/98
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### RevControlRCS
# This class defines how revision control will be handled when using 
# RCS, and is intended to be contained within objects that use such 
# facilities.  Note that this is a UNIX-specific interface to RCS.
#
class ::tycho::RevControlRCS {
    inherit ::tycho::RevControl

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####

    # Put the file under revision control.
    method initializeRevControl {}

    # Get the specified version and open the file.
    method retrieveVersion {version}

    # Unedit the file associated with this class.
    method unedit {}

    # View or close the version control history. Translate from RCS->SCCS
    # format
    method viewHistory {}

    ###################################################################
    ####                      public procs                         ####

    # Check in the file associated with a File object.
    proc checkIn {object} {}

    # Check out the file associated with a File object.
    proc checkOut {object} {}

    # Check out the previous checked in file, and remove from history
    # FIXME: Need to add in the following:
    proc fixRecent {object version} {::tycho::inform "Not yet implemented"}

    # Return 1 if the given file is under revision control, 0 otherwise.
    proc isUnderRevControl {file} {}

    ###################################################################
    ####                   protected methods                       ####

    # Return 1 if the file is checked out, 0 otherwise.
    protected method isCheckedOut {}

    # Return the name of the person who checked this file out
    protected method isCheckedOutBy {}

    # Update the history information, if it is on display.
    protected method updateHistory {}

    ###################################################################
    ####             private methods and procs                     ####

    # Get rlog information about a file and check for the  "locks" field.
    private proc getRlog {file} {}
}

###################################################################
# constructor
#
body ::tycho::RevControlRCS::constructor {args} {
    eval itk_initialize $args 
    configure -text "RCS revision control for: $file"
}

#####################################################################
#### initializeRevControl
# Put the file under revision control.
# 
body ::tycho::RevControlRCS::initializeRevControl {} {
    ::tycho::RevControl::initializeRevControl
    set dir [file dirname $file]
    set revdir [file join $dir RCS]
    set basefile [file tail $file]
    if [file exists [file join $revdir $basefile,v]] {
	return
    }
    set olddir [eval pwd]
    if {![file exists $revdir]} {
	if {![file writable $dir]} {
	    error "The directory \"$revdir\" doesn't exist, and you do not\
		    have write permission to create it."
	}   
	exec mkdir $revdir
    }
    cdDir $dir
    set comment [format "First revision.\n.\n"]
    catch {exec echo $comment | ci -u $basefile} output
    if {![regexp "initial revision: 1.1" $output]} {
	error "Failed to place the file under revision\
		control: $output."
    }   
    $object reload
    cd $olddir
}

#####################################################################
#### retrieveVersion
# Get the specified version and open the file.
# 
body ::tycho::RevControlRCS::retrieveVersion {version} {
    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]
    cdDir $dir

    # Generate a temporary file name that has the same extension as the file
    # we are working on.
    set tmpFile [::tycho::tmpFileName \
            [file rootname $basefile] \
            [file extension $basefile]]
    # In co, -q means be quite, -p determines which version
    if [catch {exec co -q -p$version $basefile > $tmpFile} output ] {
        error "Problem executing:\n\
                `cp -q -p$version $basefile > $tmpFile':\n\ $output"
    }

    cd $olddir
    return $tmpFile
}

#####################################################################
#### unedit
# Unedit the file associated with this class.
# 
body ::tycho::RevControlRCS::unedit {} {
    ::tycho::RevControl::unedit
    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]
    set scanout [getRlog $file]
    if {![regexp -nocase {([a-z]+):} $scanout]} {
        error "The file \"$basefile\" is not checked out."
    }
    cdDir $dir
    catch {exec rcs -u $basefile} output 
    set scanout [getRlog $basefile]
    if {[regexp -nocase {([a-z]+):} $scanout]} {
	error "Unedit failed: $output"
    }    
    catch {exec rm -f $basefile} output
    catch {exec co -u $basefile} output
    cd $olddir
    $object reload
    focusin
    enableButton checkout

    updateHistory
}

#####################################################################
#### viewHistory
# View or close the version control history. Read in from UNIX's
# rlog command, then translate from RCS format  to SCCS format.
# 
body ::tycho::RevControlRCS::viewHistory {} {
    if {$file == {}} {
	error "Revision control: no file specified"
    }

    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]
    
    if {![file exists [file join $dir RCS ${basefile},v]]} {
        error "The file \"$file\" is not under RCS control."
    }
    cdDir $dir

    if [catch {exec rlog $basefile} results] {
        error "`rlog $basefile' failed:\n$results"
    }


    # Start translating here. First, skip the header file until "----"
    set ind1 [string first "----------------------------" $results]
    if {$ind1 == -1} {
        # No logs yet.
        set history ""
    } else {
        set history [string range $results $ind1 end]
    }

    # Translate the RCS format to SCCS format:
    set version ERROR
    set history2 "\n\n"
    foreach line [split $history \n] {
        if {[regexp {^date:} $line] && [regexp {^revision } $prevline]} {
            regexp -nocase \
                    {^date: ([0-9/]+) ([0-9:]+);  author: ([a-z]*);} \
                    $line match date time user
            append history2 "\n"
            append history2 "D $version $date $time $user ? ? ?\n"
            append history2 "MRs:\n"
            append history2 "COMMENTS:\n"
            set prevline $line
        } elseif {[regexp {^revision} $line] && \
                $prevline == "----------------------------"} {
            regexp {^revision ([0-9.]*)} $line match version
            set prevline $line
        } elseif {[regexp {^----------------------------} $line] \
                || [regexp {^============================} $line]} {
            set prevline $line	    
        } else {
            # Comment lines here
            append history2 "$line\n"
            set prevline $line	    
        }
    }
    
    # Parse the history
    $itk_component(history) clear
    parseHistory $history2 [$itk_component(history) textWinName]
    $itk_component(history) markUnmodified
    
    # FIXME: Delay or the focus command is ignored.  Tk bug?
    #after 500 "focus [$itk_component(history) textWinName]"
    cd $olddir
}

    ###################################################################
    ###################################################################
    ####                   public procs                            ####

#####################################################################
#### checkIn
# Check in the file associated with a File object
# 
body ::tycho::RevControlRCS::checkIn {object} {
    ::tycho::RevControl::checkIn $object
    set file [$object filename]
    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]
    set scanout [getRlog $file]
    regexp -nocase {([a-z]+):} $scanout garbage lockowner
    if {[info exists lockowner]} {
        catch {exec whoami} currentuser
        if {$currentuser != $lockowner} {
	    error "The file \"$basefile\" is checked out by: $lockowner."
        }
    } else {
        error "The file \"$basefile\" is not checked out."
    }
    cdDir $dir
    set comment [getComments]
    if {$comment == ""} {
	# cancelled
	return
    }
    set comment [format "%s\n.\n" $comment]
    if [catch {exec echo $comment | ci -u -q -f $basefile} output] {
	if [regexp "file is unchanged; reverting to previous revision" \
		$output] {
	    ::tycho::warn "Check in command:\n\
		    `echo $comment | ci -u -q -f $basefile'\
		    produced a warning:\n\
		    $output"
	} else {
	    error "Checkin command:\n\
		    `echo $comment | ci -u -q -f $basefile' failed:\n$output"
	}
    }
    set scanout [getRlog $file]
    if {[regexp -nocase {([a-z]+):} $scanout]} {
	error "Checkin failed: $output"
    }
    cd $olddir
    $object reload
}

#####################################################################
#### checkOut
# Check out the file associated with a File object.
# 
body ::tycho::RevControlRCS::checkOut {object} {
    ::tycho::RevControl::checkOut $object
    set file [$object filename]
    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]
    set scanout [getRlog $file]
    regexp -nocase {([a-z]+):} $scanout garbage lockowner
    if {[info exists lockowner]} {
        catch {exec whoami} currentuser
	error "The file \"$basefile\" is checked out by: $lockowner."
    } 
    cdDir $dir
    # -l argument locks, -q argument does not print diagnostics
    if [catch {exec co -l -q $basefile} output] {
	
	error "Checkout command `co -l $basefile' failed:\n$output"
    }
    set scanout [getRlog $file]
    regexp -nocase {([a-z]+):} $scanout garbage lockowner
    if {![info exists lockowner]} {
	error "Checkout failed: $output."
    }
    cd $olddir
    $object reload
}

#####################################################################
#### fixRecent
# Check out the most recent file, then remove it from history.
# In SCCS, the command is simply "sccs fix <filename>",
# but in RCS, this is:
# 1) co <i>file</i>
# 2) cp <i>file</i> <i>tmp</i>
# 3) rcs -u <i>file</i>
#    rm -f <i>file</i>
# 4) rcs -o[recent_version] <i>file</i>
# 5) co <i>file</i>
# 6) cp <i>tmp</i> <i>file</i>
#
body ::tycho::RevControlRCS::fixRecent {object version} {
    ::tycho::RevControl::checkOut $object
    set file [$object filename]
    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]
    set tmpFile [::tycho::tmpFileName $basefile]
    
    # At this point, successful check out, now delete from the history
    cdDir $dir

    # -l argument locks, -q argument does not print diagnostics
    if [catch {exec co -l -q $basefile} output] {
	error "1) Cmd failed:\n$output"
    }
    if [catch {exec cp $basefile $tmpFile} output] {
	error "2) Cmd failed:\n$output"
    }
    catch {exec rcs -u $basefile} output
    set scanout [getRlog $basefile]
    if {[regexp -nocase {([a-z]+):} $scanout]} {
	error "Unedit failed: $output"
    }    
    catch {exec rm -f $basefile} output
    #catch {exec co -u $basefile} output

    if [catch {exec rcs -o$version -q $basefile} output] {
	error "4) Cmd failed:\n$output"
    }
    if [catch {exec co -l -q $basefile} output] {
	error "5) Cmd failed:\n$output"
    }
    if [catch {exec cp $tmpFile $basefile} output] {
	error "6) Cmd failed:\n$output"
    }

    cd $olddir
    $object reload
}

#####################################################################
#### isUnderRevControl
# Check whether the given file is under revision control, and return a
# 1 if it is or a 0 otherwise.
# 
body ::tycho::RevControlRCS::isUnderRevControl {file} {
    set dir [file dirname $file]
    set revdir [file join $dir RCS]
    set basefile [file tail $file]
    if {![file exists [file join $revdir $basefile,v]]} {
	return 0
    }
    return 1
}

    ###################################################################
    ###################################################################
    ####                   protected methods                       ####

#####################################################################
#### isCheckedOut
# Return 1 if the file is checked out, 0 otherwise.
# Here we assume that if the file is read-only, then it is not checked out.
# 
body ::tycho::RevControlRCS::isCheckedOut {} {
    #if [file writable [$object filename]] {}
    if {[isCheckedOutBy]!={}} {
	return 1
    } {
	return 0
    }
}

#####################################################################
#### isCheckedOutBy
# Later we will get rid of isCheckedOut, and replace it with this function
#
body ::tycho::RevControlRCS::isCheckedOutBy {} {
    set file [$object filename]
    set dir [file dirname $file]
    set basefile [file tail $file]
    set olddir [eval pwd]

    cdDir $dir
    # Read in information list (who checked this file?)
    catch {exec rcsinfo} infolist
    set info {}
    foreach i [split $infolist \n] {
        # Need to match the format:
        # "1.cc                 kchang      1.5    Fri May  2 13:12:04 1997
        # "4.cc                 kchang      1.6    Wed Apr 23 13:48:59 1997
        if [regexp "$basefile.*" $i] {
            # Format is:
            set info $i
        }
    }
    cdDir $olddir

    if {$info!={}} {
        return " [lindex $i 4] [lindex $i 5] [lindex $i 6]\
                <checked out by [lindex $i 1]>"
    } else {
        return {}
    }
}



#####################################################################
#### updateHistory
# Update the history information, if it is on display.
# 
body ::tycho::RevControlRCS::updateHistory {} {
    if {[info exists itk_component(history)] && \
	    [winfo exists $itk_component(history)]} {
	viewHistory
    }
}


    ###################################################################
    ###################################################################
    ####               private methods and procs                   ####


#####################################################################
#### getRlog
# Get rlog information about a file and check for the "locks" field.
#
body ::tycho::RevControlRCS::getRlog {file} {
    if [catch {exec rlog $file} results] {
	error "`rlog $file' failed:\n$results"
    }
    set ind1 [string first "locks:" $results]
    set ind2 [string first "access list:" $results]
    set ind1 [expr $ind1 + 6]
    set ind2 [expr $ind2 - 1]
    if {$ind1 == -1 || $ind2 == -1} {
	error "rlog reports an error: $results."
	return ""
    } else {
        return [string range $results $ind1 $ind2]
    }
}

