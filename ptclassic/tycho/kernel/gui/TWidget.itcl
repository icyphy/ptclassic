# Base class for Tycho widgets.
# 
# @Author: Edward A. Lee
#
# @Version: @(#)TWidget.itcl	1.33  06/29/98
# 
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# NOTE:  It would be nice to be able to name this "Widget".
# In theory, this should be possible since it is in a different namespace
# from ::itk::Widget.  In practice, however, very strange behavior
# (with core dumps) results if that name is used.

#######################################################################
#### TWidget
# This class is the base class for non-top-level widgets in Tycho.
# It extends the <code>::tycho::Archetype</code> widget with
# several useful methods that only apply to non-top-level widgets.
# All Tycho widgets should inherit from this class rather than
# from the <code>itk::Widget</code> class. 
#
class ::tycho::TWidget {
    inherit ::tycho::TArchetype

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Invoke a command on the context-sensitive popup menu.
    method contextmenu {cmd args}

    # Raise the top-level window.
    method raiseWindow {}

    # <b>Obsolete</b>: use <code>hull</code> instead.
    method windowName {} {return $itk_component(hull)}

    ###################################################################
    ####                         public procs                      ####

    # If the named object exists, evaluate the arguments.
    proc evalIfExists {command args} {}

    # Get the current contents of the Tk clipboard.
    proc getClipboard {} {}

    # Set the current contents of the local and Tk clipboards.
    proc setClipboard {text} {}

    ###################################################################
    ####                         protected methods                 ####

    # Configure the popup menu depending on the current context
    protected method configureContextMenu {}

    ###################################################################
    ####                         protected variables               ####

    # A local Tycho clipboard that is mirrored in the Tk clipboard.
    # protected common clipboard {}

    # Name of my context-sensitive popup menu
    private variable myContextmenu {}
}

#######################################################################
#### constructor
#
body ::tycho::TWidget::constructor {args} {
    eval itk_initialize $args

    # This is not a good idea because some widgets don't want the focus:
    # ::bind $itk_component(hull) <Enter> "$this focusin"

    # There are a few bindings that we want to work everywhere
    bind $itk_component(hull) <<Open>> {::tycho::File::openWin %W; break}
}

#######################################################################
#### destructor
# Destruction will succeed only if we are not within a <code>safeEval</code>
# call.  If we are, then destruction is canceled with a silent error, and
# scheduled to be attempted again after 1 second.
#
body ::tycho::TWidget::destructor {} {
    if [destructionDisabled] {
        # Schedule a future attempt at destruction.
        after 1000 "$this prevWindow; delete object $this"
        ::tycho::silentError
    }
    # Delete the context menu if there is one
    if { $myContextmenu != "" } {
	delete object $myContextmenu
    }
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#########################################################################
#### contextmenu
# If there is a context-sensitive popup menu associated with this widget,
# use the arguments as a command to issue to the PopupMenu widget,
# Menubar, and return whatever is returned by the command.  Otherwise,
# return an empty string.
#
# The command "create" is treated as a special case:
# the context menu is created. The second argument, if present.
# is the widget to add the binding for posting the menu. When the
# menu is posted, the method configureContextMenu{} is called.
#
body ::tycho::TWidget::contextmenu {cmd args} {
    if { $cmd == "create" } {
	set myContextmenu [::tycho::PopupMenu .#auto \
		-command "@scope [info class] \
		    [list $this configureContextMenu]"]
	if { $args != "" } {
	    bind [lindex $args 0] <Button-3> \
		    "$this contextmenu post %X %Y"
	}
    } elseif {$myContextmenu != {}} {
        return [eval $myContextmenu $cmd $args]
    } else {
        return {}
    }
}

#####################################################################
#### raiseWindow
# Bring the corresponding top-level window to the foreground, and
# make sure it is deiconified.
#
body ::tycho::TWidget::raiseWindow {} {
    set tl [winfo toplevel $itk_component(hull)]
    wm deiconify $tl
    raise $tl
    focusin
}

#####################################################################
#####################################################################
####                   public procedures                         ####


#####################################################################
#### evalIfExists
# If the command exists, evaluate the arguments.
# This is useful for evaluating something in the background where you are
# not sure that the widget will still exist when Tcl gets around to doing
# the evaluation.  It should be used, for example, when invoking an object
# method using "after".  For example, within an object, you can say:
# <pre>
#    after idle [code evalIfExists $this methodname]
# </pre>
#
body ::tycho::TWidget::evalIfExists {command args} {
    if {[infoWhichCommand $command] != {}} {
        eval $command $args
    }
}

#####################################################################
#### getClipboard
# Get the current contents of the Tk clipboard.
#
body ::tycho::TWidget::getClipboard {} {
    # return $clipboard
    if ![catch {selection get -selection CLIPBOARD} cb] {
        return $cb
    } else {
        return ""
    }
}

#####################################################################
#### setClipboard
# Set the current contents of the local and Tk clipboards.
#
body ::tycho::TWidget::setClipboard {text} {
    # set clipboard $text
    clipboard clear
    # On Windows XP, the following line is needed as well, for
    # no apparent reason.
    selection clear -selection CLIPBOARD -displayof .
    clipboard append -- $text
}

#####################################################################
#####################################################################
####                   protected methods                         ####

#####################################################################
#### configureContextMenu
# Configure the popup menu according to context. By default, this
# menu simply contains an entry that offers information about
# the widget.
#
# Subclasses that create a context menu (by calling "contextmenu create"
# on themselves) should override this method.
#
body ::tycho::TWidget::configureContextMenu {} {
    # Clear the menu
    contextmenu clear

    contextmenu command usersguide \
            -label "Guide to the [info class] widget" \
	    -command "$this help"

    # Entries for developer information
    # FIXME: could be much more useful
    contextmenu command widgetname \
            -label "Name of this [info class] widget..." \
            -command "::tycho::post $this"
}
