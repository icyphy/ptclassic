# A tool bar for use with various editors and viewers.
#
# @Version: $Id$
# @Author: E. A. Lee
#
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### ToolBar
# A tool bar with any of a variety of widgets.  It is meant to be put at
# the top of a Displayer.
#
# NOTE: There is a certain amount of duplication here with the
# Query object, but enough differences that it is hard to see how to
# merge the two.  The objectives are somewhat different.  As facilities
# get added to each, we should try to at least keep the same interface.
#
class ::tycho::ToolBar {
    inherit ::tycho::TWidget

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # The status bar to use for print help messages.
    itk_option define -statusbar statusBar StatusBar {}

    # The font to use.
    itk_option define -font font Font [::tycho::font screen]

    # The horizontal button padding
    itk_option define -padx padX Pad 11

    # The vertical button padding
    itk_option define -pady padY Pad 4

    # The options used by the entry widgets
    itk_option define -entryforeground entryForeground EntryForeground black
    itk_option define -entrybackground entryBackground EntryBackground white
    itk_option define -entryfont entryFont EntryFont 8x13

    ###################################################################
    ####                         public methods                    ####

    # Add a button to the toolbar.
    method button {tag description args}

    # Clear all widgets or one widget.
    method clear {{tag {}}}

    # Disable user interaction with the widget with the given tag.
    method disable {tag}

    # Enable user interaction with the widget with the given tag
    method enable {tag}

    # Add an entry widget to the toolbar.
    method entry {tag label default command args}

    # Get the current value of the widgets (or one widget). Ignored for buttons.
    method get {{tag {}}}

    # Insert the specified string into the specified entry box.
    method insert {tag str}

    ###################################################################
    ####                         protected methods                 ####

    # Access the "dialogs" preference set.
    protected method preference {mode args}

    # Print a message to the status bar.
    protected method putStatus {string}

    ##################################################################
    ####             protected and private variables              ####

    # Remember the number of entries currently in this widget
    protected variable numentries 0

    # Keep track of tags in the order in which they are created.
    private variable tags {}

    # Array of clear commands for each tag.
    private variable tagsclear

    # Array of disable commands.
    private variable tagsdisable

    # Array of enable commands.
    private variable tagsenable

    # Array of insert commands for each tag.
    private variable tagsinsert

    # Array of get commands for each tag.
    private variable tagsget
}

#######################################################################
#### constructor
#
body ::tycho::ToolBar::constructor {args} {

    # A tiny bit of padding to the left of everything
    itk_component add leftpacking {
	frame $itk_interior.leftpacking -width 2
    } {
	keep -background -cursor
    }
    pack $itk_component(leftpacking) -side left

    # Button site
    itk_component add buttonsite {
	frame $itk_interior.buttonsite
    } {
	keep -background -cursor
    }
    pack $itk_component(buttonsite) -side top -expand yes -fill both

    # Entry site
    itk_component add entrysite {
	frame $itk_interior.entrysite
    } {
	keep -background -cursor
    }
    pack $itk_component(entrysite) -side top -expand yes -fill x

    # Initialize options
    eval itk_initialize $args
    eval preference exclude $this $args

    # Subscribe to the preference set
    preference subscribe $this \
	    -entryforeground entryForeground \
	    -entrybackground entryBackground \
	    -entryfont entryFont
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### button
# Add a button to the toolbar at the top. The required arguments are a
# tag for the button and itk_component and a description. The
# description will appear in the status bar, if there is one, whenever
# the mouse is moved into the button. Any additional arguments are
# passed to the Tk <code>button</code> command.
# For example,
# <pre>
#    button foo "a button" -text "Push Me" -command "::tycho::post Thanks"
# </pre>
# will create a button with label "Push Me" and the specified command.
# To use a bitmap instead, something like the following will work:
# <pre>
#    global ::TYCHO
#    button foo "a button" -bitmap @$TYCHO/kernel/img/back.xbm -command ...
# </pre>
# Note that buttons appear in the order they are added, from left to
# right.  Someday we should add a way to put more buttons on a second row.
# 
# Note that this method shadows the Tk <code>button</code> command, so
# you must use <code>::button</code> if you want the Tk version.
#
body ::tycho::ToolBar::button {tag description args} {
    itk_component add $tag {
	eval ::button $itk_component(buttonsite).$tag $args
    } {
	keep -background -font -activebackground -cursor \
		-highlightthickness -activeforeground \
		-foreground -highlightcolor -highlightbackground \
		-padx -pady
    }
    pack $itk_component($tag) -side left

    # Bind description output.
    bind $itk_component($tag) <Enter> [code [list %Q putStatus $description]]
    bind $itk_component($tag) <Leave> [code "%Q putStatus {}"]

    # Record the tag and its access methods.  Note that clear and get
    # do nothing.
    lappend tags $tag
    set tagsclear($tag) {}
    set tagsget($tag) {$itk_component($tag) cget -text}
    set tagsinsert($tag) {$itk_component($tag) configure -text}
    set tagsenable($tag) "$itk_component($tag) configure -state normal"
    set tagsdisable($tag) "$itk_component($tag) configure -state disabled"
}

#####################################################################
#### clear
# If no argument is given, clear all widgets. If a tag
# is given as an argument, clear the corresponding widget. If the tag is
# not recognized, do nothing.
# 
body ::tycho::ToolBar::clear {{tag {}}} {
    if {$tag == {}} {
	foreach tag $tags {
            set cmd $tagsclear($tag)
            if {$cmd != {}} {
                eval $cmd
            }
        }
    } {
        set cmd $tagsclear($tag)
        if {$cmd != {}} {
            eval $cmd
        }
    }
}

#####################################################################
#### disable
# Disable user interaction with the widget with the given tag.
#
body ::tycho::ToolBar::disable {tag} {
    set cmd $tagsdisable($tag)
    if {$cmd != {}} {
        eval $cmd
    }
}

#####################################################################
#### enable
# Enable user interaction with the widget with the given tag.
#
body ::tycho::ToolBar::enable {tag} {
    set cmd $tagsenable($tag)
    if {$cmd != {}} {
        eval $cmd
    }
}

#####################################################################
#### entry
# Add an entry widget to the toolbar.  The arguments are:
# <ul>
# <li>a tag (string) to use to name the entry widget,
# <li>a label to put to the left of the entry widget,
# <li>a default contents for the entry widget,
# <li>a command to execute when &lt;Return&gt; is typed in the widget,
# <li>additional arguments to pass to the Tk entry command.
# </ul>
# The entry widget has a "click to focus" model.  When the user types
# a return in the widget, the contents of the entry box are appended
# to the specified command, which is then invoked.
#
body ::tycho::ToolBar::entry {tag label default command args} {
    # The label.
    itk_component add label_$tag {
        label $itk_component(entrysite).label_$tag -text "$label"
    } {
        keep -background -cursor -font
	rename -foreground labelcolor labelColor LabelColor
    }
    grid $itk_component(label_$tag) -column 0 -row $numentries -sticky e
    
    itk_component add tag_$tag {
        eval ::entry $itk_component(entrysite).tag_$tag \
                -relief sunken $args
    } {
        rename -background -entrybackground \
                entryBackground EntryBackground
        rename -foreground -entryforeground \
                entryForeground EntryForeground
        rename -font -entryfont entryFont EntryFont
    }
    grid $itk_component(tag_$tag) -column 1 -row $numentries -sticky ew
    # The following ensures that the column takes up available space.
    grid columnconfigure $itk_component(entrysite) 1 -weight 1

    $itk_component(tag_$tag) insert insert $default
    bind $itk_component(tag_$tag) <Return> \
            "$command \[$itk_component(tag_$tag) get\]"
    
    # Bindings for the Entry box
    bind $itk_component(tag_$tag) <Control-u> "
    clipboard clear -displayof %W
    clipboard append -displayof %W \[%Q get $tag\]
    %W delete 0 end
    "
    
    bind $itk_component(tag_$tag) <Control-k> "
    clipboard clear -displayof %W
    clipboard append -displayof %W \[
        string range \[%Q get $tag\] \[%W index insert\] \
            \[%W index end\]]
    %W delete insert end
    "
    
    incr numentries

    # Record the tag and its access methods
    lappend tags $tag
    set tagsclear($tag) "$itk_component(tag_$tag) delete 0 end"
    set tagsinsert($tag) "$itk_component(tag_$tag) insert insert"
    set tagsget($tag) "$itk_component(tag_$tag) get"
    set tagsenable($tag) "$itk_component(tag_$tag) configure -state normal"
    set tagsdisable($tag) "$itk_component(tag_$tag) configure -state disabled"
}

#####################################################################
#### get
# If no argument is given, get the current value of the queries,
# and return as a list in the form {tag value tag value ...}.  This list
# can be directly assigned to an array using <code>array set</code>,
# making it easy to use the results of the query. If a tag is given as an
# argument, return the value of the corresponding entry only. If the tag
# is not recognized, return an empty string.  For buttons, the label
# of the button is returned.
# 
body ::tycho::ToolBar::get {{tag {}}} {
    set response {}
    if {$tag == {}} {
	foreach tag $tags {
            lappend response $tag
            set cmd $tagsget($tag)
            if {$cmd != {}} {
                set rp [eval $cmd]
            } {
                set rp $tag
            }
            lappend response $rp
        }
    } {
        set cmd $tagsget($tag)
        if {$cmd != {}} {
            set response [eval $cmd]
        } {
            set response $tag
        }
    }
    return $response
}

#####################################################################
#### insert
# Insert the specified string into the specified entry box.
# If the tag is not recognized, flag an error.  For button widgets,
# the label of the button is changed.
# 
body ::tycho::ToolBar::insert {tag str} {
    set cmd $tagsinsert($tag)
    if {$cmd != {}} {
        eval $cmd [list $str]
    }
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#####################################################################
#### preference
# Access the preferences associated with this widget. By default,
# all widgets access the "global" preference set; many widgets will,
# however, need to access a different preference set, and they
# must indicate so by overriding this method.  Here, we are overriding
# it to subscribe to the "dialogs" preference set.
#
body ::tycho::ToolBar::preference {mode args} {
    eval ::tycho::preference $mode "dialogs" $args
}

#######################################################################
#### putStatus
# Put an arbitrary string to the status bar. To enforce
# wrap-around, set the wrap-length of the label to its current width.
#
body ::tycho::ToolBar::putStatus {string} {
    set sb $itk_option(-statusbar)
    if {$sb != {}} {
        $sb puts $string
    }
}
