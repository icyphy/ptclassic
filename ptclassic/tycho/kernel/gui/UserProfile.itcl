#########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#####################################################################
#### profile
# Perform operations on the user profile. The user profile is a
# persistent store of information specific to a particular user
# of Tycho, and includes information such as widget style preferences,
# the Tycho system directory, user name, and so on.
# The procedure has several forms:
#
# <dl>
# <dt><b>register</b> _filename_
# <dd>
# Register a user profile. _filename_ is the name of the
# file containing the profile. If it doesn't exists, then
# it will be created with a blank profile. Currently, an
# error will be raised if this is called more than once,
# although later on we will allow a user profile to be changed.
#
# <dt><b>registerstyle</b> _stylesheet_ _style_ ?_type_? ?_key_?
# <dd>
# Register a style for a given stylesheet. If _type_ is not
# provided, register a global preference. Otherwise, _type_
# can be either <b>class</b> or <b>title</b>. In this case,
# _key_ is the widget class or title respectively. If a preference
# already exists, overwrite it, else create a new one.
#
# <dt><b>getstyle</b> _stylesheet_ ?_widget_? ?_title_?
# <dd>
# Get a preferred style. If _widget_ is not provided, get
# the preferred global style. Otherwise get the preferred
# style for a widget. If _title_ is provided and
# a style has been registered for it, return that style. If a
# style has been registered for the widget's class or for any
# of its superclasses, return the first such style found
# by traversing up the class hierarchy. Otherwise, if a style
# has been registered with the <b>global</b> type, return
# that style. Otherwise, return the string "default."
#
# </dl>
#
ensemble ::tycho::profile {
    # Register a user profile
    option register {filename} {
	set filename [::tycho::expandPath $filename]
	# Create the object
	set profile [uplevel #0 ::tycho::UserProfile #auto \
		[list \
		-modelname "user profile" \
		-filename $filename]]

	# Load it
	if [::file exists $filename] {
	    set fd [open $filename]
	    $profile parse [read $fd]
	    close $fd
	} else {
	    # Initialize the maps
	    $profile add map:title
	    $profile add map:class
	    $profile add unmap:title
	    $profile add unmap:class
	}

	# Remember the profile object
	@scope ::tycho::UserProfile set _profile $profile
    }

    # Register a style preference
    option registerstyle {stylesheet style {type {}} {key {}}} {
	[@scope ::tycho::UserProfile set _profile] \
		registerstyle $stylesheet $style $type $key
    }

    # Get the preferred style of a widget
    option getstyle {stylesheet {widget {}} {title {}}} {
	[@scope ::tycho::UserProfile set _profile] \
		getstyle $stylesheet $widget $title
    }
}

##########################################################################
#### UserProfile
#
# The <i>UserProfile</i> model contains persistent information about
# the user, such as preferred widget styles, user id, and stuff
# like that. The style settings are needed because, when a widget
# subscribes to a style-sheet, it is given access to just one style
# contained within that style-sheet. This allows different widgets and
# classes to have different style settings than other widgets
# and styles. These settings are considered to be part of the user
# profile.
#
# This model has the following types:
#
# <dl>
# <dt><b>map</b> _type_
# <dd>
# Since model item names can't reliably contains spaces or
# colons, this item is used to map from names into unique ids.
# The _type_ is either <b>class</b> or <b>title</b>.
#
# <dt><b>preference</b> _id_:
# <dd>
# A style preference. The attributes of the item are
# the style preferences for each stylesheet. For example,
# the item representing the class <b>::tycho::Edit</b> might
# have attributes <b>-fonts small -colors default</b>.
#
# <dt><b>unmap</b> _type_
# <dd>
# Since model item names can't reliably contains spaces or
# colons, this item is used to map from unique ids into names.
# The _type_ is either <b>class</b> or <b>title</b>.
#
# </dl>
#
class ::tycho::UserProfile {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}

    #################################################################
    ####                    public variables                     ####
    
    # The filename to save myself to when destroyed
    public variable filename

    #################################################################
    ####                     public methods                      ####

    # Get the preferred style of a widget
    method getstyle {stylesheet {widget {}} {title {}}}

    # Register a style preference
    method registerstyle {stylesheet style {type {}} {key {}}}

    #################################################################
    ####                   protected methods                     ####

    # Update the cache
    protected method _updatecache {}

    #################################################################
    ####                    private methods                      ####

    # Map a name into a unique id
    private method _map {type name}

    # Create a new mapping
    private method _newmap {type name}

    # Map a unique id into a name
    private method _unmap {type id}

    #################################################################
    ####                   private variables                     ####

    # Counter for generating widget ids
    private common _id 0

    # The single profile object
    private common _profile

    # The cached class maps
    private variable _mapclass
    private variable _unmapclass

    # The cached title maps
    private variable _maptitle
    private variable _unmaptitle
}


########################################################################
#### constructor
#
body ::tycho::UserProfile::constructor {args} {
    # Define the "map" type
    type define map :leafonly 1

    # Define the "preference" type
    type define preference :leafonly 1

    # Define the "unmap" type
    type define unmap :leafonly 1

    # Evaluate options
    eval configure $args
}

########################################################################
#### destructor
#
body ::tycho::UserProfile::destructor {} {
    # Save myself to the profile file.
    # For some reason, the destructor is not called when you
    # exit the program the the value of this code is dubious...
    if ![catch {set fd [open $filename "w"]}] {
	puts $fd [describe]
	close $fd
    }
}

#########################################################################
#########################################################################
####                          public methods                         ####

########################################################################
#### getstyle
#
# Get the preferred style for a given widget.
#
body ::tycho::UserProfile::getstyle {stylesheet {widget {}} {title {}}} {
    if { $widget != "" } {
        if { $title != "" } {
            # See if the title matches anything
            set id [_map title $title]
            if { $id != "" } {
                if [exists preference:title.$id -$stylesheet] {
                    return [itemcget preference:title.$id -$stylesheet]
                }
            }
        }
        # See if the widget's class matches anything, going up the hierarchy
        foreach class [$widget info heritage] {
            set class [info which -command $class]
            set id [_map class $class]
            if { $id != "" } {
                if [exists preference:class.$id -$stylesheet] {
                    return [itemcget preference:class.$id -$stylesheet]
                }
            }
        }
    }
    # See if there's a global preference    
    if [exists preference:global -$stylesheet] {
	return [itemcget preference:global -$stylesheet]
    }
    # Nothing found
    return "default"
}

########################################################################
#### registerstyle
#
# Register a style for a given stylesheet.
#
body ::tycho::UserProfile::registerstyle \
	{stylesheet style {type {}} {key {}}} {
    if { $type == {} } {
	set name preference:global
    } else {
	set id [_map $type $key]
	
	# If the item doesn't exist, get a new id
	if { $id == "" } {
	    set id [_newmap $type $key]
	}
	# Get the item name
	set name preference:$type.$id
    }
    # Create the item if it doesn't exist
    if ![exists $name] {
	add $name
    }
    # Add the preference
    itemconfigure $name -$stylesheet $style

    # Save the profile file. This appears to be necessary because
    # the destructor is not called when we exit.
    if ![catch {set fd [open $filename "w"]}] {
	puts $fd [describe]
	close $fd
    }
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _updatecache
#
# Update the name maps.
#
body ::tycho::UserProfile::_updatecache {} {
    array set _mapclass [assign map:class]
    array set _unmapclass [assign unmap:class]
    array set _maptitle [assign map:title]
    array set _unmaptitle [assign unmap:title]
    cache validate
}

#####################################################################
#####################################################################
####                       private methods                       ####

########################################################################
#### _newmap
#
# Given an item name, return a new id and it to the appropriate map.
#
body ::tycho::UserProfile::_newmap {type name} {
    # Make sure cache is up to date
    _update

    # Get ID and remember it
    while [::info exists _unmap$type:$_id] {
	incr _id
    }
    set _map[set type]($name) $_id
    set _unmap[set type]($_id) $name
	
    assign map:$type [array get _map$type]
    assign unmap:$type [array get _unmap$type]

    return $_id
}

########################################################################
#### _map
#
# Given an item name, return its id. Null if unknown.
#
body ::tycho::UserProfile::_map {type name} {
    _update
    if ![::info exists _map[set type]($name)] {
	return ""
    } else {
	return [set _map[set type]($name)]
    }
}

########################################################################
#### _unmap
#
# Given an item id, return its name.
#
body ::tycho::UserProfile::_unmap {type id} {
    _update
    return [set _unmap[set type]($id)]
}

