#########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### StylePreferences
#
# The <i>StylePreferences</i> model contains the user-specified
# preferences for access to style-sheets. When a widget subscribes
# to a style-sheet, it is given access to just one style contained
# within that style-sheet. This allows different widgets and
# classes to have different style settings than other widgets
# and styles. Because this information needs to be persistent,
# this model is used to store it, and to provide methods to make
# it easier for the user interface to select and manipulate
# style selections. The model has two types:
#
# <dl>
#
# <dt><b>map</b> <b>id</b>|<b>name</b> 
# <dd>
# A mapping between names and item ids.
# The <b>id</b> map maps from names into ids; the <b>name</b>
# map maps from ids into names. Names are of four kinds,
# which determines the purpose of the corresponding
# preference item.
# <ul>
# <li>The string "global."
# <li>A class name.
# <li>A widget name.
# <li>Any other string, which is taken to be a window title.
# </ul>
#
# <dt><b>preference</b> _id_:
# <dd>
# Style preferences for. The attributes of the item are
# the style preferences for each stylesheet. For example,
# the item representing the class <b>::tycho::Edit</b> might
# have attributes <b>-fonts small -colors default</b>.
# 
# </dl>
#
class ::tycho::StylePreferences {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Convert a name into an item id
    method id {name}

    # Convert an item id into a name
    method name {id}

    #################################################################
    ####                   private variables                     ####

    # Counter for generating widget ids
    private common _id 0
}


########################################################################
#### constructor
#
body ::tycho::StyleSheet::constructor {args} {
    # Define the "map" type
    type define map :leafonly 1

    # Define the "preference" type
    type define preference :leafonly

    # Evaluate options
    eval configure $args
}


#########################################################################
#########################################################################
####                          public methods                         ####

########################################################################
#### id
#
# Given an item id, return its name.
#
body ::tycho::StylePreferences::id {name} {
    array set ids [assign map:id]
    return $ids($name)
}

########################################################################
#### name
#
# Given an item name, return its id.
#
body ::tycho::StylePreferences::name {id} {
    array set names [assign map:name]
    return $names($id)
}

########################################################################
#### getid
#
# Given an item name, return a new id.
#
body ::tycho::StylePreferences::get {name} {
    if [exists preference:$name] {
	error "name \"$name\" already exists in $modelname"
    }
    while ![exists preference:$_id] {
	incr _id
    }
    array set names [assign map:name]
    array set ids [assign map:id]
    
    set names($_id) $name
    set ids($name) $_id

    assign map:name [array get names]
    assign map:id [array get ids]
}
