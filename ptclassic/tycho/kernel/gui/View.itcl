# Definition of the abstract view class
# 
# @Author: Farhana Sheikh
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


# FIXME:
# FEATURES TO BE ADDED:
# (1) Add subview functionality


#######################################################################
#### View
# This class defines a View mega-widget that all graphical and textual
# displays can inherit from.  The View can contain multiple subviews 
# and the View class provides methods to manage these views.  Thus we
# can embed a number of different representations of data in a single 
# window.  This is only an abstract class.
#
# FIXME: Fill in the documentation here
#
# A Help menu contains pointers to key Tycho documentation
# <p>
# Here is an example:
# <tcl><pre>
# ::tycho::View .v
# pack .v
# wm deiconify .
# </pre></tcl>
#
class ::tycho::View {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

  
    ###################################################################
    ####                            options                        ####

    # Visualization State Machine that view will require
    itk_option define -vsm vsm VSM ""


    ###################################################################
    ####                         public methods                    ####

    # Add the menus of the view to its Displayer
    method addMyMenus {}

    # Add a subview to the view
    method addSubview {subviewName}

    # Disable all of the view's menus
    method disableMyMenus {}

    # Enable all of the view's menus
    method enableMyMenus {}

    # Insert this view into its Displayer
    method insertInDisplay {}

    # Remove a subview from the view
    method removeSubview {subviewName}

    ###################################################################
    ####                   public variables                       ####

    # Name of this view's Displayer
    public variable myDisplayer

    # Name of vsm used by this view
    public variable myVSM ""

    ###################################################################
    ####                   private variables                       ####

    private variable mySubviewList {} 
    private variable myMenuList {}
}

#######################################################################
#### -vsm configuration
# Set the visualization state machine
#
configbody ::tycho::View::vsm {

    set myVSM $itk_option(-vsm)
}

#######################################################################
#### constructor
#
body ::tycho::View::constructor {args} {

    # Get displayer for view
    set myDisplayer [winfo parent $itk_component(hull)]
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
body ::tycho::View::destructor {} {
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### addMyMenus
# Add menus to Displayer specific to this view.
# This method should be redefined for views that inherit from this 
# class
# 
body ::tycho::View::addMyMenus {} {

    # Derived classes should add appropriate menus and menu items here 
}

#######################################################################
#### addSubview
# Add a subview to this view.  The name of the subview that is to be
# added is the only argument. 
#
body ::tycho::View::addSubview {subviewName} {
}

#######################################################################
#### removeSubview
# This method removes a subview from parent view.  It requires the 
# name of the subview as an argument.
# 
body ::tycho::View::removeSubview {subviewName} {
}

#######################################################################
#### insertInDisplay
# Insert view in the display.
# 
body ::tycho::View::insertInDisplay {} {
    
   # insert the view into the displayer
   $myDisplayer setView $itk_component(hull)
}
