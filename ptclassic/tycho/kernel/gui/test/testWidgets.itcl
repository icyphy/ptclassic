# Test suite for widgets in tycho.
#
# Author: Edward A. Lee
#
# A number of windows will be created, and then some time after, destroyed.
# You should just watch.  Do not push any buttons, or you could trigger
# spurious errors.  If no errors occur during the test, there will be no
# windows left at the end.  Currently, windows are left open for 4 seconds.
# Run from within tycho (can just source this file and execute it).
#
# Limitations:
#  - Modal dialogs are not tested so that the test can proceed automatically.
#  - This is assumed to be run in $PTOLEMY/tycho/kernel_itk.
#  - The tests are by no means complete.
#
# The modal dialogs are adequately tested by the demo script.

############################################################################
#### removeobj
# This procedure removes an object if it exists.
proc removeobj {name} {
    if {[info object $name] != ""} {
	delete object $name
    }
}

# How long windows are kept around, in milliseconds
set duration 4000

############################################################################
# Test TopLevel
set win [::tycho::TopLevel [::tycho::autoName .toplevel] -geometry 100x100+0+0]
wm deiconify $win
after $duration removeobj $win

############################################################################
# Test DialogWindow
::tycho::DialogWindow .dialog -text "I am a very senstitive widget"
.dialog addButton pushme -text "Push Me" -command "puts ouch"
.dialog default pushme
.dialog centerOnScreen
.dialog freezeWindowSize
.dialog invoke pushme
after $duration removeobj .dialog

############################################################################
# Test Message
::tycho::Message .msg1 -text \
	"This is a plain message"
.msg1 centerOnScreen
after $duration removeobj .msg1
update

############################################################################
# Test ErrorMessage
::tycho::ErrorMessage .msg2 -text \
	"This is not really an error, but just a test of the messenger"
after $duration removeobj .msg2
update

############################################################################
# Test YesNoQuery
after $duration .yesno invoke yes
after [expr 2*$duration] .another invoke yes
::tycho::YesNoQuery .yesno \
	-text "Either button should bring up another dialog" \
	-yescommand {
	    ::tycho::YesNoQuery .another -text {Another dialog}
	    .another centerOnScreen
	} \
	-nocommand "askuser {Are you sure not?}"
.yesno centerOnScreen
update

############################################################################
# Test EntryQuery
after $duration .entry invoke cancel
::tycho::EntryQuery .entry \
	-queries {{entry {Enter here:} {Default text}}}
.entry centerOnScreen
update

############################################################################
# Test YesNoCancel
after $duration .yesnocancel invoke cancel
::tycho::YesNoCancel .yesnocancel \
	-text "Yes, No, or Cancel" \
	-yescommand "puts yes" \
	-nocommand "puts no" \
	-cancelcommand "puts cancel"
.yesnocancel centerOnScreen
update

###########################################################################
# Test FileBrowser
after $duration .file invoke cancel
::tycho::FileBrowser .file
.file centerOnScreen
update

############################################################################
# Test Dismiss
set win [::tycho::Dismiss [::tycho::autoName .dismiss] -geometry +0+0]
wm deiconify $win
after $duration removeobj $win
update

############################################################################
# Test File
set win [::tycho::File [::tycho::autoName .file] -geometry +0+0]
wm deiconify $win
after $duration removeobj $win
update

############################################################################
# Test Edit
set win [::tycho::Edit [::tycho::autoName .file] -geometry +0+0]
wm deiconify $win
after $duration removeobj $win
update

############################################################################
# Test HTML
set win [::tycho::HTML [::tycho::autoName .file] -geometry +0+0]
wm deiconify $win
after $duration removeobj $win
update
