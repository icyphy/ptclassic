# @Author: Kevin Chang
#
# @Version: @(#)CacheManager.itcl	1.11 07/21/98
# 
# @Copyright (c) 1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ::tycho::cache
# A shortcut to use ::tycho::CacheManager::<method>.
#
ensemble ::tycho::cache {
    # The following returns information regarding the path (url).
    # If exists, return the physical file name associated with this url.
    option getcachefile {url}   {::tycho::CacheManager::getcachefile $url}
    option getcontenttype {url} {::tycho::CacheManager::getcontenttype $url}
    option getdate {url}        {::tycho::CacheManager::getdate $url}
    option getsize {url}        {::tycho::CacheManager::getsize $url}

    # The following are used directly by Resource<protocol>
    option exists {url} {::tycho::CacheManager::exists $url}
    option initialize {} {::tycho::CacheManager::initialize}
    option remap {file1 file2} {::tycho::CacheManager::remap $file1 $file2}
    option remove {url} {::tycho::CacheManager::remove $url}
    option same {url date size contenttype} {
        ::tycho::CacheManager::same $url $date $size $contenttype
    }
    option tmpCacheName {url}   {::tycho::CacheManager::tmpCacheName $url}
    option update {url date size contenttype newphysicalfile} {
        ::tycho::CacheManager::update \
                $url $date $size $contenttype $newphysicalfile
    }
    option debugprint {} {::tycho::CacheManager::debugprint}
}

#######################################################################
#### CacheManager
# CacheManager remembers the date, size, and content of the remote 
# file, and synchronizes the remote/local file association even in
# different sessions of running Tycho. The following information is 
# kept in the index file (~/.Tycho/index.db): URL name, content type, 
# size, and date.
#
# This class will continually append information to the index file in order
# to keep concurrency between the index file and the actual cache 
# directory. During start up, the index file and the cache directory
# is cleaned up in either one of the cases:
# 1) a file exists in the cache directory but not in index file, or 
# 2) a file exists in the index file but not in the cache directory).
# <br>
# <br><b>Here is a mini-tutorial on using this class.</b>
# Note that
# <tt>ensemble ::tycho::cache (method_name)</tt> is used as a 
# typing shortcut to <tt>::tycho::CacheManager::(method_name).</tt>
# <br>
#
# 1. Initialize index.db and the cache directory:<br>
# <tcl><tt> ::tycho::cache initialize</tt></tcl>
# <br>
#
# 2. Get a cache file name to write to:<br>
# <tcl><pre> set url "vrml://ptolemy/cool_file.vrml"
# set cachefile [::tycho::cache tmpCacheName $url]</pre></tcl>
# <br>
#
# 3. Assume we got the remote file attributes and the content.
# Write to the cache file<br>
# <tcl><pre> set date {Monday 1-2-3}
# set size 12345
# set contenttype "vrml/slow"
# set cacheid [::open $cachefile w+]
# foreach i {This is a test} {
#   ::puts $cacheid $i
# }
# ::close $cacheid</pre></tcl>
# <br>
# 
# 4. Now update in the index database<br>
# <tcl><pre> ::tycho::cache update $url &#92
#       $date $size $contenttype $cachefile
# unset date size contenttype cachefile</pre></tcl>
# <br>
#
# 5. Retrieve information from the database
# <tcl><pre> set exists [::tycho::cache exists $url]
# set date [::tycho::cache getdate $url]
# set contenttype [::tycho::cache getcontenttype $url]
# set cachefile [::tycho::cache getcachefile $url]
# set size [::tycho::cache getsize $url]
# ::tycho::inform "$exists\n$date\n$contenttype\n$cachefile\n$size"
# </pre></tcl>
# <br>
#
# 6. Check whether a current URL is the same as the one on cache:<br>
# <tcl><tt> ::tycho::cache same $url $date $size $contenttype</tt></tcl><br>
# or<br>
# <tcl><tt> ::tycho::cache same $url $date 54321 $contenttype</tt></tcl><br>
# <br>
#
# 7. Delete the cache file from the cache directory<br>
# <tcl><tt> ::file delete $cachefile</tt></tcl>
# <br>
#
# Note that you can call <tt>::tycho::cache update ...</tt> as many
# times as you want, even if the URL or file name repeats (Cache Manager
# will always keep the last update). The following is a chart of
# the types of operations that the methods deal with:<br><br>
# <pre>
# method name  compact index.db  sync memory  sync cache dir  file access
# -----------  ----------------  -----------  --------------  -----------
# initialize   yes               yes          yes             O(2n)
# exists       no                yes          yes             n/a
# update       no (appends)      yes          yes             O(1)
# others...    no                no           no              O(1)?
# </pre>
#
class ::tycho::CacheManager {
    inherit ::tycho::Uninstantiable

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    ###################################################################
    ####                           public procs                    ####

    # Return the full url and name of the cache associated with $url
    proc getcachefile   {url}     {}

    # Return the contenttype associated with $url
    proc getcontenttype {url}     {returninfo $url 2}

    # Return the size associated with $url
    proc getsize        {url}     {returninfo $url 1}

    # Return the date associated with $url
    proc getdate        {url}     {returninfo $url 0}

    # Return the information in the common array, used by getcachefile,
    # getcontenttype, getsize, and getdate.
    proc returninfo  {url idx}

    # The following are used directly by Resource(protocol)
    # Test if a physical file exists.
    proc exists {url}

    # Initialization routine.
    proc initialize {}

    # Remap the database.
    proc remap {file1 file2}

    # Remove from the database (in memory and in cache directory)
    proc remove {url}

    # True if url still has the same information
    proc same {url date size contenttype}

    # Return the full url and name of the next cache file, along with
    # the correct file extension. Similar to ::tycho::tmpFileName.
    proc tmpCacheName {filename}

    # Update in the database the new file
    proc update {url date size contenttype physicalfile}

    # Debugging purpose only, print out the memory
    proc debugprint {}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected commons                  ####

    # Array which returns cache file name, contenttype, date, and size.
    protected common _URL

    # The directory name of the cache
    protected common CACHEDIR

    # The cache index, will keep incrementing
    protected common INDEX

    # The index file name
    protected common INDEXFILE

    ###################################################################
    ####                        protected variables                ####

    ###################################################################
    ####                         private variables               ####
}

#######################################################################
#### constructor
#
body ::tycho::CacheManager::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::CacheManager::destructor {} {

}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### exists
# If the cache exists in database (index.db), and exists physically,
# return true. 
body ::tycho::CacheManager::exists {url} {
    set returnstatus \
            [expr [::info exists _URL($url)] && \
            [::file exists [::tycho::cache getcachefile $url]]]

    # It is possible that the cache file has been deleted while
    # running Tycho. So we need to manually delete it in memory.
    if {$returnstatus==0} {
        catch {unset _URL($url)}
    }

    return $returnstatus
}

#####################################################################
#### getcachefile
# Return the cache file name (with it's full url) that's associated
# with $url
#
body ::tycho::CacheManager::getcachefile {url} {
    set returnstring [returninfo $url 3]
    if {$returnstring!={}} {
        return [::tycho::url join $CACHEDIR $returnstring]
    }
}

#####################################################################
#### returninfo
# Helper function for cachefile, contenttype, date, and size. 
body ::tycho::CacheManager::returninfo {url idx} {
    if [info exists _URL($url)] {
        return [lindex $_URL($url) $idx]
    }
}

#####################################################################
#### initialize
# 1) Called to reset the common variable, then read from the database 
#    file if it exists. Also, create appropriate cache file, etc...
#
# 2) Read back from the database.
#
# 3) "Compact" the database if multiple entries exist (ie. newer
#    remote file will cause updating).
#
body ::tycho::CacheManager::initialize {} {
    global TYCHO
    # Reset the variable in memory.
    catch {unset _URL}

    # Cache directory is in ~/.Tycho/cache
    set TYCHODIR [::tycho::url expand [::tycho::tychoDir]]
    set INDEXFILE [::tycho::url join $TYCHODIR index.db]
    set CACHEDIR [::tycho::url  join $TYCHODIR cache]
    set INDEX 0

    # Make sure the directory and database file exist.
    if {![file exists $CACHEDIR]} {file mkdir $CACHEDIR}
    if {![file exists $INDEXFILE]} {set fd [open $INDEXFILE "w+"];close $fd}

    set newidx 0
    # Open up the index file, associate link name with other info.
    # Each line in index.db has the format:
    #                0                1     2            3           (4)?
    # link name      date modified    size  contenttype  file name   (isdir)?
    # http://ptolemy {{11/15/95 1:50} 1152  text/html    [0-9]+.html          }
    set fd [open $INDEXFILE]
    while {![eof $fd]} {
        gets $fd line
        if {$line!={}} {
            set link [lindex $line 0]   ;# Name of URL
            set info [lindex $line 1]   ;# Information from 0-4
            
            # If all the fields have content, then associate.
            if {    [lindex $info 0]!={} &&\
                    [lindex $info 1]!={} &&\
                    [lindex $info 2]!={}} {
                # Associate URL with rest of the information
                set _URL($link) $info
                
                # Associate filename (if it exists)
                set _fname([lindex $info 3]) 1
                
                # Retrieve the index by the name of the cache file
                regexp {^([0-9]+).*$} [lindex $info 3] _ newidx
                if {$newidx > $INDEX} {set INDEX $newidx}
            } else {
                # Otherwise, force to unassociate
                catch {unset _URL($link)}
            }
        }
    }
    close $fd
    
    # Clean up cache directory (cache files not in index.db)
    foreach filename [glob -nocomplain [file join $CACHEDIR *]] {
        set filename [file tail $filename]
        if {![info exists _fname($filename)]} {
            #::puts "Deleting $filename"
            file delete [file join $CACHEDIR $filename]
        }
    }
    
    # Clean up index.db (files in index.db not exist in cache directory)
    foreach url [array names _URL] {
        set file [lindex $_URL($url) 3]
        if {![file exists [file join $CACHEDIR $file]]} {
            #::puts "deleting: $file"
            catch {unset _URL($url)}
        }
    }

    # Rewrite index.db to compact the database list.
    set fd [open [file join $CACHEDIR index.bak] w+]
    foreach url [array names _URL] {
        puts $fd [list $url $_URL($url)]
    }
    close $fd
    file copy -force [file join $CACHEDIR index.bak] $INDEXFILE
}

#####################################################################
#### remap
# This is useful if we need to transform MIME type,
# or types that our browser can't use. For example, our browser
# cannot read JPEG format, so after converting JPEG->GIF, we remap
# the database to read the new GIF file instead of the JPEG file.
# This is an expensive operation, but is still much faster than
# converting files on the fly.
#
body ::tycho::CacheManager::remap {url file} {
    foreach i [array names _URL] {
        if {$url == $i} {
            set newdate        [getdate $i]
            set newcontenttype [getcontenttype $i]
            set newsize        [getsize $i]
            # Update the new URL, with this new file name.
            # Now we have remapped from file1 --> file2 in the database.
            update $i $newdate $newsize $newcontenttype $file
            return 1
        }
    }
    return 0
}

#####################################################################
#### remove
# Remove the cache file associated with the url if exists, and
# clear it in memory.
#
body ::tycho::CacheManager::remove {url} {
    if [info exists _URL($url)] {
        set cachefile [getcachefile $url]
        if [file exists $cachefile] {
            file delete $cachefile
        }
    }
    catch {unset _URL($url)}

    # Update in the database as an empty entry, to make sure that
    # previous multiple associations with the url are cleared.
    update $url {} {} {} [file join $CACHEDIR _]
}

#####################################################################
#### same
# True if url still has the same information. Note that
# if one of the arguments is empty, then same will always
# return 0. This is useful in dynamic HTTP files where the
# header of HTTP will always return NULL to indicate that it
# changes dynamically.
#
body ::tycho::CacheManager::same {url date size contenttype} {
    # If a field is empty, then the file cannot be cached! Must
    # update frequently.
    if {[getdate $url]=={} || [getsize $url]=={} || [getcontenttype $url]=={}} {
        return 0
    }

    # If anything is different, then it's a different file.
    return [expr \
            [string match [getdate $url] $date] && \
            [string match [getsize $url] $size] && \
            [string match [getcontenttype $url] $contenttype]]
}

#####################################################################
#### tmpCacheName
# Return the full url and name of the next cache file.
# Similar to ::tycho::tmpFileName.
# 
body ::tycho::CacheManager::tmpCacheName {filename} {
    incr INDEX
    return [file join $CACHEDIR $INDEX][::tycho::url extension $filename]
}

#####################################################################
#### update
# Update in the database the new file. The new file must conform
# to the regular expression [0-9]+.* to keep track of indices.
#
body ::tycho::CacheManager::update {url date size contenttype newfile} {
    # Make sure that the filename is inside the cache's url
    if {![regexp "\^$CACHEDIR" $newfile]} {
        error "Cache file is not located in the right directory: $CACHEDIR"
        return
    }

    # Parse newfile so that it will only contain file name
    # (no directory name)
    set newfile [file tail $newfile]
    set _URL($url) [list $date $size $contenttype $newfile]
    # append it to the index database
    set fd [::open $INDEXFILE a]
    ::puts $fd "$url [list $_URL($url)]"
    ::close $fd
}

#####################################################################
#### debugprint
# debugging purpose only, dump the memory content
body ::tycho::CacheManager::debugprint {} {
    ::puts "Current index: $INDEX"
    foreach i [lsort [array names _URL]] {
        puts "\t$i"
        puts "\t\t$_URL($i)"
    }
}

::tycho::CacheManager::initialize
