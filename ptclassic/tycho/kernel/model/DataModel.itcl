##########################################################################
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### DataModel
#
# DataModel extends the Model class to support data models and the
# TIM interchange format.  TIM is a simple meta-data format that
# encourages a simple and clean representation of data, both in
# in-memory objects and in an external file representation.
# A data model is loaded from a string in TIM format with the <b>parse</b>
# method, and will produce a TIM description of itself with the
# <b>describe</b> method.
#
# The data stored in a DataModel object is hierarchical. Each item is
# an instance of a _type_ defined for that model, and is referenced by
# its name, which consists of a list of name segments. A name segment
# is an item type and name, separated by a colon. For example, a
# top-level item may have the name <code>group:foo</code>, where _group_
# is a type defined for this particular model. An item contained within
# that item may have the name <code>group:foo icon:bar</code>, where
# _icon_ is another type defined for this model. We also say that
# <code>bar</code> is the _local name_ of this item, and that
# <code>group:foo</code> is its _context_. Local names are unique
# for each type and context -- for example, there could also be an
# item named <code>icon:foo</code>. Items within each context
# are maintained in the order in which they were added to the
# model -- this ordering can be changed with the <b>reorder</b>
# method.
#
# The data of an item is a list of named attributes. By convention,
# attribute names begine with a leading dash, although there is
# no requirement that this be so. This data can be accessed
# individually, with the <b>itemset</b> method, or collectively,
# with the <b>attrset</b> method. The names and number of attributes
# is arbitrary, so attributes can be added and deleted dynamically.
# A number of other methods add and delete data: <b>add</b>,
# <b>delete</b>, <b>clear</b>, and <b>configure</b>. Since DataModel
# inherits from Model, these methods will add undo and redo commands
# to the change history if called via the <b>record</b> or
# <b>publish</b> methods of the _Model_ superclass.
#
# There are several methods that provide ways of accessing the
# data in a model. <b>itemset</b> and <b>attrset</b> can be used
# to query data from a single item, while <b>names</b> and
# <b>get</b> perform glob-style matching on item names, in the same
# way as the Tcl <b>array</b> command. The <b>match</b> method
# returns an ordered list of child items within a given context,
# optionally matching against atribute values, while <b>search</b>
# provides a more powerful searching mechanism. <b>exists</b>
# provides a simple test whether data is present.
#
# _DataModel_ is designed to be subclassed to create application-specific
# models. The constructor of each subclass must call the <b>type define</b>
# method to define the types in that model. Clients and subclasses
# can also use <b>type configure</b> to modify existing types.
# An item type can define default values of attributes
# of all instances of that type. The type of an item also specifies
# certain properties of items of that type -- for example, whether
# they can contain other items.
#
class ::tycho::DataModel {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Add a new item
    method add {name args}

    # Set or get individual attributes of an item
    method attrset {name {attr {}} args}

    # Remove all data
    method clear {}

    # Configure options of the model object
    method configure {{option {}} args}

    # Delete an item
    method delete {name}

    # Describe the data as a string in TIM format
    method describe {{name {}} {prefix {}}}

    # Check if an item, and optionally, an attribute, exists
    method exists {name {attribute {}}}

    # Get the names and attributes of each item matching a pattern
    method get {{pattern *}}

    # Set or get the value of an item
    method itemset {name args}

    # Match children of a given type with matching attributes
    method match {type {context {}} args}

    # Get the names of each item matching a pattern
    method names {{pattern *}}

    # Load data from a TIM string
    method parse {data {context {}}}
    
    # Re-order items in a given context
    method reorder {type {context {}} list}

    # Search for items with regexp or glob-syle matching
    method search {args}

    # Define or configure item types
    method type {mode {type {}} args}

    #################################################################
    ####                   protected methods                     ####

    # Return a description of a single item
    protected method _describe {name {prefix {}}}
    
    # Return a description of the children of an item
    protected method _describechildren {name {prefix {}}}
    
    # Create a header string
    protected method _header {}

    # Update the cache if it's out of date
    protected method _update

    # Do a cache update
    protected method _updatecache

    # Manipulate the data cache
    protected method cache {mode args}

    #################################################################
    ####                  protected variables                    ####

    # The path of the currently-parsed model
    protected common _object_ {}

    # The name of the currently-parsed model
    protected common _current_ {}

    # The context currently being parsed in
    protected common _context_ {}

    #################################################################
    ####                    private methods                      ####

    # Generate a parsing procedure
    private method _mkparseproc {type}

    # Verify that an item exists
    private method _verify {name}

    #################################################################
    ####               private common variables                  ####

    # The default values of type properties
    private common defaulttypeconfig {
        :leafonly 0
        :override 0
    }

    # The safe interpreter provided for safe parsing
    private common safeinterp [uplevel #0 interp create]

    # The types defined in each scope, indexed by scope
    private common _types

    # The types configuration of each type, indexed by $scope:$type
    private common _typeconfig

    #################################################################
    ####                  private variables                    ####

    # The name used to construct the data arrays
    private variable _dataname

    # Default attributes, indexed by type
    private variable _defaults

    # Local copy of the :leafonly flag, indexed by type
    private variable _leafonly
 
    # Local copy of the :override flag, indexed by type
    private variable _override
 
    # Search data
    private variable _searchdata
 
    # Search mode
    private variable _searchtype
 
    # Search expression
    private variable _searchexp
}

########################################################################
#### constructor
#
body ::tycho::DataModel::constructor {args} {

    # Make sure the namespaces exist in the safe interpreter
    $safeinterp eval namespace ::tycho
    $safeinterp eval namespace $scope

    # Initialize the array name
    set _dataname [::info namespace tail $this]

    # Create a proc to parse the "configure" syntax
    @scope $scope eval {
        proc __parse_configure {args} {
            global _object_
            global $_object_
            eval $_object_ configure $args
        }
    }

    # Link it into the safe interpreter
    $safeinterp alias $scope::configure $scope::__parse_configure

    # Evaluate options
    eval configure $args
}

########################################################################
#### destructor
#
body ::tycho::DataModel::destructor {} {
    # Clear data so as not to leak...
    clear
}

########################################################################
#### add
#
# Add a new item. _name_ is the full name of the item. Following
# arguments are attribute-value pairs. If the item already exists,
# raise an error. Append to the history if recording.
#
body ::tycho::DataModel::add {name args} {
    if [@scope $scope ::info exists [set _dataname]($name)] {
        error "An item \"$name\" already exists in $modelname"
    }

    # Invalidate cache
    @scope $scope set [set _dataname].cachevalid 0

    # Add to history
    if $recording {
        history append "add $name $args" "delete $name"
    }

    # Extract type and tail, and do lots of time-consuming
    # error-checking
    if ![regexp {([^:]+):(.+)} [lindex $name end] _ type tail] {
	error "Item name \"$name\" is not of the form type:name"
    }
    if ![::info exists _typeconfig($scope:$type)] {
	error "Unknown type \"$type\" in $modelname"
    }
    set context [lreplace $name end end]
    if { $context != "" \
            && ![@scope $scope ::info exists [set _dataname]($context)] } {
	error "Unknown context \"$context\" in $modelname"
    }

    # Extract contents
    if { !$_leafonly($type) && ([llength $args] & 1) } {
    	set contents [lindex $args end]
    	set args [lreplace $args end end]
    } else {
    	set contents {}
    }

    # Store the data of this item
    @scope $scope set [set _dataname]($name) $args

    # Add it to the list of children of its parent
    @scope $scope lappend [set _dataname]:[set type]($context) $tail

    # Parse contents
    if { $contents != "" } {
        set _context_ $name
        $safeinterp eval [list @scope $scope $contents]
    }
}

########################################################################
#### attrset
#
# Set or get individual attributes of the item given by _name_.
# If only _name_ is given, return the attribute list of the item,
# including type defaults. If _attr_ is given, return its value,
# or the default value if the attribute hasn't had a value set
# to it.  If further arguments are supplied, the complete argument
# list is an attribute-value list, and the given attributes are changed
# to the corresponding value. Note that attributes are merged, not
# replaced (as in <b>itemset</b>). Append to the history if recording.
# Raise an error if the item does not exist.
#
body ::tycho::DataModel::attrset {name {attr {}} args} {
    _verify $name

    if { $attr == "" } {
        # Return attributes including defaults
        regexp {^[^:]+} [lindex $name end] type
        array set attrs $_defaults($type)
        array set attrs [@scope $scope set [set _dataname]($name)]
        array get attrs

    } elseif { $args == "" } {
	# Return a single attribute
	regexp {^[^:]+} [lindex $name end] type
	array set data $_defaults($type)
	array set data [@scope $scope set [set _dataname]($name)]

	if { ! [::info exists data($attr)] } {
	    error "Unknown attribute $attr in $modelname"
	}
	return $data($attr)
	
    } else {
        # Invalidate cache
        @scope $scope set [set _dataname].cachevalid 0

        # Append to the history
        if { $recording } {
            history append \
                    "attrset $name $args" \
                    "itemset $name [@scope $scope set [set _dataname]($name)]"
        }
        # Merge the new data and return result
        array set attrs [@scope $scope set [set _dataname]($name)]
        array set attrs [concat $attr $args]
        @scope $scope set [set _dataname]($name) [array get attrs]
    }
}

########################################################################
#### clear
#
# Clear all data from the model and invalidate the cache. Append to
# the history if recording. (This should be used sparingly,
# since the command could be very large.)
#
body ::tycho::DataModel::clear {} {
    # Invalidate the cache
    cache invalidate

    # Add to the history
    # FIXME: this probably doesn't work...
    if $recording {
	history append "clear" [list parse [describe]]
    }

    # Unset the data of all items and the children of each type
    catch {
        @scope $scope unset $_dataname
        @scope $scope unset $_dataname.cachevalid
        foreach type $_types($scope) {
            @scope $scope unset $_dataname:$type
        }
    }
}

########################################################################
#### configure
#
# Configure options of the model. This method behaves identically
# to the Itcl built-in <b>configure</b> method, except that
# undo and redo commands will be added to the history
# if this command is called via the <b>publish</b> or <b>record</b>
# methods of the Model superclass.
#
body ::tycho::DataModel::configure {{option {}} args} {
    # If changing data and recording, add to the history
    if { $recording && $args != "" } {
	# Get current data
	foreach {opt def val} [eval concat [chain]] {
	    set current($opt) $val
	}
	# Build undo command
	set undo configure
	foreach {opt _} $args {
	    lappend undo $opt $current($opt)
	}
	# Record
	history append "configure $attr $args" $undo
    }
    # Call superclass
    eval chain $option $args
}

########################################################################
#### delete
#
# Delete the item given by _name_. Raise an error if
# the item does not exist.  The item and all child items will
# be deleted. Append to the history if recording.
#
body ::tycho::DataModel::delete {name} {
    _verify $name
    regexp {([^:]+):(.+)} [lindex $name end] _ type tail
    set context [lreplace $name end end]

    # Invalidate cache
    @scope $scope set [set _dataname].cachevalid 0

    # Append to the history
    if $recording {
        set cd [_describechildren $name]
        if { $cd != "" } {
            history append "delete $name" "add $name [itemset $name] \{\n$cd\}"
        } else {
            history append "delete $name" "add $name [itemset $name]"
        }
    }
    # Delete children, making sure that commands are not recorded
    if !$_leafonly($type) {
    	set saved $recording
    	set recording 0
        foreach t $_types($scope) {
            foreach child [match $t $name] {
                delete [concat $name $t:$child]
            }
        }
        set recording $saved    
    }

    # Remove from the parent list
    @scope $scope set [set _dataname]:[set type]($context) \
            [::tycho::ldelete \
            [@scope $scope set [set _dataname]:[set type]($context)] $tail]

    # Delete data
    @scope $scope unset [set _dataname]($name)
}

########################################################################
#### describe
#
# Generate a TIM description of an item or of the model. If _name_ is
# not supplied, generate a description of the model. The description
# starts with an emacs-style header string that contains the mode
# and other relevant information. Each public variable listed in the
# protected variable <code>printable</code> is then printed as a
# *configure* command, if it differs from its default value.
# Then the items in the model are printed, sorted by type.
# If the _name_ argument is supplied, generate a description
# of just that item. If the _prefix_ argument is also supplied,
# prepend the prefix to each line produced.
#
body ::tycho::DataModel::describe {{name {}} {prefix {}}} {
    if { $name!= "" } {
	# Describe a single item
        _verify $name
        _describe $name $prefix
	
    } else {
	# Print header string
	# FIXME
        set string "# -*- [_header] -*-\n"

	# Print public variables
        foreach {opt dflt val} [eval concat [configure]] {
	    set v($opt) $val
	    set d($opt) $dflt
	}
	foreach opt $printable {
	    if { $v($opt) != $d($opt) } {
		append string "\n$prefix"
		lappend string configure $opt $v($opt)
	    }
        }

	# Print items, sorted by type
        append string "\n"
        foreach type $_types($scope) {
            # Describe each root item
            foreach n [match $type] {
                append string [_describe $type:$n $prefix]
            }
        }
        return $string
    }
}

########################################################################
#### exists
#
# Test if the item given by _name_ is present in the model, returning
# 1 if it does and 0 if not. If the item does exists and _attribute_
# is given, test if the item has that attribute (or a default
# with that name exists), and return 1 if it does and 0 if it dies not.
#
body ::tycho::DataModel::exists {name {attribute {}}} {
    if { $attribute == "" } {
	@scope $scope ::info exists [set _dataname]($name)
    } else {
	if [@scope $scope ::info exists [set _dataname]($name)] {
	    regexp {^[^:]+} [lindex $name end] type
	    array set data $_defaults($type)
	    array set data [@scope $scope set [set _dataname]($name)]
	    ::info exists data($attribute)
	} else {
	    return 0
	}
    }
}

########################################################################
#### get
#
# Return the names and data of items with names that match _pattern_,
# using glob-style matching. If _pattern_ is not supplied, get the
# names and data of all items. Note that a pattern such as
# <code>item:foo.*</code> will return all descendents, not just
# children, of <code>item:foo</code>. The returned list will not
# be ordered.
#
body ::tycho::DataModel::get {{pattern *}} {
    @scope $scope array get $_dataname $pattern
}

########################################################################
#### itemset
#
# Set or get the data of the item named _name_. If only the _name_
# argument is supplied, return the attribute list of that item,
# _without_ any defaults defined for its type. (Note the difference
# in behaviour to <b>attrset</b>.) If additional arguments are supplied,
# they specify an attribute list which replaces the existing attribute
# list. If _args_ contains just one value, this is taken to be the new
# attribute list; otherwise, _args_ is taken to be the new attribute list.
# Note that any existing attributes that are not present in the new
# list will be removed. Append to the history if recording.
# if the item does not exist, raise an error.
#
body ::tycho::DataModel::itemset {name args} {
    _verify $name

    # Remember the old data
    set old [@scope $scope set [set _dataname]($name)]

    if { $args == "" } {
        # Return old value
        return $old
    } elseif { [llength $args] == 1 } {
        # Got a single list
        set data [lindex $args 0]
    } else {
        set data $args
    }

    # Append to the history
    if $recording {
        history append [list itemset $name $data] [list itemset $name $old]
    }

    # Invalidate cache
    @scope $scope set [set _dataname].cachevalid 0
        
    # Write the new data
    @scope $scope set [set _dataname]($name) $data
}

########################################################################
#### match
#
# Get child items of the given _type_, optionally matching against
# attribute values. The returned list contains the local names
# of matched items, in the order in which the items were added
# to the model (or subsequently re-ordered with <b>reorder</b>).
# If the _context_ is given, get items within that context;
# otherwise, get top-level items. If _context_ is supplied and
# does not exist, raise an error. Any additional arguments are
# taken to be a list of attribute name-value pairs. If supplied,
# only items that have the given attributes with the given values
# will be returned.
# 
# For example, if the model contains items with full names *item:foo*
# and *item:bar*, then the call
# <pre>
#     $model match item
# </pre>
# will return <code>{foo bar}</code>. (In comparison, the names{}
# method will return <code>{item:foo item:bar}</code>.)
#
body ::tycho::DataModel::match {type {context {}} args} {
    # Adjust for presence of context argument
    if { [llength $args] & 1 } {
        set args [linsert $args 0 $context]
        set context {}
    } elseif { $context != "" && ![exists $context] } {
        error "Unknown context \"$context\" in $modelname"
    }
    # Get all children in order
    if [@scope $scope ::info exists [set _dataname]:[set type]($context)] {
        set children [@scope $scope set [set _dataname]:[set type]($context)]
        if { $args == "" } {
            return $children
        }
    } else {
        return {}
    }
    # Filter by attribute
    set result {}
    foreach n $children {
        set name [concat $context $type:$n]

        array set attrs $_defaults($type)
        array set attrs [@scope $scope set [set _dataname]($name)]

    	set matching 1
    	foreach {attr val} $args {
	    if { $attrs($attr) != $val } {
                set matching 0
                break
            }
        }
        if { $matching } {
            lappend result $n
    	}
    }
    return $result
}

########################################################################
#### names
#
# Return item names that match _pattern_. If _pattern_ is not supplied
# get the names of all items in the model. Note that this method matches
# item names against a pattern, so that a pattern such as
# <code>item:foo.*</code> will return all descendants, not just children
# of <code>item:foo</code>. The returned list will not be ordered.
#
body ::tycho::DataModel::names {{pattern *}} {
    @scope $scope array names $_dataname $pattern
}

########################################################################
#### parse
#
# Read data from a string containing a TIM representation of the
# model. Each non-comment line must either start with the keyword
# <b>configure</b>. or with the name of a type defined for this
# model. The item name follows, then the attribute-value list,
# and then nested items within curly braces. If any item
# already exists, then an error is raised. This method does not
# modify the history. If _context_ is supplied, then _data_
# will be parsed relative to that item.
#
body ::tycho::DataModel::parse {data {context {}}} {
    if { $context != "" && ![exists $context] } {
	error "Unknown context \"$context\" in $modelname"
    }

    global _current_ _context_ _object_
    set saved $_context_

    set _current_ $_dataname
    set _context_ $context
    set _object_ $this
    $safeinterp eval [list @scope $scope $data]
    set _context_ $saved
}

########################################################################
#### reorder
#
# Change the ordering of items of a given type. _type_ is
# the type of items to reorder. If _context_ is not present,
# then reorder items at the top level, otherwise reorder
# items within that context. _list_ is a list that
# must contain the same names returned by a call to
# <code>match type ?context?</code> but in any order.
# For example, items can be sorted alphabetically
# by a call of the form
# <pre>
#     $model reorder type [lsort [$model match type]]
# </pre>
# Future calls to match{} and describe{} will return items in the
# new order given by _list_.
#
body ::tycho::DataModel::reorder {type {context {}} {list {}}} {
    # Adjust for presence of context argument
    if { $list == {} } {
        set list $context
        set context {}
    }
    # Check that the list contains the right names
    if { [lsort $list] != [lsort [match $type $context]] } {
        error "Child names do not match"
    }
    @scope $scope set [set _dataname]:[set type]($context) $list
}

########################################################################
#### search ?mode? ?defaults? attribute pattern ?namepatt?
#
# Search for items with an attribute that matches an expression.
# The argument list looks like this:
#
# <b>search</b> ?_mode_? ?_defaults_? _attribute_ _pattern_ ?_namepatt_?
#
# If _namepatt_ is provided, it is a glob pattern that is
# matched against the names of all data items to find the items
# to search through. If _namepatt_ is not provided, all items
# are searched. _mode_ is a flag that determines the type of
# matching, and must be <b>-exact</b>, <b>-glob</b>, or <b>-regexp</b>.
# The default is <b>-glob</b>. _defaults_ is a flag that determines
# whether default attribute values are matched against, and must be
# either <b>-nodefaults</b> or <b>-defaults</b>. The default is
# <b>-nodefaults</b>, which is considerably faster. _attribute_ is
# the name of the attribute to match against. (Note: it is not
# possible to match against the value of more than one attribute.)
# _pattern_ is the pattern that is matched against the attribute of
# each data item. The returned value is a list of all items that
# matched.
# 
# For example, to find all items with the attribute <b>-foo</b>
# with value <b>bar</b>:
# <pre>
#     $model search -exact -foo bar
# </pre>
#
# To find all descendants of <b>X:blue</b> with an integer
# value of <b>-foo</b>:
# <pre>
#     $model search -regexp -foo {^[0-9]+$} {X:blue *}
# </pre>
#
body ::tycho::DataModel::search {mode defaults args} {
    # Extract option flags and arguments <groan>
    if ![regexp {^(-exact|-glob|-regexp)$} $mode] {
        set args [linsert $args 0 $defaults]
        set defaults $mode
        set mode -glob
    }
    if ![regexp {^(-defaults|-nodefaults)$} $defaults] {
        set args [linsert $args 0 $defaults]
        set defaults -nodefaults
    }
    set attribute [lindex $args 0]
    set pattern [lindex $args 1]
    set namepatt [lindex $args 2]
    # Get the data to search
    if { $namepatt == "" } {
        set data [get]
    } else {
        set data [get $namepatt]
    }
    set candidates {}
    set result {}

    # Get pattern for initial search
    switch -exact -- $mode {
        "-exact" -
        "-glob" {
            set searchmode -glob
            set searchpatt "*$attribute $pattern*"
        }
        "-regexp" {
            set searchmode -regexp
            set searchpatt [string trimleft [string trimright $pattern $] ^]
        }
    }
    # If the -defaults flag is on, rebuild the data list with defaults in it
    if { $defaults == "-defaults" } {
        set tempdata $data
        set data {}
        foreach {name attr} $tempdata {
            regexp {^[^:]+} [lindex $name end] type
            array set t $_defaults($type)
            array set t $attr
            lappend data $name [array get t]
            unset t
        }
    }
    # Find candidate items. This search is inexact.
    while { $data != "" } {
        set index [lsearch $searchmode $data $searchpatt]
        if { $index == -1 } {
            # No more left
            break
        } elseif { !($index & 1) } {
            # Oops, matched against item name..
            incr index
        }
        set name [lindex $data [expr $index-1]]
        set attrs [lindex $data $index]
        if { $attrs != "" } {
            lappend candidates $name $attrs
        }
        set data [lreplace $data 0 $index]
    }

    # Now process the candidates to find those that match exactly
     switch -exact -- $mode {
        "-exact" {
            foreach {name attr} $candidates {
                array set arr $attr
                if { [::info exists arr($attribute)] \
                        && $arr($attribute) == $pattern } {
                    lappend result $name
                }
                unset arr
            }
        }
        "-glob" {
             foreach {name attr} $candidates {
                array set arr $attr
                if { [::info exists arr($attribute)] \
                        && [string match $pattern $arr($attribute)] } {
                    lappend result $name
                }
                unset arr
            }
        }
        "-regexp" {
            foreach {name attr} $candidates {
                array set arr $attr
                if { [::info exists arr($attribute)] \
                        && [regexp $pattern $arr($attribute)] } {
                    lappend result $name
                }
                unset arr
            }
        }
    }
    # Done
    return $result
}

########################################################################
#### type
#
# Manipulate item types. A model must have one more more types
# defined with <b>type define</b> before it can be useful. Each
# type has a set of type properties and a set of type defaults.
# The type properties specify information about all instances
# of that type, and have names beginning with a colon.
# Type properties apply to the definition of a type, and so changing
# a type property will affect _all_ models in the same class.
# The following type properties are recognized:
#
# <dl>
# <dt><b>:leafonly</b> _bool_
# <dd>
# If true, items of this type most be a leaf item -- that is,
# they cannot contain nested items. This should be set in any
# situation where a type can only be a leaf, since parsing is more
# efficient. The default is false.
#
# <dt><b>:override</b> _bool_
# <dd>
# If true, items of this type will be parsed by calling a method
# named <b>_add</b>_type_, and printed by calling a method named
# <b>_describe</b>_type_. This is used if models need to do
# additional processing when items are or printed.
#
# </dl>
#
# Type defaults have names that do not begin with a colon. Each
# type default gives the name and default value of an attribute
# that will be given to instances of that type. By convention,
# attributes have names beginning with a leading dash, but
# this is not required. Type defaults apply to individual models,
# and so can be changed without affecting other models of the same class.
#
# This command has several forms, depending on the _mode_ argument:
#
# <dl>
# <dt><b>configure</b> _type_ ?_name_? ?_value_? ?_name_ _value_ ...? 
# <dd>
# Set or get a type property or a type default. If only the _type_
# argument is supplied, return a list of type properties and
# type defaults. If a single _name_ is supplied, return
# the value of that type property or type default. If additional
# arguments are supplied, change the given type properties
# or type defaults. Note that changing type properties should
# be done very carefully, as this change will affect _all_
# models of the same Itcl class. (Type defaults, however, are 
# changed on a per-model basis.)
#
# <dt><b>define</b> _type_ ?_name_ _value_... ?
# <dd>
# Define a new type. Each _name_ is the name of a type property
# or type default. If the type has already been defined for this
# class, but the type properties in this call are different,
# then the type definition will be changed for all models of this
# class. If the type has already been defined for this class,
# then the type defaults for this model only will be set to the
# given values. For example, the call
# <pre>
#     $datamodel type define foo :leafonly 1 -bar hello
# </pre>
# will create the type <b>foo</b> and declare it to always be a
# leaf item. In addition, any item of type <b>foo</b> will have
# an attribute <b>-bar</b> with the default value "hello."
#
# <dt><b>exists</b> ?_type_?
# <dd>
# Test if a given type exists. If no argument is supplied,
# return a list of all types defined for this class. If _tyoe_
# is given, return one if the type has been defined, and zero
# if it hasn't.
#
# </dl>
#
body ::tycho::DataModel::type {mode {type {}} args} {
    switch -exact $mode {
	"configure" {
            if ![::info exists _defaults($type)] {
                error "Unknown type: \"$type\""
            }
	    if { [llength $args] <= 1 } {
		array set attrs _typeconfig($type)
		array set attrs _defaults($type)
		if { $args == "" } {
		    # Return whole list
		    array get attrs
		} else {
		    # Return single item
		    return $attrs([lindex $args 0])
		}
	    } else {
		# Configure properties and defaults
		array set opts $args
		if { [array names opts :*] != "" } {
		    # Reconfigure type properties. This is expensive.
		    eval type define $type $args
		}
		# Configure type defaults
		array set attrs $_defaults($type)
		array set attrs $args
		set _defaults($type) [array get attrs]
	    }
	}
	"define" {
	    # Regenerate the parsing proc if this is true
	    set regenerate 0

	    if { ![::info exists _typeconfig($scope:$type)] } {
		# This is the first time this type has been defined in this
		# scope. Get default type options.
		array set opts $defaulttypeconfig
		array set opts $args

		# Remember the type and the type configuration
		lappend _types($scope) $type
		set _typeconfig($scope:$type) [array get opts :*]
		set regenerate 1
	    } else {
		# This type has previously been defined. Get default
		# type options and default attributes from before.
		array set opts $_typeconfig($scope:$type)
		array set opts $args

		# If the type configuration differs, update it
		set config [array get opts :*]
		if { [lsort $_typeconfig($scope:$type)] != [lsort $config] } {
		    set _typeconfig($scope:$type) $config
		    set regenerate 1
		}
	    }
            # Remember or update the attribute defaults for this object
            if [::info exists _defaults($type)] {
                array set t $_defaults($type)
            }
            array set t $args
            set _defaults($type) {}
            foreach {opt val} [array get t] {
                if ![string match {:*} $opt] {
                    lappend _defaults($type) $opt $val
                }
            }

            # Local copies of configuration
            foreach {cfg val} $_typeconfig($scope:$type) {
                set _[string trimleft $cfg :]($type) $val
            }

	    # Regenerate the parsing procedure if configuration changed
	    if $regenerate {
		# Create and define the parsing proc
                @scope $scope eval [_mkparseproc $type]

		# Link the proc into the safe interpreter
		$safeinterp alias $scope::$type $scope::__parse_$type
	    }
	}
	"exists" {
	    if { $args == "" } {
		# Return type list
		return $_types($scope)
	    } else {
		# Test for single type
		::tycho::lmember $_types($scope) $type
	    }
	}
	default {
	    error "unknown option: must be one of \
		    \"configure, define, or exists\""
        }
    }
}


#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _describe
#
# Return a string describing the item given by _name_
# in the TIM format. _prefix_, if supplied, is prepended to each line.
#
body ::tycho::DataModel::_describe {name {prefix {}}} {
    regexp {([^:]+):(.+)} [lindex $name end] _ type tail

    # If override is on for this type, call its method
    if $_override($type) {
        return [@scope $scope $this _describe$type $name $prefix]
    }

    # Start string with type followed by local name
    set string "$prefix$type $tail"

    # Print attributes
    # This is fast:
    # eval lappend string [@scope $scope set [set _dataname]($name)]
    #
    # This looks better:
    array set attrs [@scope $scope set [set _dataname]($name)]
    foreach attr [lsort [array names attrs]] {
        append string " \\\n$prefix        "
        lappend string $attr $attrs($attr)
    }

    # Print children if I have any
    if !$_leafonly($type) {
    	set cd [_describechildren $name "$prefix    "]
    	if { $cd != "" } {
            append string " \{\n$cd$prefix\}"
        }
    }
    return $string\n
}

########################################################################
#### _describechildren
#
# Return a string describing the children of the item given by _name_
# in the TIM format. The _prefix_, if supplied, is prepended to each line.
# Enclosing braces are not printed.
#
body ::tycho::DataModel::_describechildren {name {prefix {}}} {
    set string ""
    foreach t $_types($scope) {
        foreach child [match $t $name] {
            append string [_describe [concat $name $t:$child] $prefix]
        }
    }
    return $string
}

########################################################################
#### _header
#
# Return a header string for this model. The returned string contains
# only the field name-value pairs, so that subclasses can chain
# and add additional fields. This method
# returns a string containing the current values of the mode, version,
# and class attributes, and the current time as the mtime field.
#
body ::tycho::DataModel::_header {} {
    set header ""
    # append header "mode: [cget -mode]; "
    # append header "class: [cget -class]; "
    # append header "version: [cget -version] "
    append header "mtime: [clock format [clock seconds]] "
    return $header
}

########################################################################
#### _update
#
# Build an updated version of the cache if it's out of date.
# This is short-cut version of <b>cache update</b>.
#
body ::tycho::DataModel::_update {} {
    if ![@scope $scope set [set _dataname].cachevalid] {
        _updatecache
    }
}

########################################################################
#### _updatecache
#
# Build an updated version of the cache. This method should
# be overridden by subclasses that maintain internal data derived
# from the loaded data.
#
body ::tycho::DataModel::_updatecache {} {
    ;# Does nothing
}

########################################################################
#### cache
#
# Manipulate the cache state flag. Models often create internal
# data derived from the data loaded into them, and this method
# is provided as a means for method to keep this derived information
# up-to-date.
# 
# <dl>
# <dt><b>invalidate</b>
# <dd>
# Declare that the cache data is not valid. This option is called
# any time data is added to or deleted from the model.
#
# <dt><b>update</b>
# <dd>
# Update the cache data. If the cache is not up to date, the
# protected method </b>updatecache</b> will be called. Subclasses
# that rely on cached data should call this (or the <b>_update</b>
# short-cut) before executing code that relies on cached data.
#
# <dt><b>valid</b>
# <dd>
# If the cache data is valid, return true, otherwise false.
#
# <dt><b>validate</b>
# <dd>
# Declare that the cache data is valid. This option should be called
# at the completion of the _updatecache method.
#
# </dl>
#
body ::tycho::DataModel::cache {mode args} {
    switch -exact $mode {
        "invalidate" {
	    if { $args != "" } {
		error "wrong # args: should be \"cache invalidate\""
	    }
	    @scope $scope set [set _dataname].cachevalid 0
        }
        "update" {
 	    if { $args != "" } {
		error "wrong # args: should be \"cache update\""
	    }
            _update
        }
        "valid" {
	    if { $args != "" } {
		error "wrong # args: should be \"cache valid\""
	    }
	    @scope $scope set [set _dataname].cachevalid
	}
        "validate" {
	    if { $args != "" } {
		error "wrong # args: should be \"cache validate\""
	    }
	    @scope $scope set [set _dataname].cachevalid 1
        }
	default {
	    error "bad option \"$mode\": should be invalidate, \
		    update, valid, or validate"
	}
    }
}

#####################################################################
#####################################################################
####                       private methods                       ####

########################################################################
#### _mkparseproc
#
# Create a proc to parse an item
#
body ::tycho::DataModel::_mkparseproc {type} {
    # Proc header
    set proc "proc $scope::__parse_$type "
    if $_override($type) {
        append proc "{args}"
    } else {
        append proc "{tail args}"
    }
    append proc " \{\n"

    # Proc body
    append proc "    set type $type\n"


    # If the override option is set, call a method on the
    # object instead of generating code to load its data.
    if $_override($type) {
        append proc {
            global _object_
            global $_object_
            eval $_object_ _add$type $args
        }
    } else {
        # Declare various data global
        append proc {
            global _current_ _context_
            global $_current_
            global $_current_:$type
            global $_current_.cachevalid
        }
        # Generate the full name of the item
        append proc {
            set name [concat $_context_ $type:$tail]
        }
        # Check whether the item already exists
        append proc {
            if [::info exists [set _current_]($name)] {
                error "An item \"$name\" already exists in $_current_"
            }
        }
        # Extract contents if the item is not always a leaf
        if !$_leafonly($type) {
            append proc {
                if { [llength $args] & 1 } {
                    set contents [lindex $args end]
                    set args [lreplace $args end end]
                } else {
                    set contents {}
                }
            }
        }
        # Set the data of this item
        append proc {
            set [set _current_]($name) $args
	}
        # Add the item tail to the list of children of its parent
        append proc {
            lappend [set _current_]:[set type]($_context_) $tail
        }
        # Clear the cache valid flag
        append proc {
            set $_current_.cachevalid 0
        }
        # Parse contents if the item is not a leaf. Use the safe
	# interpreter to ensure safety.
        if !$_leafonly($type) {
            append proc {if { $contents != "" }}
            set t {
                set saved $_context_
                set _context_ $name
            }
            append t "$safeinterp eval @scope $scope \$contents\n"
            append t {
                set _context_ $saved
            }
            append proc " \{$t\}"
        }
    }
    # Complete the proc and return it
    append proc "\}"
}

########################################################################
#### _verify
#
# Verify that the item given by _name_ exists, raising an
# error if it does not.
#
body ::tycho::DataModel::_verify {name} {
    if ![@scope $scope ::info exists [set _dataname]($name)] {
    	error "Unknown item \"$name\" in $modelname"
    }
}

# The argume
