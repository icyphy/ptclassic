##########################################################################
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### DataModel
#
# DataModel extends the Model class to support the TIM interchange
# format.  (See <a href="../../../doc/tim.html">the TIM documentation</a>).
#
class ::tycho::DataModel {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Add a new item
    method add {type name args}

    # Remove all data
    method clear {}

    # Delete an item
    method delete {type name}

    # Describe the data as a string in TIM format
    method describe {{type {}} {name {}} {prefix {}}}

    # Check if an item exists
    method exists {type name}

    # Get the names and attributes of each item matching a pattern
    method get {type {pattern {}}}

    # Get an attribute or attributes of an item
    method itemcget {type name {attribute {}}}

    # Configure attributes of an item
    method itemconfigure {type name args}

    # Get the names of each item matching a pattern
    method names {type {pattern {}}}

    # Load data from a TIM string
    method parse {data}

    # Access the schema of this model
    method schema {args}

    # Sort items in a given context
    method sort {type context args}

    #################################################################
    ####                   protected methods                     ####

    # Add a new item
    protected method _add {type name args}

    # Delete an item
    protected method _delete {type name}

    # Create a header string
    protected method _header {}

    # Configure attributes of an item
    protected method _itemconfigure {type name args}

    #################################################################
    ####                  protected variables                    ####

    #################################################################
    ####                    private methods                      ####

    # Describe an attribute
    private method _describeattribute {type name prefix}

    # Return a description of a single item
    private method _describeitem {type name {prefix {}}}

    # Parse a nested item
    private method _parsegroup {type name data}

    # Verify that an item exists
    private method _verify {type name}

    # Verify that an item does not exist
    private method _verifynot {type name}

    #################################################################
    ####                  private variables                    ####

    # The namespace holding my data
    private variable _dataspace

    # My unique id
    private variable _id

    # The schema objects of each class
    private common _schema
}


########################################################################
#### constructor
#
body ::tycho::DataModel::constructor {args} {
    # Before we do anything, make sure we have a schema
    schema

    # Get me an ID
    set _id [::tycho::autoName {}]

    # Set the data namespace
    set _dataspace ::tycho::ModelSchema::[info namespace tail [info class]]

    # Evaluate options
    eval configure $args
}

########################################################################
#### add
#
# Add a new item. _type_ and _name_ are its full type
# and full name. Following arguments are the item's value if
# this type has a false value for its *-valued* attribute (as declared
# in a call to newtype{}), and a list of attribute-value pairs.
# Raise an error if the item already exists.
#
body ::tycho::DataModel::add {type name args} {
    _verifynot $type $name
    _add $type $name $args
}

########################################################################
#### clear
#
# Clear all data from the model, except for the model attributes.
# This method is not, by default, undoable, because of the potential
# size of the undo command. A client could add an undo command to
# the history explicitly with the <code>history add</code>.
#
body ::tycho::DataModel::clear {} {
    set attributes [get attribute]
    
    # FIXME: clear all data

    foreach {name value} $attributes {
	_itemconfigure attribute $name $value
    }
    # Not undoable
    return ""
}

########################################################################
#### delete
#
# Delete the item specified by _type_ and _name_. Raise an error if
# the item does not exist.  This method deletes _only_
# the specified item, and will not delete any child items.
# This is done for two reasons. Firstly, clients are more likely
# to know whether there are any children and thus avoid the test
# for children (which, depending on the settings of the type
# attributes, can be more or less expensive). Secondly, this method
# needs to return data that can be used to construct an undo
# command, and it is simpler to do this if the method does not
# delete children. Thus, it is the client's responsibility to
# decide whether and when to test for and delete child items.
# This method returns the value and attributes of this item (prior
# to deletion) if its type has *-valued* set, or just the list
# of attributes if not.
#
body ::tycho::DataModel::delete {type name} {
    _verify $type $name

    set itype [lindex $type end]
    set index [list $type $name]

    # Remove from the ordering list
    if { $_typeinfo($itype,ordered) } {
        set context [lreplace $name end end]
        # The ordered list may not exist
        if [::info exists _order([list $type $context])] {
            set _order([list $type $context]) \
                    [::tycho::ldelete $_order([list $type $context]) \
                    [lindex $name end]]
        }
    } 
    # Remove the information about this item and return the old data
    set result $_data($index)
    unset _data($index)
    return $result
}

########################################################################
#### describe
#
# Return a string that describes the model. The description starts
# with an emacs-style header string that contains the mode, class, and
# version attributes, and the current date.
#
set junk {
    body ::tycho::DataModel::describe {} {
	set result "# -*- [_header] -*-"
	append result [$_data describe]
	return $result
    }
}

########################################################################
#### describe
#
# Generate a TIM description. If no arguments are supplied, generate a
# description of all the data. Annotations (see the annotation{} method)
# are not produced into the output file. If the _type_ and _name_
# arguments are supplied, generate a description of just the item
# specified by _type_ and _name_. If the _prefix_ argument is also
# supplied, prepend the prefix to each line produced. Note that this
# method can safely be called to produce a description of a single 
# item from within the *-describe* attribute of a type (see newtype{}).
#
body ::tycho::DataModel::describe {{type {}} {name {}} {prefix {}}} {
    if { $type != "" && $name!= "" } {
        schema describe $_id $type $name
    } else {
	set string ""
	foreach type $_typeinfo() {
	    # Get the root items of this type
	    set items [names $type]
	    
	    # If the items are not ordered, sort anyway to improve layout
	    if { ! $_typeinfo($type,ordered) } {
		set items [lsort $items]
	    }
	    # Append a description of each to the result string
	    if { $_typeinfo($type,describe) != "" } {
		# Call external script to get description
		foreach name $items {
		    append string [uplevel #0 $_typeinfo($type,describe) \
			    [list $type $name $prefix]
		}
	    } else {
		foreach name $items {
		    append string [_describeitem $type $name $prefix]
		}
	    }
	}
    	return $string
    }
}

########################################################################
#### exists
#
# Test if the item given by _type_ and _name_ exists, returning 1 if it
# does and 0 if not.
#
body ::tycho::DataModel::exists {type name} {
    ::info exists _data([list $type $name])
}

########################################################################
#### get
#
# Return the names and data of item which have type _type_
# and match the pattern _pattern_. See the names{} method
# for the format of the _pattern_ arguments. The result is
# a list of names as returned by names{}, interspersed by the
# data of that item. Each data list starts with the item's value
# if the item's type has *-valued* set, or null otherwise. Following
# elements are an attribute-value list.
# 
# FIXME: Better error-checking needed.
#
body ::tycho::DataModel::get {type {pattern {}}} {
    set p [llength $pattern]
    set t [llength $type]
    if { $p != $t && $p != $t-1 } {
        error "Pattern \"$p\" cannot match type \"$t\""
    }
    if { $p == $t-1 } {
        # The pattern argument is the context only
        if $_typeinfo([lindex $type end],ordered) {
            # Get ordered list (if it exists)
            if [::info exists _order([list $type $context])] {
                set result {}
                foreach name $_order([list $type $context]) {
                    lappend result \
                            $name \
                            $_data([list $type [concat $pattern $name]])
                }
                return $result
            } else {
                return {}
            }
        } else {
            lappend pattern *
        }
    }
    # Get the children from the _data array
    set result {}
    foreach {typename data} [array get _data [list $type $pattern]] {
        lappend result [lindex [lindex $typename 1] end] $data
    }
    return $result
}

########################################################################
#### itemcget
#
# Get an attribute or attributes of the item specified by _type_ and
# _name_. If the _attribute_ argument is not supplied, return an
# attribute-value list of all attributes. Otherwise return the value of
# the specified attribute. Raise an error if the item does not exist or
# if the attribute is unknown.
#
body ::tycho::DataModel::itemcget {type name {attribute {}}} {
    _verify $type $name

    set itype [lindex $type end]
    set index [list $type $name]

    array set opts [lreplace $_data($index) 0 0]
    if { $attribute == "" } {
	array get opts
    } else {
	if { ! [::info exists opts($attribute)] } {
    	    error "Unknown attribute $attribute in $errorname"
    	}
    	return $opts($attribute)
    }
}

########################################################################
#### itemconfigure
#
# Configure the item specified by _type_ and _name_. Following arguments
# are an attribute-value list. If the *-strict* attribute of the item's type
# is set, than each attribute must have been defined in a call to newtype{}
# or typeconfigure{} or an error will be raised. Otherwise, any attribute
# can be given to the item. The returned value is a list of attribute names
# and their values prior to this call, for use in building an undo command.
# Raise an error if the item does not exist. 
#
body ::tycho::DataModel::itemconfigure {type name args} {
    _verify $type $name
    
    set itype [lindex $type end]
    set index [list $type $name]
    set result [lreplace $_data($index) 0 0]

    # Get defaults as an array
    array set opts $_typeinfo($itype,defaults)
    
    if { ! $_typeinfo($itype,strict) } {
        # If checking is turned off, just add the new attributes
        array set opts $args
    } else {
        # Flag an error if a given attribute is not in the defaults
        foreach {attribute value} $args {
            if { ! [::info exists opts($attribute)] } {
                # Error
                error "Unknown attribute $attribute in $errorname"
            }
            set opts($attribute) $value
        }
        eval [list lappend _data($index)] [array get opts]
    }
    return $result
}

########################################################################
#### names
#
# Return the names and data of items which have type _type_
# and match the pattern _pattern_. The type is the full type
# of the items to be found. The _pattern_ is a glob-style pattern
# used to locate items, and must be supplied if the length of
# _type_ is greater than one. If the length of _type_ is _n_,
# then _pattern_ must either be
# <ul>
# <li>A context -- that is, a list of length <i>n - 1</i> not
# containing any pattern characters. All items in this context
# with the specified type are returned. If the type is ordered,
# the returned items are in order.
# <li>A name pattern -- that is, a context with a glob-style
# pattern appended. All items in the context that match the
# pattern are returned. The result is _not_ ordered, regardless
# of whether this type is ordered or not.
# </ul>
# In either case, the names within that context are returned
# (that is, the local names, not the full names).
# 
# FIXME: Better error-checking
#
body ::tycho::DataModel::names {type {pattern {}}} {
    set p [llength $pattern]
    set t [llength $type]
    if { $p != $t && $p != $t-1 } {
        error "Pattern \"$pattern\" cannot match type \"$type\""
    }
    if { $p == $t-1 } {
        # The pattern argument is the context only
        if $_typeinfo([lindex $type end],ordered) {
            # Get ordered list (if it exists)
            if [::info exists _order([list $type $context])] {
                return $_order([list $type $context])
            } else {
                return {}
            }
        } else {
            lappend pattern *
        }
    }
    # Get the children from the _data array
    set result {}
    foreach typename [array names _data [list $type $pattern]] {
        lappend result [lindex [lindex $typename 1] end]
    }
    return $result
}

########################################################################
#### parse
#
# Read data from a string containing a TIM representation of a
# model. Each non-comment line must start with the name of a type
# defined for this object.The item name follows, then the item value
# if it is a valued type, and then attributes and nested items. If
# the *-loadcommand* attribute is set, then the type, name, and arguments
# are appended to that attribute and the whole lot is evaluated in the global
# scope: this is typically used so that a client can "intercept" the call
# to add an item. Otherwise, the item and its data is added. An error is
# raised if the object already contains data.
#
body ::tycho::DataModel::parse {data} {
    schema parse $_id $data
}

########################################################################
#### schema
#
# Access the schema of this model class. Each subclass of this
# class will have a schema object created for it, which is used
# to manage type definitions, parsing, and printing of instance
# of that class. With no arguments, return the schema object.
# If arguments are supplied, evaluate them on the schema object.
#
body ::tycho::DataModel::schema {args} {
    # Make sure one exists for this class
    if ![::info exists _schema([info class])] {
	set _schema([info class]) [::tycho::ModelSchema #auto]
    }
    if { $args == "" } {
	return $_schema([info class])
    } else {
	eval $_schema([info class]) $args
    }
}

########################################################################
#### sort
#
# Sort the items in a given context. This method can be called
# only if the given _type_ has the *-ordered* flag set. If so,
# the ordering of the items in _context_ is changed to that produced
# by performing an *lsort* on the item names, with the following
# arguments passed to the Tcl lsort{} procedure.
#
# FIXME: Error-checking
#
body ::tycho::DataModel::sort {type context args} {
    set itype [lindex $type end]
    set index [list $type $context]

    if { ! $_typeinfo($itype,ordered) } {
        error "Item type \"$itype\" is not ordered"
    }
    # Sort the ordering list as long as there are children
    if [::info exists _order($index)] {
        set _order($index) [eval lsort $args [list $_order($index)]]
    }
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _header
#
# Return a header string for this model. The returnd string contains
# only the field name-value pairs, so that subclasses can chain
# and add additional fields. This method
# returns a string containing the current values of the mode, version,
# and class attributes, and the current time as the mtime field.
#
body ::tycho::DataModel::_header {} {
    set header ""
    append header "mode: [modelcget -mode]; "
    append header "class: [modelcget -class]; "
    append header "version: [modelcget -version] "
    append header "mtime: [clock format [clock ticks]] "
    return $header
}

#####################################################################
#####################################################################
####                       private methods                       ####

########################################################################
#### _add
#
# Add a new item. _type_ and _name_ are its full type
# and full name. The third argument is a list containing the item
# value if its *-valued* attribute (as declared in a call to newtype{})
# it set, followed by attribute-value pairs.
#
body ::tycho::DataModel::_add {type name arguments} {
    set itype [lindex $type end]
    set index [list $type $name]

    # Add it to the list of ordered children of its context
    if $_typeinfo($itype,ordered) {
        set context [lreplace $name end end]
        lappend _order([list $type $context]) [lindex $name end]
    }
    # Process value
    if $_typeinfo($itype,valued) {
        set _data($index) [lindex $arguments 0]
        set arguments [lreplace $arguments 0 0]
    } else {
        set _data($index) {{}}
    }
    # Get a nesting group if there is one
    if { [llength $arguments] & 1 } {
    	set nesting [lindex $arguments end]
    	set arguments [lreplace $arguments end end]
    } else {
    	set nesting {}
    }
    # Process attributes
    if { $arguments != "" } {
	array set opts $_typeinfo($itype,defaults)
	if $_typeinfo($itype,strict) {
	    foreach {opt val} $arguments {
		if ![::info exists opts($opt)] {
		    error "Unknown attribute $opt of $itype \"$name\""
		}
	    }
	}
	array set opts $arguments
	eval [list lappend _data($index)] [array get opts]
    }
    # Process nesting group
    if { $nesting != "" } {
        _parsegroup $type $name $nesting
    }
}

########################################################################
#### _describeattribute
#
# Return a description of an attribute. This method is called by the
# DataModelchange object when its describe{} method is called. An
# attribute is printed only if its current value is different from
# its default value.
#
body ::tycho::DataModel::_describeattribute {type name prefix} {
    set value [$_data value $type $name]
    if { $value == [$_data itemcget $type $name -default] } {
	return ""
    } else {
	set result $prefix
	lappend result $value
    }
}

########################################################################
#### _describeitem
#
# Return a string describing the item given by _type_ and _name_
# in the TIM format. This method performs no error-checking, so
# the item must exist or an obscure Tcl error will be raised.
# The _prefix_, if supplied, is prepended to each line. The
# description will be wrapped at an arbitrary line length of
# 72 characters where possible.
#
# FIXME: Add line wrapping
#
body ::tycho::DataModel::_describeitem {type name {prefix {}}} {
    set itype [lindex $type end]
    set index [list $type $name]

    # Figure out what kind of printout to do, according to whether
    # I have children or not
    set nested [expr { !$_typeinfo($itype,leafonly) \
            && [array names _data [list [concat $type *] [concat $name *]]]\
            != "" }]

    # Start string with local type followed by local name
    set string $prefix$itype
    lappend string [lindex $name end]
    
    # If this type has a value, append that
    if { $_typeinfo($itype,valued) } {
        lappend string [lindex $_data($index) 0]
    }
    set attributes [lreplace $_data($index) 0 0]

    # Get default attributes
    array set dflt $_typeinfo($itype,defaults)

    # If I have no children, print my attributes only
    if { ! $nested } {
        foreach {opt val} $attributes {
            if { ! [::info exists dflt($opt)] || $dflt($opt) != $val } {
                lappend string $opt $val
            }
        }
        # FIXME: Add line wrapping here
    } else {
        # If I have children, then print enclosing braces, then
        # attributes, then child items
        set childprefix $prefix
        append childprefix "    "
        append string " \{\n"
        
        # Output attributes
        foreach {opt val} $attributes {
            if { ! [::info exists dflt($opt)] || $dflt($opt) != $val } {
                append string $childprefix
                lappend string $opt $val
                append string "\n"
            }
        }
        # Output children
        foreach subtype $_typeinfo() {
            set children [names [concat $type $subtype] $name]
            # Sort if not ordered, to improve readability
            if { ! $_typeinfo($subtype,ordered) } {
                set children [lsort $children]
            }
            foreach child $children {
                append string [_describeitem \
                        [concat $type $subtype] \
                        [concat $name $child] $childprefix]
            }
        }
        append string "$prefix\}"
    }
    return $string\n
}

########################################################################
#### _parsegroup
#
# Parse a string representing the contents of the TIM item given by
# _type_ and _name_. The _data_ is a string containing, on each line,
# a list of attribute names and values, or a nested item declaration.
#
body ::tycho::DataModel::_parsegroup {type name data} {
    set itype [lindex $type end]
    set index [list $type $name]

    # Check for null string and trim white space
    if  { [set data [string trimleft $data " \t\n"]] == "" } {
        return
    }
    # Parsing is easier if there's always an end-of line
    append data "\n"

    # Scan the string for attributes.
    while { $data != "" } {
        # Get the next line
        regexp "^(\[^\n\]*)\[ \t\n\]*(.*)" $data _ line data
        if [string match {#*} $line] {
            continue   ;# space or comment line
        } elseif [string match {-*} $line] {
            array set opts $line
        } else {
            break
        }
    }
    # Set the collected attributes, checking if strict attributes
    array set dflt $_typeinfo($type,defaults)
    if $_typeinfo($itype,strict) {
        foreach opt [array names opts] {
            if ![::info exists dflt($opt)] {
                error "Unknown attribute $attribute of $itype \"$name\""
            }
        }
    }
    array set dflt [array get opts]
    eval [list lappend _data($index)] [array get dflt]

    # Process nested items. Note that we already have a line from before.
    while 1 {
	if [string match {#*} $line] {
            # Discard space or comment line
            continue
        } else {
            # Get lines until a complete command 
            set command $line
            while { ! [::info complete $command] && $data != "" } {
                regexp "^(\[^\n\]*)\n(.*)" $data _ line data
                append command "\n" $line
            }
            # Check that the command is legal
            set t [lindex $command 0]
            set n [lindex $command 1]
            set command [lreplace $command 0 1]
            if ![::info exists _typeinfo($t)] {
                error "Illegal type: $t"
            }
            if $_typeinfo($t,rootonly) {
                error "Type $t cannot be nested"
            }
            # Evaluate the command
            if { $loadcommand != "" } {
                uplevel #0 $loadcommand _$command
            } else {
		_add [concat $type $t] [concat $name $n] $command
            }
        }
        # Get the next line, breaking out of loop if done
        if ![regexp "^(\[^\n\]*)\n\[ \t\n\]*(.*)" $data _ line data] {
            break
        }
    }
}

########################################################################
#### _verify
#
# Verify that the item given by _type_ and _name_ exists, raising an
# error if it does not.
#
body ::tycho::DataModel::_verify {type name} {
    if ![::info exists _data([list $type $name])] {
    	error "Unknown [lindex $type end] \"$name\" in $errorname"
    }
}

########################################################################
#### _verifynot
#
# Verify that no item with the given _type_ and _name_ exists, raising
# an error if it does.
#
body ::tycho::DataModel::_verifynot {type name} {
    if [::info exists _data([list $type $name])] {
    	error "A [lindex $type end] \"$name\" already exists in $errorname"
    }
}
