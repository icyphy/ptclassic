##########################################################################
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### DataModel
#
# DataModel extends the Model class to support data models and the
# TIM interchange format.  TIM is a simple meta-data format that
# encourages a simple and clean representation of data, both in
# in-memory objects and in an external file representation.  TIM
# is a _very_ simple version of the object models used in OMT
# (Object Modeling Technique) -- as such, it has _types_, items
# of those types, attributes, and hierarchy. Another way of looking
# at this class is as a wrapper around a hierarchical Tcl array. See 
# <a href="../../../doc/tim.html">the TIM documentation</a> for more 
# details.
#
# The data stored in a DataModel object is hierarchical. Each item is
# referenced by its name, which consists of a list of name segments.
# A name segment is the item type and name, separated by a colon. For
# example, a top-level item may have the name <code>group:foo</code>,
# where _group_ is a type defined for this particular model. An item
# contained within that item may have the name
# <code>group:foo icon:bar</code>, where _icon_ is another type defined
# for this model. Item names are unique within each type -- for example,
# I could also have an item named <code>icon:foo</code>.
#
# DataModel is designed to be subclassed to create application-specific
# models. The constructor of each subclass must call the <b>definetype</b>
# procedure to define the types in that model. Clients can then use
# methods such as <b>parse</b>, <b>add</b>, <b>delete</b>, and
# <b>itemconfigure</b> to add and change data in the model. Each
# of these methods, except for <b>parse</b>, returns an undo command,
# so that these changes can be recorded and published (see 
# <a href="Model.html">Model</a>). Sub-classes may also choose
# to override these methods, or define other, model-specific methods
# to add or change data.
#
class ::tycho::DataModel {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Add a new item
    method add {name args}

    # Remove all data
    method clear {}

    # Delete an item
    method delete {name}

    # Describe the data as a string in TIM format
    method describe {{name {}} {prefix {}}}

    # Check if an item exists
    method exists {name}

    # Get the names and attributes of each item matching a pattern
    method get {{pattern *}}

    # Get an attribute or attributes of an item
    method itemcget {name {attribute {}}}

    # Configure attributes of an item
    method itemconfigure {name args}

    # Get a list children of a given type
    method listing {type {context {}}}

    # Get attributes of the model
    method modelcget {{attribute {}}}

    # Configure the model
    method modelconfigure {args}

    # Get the names of each item matching a pattern
    method names {{pattern *}}

    # Load data from a TIM string
    method parse {data}

    # Sort items in a given context
    method sort {type {context {}} args}

    # Define or configure item types
    method type {mode {type {}} args}

    #################################################################
    ####                   protected methods                     ####

    # Return a description of a single item
    protected method _describeitem {name {prefix {}}}
    
    # Create a header string
    protected method _header {}

    # Update the cache if it's out of date
    protected method _update

    # Do a cache update
    protected method _updatecache

    # Manipulate the data cache
    protected method cache {mode args}

    #################################################################
    ####                  protected variables                    ####

    # The path of the currently-parsed model
    protected common _object_ {}

    # The name of the currently-parsed model
    protected common _current_ {}

    # The context currently being parsed in
    protected common _context_ {}

    #################################################################
    ####                    private methods                      ####

    # Generate a parsing procedure
    private method _mkparseproc {type args}

    # Verify that an item exists
    private method _verify {name}

    #################################################################
    ####                  private variables                    ####

    private common defaulttypeoptions {
        -leafonly 0
        -override 0
    }

    # The safe interpreter provided for safe parsing
    private common safeinterp [uplevel #0 interp create]

    # The scope in which we store data
    private variable scope

    # The  data cache
    private variable cache

    #### _typeinfo
    # This array contains a set of entries for each item type.
    # <pre>
    #    _typeinfo($scope)                -> List of types in order defined
    #    _typeinfo($scope,$type)          -> $type
    #    _typeinfo($scope,$type,defaults) -> Class-wide attribute defaults
    #    _typeinfo($scope,$type,leafonly) -> Can be a leaf only?
    #    _typeinfo($scope,$type,override) -> Use a method to parse items?
    # </pre>
    private common _typeinfo

    # Default attributes, per object
    # <pre>
    #    _attrinfo($type)       -> Default values
    # </pre>
    private variable _attrinfo

    # Debugging only
    method debug {args} {
        eval $args
    }
}

########################################################################
#### constructor
#
body ::tycho::DataModel::constructor {args} {

    # Set the scope variable
    set scope [info class]

    # Make sure the namespaces exist in the safe interpreter
    $safeinterp eval namespace ::tycho
    $safeinterp eval namespace $scope

    # Evaluate options
    eval configure $args
}

########################################################################
#### destructor
#
body ::tycho::DataModel::destructor {} {
    # Clear data so as not to leak...
    clear
}

########################################################################
#### add
#
# Add a new item. _name_ is its full name including types. Following
# arguments are option-value pairs. If the item already exists,
# then its new value will overwrite its old value. (Note: the old
# data will not be merged.) Children will also be overwritten,
# but no children will be deleted.
#
body ::tycho::DataModel::add {name args} {

    # Invalidate cache
    @scope $scope set [set modelname]._cachevalid 0

    # Extract type and tail
    regexp {(.+):(.+)} [lindex $name end] _ type tail
    set context [lreplace $name end end]

    # Extract contents
    if { [llength $args] & 1 } {
    	set contents [lindex $args end]
    	set args [lreplace $args end end]
    } else {
    	set contents {}
    }

    # Store the data of this item
    @scope $scope set [set modelname]($name) $args

    # Add it to the list of children of its parent
    @scope $scope lappend [set modelname].[set type]($context) $tail

    # Parse contents
    if { $contents != "" } {
        set _context_ $name
        $safeinterp eval [list @scope $scope $contents]
    }
    # Return undo command
    list delete $name
}

########################################################################
#### clear
#
# Clear all data from the model and invalidate the cache.
# This method is not, by default, undoable, because of the potential
# size of the undo command. A client could add an undo command to
# the history explicitly with the <code>history add</code>.
#
body ::tycho::DataModel::clear {} {
    # Invalidate the cache
    cache invalidate

    # Unset the array data and the data for each type
    catch {
        @scope $scope unset $modelname
        foreach type $_typeinfo($scope) {
            @scope $scope unset $modelname.$type
        }
    }

    # Return null since this is not undoable.
    return ""
}

########################################################################
#### delete
#
# Delete the item specified by _name_. Raise an error if
# the item does not exist.  This method deletes child items
# as well. Return the undo command.
#
body ::tycho::DataModel::delete {name} {
    _verify $name
    regexp {(.+):(.+)} [lindex $name end] _ type tail
    set context [lreplace $name end end]

    # Invalidate cache
    @scope $scope set [set modelname]._cachevalid 0

    # Get a description for the undo command
    # FIXME: this is horrendously inefficient. We need to
    # merge the generation of the undo command with the
    # deletion of children.
    set desc [_describeitem $name]
    
    # Remove from the parent list
    @scope $scope set [set modelname].[set type]($context) \
            [::tycho::ldelete \
            [@scope $scope set [set modelname].[set type]($context)] $tail]

    # Delete attributes
    @scope $scope unset [set modelname]($name)

    # Delete children
    # FIXME: Generate undo command here.
    if !$_typeinfo($scope,$type,leafonly) {
        foreach t $_typeinfo($scope) {
            foreach child [listing $t $name] {
                delete [concat $name $t:$child]
            }
        }
    }

    # Return the undo command
    list parse $desc
}

########################################################################
#### describe
#
# Generate a TIM description. If no arguments are supplied, generate a
# description of all the data. The description starts with an emacs-style
# header string that contains the mode, class, and version attributes,
# and the current date. If the _name_ is supplied, generate a description
# of just that item. If the _prefix_ argument is also
# supplied, prepend the prefix to each line produced.
#
body ::tycho::DataModel::describe {{name {}} {prefix {}}} {
    if { $name!= "" } {
        _verify $name
        _describeitem $name $prefix
	
    } else {
        set string "# -*- [_header] -*-\n"
        foreach type $_typeinfo($scope) {
            # Get the root items of this type
            set items [listing $type]

            # Append a description of each to the result string
            foreach n $items {
                append string [_describeitem $type:$n $prefix]
            }
        }
        return $string
    }
}

########################################################################
#### exists
#
# Test if the item given by _name_ exists, returning 1 if it
# does and 0 if not.
#
body ::tycho::DataModel::exists {name} {
    @scope $scope ::info exists [set modelname]($name)
}

########################################################################
#### get
#
# Return the names and data of items with names that match _pattern_.
# If _pattern_ is not supplied, get the names and data of all items.
# Note that this method matches item names against a pattern, so
# that a pattern such as <code>item:foo.*</code> will return all
# descendents, not just children, of <code>item:foo</code>. Use the
# listing{} method to get just children. Note also that the returned
# list will not be ordered, whereas the result from listing{} will be.
#
body ::tycho::DataModel::get {{pattern *}} {
    @scope $scope array get $modelname $pattern
}

########################################################################
#### itemcget
#
# Get an attribute or attributes of the item specified by
# _name_. If the _attribute_ argument is supplied, return the
# value of that attribute. Otherwise return a list containing
# all attributes and their values. Raise an error if the item
# does not exist or if the attribute is unknown.
#
body ::tycho::DataModel::itemcget {name {attribute {}}} {
    _verify $name

    if { $attribute == "" } {
        @scope $scope set [set modelname]($name)
    } else {
        array set opts [@scope $scope set [set modelname]($name)]
        if { ! [::info exists opts($attribute)] } {
            error "Unknown attribute $attribute in $modelname"
        }
        return $opts($attribute)
    }
}

########################################################################
#### itemconfigure
#
# Configure the item specified by _name_. Following arguments
# are an attribute-value list. Attributes are arbitrary -- there is
# no checking in this method that attributes match those defined
# with <b>type define</b>. Raise an error if the item does not exist. 
# Return the undo command.
#
body ::tycho::DataModel::itemconfigure {name args} {
    _verify $name
    regexp {(.+):} [lindex $name end] _ type

    # Get defaults as an array
    array set opts $_attrinfo($type)

    # Add the new attributes
    array set opts $args

    # Set result and return undo command
    set data [@scope $scope set [set modelname]($name)]
    @scope $scope set [set modelname]($name) [array get opts]
    concat itemconfigure [list $name] $data
}

########################################################################
#### listing
#
# Return a list of child items of the given _type_. If the
# _context_ is given, return children of that item; otherwise
# return top-level items. The returned names are the names
# within the given context only. For example, if the model
# contains items with full names *item:foo* and *item:bar*,
# then the call
# <pre>
#     $model listing item
# </pre>
# will return <code>{foo bar}</code>. (In comparison, the names{}
# method will return <code>{item:foo item:bar}</code>. Children
# are returned in the same order in which they were added to
# the model -- the order of children of a given type can be altered
# with the sort{} method.
#
body ::tycho::DataModel::listing {type {context {}}} {
    if [@scope $scope ::info exists [set modelname].[set type]($context)] {
        @scope $scope set [set modelname].[set type]($context)
    } else {
        return {}
    }
}

########################################################################
#### modelcget
#
# Get attributes of the model. If a single argument is supplied,
# return its value. If no argument is supplied, return a name-value
# list of all attribute.
#
body ::tycho::DataModel::modelcget {{attribute {}}} {
    error "Not implemented"
}

########################################################################
#### modelconfigure
#
# Configure attributes of the model. The arguments are a list of
# name-value pairs. If an attribute doesn't exist, this method will
# define it. Return the undo command.
#
body ::tycho::DataModel::modelconfigure {args} {
    error "Not implemented"
}

########################################################################
#### names
#
# Return item names that match _pattern_.
# If _pattern_ is not supplied, get the names of _all_ items.
# Note that this method matches item names against a pattern, so
# that a pattern such as <code>item:foo.*</code> will return all
# descendants, not just children of <code>item:foo</code>. Use the
# listing{} method to get just children. Note also that the returned
# list will not be ordered, whereas the result from listing{} will be.
#
body ::tycho::DataModel::names {{pattern *}} {
    @scope $scope array names $modelname $pattern
}

########################################################################
#### parse
#
# Read data from a string containing a TIM representation of a
# model. Each non-comment line must start with the name of a type
# defined for this model. The item name follows, then attribute-value
# pairs, and then nested items within curly braces. _This method does
# not generate an undo command._
#
body ::tycho::DataModel::parse {data} {
    global _current_ _context_ _object_
    set _current_ $modelname
    set _context_ {}
    set _object_ $this
    
    $safeinterp eval [list @scope $scope $data]

    # Can't record this method.
    return ""
}

########################################################################
#### sort
#
# Sort the items in a given context. This method can be called
# only if the given _type_ has the *-ordered* flag set. If so,
# the ordering of the items in _context_ is changed to that produced
# by performing an *lsort* on the item names, with the following
# arguments passed to the Tcl lsort{} procedure.
#
body ::tycho::DataModel::sort {type {context {}} args} {
    set var [set modelname].[set type]($context)
    @scope $scope set $var [eval lsort $args [list @scope $scope set $var]]
}

########################################################################
#### type
#
# Manipulate item types. This command has several forms, depending
# on the valud of teh_mode_ argument:
#
# <dl>
# <dt><b>cget</b> _type_ _attribute_
# <dd>
# Get the value of the _attribute_ attribute of _type_.
#
# <dt><b>configure</b> _type_ ?_attribute_ _value_ ...?
# <dd>
# Configure attributes of _type_. With no additional arguments,
# return a list of all attributes. With additional arguments,
# configure the attributes of the type. If any of the type-control
# attributes are specified, regenerate the parsing procedure for
# _type_.
# 
# <dt><b>define</b> _type_ ?_attribute_ _value_... ?
# <dd>
# Define a new type. The new type will be defined only the first
# time this option is called for a given most-specific class.
# Thereafter, the type-control attributes (see below) can be
# changed only with the <b>configure</b> option.
#
# <dt><b>names</b>
# <dd>
# Return a list of types defined for this class.
#
# </dl>
#
# Attributes of types fall into two classes. _Type-control_
# attributes control how the type is interpreted, and are set
# class-wide. _Type-value_ attributes are attributes that are
# instantiated in individual items of that type -- the value
# of this attribute is the default value given to items. Th
# following type-control attributes are recognized:
#
# <dl>
# <dt><b>-leafonly</b> _bool_
# <dd>
# If true, items of this type most be
# a leaf item -- that is, they cannot contain nested items. This should
# be set in any situation where a type can only be a leaf, since
# parsing is more efficient. The default is false.
#
# <dt><b>-override</b> _bool_
# <dd>
# If true, items of this type will
# be parsed by calling a method with the same name as _type_
# on the target object. This can be used if models need to do
# additional processing when items are parsed.
#
# </dl>
#
# Any other specified attributes are treated as type-value attributes.
# For example, the call
# <pre>
#     $NewInterchange type defined foo -leafonly 1 -bar hello
# </pre>
# will create the type <b>foo</b> and declare it to only be a leaf item.
# In addition, any item of type <b>foo</b> can accept the option
# </b>-bar</b>, which will have the default value "hello."
#
body ::tycho::DataModel::type {mode {type {}} args} {
    array set opts $defaulttypeoptions

    switch -exact $mode {
	"cget" {
	    array set attrs _attrinfo($type)
	    return $_attrinfo($type)
	}
	"configure" {
	    array set opts $defaulttypeoptions
	    foreach {attr val} $args {
		if [::info exists opts($attr)] {
		    error "Reconfiguring type-control attribute not supported"
		}
	    }
	    array set attrs $_attrinfo($type)
	    array set attrs $args
	    set _attrinfo($type) [array get attrs]
	}
	"define" {
	    array set opts $defaulttypeoptions
	    array set opts $args

	    # If this is the first time this is called in this scope,
	    # create the parsing procedure.
	    if { [@scope $scope ::info procs __parse_$type] == "" } {
		lappend _typeinfo($scope) $type

		# Set special options
		set _typeinfo($scope,$type) $type
		foreach {a _} $defaulttypeoptions {
		    set _typeinfo($scope,$type,[string trim $a "-"]) $opts($a)
		    unset opts($a)
		}
		
		# Create and define the parsing proc
		@scope $scope eval [eval _mkparseproc $type $args]
		
		# Link the proc into the safe interpreter
		$safeinterp alias $scope::$type $scope::__parse_$type

                # Record the class-wide default attributes
                set _typeinfo($scope,$type,default) [array get opts]
	    }
            # Copy class-wide attributes into local attributes
            set _attrinfo($type) $_typeinfo($scope,$type,default)
	}
	"names" {
	    return $_typeinfo($scope)
	}
	default {
	    error "unknown option: must be one of \
		    \"cget, configure, define, or names\""
        }
    }
}


#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _describeitem
#
# Return a string describing the item given by _name_
# in the TIM format. This method performs no error-checking, so
# the item must exist or an obscure Tcl error will be raised.
# The _prefix_, if supplied, is prepended to each line.
# Subclasses can override this method if they don't like the
# way that items are printed.
#
body ::tycho::DataModel::_describeitem {name {prefix {}}} {
    regexp {(.+):(.+)} [lindex $name end] _ type tail
    set context [lreplace $name end end]

    # Start string with type followed by local name
    set string $prefix$type
    lappend string $tail

    # Get default attributes
    array set dflt $_attrinfo($type)

    # Print my attributes
    foreach {opt val} [@scope $scope set [set modelname]($name)] {
        if { ! [::info exists dflt($opt)] || $dflt($opt) != $val } {
            lappend string $opt $val
            # FIXME: Add line wrapping here?
        }
    }
    
    # Print children if I have any
    if !$_typeinfo($scope,$type,leafonly) {
        set haschildren 0
        foreach t $_typeinfo($scope) {
            if [@scope $scope ::info exists [set modelname].[set t]($name)] {
                set haschildren 1
                break
            }
        }

        # If I have children, print enclosing braces and child items
        if $haschildren {
            set childprefix $prefix
            append childprefix "    "
            append string " \{\n"
            foreach t $_typeinfo($scope) {
                foreach child [listing $t $name] {
                    append string \
			    [_describeitem [concat $name $t:$child] $childprefix]
                }
            }
            append string "$prefix\}"
        }
    }
    return $string\n
}

########################################################################
#### _header
#
# Return a header string for this model. The returned string contains
# only the field name-value pairs, so that subclasses can chain
# and add additional fields. This method
# returns a string containing the current values of the mode, version,
# and class attributes, and the current time as the mtime field.
#
body ::tycho::DataModel::_header {} {
    set header ""
    # append header "mode: [modelcget -mode]; "
    # append header "class: [modelcget -class]; "
    # append header "version: [modelcget -version] "
    append header "mtime: [clock format [clock seconds]] "
    return $header
}

########################################################################
#### _update
#
# Build an updated version of the cache if it's out of date.
# This is short-cut version of <b>cache update</b>.
#
body ::tycho::DataModel::_update {} {
    if ![@scope $scope set [set modelname]._cachevalid] {
        _updatecache
    }
}

########################################################################
#### _updatecache
#
# Build an updated version of the cache. This method should
# be overridden by subclasses that maintain internal data derived
# from the loaded data. The overriding method should use
# <b>cache set</b> and <b>cache delete</b> to update the cache data,
# then chain to this method.
#
body ::tycho::DataModel::_updatecache {} {
    @scope $scope set [set modelname]._cachevalid 1
}

########################################################################
#### cache
#
# Manipulate the cache state flag. Models often create internal
# data derived from the data loaded into them, and this method
# is provided as a means for method to keep this derived information
# up-to-date.
# 
# <dl>
# <dt><b>delete</b> ?_name_ ...?
# <dd>
# Delete the given cache entries. If none are given, delete all
# cache entries.
#
# <dt><b>exists</b> _name_
# <dd>
# Return true if the cache contains the given entry, else false.
#
# <dt><b>get</b> ?_name_?
# <dd>
# Get the value of the cache entry named _name_. If _name_
# is not supplied, return all cache entries as a name-value list.
# An error will be generated if there is no cache entry named
# _name_. Note that the data returned will be invalid if the
# cache has been invalidate since the last update. (This is
# intentional -- occasionally the _updatecache{} method may
# in fact want to get the old data before deleting it.)
#
# <dt><b>invalidate</b>
# <dd>
# Declare that the cache data is not valid. This option is, in
# effect, called any time data is added to or deleted from
# the model. Note, however, that configuring items with
# itemconfigure{} does not invalidate the cache -- if needed,
# this can be done by overriding itemconfigure and calling
# this option.
#
# <dt><b>set</b> _name_ _value_ ?_name_ _value_ ...?
# <dd>
# Get the value of each cache entry _name_ to the given value.
#
# <dt><b>update</b>
# <dd>
# Update the cache data. If the cache is not up to date, the
# protected method updatecache{} will be called.
#
# <dt><b>valid</b>
# <dd>
# If the cache data is valid, return true, otherwise false.
#
# </dl>
#
body ::tycho::DataModel::cache {mode args} {
    switch -exact $mode {
	"delete" {
            if { $args == "" } {
                catch {unset cache}
            } else {
                foreach a $args {
                    catch {unset cache($a)}
                }
            }
        }
	"exists" {
	    if { [llength $args] != 1 } {
		error "wrong # args: should be \"cache exists name\""
            }
            info exists cache([lindex $args 0])
        }
	"get" {
	    if { [llength $args] > 1 } {
		error "wrong # args: should be \"cache get ?name?\""
            }
            if { $args == "" } {
                array get cache
            } else {
                return $cache([lindex $args 0])
            }
        }
	"invalidate" {
	    if { $args != "" } {
		error "wrong # args: should be \"cache invalidate\""
	    }
	    @scope $scope set [set modelname]._cachevalid 0
	}
	"set" {
            array set cache $args
        }
        "update" {
 	    if { $args != "" } {
		error "wrong # args: should be \"cache update\""
	    }
            _update
        }
        "valid" {
	    if { $args != "" } {
		error "wrong # args: should be \"cache valid\""
	    }
	    @scope $scope set [set modelname]._cachevalid
	}
	default {
	    error "bad option \"$mode\": should be delete, get, invalidate, \
		    set, update, or valid"
	}
    }
}

#####################################################################
#####################################################################
####                       private methods                       ####

########################################################################
#### _mkparseproc
#
# Create a proc to parse an item
#
body ::tycho::DataModel::_mkparseproc {type args} {
    # Get options
    array set opts $defaulttypeoptions
    array set opts $args

    # Proc header
    set proc "proc $scope::__parse_$type "
    if $opts(-override) {
        append proc "{args}"
    } else {
        append proc "{name args}"
    }
    append proc " \{\n"

    # Proc body
    append proc "    set type $type\n"


    # If the override option is set, call a method on the
    # object.
    if $opts(-override) {
        append proc {
            global _object_
            global $_object_
            eval $_object_ $type $args
        }
    } else {
        # Extract contents
        if !$opts(-leafonly) {
            append proc {
                if { [llength $args] & 1 } {
                    set contents [lindex $args end]
                    set args [lreplace $args end end]
                } else {
                    set contents {}
                }
            }
        }
        # Set the data
        append proc {
            global _current_ _context_
            global $_current_
            set [set _current_]([concat $_context_ $type:$name]) $args

            global   $_current_.$type
            lappend [set _current_].[set type]($_context_) $name

            global $_current_._cachevalid
            set $_current_._cachevalid 0
        }
        # Parse contents
        if !$opts(-leafonly) {
            set t {
                set saved $_context_
                set _context_ [concat $_context_ $type:$name]
            }
            append t "$safeinterp eval @scope $scope \$contents\n"
            append t {
                set _context_ $saved
            }
            append proc {if { $contents != "" }}
            append proc " \{$t\}"
        }
    }
    # Complete proc and return
    append proc "\}"
}

########################################################################
#### _verify
#
# Verify that the item given by _name_ exists, raising an
# error if it does not.
#
body ::tycho::DataModel::_verify {name} {
    if ![@scope $scope ::info exists [set modelname]($name)] {
    	error "Unknown item \"$name\" in $modelname"
    }
}
