#########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


######################################################################
#### model
# Perform operations on the tycho model database. This procedure is
# simply a front-end to a single instance of the ModelRegistry
# class.
#
proc ::tycho::model {method args} {
    eval [::tycho::ModelRegistry::instance] $method $args
}

#########################################################################
#### ModelRegistry
#
# The <i>ModelRegistry</i> model contains run-time information about
# loaded models. It provides support for finding models by relative
# path and by symbolic name, and for reference-counting models so
# that multiple views can access models.
#
# This model is not usually going to be stored on disk, since
# it represents run-time information. This is also a singleton
# class, since there should only ever be one of these. Use the
# instance{} procedure to get access to the unique instance.
#
# This model has the following types:
# <dl>
# <dt><b>model</b> _path_
# <dd>
# A reference to a model. An instance of this type is added each time
# a new model is loaded by a client. The name of the model is its
# absolute path, which is returned by the locate{} and load{}
# methods. It has the following attributes:
#   <dl>
#   <dt><b>-class</b> _classname_
#   <dd>
#   The name of the subclass of Model that can load the model.
#   If <b>-object</b> is not null, then this will be the same
#   as its class.
#
#   <dt><b>-extension</b> _extension_
#   <dd>
#   The file name extension of the Model. This is used to find the
#   file containing the model.
#
#   <dt><b>-keys</b> _keylist_
#   <dd>
#   A list of keys used to link clients to this model.
#
#   <dt><b>-modelmode</b> _mode_
#   <dd>
#   The mode obtained from the file header.
#
#   <dt><b>-modelname</b> _path_
#   <dd>
#   The relative path to the file which contains the model.
#
#   <dt><b>-object</b> _object_
#   <dd>
#   The model object. If null, then the model is no longer loaded.
#
#   <dt><b>-searchpath</b> _pathlist_
#   <dd>
#   A list of paths to search to locate the model. The list of
#   paths will be prepended to the TIM_PATH variable.
#
#   <dt><b>-version</b> _version_
#   <dd>
#   The currently loaded version. Default is "".
#
# </dl>
# </dl>
#
class ::tycho::ModelRegistry {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Link a client to the model and return the object name
    method link {path key}

    # Open a TIM model file and return its path
    method load {path args}

    # Find the file containing a model and return its path
    method locate {path args}

    # Register a class name for mode or submode
    method register {mode class}

    # Reload a model from its file
    method reload {path}

    # Unlink from a model
    method unlink {path key}

    #################################################################
    ####                     public procs                      ####

    # Get access to the unique instance
    proc instance {} {
        if { [infoWhich ::tycho::modelRegistry] == "" } {
            uplevel #0 ::tycho::ModelRegistry ::tycho::modelRegistry
        }
        return ::tycho::modelRegistry
    }

    #################################################################
    ####                   private variables                     ####

    # The mapping from mode to Itcl class
    private variable _modemap

    # The loaded models, indexed by path
    private variable _model

    # The linked clients, indexed by {path key}
    private variable _client
}

########################################################################
#### constructor
#
body ::tycho::ModelRegistry::constructor {args} {
    # Define the "model" type
    type define model \
            :leafonly 1 \
            -class "" \
            -extension "" \
            -keys "" \
            -modelmode "tcl" \
            -modelname "" \
            -object "" \
            -searchpath "" \
            -version ""

    # Evaluate options
    eval configure $args
}

########################################################################
#### destructor
#
body ::tycho::ModelRegistry::destructor {} {
    # We should probably delete all referenced models,
    # but since we will be exiting Tycho at this point,
    # there seems to be no need.
}

#########################################################################
#########################################################################
####                          public methods                         ####


########################################################################
#### link
#
# Link a client to the model. A model remains in memory for as
# long as there are clients with links to it. Two arguments must
# be supplied: the _path_, which is returned by the locate{} and
# load{} methods, and a _key_ argument, which is usually the name
# of the client. The key must be used to unlink from the model
# later on, and is used instead of a simple reference count
# because it is more reliable. This method raises an error
# if the key has already been used to link to the model. If the
# model is known but not loaded, load it. Return the model object.
#
body ::tycho::ModelRegistry::link {path key} {
    # Make sure it's known and loaded
    if ![exists $path] {
	error "Unknown model path \"$path\""
    }
    if { [attrget $path -object] == "" } {
        load $path
    }
    # Check for duplicate key
    set keys [attrget $path -keys]
    if { [lsearch -exact $keys $key] != -1 } {
        error "Key \"$key\" is already in use"
    }
    # Add the key
    lappend keys $key
    attrset $path -keys $keys
    return [attrget $path -object]
}

########################################################################
#### load
#
# Open a TIM model file and return the model. If _path_ is relative,
# or if the model has not been previously located, call locate{}
# to find the file containing the model and determine its
# attributes. If a model for the found file does not already exist,
# create the model and load its data from the file. If the model already
# exists, do nothing. Optional arguments are the same as for the
# locate{} method. Return the absolute path of the model, or null
# if the model was not found.
#
# After calling load{}, a client should call link{} to make
# sure that the model stays around while it is still interested
# in it.
#
body ::tycho::ModelRegistry::load {path args} {
    # Find the file if path is not absolute and canonical
    if { [::tycho::url pathtype $path] == "relative" || ![exists $path] } {
        set path [eval locate [list $path] $args]
    }
    if { $path == "" } {
        return ""
    }
    # If the model is not loaded, load it
    if { [attrget $path -object] == "" } {
        # Create the model
        set cls [attrget $path -class]
        set nm [::tycho::autoName [string tolower [namespaceTail $cls]]]
        set model [uplevel #0 $cls $nm]
 
        puts "Loading $cls $nm"

        # Load its data
        set fd [open $path]
        set data [read $fd]
        close $fd
        if [catch {
            $model parse $data
        } msg] {
            # Recovery: delete model
            # ::delete object $model

            # Re-throw error
            global errorInfo
            error $msg $errorInfo
        }
        
        # Remember the model (this must be after the call to parse{})
        attrset $path -object $model
        
        # Give the model name its name
        $model configure -modelname [attrget $path -modelname]
    }
    return $path
}

########################################################################
#### locate
#
# Locate a model. _path_ can be an absolute path or a relative path.
# If it is relative, the search path given by TIM_PATH and the
# <b>-searchpath</b> option are searched to find the file. If
# that file has not been located before, create a new instance of
# the model type and initialize all of its attributes, otherwise
# reinitialize the attributes of the existing instance. Return
# the absolute path of the model file, in a canonical form
# which must be passed to methods such as link{} and unlink{},
# or null if the model was not found.
# The following attributes of the model type will be recognized
# as options:
#   <dl>
#   <dt><b>-class</b> _classname_
#   <dd>
#   If not given, then this will be extracted from the header
#   of the TIM file.
#
#   <dt><b>-extension</b> _extension_
#   <dd>
#   If given, then it will be appended to _path_. If not given, it
#   will be extracted from _path_.
#
#   <dt><b>-searchpath</b> _pathlist_
#   <dd>
#   A list of paths to search to locate the model. The list of
#   paths will be prepended to the TIM_PATH variable.
#  </dl>
#
# Note that, unlike load{}, locate{} will always force the search
# path of the model to be rescanned.
#
body ::tycho::ModelRegistry::locate {path args} {
    array set opts $args

    # Make sure the model knows its relative path
    set opts(-modelname) $path

    # FIXME: use TIM_PATH from: environment? preferences?
    if [::info exists opts(-searchpath)] {
        set searchpath [concat $opts(-searchpath) \
                [::tycho::expandPath {$TYCHO}]]
    } else {
        set searchpath [::tycho::expandPath {$TYCHO}]
    }
    # Extension?
    if [::info exists opts(-extension)] {
        set path $path.$opts(-extension)
    }
    # Find the file, return if not found or unreadable
    set file [::tycho::urlPathSearch $path $searchpath]
    if { $file == "" || ![::tycho::resource readable $file] } {
        return ""
    }

    # Get the default suffix-based mode
    set filemode [::tycho::registry filemode $file]
    set opts(-mode) $filemode

    # Read the actual file header
    ::tycho::readFileHeader $file hdr
    foreach {o v} [array get hdr] {
        set opts(-$o) $v
    }

    # If there is no class, see if we can get one based on the
    # file mode
    if ![::info exists opts(-class)] {
        if [::info exists _modemap($opts(-mode))] {
            set opts(-class) $_modemap($opts(-mode))
        } elseif [::info exists _modemap($filemode)] {
            set opts(-class) $_modemap($filemode)
        }
    }
    if ![::info exists opts(-class)] {
        error "Could not figure out model class for $path"
    }

    # If there is no model item, create one
    if ![exists $file] {
        add model $file
    }
    # Configure it
    foreach {o _} [attrget $file] {
        if [::info exists opts($o)] {
            attrset $file $o $opts($o)
        }
    }
    return $file
}

########################################################################
#### register
#
# Register a class to be created to open a model file in a given
# mode.
#
body ::tycho::ModelRegistry::register {mode class} {
    if [::info exists _modemap($mode)] {
	error "Mode \"$mode\" is already registered"
    }
    set _modemap($mode) $class
}

########################################################################
#### reload
#
# Force a reload of a TIM model file. This may be needed in situations
# in which data is changed by a program other than Tycho and
# views in Tycho need to be updated to reflect the change.
# _path_ must the absolute path to the model's file as returned
# by the locate{} and load{} methods. If the model is not currently
# loaded, then it is simply loaded. Otherwise, the clear{} method of
# the model is called and the model is then loaded from the file. Finally,
# all subscribers to the model are notified of the "reload" event.
#
body ::tycho::ModelRegistry::reload {path} {
    # Make sure it's known 
    if ![exists $path] {
	error "Unknown model path \"$path\""
    }
    # If it's not loaded, just load it
    set model [attrget $path -object]
    if { $model == "" } {
        load $path
    } else {
        # Otherwise, clear it and reload
        # FIXME: revert options to defaults...
        $model clear
        set fd [open $path]
        set data [read $fd]
        close $fd
        $model parse $data

        # Publish the fictional "reload" event
        $model notify event "reload"
    }
}

########################################################################
#### unlink
#
# Unlink from a model. _path_ must the absolute path to the model's
# file as returned by the locate{} and load{} methods. _key_ must be
# a key that was previously used to link to the model, or an error
# is raised. If no clients are linked to the model, the model object
# is deleted.
#
body ::tycho::ModelRegistry::unlink {path key} {
    # Make sure it's known 
    if ![exists $path] {
	error "Unknown model path \"$path\""
    }
    # Get keys and check
    set keys [attrget $path -keys]
    if { [set t [lsearch -exact $keys $key]] == -1 } {
        error "Key \"$key\" is unknown"
    }
    # Delete the key
    set keys [lreplace $keys $t $t]
    attrset $path -keys $keys

    # If there are no linked clients, delete the model
    if { $keys == "" } {
        ::delete object [attrget $path -object]
        attrset $path -object ""
    }
}
