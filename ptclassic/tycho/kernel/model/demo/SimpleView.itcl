##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

##########################################################################
#### SimpleView
#
# SimpleView is a view that illustrates the model-view architecture.
# It is a display of the contents of an instance of the#
# <a href="SimpleModel">SimpleModel</a> class.
#
# Here are some examples illustrating the model-view architecture.
# Firstly, create the model and give it some data:
# <pre><tcl>
#     catch {delete object $model}
#     set model [::tycho::SimpleModel #auto]
#     $model type configure item -foo bar
#     $model parse {
#         # An item with no data
#         item a
#         # An item with attributes
#         item b -foo "Hello!" -color green
#         # This item has items inside it
#         item c -foo "I am nested" {
#             item x
#             item y -bar far
#         }
#     }
# </tcl></pre>
#
# Now, create two instances of the SimpleView class.
# Usually, we would use the
# <b>::tycho::view</b> procedure to place these views
# into a Displayer, but to keep this example portable,
# here we will just pack them into top-level windows.
# <pre><tcl>
#     catch {destroy .t1 .t2 .t1.v .t2.v}
#     toplevel .t1
#     toplevel .t2
#     set view1 [::tycho::SimpleView .t1.v]
#     set view2 [::tycho::SimpleView .t2.v]
#     pack $view1 -fill both -expand on
#     pack $view2 -fill both -expand on
# </tcl></pre>
# 
# Tell each instance which model it is viewing. This will cause
# the view to intialise itself with the data in the model.
# <pre><tcl>
#     $view1 configure -model $model
#     $view2 configure -model $model
# </tcl></pre>
#
# Now, subscribe each view to the model. The view is subscribed
# to "data" with the tag <b>all</b> to indicate that the view
# is to be notified whenever any data changes. Normally,
# this would be done in the view, but we have taken the
# code out for the sake of this example:
# <pre><tcl>
#     $model subscribe data $view1 all
#     $model subscribe data $view2 all
# </tcl></pre>
#
# Now, any changes made to the model via the <b>publish</b> command
# will be reflected in both views. For example, change the -foo
# attribute of item <b>a</b>:
# <pre><tcl>
#     $model publish attrset item:a -foo Yeehah!
# </tcl></pre>
#
# What this does is cause the model to look for subscribers
# interested in item <b>a</b>, Since both views have subscribed
# to "all" data, both will have their <b>notify</b> methods called
# with (in this case) the arguments <b>item:a attrset -foo Yeehah!</b>.
# The notify method of SimpleView must take appropriate action --
# in this case, changing the displayed value.
#
# Change data in one view and click on the other to see this.
#
class ::tycho::SimpleView {
    inherit ::itk::Widget

    public variable model "" {
        if { $model != "" } {
            _initialize
        }
    }

    constructor {args} {}
    destructor {}

    method _initialize {{context {}} {row 0}}
    method notify {type command name args}

    method apply {{context {}}}
    method undo {}
    method redo {}
}

########################################################################
#### constructor
#
body ::tycho::SimpleView::constructor {args} {
    # Frame for the data
    itk_component add data {
        frame $itk_interior.data -borderwidth 2 -relief raised
    }
    # Frame for the buttons
    itk_component add buttons {
        frame $itk_interior.buttons -borderwidth 2 -relief raised
    }
    pack $itk_interior.data $itk_interior.buttons \
            -fill both -expand on -side top

    # Buttons
    foreach {button label command} {
        undo Undo "$this undo"
        redo Redo "$this redo"
        apply Apply "$this apply"
        close Close "delete object $this"
    } {
        itk_component add $button {
            button $itk_component(buttons).$button \
                    -text $label \
                    -command [subst $command]
        }
        pack $itk_component($button) -side left
    }
    # Evaluate options
    eval itk_initialize $args
}

########################################################################
#### _initialize
# Initialize the display from a model.
#
body ::tycho::SimpleView::_initialize {{context {}} {row 0}} {
    # Get the containing widget
    set p {}
    foreach seg $context {
        regexp {.*:(.*)} $seg _ nm
        lappend p $nm
    }
    set name [join $p .]
    set path [string trimright $itk_component(data).$name .]

    # Add items
    foreach i [$model match item $context] {
        # Create a frame for this item
        set nm [string trimleft $name.$i .]
        itk_component add $nm {
            frame $path.$i
        }
        grid $path.$i -row $row -column 2 -sticky nsew

        # Column 1 contains attribute labels: allow it to expand
        grid columnconfigure $path.$i 1 -weight 1

        # Create its label
        itk_component add $nm.label {
            label $path.$i.label -text $i 
        }
        grid $path.$i.label -row 0 -column 0

        # Process each attribute
        set attrrow 0
        foreach {attr val} [$model attrset [concat $context item:$i]] {
            # Create a label
            itk_component add $nm.label$attr {
                label $path.$i.label$attr -text $attr -foreground blue
            }
            grid $path.$i.label$attr -row $attrrow -column 1 -sticky e

            # Create an entry widget
            itk_component add $nm.entry$attr {
                entry $path.$i.entry$attr
            }
            $path.$i.entry$attr insert 0 $val
            grid $path.$i.entry$attr -row $attrrow -column 2

            incr attrrow
        }
        # Process nested items. Repeat after me: I love
        # recursion, I love...
        if { [$model match item [concat $context item:$i]] != "" } {
            _initialize [concat $context item:$i] $attrrow
            incr attrrow
        }

        # Add space at the end
        # grid rowconfigure $path.$i $attrrow -minsize 12

        # Next row
        incr row
    }
}

########################################################################
#### apply
#
body ::tycho::SimpleView::apply {{context {}}} {
    # Get the containing widget
    set p {}
    foreach seg $context {
        regexp {.*:(.*)} $seg _ nm
        lappend p $nm
    }
    set name [join $p .]

    # Process items
    foreach i [$model match item $context] {
        set nm [string trimleft $name.$i .]
        # Process each attribute
        foreach {attr val} [$model attrset [concat $context item:$i]] {
             if { $val != [$itk_component($nm.entry$attr) get] } {
                # Different value, so update the model
                $model publish attrset [concat $context item:$i] \
                        -attr [$itk_component($nm.entry$attr) get]
            }
        }
        # Process nested items.
        if { [$model match item [concat $context item:$i]] != "" } {
            apply [concat $context item:$i]
        }
    }
}

########################################################################
#### notify
# Process a notification from the model.
#
body ::tycho::SimpleView::notify {command name args} {
    puts [list notify $command $name $args]

    # Figure out the containing widget name
    set p {}
    foreach seg $name {
        regexp {.*:(.*)} $seg _ nm
        lappend p $nm
    }
    set name [join $p .]
    set path [string trimright $itk_component(data).$name .]

    # Now switch on the command
    switch -exact -- $command {
        "attrset" {
            # Attributes changed
            foreach {attr val} $args {
                if [::info exists itk_component($nm.entry$attr)] {
                    # Attribute already exists
                    $itk_component($name.entry$attr) delete 0 end
                    $itk_component($name.entry$attr) insert 0 $val
                } else {
                    set row [lindex [grid size $path] 1]

                    # Attribute added. Create a label
                    itk_component add $name.label$attr {
                        label $path.label$attr -text $attr -foreground blue
                    }
                    grid $path.label$attr -row $row -column 1 -sticky e
                    
                    # Create an entry widget
                    itk_component add $name.entry$attr {
                        entry $path.entry$attr
                    }
                    $path.entry$attr insert 0 $val
                    grid $path.entry$attr -row $row -column 2
                }
            }
        }
        "assign" {
            # Change all item attributes
        }
    }               
}

########################################################################
#### undo
#
body ::tycho::SimpleView::undo {} {
    $model undo
    #if [$model mark compare first == current] {
    #    # No more undo commands
    #    $itk_component(undo) configure -state disabled
    #}
    #$itk_component(redo) configure -state normal
}

########################################################################
#### redo
#
body ::tycho::SimpleView::redo {} {
    $model redo
    #if [$model mark compare current == last] {
    #    # No more redo commands
    #    $itk_component(redo) configure -state disabled
    #}
    #$itk_component(redo) configure -state normal
}

