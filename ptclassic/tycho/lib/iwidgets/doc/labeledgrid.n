.so man.macros
.HS iwidgets::Labeledgrid iwid
.BS
.SH NAME
iwidgets::Labeledgrid \- Create a grid of labeled widgets
.SH SYNOPSIS
\fBiwidgets::Labeledgrid\fI \fIpathName\fR ?\fIoptions\fR?
.SH "INHERITANCE"
itk::Widget <- iwidgets::Labeledgrid
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 4c 8c 12c
\fBbackground\fR	\fBcursor\fR	\fBfont\fR	\fBdisabledForeground\fR
\fBforeground\fR	\fBhighlightColor\fR	\fBhighlightThickness\fR
.fi
.LP
See the "options" manual entry for details on the standard options.
.SH "WIDGET-SPECIFIC OPTIONS"
.LP

.nf
Name:	\fBchildColumnSpan\fR
Class:	\fBChildColumnSpan\fR
Command-Line Switch:	\fB-childcolumnspan\fR
.fi
.IP
The default column span of top-level items. If zero, the item will
span all remaining columns of the grid. The default is zero.
Changing this option only affects the default column span of
items subsequently added to the grid, not of items already added. 
.LP
 
.nf
Name:	\fBchildStyle\fR
Class:	\fBChildStyle\fR
Command-Line Switch:	\fB-childstyle\fR
.fi
.IP
The default style of top-level items. The default is "simple".
.LP
 
.nf
Name:	\fBcolumnSpan\fR
Class:	\fBColumnSpan\fR
Command-Line Switch:	\fB-columnspan\fR
.fi
.IP
The column span in the grid. The default is four. Changing
this option only affects the layout of items subsequently added
to the grid, not of items already added.
.LP
 
.nf
Name:	\fBlabelAnchor\fR
Class:	\fBAnchor\fR
Command-Line Switch:	\fB-labelanchor\fR
.fi
.IP
The default anchoring of the text labels in the \fBsimple\fR
style. The value of this option is passed directly to the
\fB-sticky\fR option of the Tk \fBgrid\fR command. It can be
overridden for individual widgets and labels by calling the \fBgrid
configure\fR command with the Tk widget path as argument.
.LP

.nf
Name:	\fBentryBackground\fR
Class:	\fBBackground\fR
Command-Line Switch:	\fB-entrybackground\fR
.fi
.IP
The background color used in entry and text widgets.
.LP

.nf
Name:	\fBlabelForeground\fR
Class:	\fBForeground\fR
Command-Line Switch:	\fB-labelforeground\fR
.fi
.IP
The foreground color of the text labels.
.LP
 
.nf
Name:	\fBlabelFont\fR
Class:	\fBFont\fR
Command-Line Switch:	\fB-labelfont\fR
.fi
.IP
The font of the text labels.
.LP
 
.nf
Name:	\fBpadX\fR
Class:	\fBPadX\fR
Command-Line Switch:	\fB-padx\fR
.fi
.IP
The horizontal padding to use when gridding widgets. Widgets
are gridded with the \fB-padx\fR option to the Tk \fBgrid\fR command
set to this value. This option is read only when items are
first added to the grid, and will thus not affect items
already added.
.LP

.nf
Name:	\fBpadY\fR
Class:	\fBPadY\fR
Command-Line Switch:	\fB-pady\fR
.fi
.IP
The horizontal padding to use when gridding widgets. Widgets
are gridded with the \fB-pady\fR option to the Tk \fBgrid\fR command
set to this value.
.LP

.BE
.SH DESCRIPTION

The \fIlabeledgrid\fR command creates a grid of labeled widgets for
user input, such as entry fields, radiobuttons and checkbuttons,
option menus, and so on. It uses the Tk \fBgrid\fR geometry manager
to implement the principles of alignment and grid-based design
described in the book "Designing Visual Interfaces: Communication
Oriented Techniques", by Kevin Mullet and Darrell Sano, SunSoft Press,
1995.
.PP
Mullet and Sano propose that widget layouts use a canonical grid,
which is a 12-column grid that can be used to divide a window
into one, two, three, four, or six columns. The layout within each
window uses different combinations of these columns to produce a
pleasing and readable layout. Mullet and Sano's examples generally
use the left column for labels -- Labeledgrid supports this as its default
mode, but also adds other display styles, such as labeled bounding
boxes.
.PP
Labeledgrid views a grid as being divided into groups, where each group
contains labeled widgets, or other groups. All widgets are
placed into the same layout grid, however, ensuring that alignment is
achieved even between logical groups. Groups can be contained within
other groups, to arbitrary depth, and the widget as a whole is best
thought of as the top-level group. Each group and widget has
its own label and border, as selected by the display style of
that group or widget (see \fIDISPLAY STYLES\fR below).
.PP
A group has a number of options that control layout (at the top
level, they are specified by options to the widget, at lower levels,
by options to the \fBgroup\fR method). The \fB-columnspan\fR
option, for example, is the width occupied by items within the
group, not including rows or columns needed for labels and borders.
Adding items to a group places
the new item at the position determined by the current row and
column counters of that group. When the \fB-columnspan\fR of the
group is reached, the counters move to the next row. The default
values of these layout options are chosen to make is easy to
produce a simple layout, and possible to produce a complex one.\
Each group also has a \fB-childcolumnspan\fR option, which specifies
the defaullt column span of children; the option can be overridden
when a particular child is created.
.PP
One of the unique features of Labeledgrid is its ability to perform
standard operations on widgets regardless of what type they are.
The operations are: setting the current value, reading the current
value, enabling and disabling user input, and creating and deleting
the widget. This makes access to user input very simple for
client programs, and relieves them of any need to understand
particular widgets.
.PP
Labeledgrid provides a useful set of widgets for placing into a layout,
including entry and text fields, radio buttons and check buttons,
and option menus. However, since the number of different kinds of
widget that could be placed into a Labeledgrid window is potentially
unlimited, the \fBnewtype\fR procedure is provided so that new
widget types can be added to Labeledgrid's collection of known widget types.

.SH "ITEM TYPES"

By default, Labeledgrid recognises the following widget types:
.TP
\fBcheckbutton\fR
A Tk checkbutton. Checkbuttons can usefully be placed into groups,
as well as being labeled individually.
.TP
\fBentry\fR
A Tk entry widget.
.TP
\fBlabeledgrid\fR
A nested labeled grid widget. This is used if alignment must
\fInot\fR be preserved between the new grid's contents and
its containing grid. Usually, this occurs only when there are
alignment problems caused by the fact that borders use up
whole columns or rows of the grid.
.TP
\fBoptionmenu\fR
An Iwidgets optionmenu.
.TP
\fBradiobutton\fR
A Tk radiobutton. Radiobuttons are usually used within
a shared item group.
.TP
\fBtext\fR
A Tk text widget.
.TP
\fB\fItype\fR\fR

A widget of some other type. New types can be added to the Labeledgrid
class with the \fBnewtype\fR procedure, and can then be created
in the same way as the built-in item types.
.PP
Widgets are added to Labeledgrid with the \fBadd\fR method. This method
accepts any options that are valid for the particular widget type,
and the following:
.TP
\fB-label\fR \fIstring\fR
 The text to place in the item label. The default is null.
This option is ignored by the \fBplain\fR display style.
.TP
\fB-columnspan\fR \fIint\fR
 The number of columns to be spanned
by the created widget, not including any borders. The default is
the \fB-childcolumnspan\fR of the parent group.
.TP
\fB-initial\fR \fIvalue\fR
 The initial value assigned to this widget. If the widget is
within a shared group, this option will be ignored.
.TP
\fB-sticky\fR \fIstring\fR
 The "stickiness" of the widget within the grid. This option
will be passed to the \fBgrid configure\fR command. The default is
the \fB-sticky\fR option specified for its type.
.TP
\fB-style\fR \fIstring\fR
 The display style of the item. See \fIDISPLAY STYLES\fR
below. The default value is the \fB-childstyle\fR option of
the item's parent.


.SH "ITEM GROUPS"

A new group of items is added to Labeledgrid with the \fBgroup\fR method.
Groups accept many of the same options as regular items, and can
have labels and bounding boxes. Items within a group have hierarchical
tags; for example, the item \fBfoo.bar\fR is within the group
\fBfoo\fR. Groups accept the following options:
.TP
\fB-childcolumnspan\fR \fIint\fR
 The default value of the \fB-columnspan\fR option of the
group's children. The default is one.
.TP
\fB-childstyle\fR \fIstring\fR
 The default value of \fB-style\fR option of the group's children.
The default is \fRplain\fR
.TP
\fB-column\fR \fIint\fR
 The start column of the group, as an absolute
value (in other words, the column is not relative to the start of the
parent group). This is the first column that will be used for any
component of the group, including its label or border. This option
should be used sparingly, if at all. The default is the current column
counter of its parent group.
.TP
\fB-columnspan\fR \fIint\fR
 The number of columns spanned by the
group. This includes the label and borders of child items but does
\fInot\fR include the labels and borders of the group itself.
The default is the \fB-childcolumnspan\fR of its parent group, or the
number of columns remaining with the parent group, whichever is
smallest.
.TP
\fB-initial\fR \fIvalue\fR
 If not null, the initial value of a
variable created for the whole group. In this case, all items in
the group are given a shared variable rather than individual ones,
and the value of the group will be the value of this variable.
This is most useful for radiobutton groups. If this option is null,
each item will get its own variable and the value of the
group will be a compsite of the values of each child item.
.TP
\fB-label\fR \fIstring\fR
 The text to place in the group's label.
This option is ignored by the \fBplain\fR display mode.
.TP
\fB-row\fR \fIint\fR
 The start row of the group, as an absolute
value (in other words, the row is not relative to the start of the
parent group). This is the first row that will be used for any
component of the group, including its label or border. This option
should be used sparingly, if at all. The default is the current row
counter of its parent group.
.TP
\fB-rowspan\fR \fIint\fR
 The number of rows spanned by the
group. This includes the label and borders of child items but does
\fInot\fR include the labels and borders of the group itself.
If zero, the group expands until the next sibling item
is added. The default is one.
.TP
\fB-style\fR \fIstring\fR
 The display style of the group. See \fIDISPLAY STYLES\fR
below. The default value is the \fB-childstyle\fR option of
the group's parent.

.SH "ADDING NEW TYPES"

Labeledgrid provides a mechanism for defining new item types. For each
of the operations it supports on its items, it has a small script
that it evaluates to perform this action. These scripts are added
to the Labeledgrid class with the \fBnewtype\fR procedure, which accepts
a number of options that specify the scripts that Labeledgrid evaluates
to perform operations on items of the new type. These options are:

.TP
\fB-assign\fR
 The script to assign a value to an item. If null, an attempt to assign
a value will raise an error. The default is \fB{set %v %a}\fR.
.TP
\fB-create\fR
 The script to create an item. An error will be raised if this
option is not specified.
.TP
\fB-delete\fR
 The script to delete an item. The default is \fB{destroy %w}\fR.
If null, an error will be raised on an attempt to delete that type.
.TP
\fB-disable\fR
 Disable user input to the item. If null, the type cannot be disabled.
The default is \fB{%w configure -state disabled}\fR.
.TP
\fB-enable\fR
 Enable user input to the item. If null, the widget cannot be enabled.
The default is \fB{%w configure -state normal}\fR.
.TP
\fB-get\fR
 Get the item's value. If null, the item will not appear in the
results of any value-getting methods. The default is \fB{set %v}\fR.
.TP
\fB-options\fR
 A string passed as the second argument to \fBitk_component add\fR
when the widget is created. The default is \fB{usual}\fR, which will
cause the following option-handling command to be used:
.DS
keep -font -background -cursor \
    -disabledforeground -foreground \
    -highlightthickness -highlightcolor
.DE
.TP
\fB-sticky\fR
 The default "stickiness" of widget of thos type.

.PP
Before evaluating a script, Labeledgrid performs the following
substitutions:
.IP
\fB%a\fR is substituted with additional arguments.
.IP
\fB%x\fR is substituted with the assigned value (assign only).
.IP
\fB%t\fR is substituted with the item tag.
.IP
\fB%v\fR is substituted with the control variable.
.IP
\fB%w\fR is substituted with the widget path.
.IP
\fB%Q\fR is substituted with the Labeledgrid widget.

.SH "DISPLAY STYLES"

Labeledgrid supports several display styles. A display style is simply
a combination of label position and item border. Different display
styles can be mixed, although this should of course be done with care
and there are some caveats (note that the default behaviour of Labeledgrid
is to use the same display style for every item within a group.)
Depending on the style, zero or more rows or columns of the grid
may be used, in addition to the rows and columns required to display
the item itself. The display styles are:
.TP
\fBplain\fR
There is no label or border, and no additional rows or columns
are used. This style is generally used for groups of radiobuttons
or checkbuttons. It can also be used for items that need to
occupy the same row as another item, but without its own label,
and as a way of grouping related widgets without any explicit
visual structure.
.TP
\fBsimple\fR
The label is drawn in the column to the left of the item. The label
anchor is given by the \fB-labelanchor\fR widget option.
There is no border drawn around the item. This style uses one additional
row. This is the style used in the examples in Mullet and Sano's book.
.TP
\fBboxed\fR
The label is drawn in the row above the item, and a border is drawn
around the whole item. An additional row or column on all four
sides is required for the border and label. This style is
very popular but shouldn't be used to the point of
cluttering the layout. Mullet and Sano comment: "While the practice
is encouraged by many environments, it should be used with restraint,
since explicit structure is a very poor substitute for effective
spatial segregation." (p110).
.TP
\fBseparated\fR
The label is drawn in the row above the item, and a horizontal line
line spanning its width drawn under the label. This is useful for
separating large dialog boxes into two or three distinct vertical
regions. It uses a row for the separator line and a column to the
left of the item for spacing.
.PP
The default behavior of Labeledgrid is to give top-level items the
\fBsimple\fR style, and items within those the \fBplain\fR
style -- plain and simple...

.SH "CAVEATS"

Labeledgrid is designed to make it easy to construct designed
layouts. It provides no support for changing an existing layout.
Although layouts can be moved around by directly calling the Tk
\fBgrid\fR command, this is unlikely to be very reliable.
.PP
There are also some caveats associated with mixing different display styles
within the same grid. Firstly, the \fB-columnspan\fR and \fB-rowspan\fR
options of groups need to take into account the display styles of
children. If display styles in an existing layout are changed, the
options may need tweaking to get the layout right again. Secondly, since
labels and borders use up whole rows or columns of the grid, some care
needs to be taken to avoid placing items within the same column (for
example) as a border in another part of the layout. A workaround is simply
to recursively create Labeledgrid widgets: alignment isn't preserved
between a nested labeled grid and the containing labeledgrid.

.SH "METHODS"

The \fBiwidgets::labeledgrid\fR command creates a new Tcl command whose
name is \fIpathName\fR.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
.DS C
\fIpathName option \fR?\fIarg arg ...\fR?
.DE
\fIOption\fR and the \fIarg\fRs
determine the exact behavior of the command.  The following
commands are possible for iwidgets::Labeledgrid widgets:
.SH "ASSOCIATED PROCEDURE"
.TP
\fBiwidgets::Labeledgrid::newtype\fR \fItype\fR ?\fIoption value ...\fR?

Add a new item type to the Labeledgrid class. The first argument is
the item type that will be passed to the \fBadd\fR method.  It is
usually the same as the widget command, but there is no need for it to
be. Following arguments are an option-value list, where legal options
are as described in the section \fIADDING NEW TYPES\fR above.
This procedures raises an error if the _type_ already exists, or if an
invalid option is specified.

.SH "WIDGET-SPECIFIC METHODS"

.TP
\fIpathName\fR \fBadd\fR \fItype tag\fR ?\fIoption value ...\fR?

Add a new item to the grid. The first argument is type of widget to
create. This is followed by the \fItag\fR that will be used to
reference the widget, then an option-value list. The options can be
any that are valid for the widget type \fItype\fR, plus options that
specify labeling and positioning information, as described in the
section \fIItem Types\fR above. For each item, a variable is created
that can be used to hold its value, which can be accessed within
control scripts as \fB%v\fR.
.TP
\fIpathName\fR \fBassign\fR \fItag value\fR
 
Assign a value to an item. If the item is a group with a shared
variable, the value is be assigned to the shared variable. If the
group is not shared, the value must be a list of name-value pairs,
where each name is relative to \fItag\fR. Each group member that
appears in the list is assigned the corresponding value. If assignment
is supported for the item's type, assign \fIvalue\fR to the item; if
assignment is not supported, raise an error. Raise an error if
\fItag\fR does not exist.
.TP
\fIpathName\fR \fBdelete\fR \fItag\fR

Delete an item. If the item is a group, all members of the group will
also be deleted. Raise an error if \fItag\fR does not exist, or if
deletion is not supported for its type.
.TP
\fIpathName\fR \fBdisable\fR \fItag\fR

Disable an item. If the item is a group, all members of the group
will also be disabled. Raise an error if \fItag\fR does not exist.
.TP
\fIpathName\fR \fBenable\fR \fItag\fR

Enable an item. If the item is a group, all members of the group
will also be enabled. Raise an error if \fItag\fR does not exist.
.TP
\fIpathName\fR \fBexists\fR \fItag\fR

Return one if \fItag\fR is an item in this Query widget, otherwise
zero.
.TP
\fIpathName\fR \fBget\fR ?\fItag\fR?

Get the value of one or more items. If \fItag\fR is a widget, return
that item's value, or null if getting the value is not supported for
the item's type. If \fItag\fR is a group with a shared variable,
return the value of the shared variable. If \fItag\fR is any other
group, return a name-value list of its members, where each name is
relative to \fItag\fR. If \fItag\fR is not supplied, return a
name-value list of all top-level items. Raise an error if \fItag\fR is
supplied but is not an item.
.TP
\fIpathName\fR \fBgroup\fR \fItag\fR ?\fIoption value\fR?

Add a group. Options are as described in \fIItem Groups\fR above.
Raise an error if an item with that tag already exists.
.TP
\fIpathName\fR \fBhskip\fR ?\fIgroup\fR? ?\fIoption value\fR?

Skip a column. If \fIgroup\fR is supplied, it is the name of the group
within which to skip; if it is not supplied, the skip takes place at
the top level. The current row counter is incremented by one; if this
takes the counter past the end of the group, \fBvskip\fR is called to
move to the next row. Following arguments are an option-value list:
these can be any options supported by the Tk \fBgrid
columnconfigure\fR command are supported -- that is, \fB-minsize\fR,
\fBpad\fR, and \fB-weight\fR. The options will be applied to the
current column before the skip. Note that these options will affect
the grid used by all items, not just the grid with the given group.
.TP
\fIpathName\fR \fBvskip\fR ?\fIgroup\fR? ?\fIoption value...\fR?

Skip a row. If \fIgroup\fR is supplied, it is the name of the group
within which to skip; if not supplied, the skip is at the top
level. The current row counter is incremented by the row span of the
item in the current row with the largest row span, and the current
column counter is reset to the start column of the group.  Following
arguments are an option-value list.  Legal options options are those
supported by the Tk \fBgrid rowconfigure\fR command are supported --
that is, \fB-minsize\fR, \fBpad\fR, and \fB-weight\fR. These will
applied to the current row before skipping. Note that these options
will affect the grid used by all items, not just the grid with the
given group.

.SH "COMPONENTS"
\fILabeledgrid\fR dynamically creates components as widgets and
groups are added to the grid.
.LP
.nf
Name:	\fItag\fR
Class:	\fIwidgetclass\fR
.fi
.IP
A widget. The \fItag\fR item is the tag passed to the \fBadd\fR method
when the widget was created. Note that if \fItag\fR is a group, there
will be component named \fItag\fR.
.LP
.nf
Name:	\fItag\fR\fBframe\fR
Class:	\fBFrame\fR
.fi
.IP
A frame that is used in the \fBseparated\fR and \fBboxed\fR display
styles to contain the border and label.
.LP
.nf
Name:	\fItag\fR\fBlabel\fR
Class:	\fBLabel\fR
.fi
.IP
The label of a widget or group, created in the \fBsimple\fR,
\fBseparated\fR and \fBboxed\fR display styles. See the "label" widget
manual entry for details.
.LP
.nf
Name:	\fItag\fR\fBborder\fR
Class:	\fBFrame\fR
.fi
.IP
A border in the \fBseparated\fR and \fBboxed\fR display styles. This
is a Tk frame -- see the "label" widget manual entry for details.
.fi

.SH EXAMPLE
.DS
_EXAMPLE_CODE_
.DE
.SH AUTHOR
John Reekie,  johnr@eecs.berkeley.edu

.SH ACKNOWLEDGMENTS

Based on the tycho::Query widget by Prof.  Edward A.  Lee of UC Berkeley.  
iwidgets::Labeledgrid adds more structured grid placement, different 
display styles, and the facility to support arbitrary widget types.  
Original author is Prof.  Edward A.  Lee; additional contributions by Joel 
R.  King, Bilung Lee, Christopher Hylands, Seehyun Kim, and Mark L.  
Ulferts.  Labeledgrid is contributed to [incr Widgets] by the Tycho project 
at UC Berkeley: http://ptolemy.eecs.berkeley.edu/tycho.

.SH KEYWORDS
labeledgrid, grid, widget

