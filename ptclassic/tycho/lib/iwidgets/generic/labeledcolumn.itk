#
# Labeledcolumn
# ----------------------------------------------------------------------
# The Labeledcolumn class implements a column of labeled widgets. It is
# generally used to layout widgets for user inputs, such as entry fields,
# radiobuttons and checkbuttons, option menus, and so on. It uses the
# Tk <b>grid</b> geometry manager to do the layout.
#
## WISH LIST:
#   This section lists possible future enhancements.  
#
#   1) The iwidgets optionmenu won't take the focus. Maybe it should, so
#      you could use cursor keys to change the selection.
#
# ----------------------------------------------------------------------
#  AUTHOR: H. John Reekie              EMAIL: johnr@eecs.berkeley.edu
#
#  Based on the tycho::Query widget by Prof. Edward A. Lee of UC Berkeley.
#  iwidgets::Labeledcolumn adds the facility to support arbitrary widget
#  types. Original author is  Prof. Edward A. Lee; additional contributions
#  by Joel R. King, Bilung Lee, Christopher Hylands, Seehyun Kim, and Mark
#  L. Ulferts. Labeledcolumn is contributed to [incr Widgets] by the Tycho
#  project at UC Berkeley: http://ptolemy.eecs.berkeley.edu/tycho.
#
#  @(#)labeledcolumn.itk	1.2 04/29/98
# ----------------------------------------------------------------------
#
# Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#
# Usual options.
#
itk::usual Labeledcolumn {
    keep -font -background -cursor \
    	-disabledforeground -foreground \
    	-highlightthickness -highlightcolor
}

# ------------------------------------------------------------------
##                            LABELEDCOLUMN
# ------------------------------------------------------------------
#
# The Labeledcolumn class implements a column of labeled widgets. It is
# generally used to layout widgets for user inputs, such as entry fields,
# radiobuttons and checkbuttons, option menus, and so on. It uses the
# Tk <b>grid</b> geometry manager to do the layout, and stacks widgets
# one above the other, with a label placed to the left of each widget.
#
# Labeledcolumn inherits from Labeledgrid. It restricts the layout
# so that top-level items are always drawn in the "simple" style. This
# provides significant performance improvements for simple layouts. It also
# adds the "radiogroup" and "checkgroup" types, which make Labeledcolumn
# better suited to automatically-generated layouts than its superclass.
# ------------------------------------------------------------------
class iwidgets::Labeledcolumn {
    inherit iwidgets::Labeledgrid
    
    constructor {args} {}
    destructor {}
    
    method add {type id args}
    method group {args}
    method hskip {args}
    
    private method _checkgroup {id args}
    private method _radiogroup {id args}
    
    private variable _row 0       ;# current grid row

}

#
# Use option database to override default resources.
#
# option add *Labeledcolumn.thickness 3 widgetDefault ???

#
# Provide a lowercase access method for the Labeledcolumn class.
#
proc ::iwidgets::labeledcolumn { path args } {
    # Create widget
    uplevel ::iwidgets::Labeledcolumn $path $args
}


# ------------------------------------------------------------------
##                        CONSTRUCTOR
# ------------------------------------------------------------------
body iwidgets::Labeledcolumn::constructor {args} {
    # Evaluate options
    eval itk_initialize $args
}


# ------------------------------------------------------------------
##                             OPTIONS
# ------------------------------------------------------------------


# ------------------------------------------------------------------
##                             METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
## METHOD: add type id ?option value...? 
#
# Add a new widget to the column. The first argument is the widget type,
# and is followed by the unique id and an option-value list.
# Options can be any valid for _type_ plus those listed in the docs.
# The special types <b>checkgroup</b> and <b>radiogroup</b> are also
# recognized.
# ------------------------------------------------------------------
body iwidgets::Labeledcolumn::add {type id args} {
    if [::info exists _type($id)] {
        error "Item already exists: \"$id\""
    }
    # Check the two "special" types
    if { $type == "radiogroup" } {
        return [eval _radiogroup $id $args]
    } elseif { $type == "checkgroup" } {
    	return [eval _checkgroup $id $args]
    }
    # Check valid regular type
    if ![::info exists _create($type)] {
        error "Unknown item type \"$type\": must be one of \
                [join [array names _create] {, }]"
    }
    
    # Remember key parameters
    set _type($id) $type
    set path $itk_interior._[incr itemCounter]
    lappend _children() $id

    # Extract options
    array set opts [list \
            -initial {} \
            -label {} \
            -sticky $_sticky($type) ]
    array set opts $args
    
    set value  $opts(-initial)
    set label  $opts(-label)
    set sticky $opts(-sticky)
    
    unset \
            opts(-initial)  \
            opts(-label) \
            opts(-sticky)
    set args [array get opts]

    # Create the label
    itk_component add ${id}label {
        label $itk_interior._[incr itemCounter] -text $label
    } {
        keep -background -cursor
        rename -font -labelfont labelFont Font
        rename -foreground -labelforeground labelForeground Foreground
    }
    grid $itk_component(${id}label) \
            -row $_row \
            -column 0 \
            -sticky $itk_option(-labelanchor)

    # Create the variable that holds the value
    set var "@scope ::iwidgets::Labeledgrid $id$unique"

    # Create the widget and add as a component
    eval $_create($type)
    itk_component add $id {set path} $_options($type)

    # Grid it
    grid $path \
            -row $_row \
            -column 1 \
            -columnspan $itk_option(-childcolumnspan) \
            -sticky $sticky \
            -padx $itk_option(-padx) \
            -pady $itk_option(-pady)

    # Adjust counters
    incr _row

    # Set its initial value if the value is supplied
    if { $value != "" } {
        eval $_assign($type)
    }
}

# ------------------------------------------------------------------
## METHOD: group
#
# The group method is disabled.
# ------------------------------------------------------------------
body iwidgets::Labeledcolumn::group {args} {
	error "disabled method: \"group\""
}

# ------------------------------------------------------------------
## METHOD: hskip
#
# The hskip method is disabled.
# ------------------------------------------------------------------
body iwidgets::Labeledcolumn::hskip {args} {
	error "disabled method: \"hskip\""
}

# ------------------------------------------------------------------
##                           PRIVATE METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
## METHOD: _checkgroup id  ?option value ...? {id value label ...}
#
# Create a group of checkbuttons.
# ------------------------------------------------------------------
body iwidgets::Labeledcolumn::_checkgroup {id args} {
    # Remember key parameters
    set _type($id) group
    lappend _children() $id

    # Extract options
    set buttons [lindex $args end]
    set args [lreplace $args end end]
    array set opts {-label {}}
    array set opts $args
    set label $opts(-label)
    unset opts(-label)
    set args [array get opts]

    # Create the label
    itk_component add ${id}label {
	label $itk_interior._[incr itemCounter] -text $label
    } {
	keep -background -cursor
	rename -font -labelfont labelFont Font
	rename -foreground -labelforeground labelForeground Foreground
    }
    grid $itk_component(${id}label) \
	    -row $_row \
	    -column 0 \
	    -sticky $itk_option(-labelanchor) \
	    -pady $itk_option(-pady)

    # Create the checkbuttons
    set i 1
    foreach {button init label} $buttons {
	# Create the checkbutton
	set path $itk_interior._[incr itemCounter]
	set "@scope ::iwidgets::Labeledgrid $id.$button$unique" $init
	itk_component add $id.$button {
            eval ::checkbutton $path $args [list \
                    -variable "@scope ::iwidgets::Labeledgrid $id.$button$unique" \
                    -label $label]
        }
	# Grid it
	grid $path \
		-row $_row \
		-column $i \
		-sticky w \
		-padx $itk_option(-padx)
	
	# Adjust counters
	if { [incr i] == $itk_option(-childcolumnspan) } {
	    set i 1
	    incr _row
	}
    	lappend _children($id) $id.$button
    }
    if { $i != 1 } {
	incr _row
    }
}

# ------------------------------------------------------------------
## METHOD: _radiogroup id  ?option value ...? {id label ...}
#
# Create a group of radiobuttons.
# ------------------------------------------------------------------
body iwidgets::Labeledcolumn::_radiogroup {id args} {
    # Remember key parameters
    set _type($id) group
    lappend _children() $id

    # Extract options
    set buttons [lindex $args end]
    set args [lreplace $args end end]
    
    array set opts {-label {} -initial {}}
    array set opts $args
    set label $opts(-label)
    set value $opts(-initial)
    unset opts(-label)
    unset opts(-initial)
    set args [array get opts]

    # Create the label
    itk_component add ${id}label {
	label $itk_interior._[incr itemCounter] -text $label
    } {
	keep -background -cursor
	rename -font -labelfont labelFont Font
	rename -foreground -labelforeground labelForeground Foreground
    }
    grid $itk_component(${id}label) \
	    -row $_row \
	    -column 0 \
	    -sticky $itk_option(-labelanchor) \
	    -pady $itk_option(-pady)

    # Set the shared variable
    set "@scope ::iwidgets::Labeledgrid $id$unique" $value
	
    # Create the radiobuttons
    set i 1
    foreach {button label} $buttons {
	# Create the radiobutton
	set path $itk_interior._[incr itemCounter]
	itk_component add $id.$button {
	    eval ::radiobutton $path $args [list \
                    -variable "@scope ::iwidgets::Labeledgrid $id$unique" \
                    -label $label]
        }
	# Grid it
	grid $path \
		-row $_row \
		-column $i \
		-sticky w \
		-padx $itk_option(-padx)
			
	# Adjust counters
	if { [incr i] == $itk_option(-childcolumnspan) } {
	    set i 1
	    incr _row
	}
	lappend _children($id) $id.$button
    }
    if { $i != 1 } {
	incr _row
    }
}
