dnl This file is an input file used by autoconf to generate the configure file.
dnl 
# Author: Christopher Hylands
# Version: $Id$
#
# Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

dnl Process this file with autoconf to produce a configure script.
AC_INIT(tyjava/eprintf/_eprintf.c)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET

#
# User specified location of the Ptolemy Tree
#
AC_ARG_WITH(ptolemy, [  --with-ptolemy=DIR        use Tcl/Tk from DIR],
        _PTOLEMY=$withval, _PTOLEMY=$PTOLEMY)
if test ! -d $_PTOLEMY; then
    AC_MSG_ERROR(Tcl directory $_PTOLEMY doesn't exist)
fi

#
# User specified location of the tcl include
#
AC_ARG_WITH(tclinclude, [  --with-tclinclude=DIR     use Tcl 7.6 includes from DIR],
        TCL_INCLUDE_DIR=$withval, TCL_INCLUDE_DIR=$_PTOLEMY/tcltk/itcl/include/itcl)
if test ! -d $TCL_INCLUDE_DIR; then
    AC_MSG_ERROR(Tcl directory $TCL_INCLUDE_DIR doesn't exist)
fi

AC_MSG_CHECKING([for tcl.h])
if test -f $TCL_INCLUDE_DIR/tcl.h; then 
	AC_MSG_RESULT($TCL_INCLUDE_DIR/tcl.h)
else
	AC_MSG_ERROR([Cannot find $TCL_INCLUDE_DIR/tcl.h, try --with-tclinclude=DIR])
fi

#
# User specified location of the tcl lib
#
AC_ARG_WITH(tcllib, [  --with-tcllib=DIR         use Tcl 7.6 lib from DIR],
        TCL_LIB_DIR=$withval, TCL_LIB_DIR=$_PTOLEMY/tcltk/itcl.$PTARCH/lib/itcl)
if test ! -d $TCL_LIB_DIR; then
    AC_MSG_ERROR(Tcl directory $TCL_LIB_DIR doesn't exist)
fi

AC_MSG_CHECKING([for tclConfig.sh])
if test -f $TCL_LIB_DIR/tclConfig.sh; then 
	AC_MSG_RESULT($TCL_LIB_DIR/tclConfig.sh)
else
	AC_MSG_ERROR([Cannot find $TCL_LIB_DIR/tclConfig.sh, try --with-tcllib=DIR])
fi

file=$TCL_LIB_DIR/tclConfig.sh
. $file

# The variables that we use from tclConfig.sh
TCL_CC=$TCL_CC	
TCL_CFLAGS=$TCL_CFLAGS
TCL_LIB_SPEC=$TCL_LIB_SPEC
TCL_SHLIB_CFLAGS=$TCL_SHLIB_CFLAGS
# Note that we override TCL_SHLIB_LD if it was set to gcc
TCL_SHLIB_LD=$TCL_SHLIB_LD
TCL_SHLIB_LD_LIBS=$TCL_SHLIB_LD_LIBS
TCL_SHLIB_SUFFIX=$TCL_SHLIB_SUFFIX
TCL_SHLIB_VERSION=$TCL_SHLIB_VERSION
# Tcl7.6 defines TCL_SRC_DIR, Tcl7.5 does not.
#TCL_SRC_DIR=$TCL_SRC_DIR
TCL_DL_LIBS=$TCL_DL_LIBS
TCL_LD_FLAGS=$TCL_LD_FLAGS
TCL_LD_SEARCH_FLAGS=$TCL_LD_SEARCH_FLAGS

#
# User specified location of the tcl srcs.  The profile code uses tclInt.h
#
# We must set this arg after sourcing tclConfig.sh, as Tcl7.6 tclConfig.sh
# sets TCL_SRC_DIR.  However, if you are using the automounter, then 
# tclConfig.sh will probably have the wrong value.
AC_ARG_WITH(tclsrc, [  --with-tclsrc=DIR         use Tcl srcs lib from DIR],
        TCL_SRC_DIR=$withval, TCL_SRC_DIR=$_PTOLEMY/src/tcltk/itcl2.2/tcl7.6)
#if test ! -d $TCL_SRC_DIR; then
#    AC_MSG_ERROR(Tcl directory $TCL_SRC_DIR doesn't exist)
#fi
AC_MSG_CHECKING([for tclInt.h])
if test -f $TCL_SRC_DIR/generic/tclInt.h; then 
	AC_MSG_RESULT($TCL_SRC_DIR/generic/tclInt.h)
else
	AC_MSG_RESULT([Cannot find $TCL_SRC_DIR/tclInt.h, try --with-tclsr=DIR. tclInt.h is used in the profile command. ])
fi

#
# User specified location of the tk include
#
AC_ARG_WITH(tkinclude, [  --with-tkinclude=DIR      use Tk 4.2 include from DIR],
        TK_INCLUDE_DIR=$withval, TK_INCLUDE_DIR=$TCL_INCLUDE_DIR)
if test ! -d $TK_INCLUDE_DIR; then
    AC_MSG_ERROR(Tk directory $TK_INCLUDE_DIR doesn't exist)
fi

AC_MSG_CHECKING([for tk.h])
if test -f $TK_INCLUDE_DIR/tk.h; then 
	AC_MSG_RESULT($TK_INCLUDE_DIR/tk.h)
else
	AC_MSG_ERROR([Cannot find $TK_INCLUDE_DIR/tk.h, try --with-tkinclude=DIR])
fi

#
# User specified location of the tk lib
#
AC_ARG_WITH(tklib, [  --with-tklib=DIR          use Tk 4.2 libs from DIR],
        TK_LIB_DIR=$withval, TK_LIB_DIR=$TCL_LIB_DIR)
if test ! -d $TK_LIB_DIR; then
    AC_MSG_ERROR(Tk directory $TK_LIB_DIR doesn't exist)
fi

AC_MSG_CHECKING([for tkConfig.sh])
if test -f $TK_LIB_DIR/tkConfig.sh; then 
	AC_MSG_RESULT($TK_LIB_DIR/tkConfig.sh)
else
	AC_MSG_ERROR([Cannot find $TK_LIB_DIR/tkConfig.sh, try --with-tklib=DIR])
fi

file=$TK_LIB_DIR/tkConfig.sh
. $file

# The variables that we use from tkConfig.sh
TK_XINCLUDES=$TK_XINCLUDES
TK_LIBS=$TK_LIBS
TK_LIB_SPEC=$TK_LIB_SPEC


#
# User specified location of the tk srcs.  The TkSteal code uses tkPort.h
#
# We must set this arg after sourcing tkConfig.sh, as Tk4.2 tkConfig.sh
# sets TK_SRC_DIR.  However, if you are using the automounter, then 
# tkConfig.sh will probably have the wrong value.
AC_ARG_WITH(tksrc, [  --with-tksrc=DIR          use Tk srcs lib from DIR],
        TK_SRC_DIR=$withval, TK_SRC_DIR=$TCL_SRC_DIR/../tk4.2)
#if test ! -d $TK_SRC_DIR; then
#    AC_MSG_ERROR(Tk directory $TK_SRC_DIR doesn't exist)
#fi
AC_MSG_CHECKING([for tkPort.h])
if test -f $TK_SRC_DIR/generic/tkPort.h; then 
	AC_MSG_RESULT($TK_SRC_DIR/generic/tkPort.h)
else
	AC_MSG_RESULT([Cannot find $TK_SRC_DIR/tkPort.h, try --with-tksrc=DIR. tkPort.h is used in the TkSteal xaccess command. ])
fi

#
# User specified location of the Java Development Kit (JDK)
#
# If JAVA_HOME is set then we set JAVAHOME for our use in configuring
#
AC_ARG_WITH(java, [  --with-java=DIR           use Java binaries from DIR, defaults to the value of the JAVA_HOME environment variable],
        JAVAHOME=$withval, JAVAHOME=$JAVA_HOME)

#
# If the user called configure with -without-java, then we don't
# set TYJAVA, and we won't cd down into the tyjava directory to do the build
#
if test "$with_java" = "no"; then
	AC_MSG_WARN([Configure called with -without-java, so no java checking])
	TYJAVA=""
else
	TYJAVA=tyjava
	if test ! -d "$JAVAHOME"; then
           AC_MSG_WARN(["$JAVAHOME" is not a directory, so we search for the java compiler.])
	    AC_PATH_PROG(JAVAC, javac)
	    if test -x "$JAVAC"; then	
		   JAVABIN=`dirname $JAVAC`
		   JAVAHOME=`dirname $JAVABIN`
	    else
	           AC_MSG_WARN([ Failed to find javac, perhaps Java is not installed?])
	    fi
	    if test ! -d "$JAVAHOME"; then
	            AC_MSG_WARN(["$JAVAHOME" is not a directory, using the default /opt/jdk1.1.4])
		    if test -d "/opt/jdk1.1.4"; then
			    JAVAHOME=`cd /opt/jdk1.1.4; pwd`	
		    else
			    AC_MSG_ERROR([
  Java directory /opt/jdk1.1.4 doesn't exist.
  Try --with-java=DIR, or set the JAVA_HOME environment variable.
  If you don't have java, try --without-java. If you are building within Tycho,
  try 'make tclexts CONFIGURE_ARGS=--without-java'.] )
		    fi	
	    fi	
	fi

	AC_MSG_CHECKING([for the java compiler in $JAVAHOME/bin])
	if test -f $JAVAHOME/bin/javac; then
		AC_MSG_RESULT($JAVAHOME/bin/javac)
		AC_MSG_CHECKING([that you have the right javac in your path.])
	        AC_PATH_PROG(JAVAC, javac)
		if test "$JAVAHOME/bin/javac" = "$JAVAC"; then
			AC_MSG_RESULT([  You have the right javac in your path, $JAVAHOME/bin/javac == $JAVAC])
		else
			AC_MSG_WARN($JAVAHOME/bin/java is not the same as $JAVAC. Be sure that you don't have a mismatch in JDK versions. )
			
		fi
	else
			    AC_MSG_ERROR([
  Cannot find $JAVAHOME/bin/javac.
  Try --with-java=DIR, or set the JAVA_HOME environment variable.
  If you don't have java, try --without-java. If you are building within Tycho,
  try 'make tclexts CONFIGURE_ARGS=--without-java'.] )
	fi

	if test ! -f $JAVAHOME/include/StubPreamble.h; then
	    AC_MSG_ERROR([
  There's no StubPreamble.h in $JAVAHOME/include.
  Try --with-java=DIR, or set the JAVA_HOME environment variable.
  If you don't have java, try --without-java. If you are building within Tycho,
  try 'make tclexts CONFIGURE_ARGS=--without-java'.] )
	fi


	case "`uname -s" in
		HP-UX) TMP_JAVA_ARCH_INCLUDE=$JAVAHOME/include/hp-ux;;
		Linux) TMP_JAVA_ARCH_INCLUDE=$JAVAHOME/include/linux;;
		SunOS) TMP_JAVA_ARCH_INCLUDE=$JAVAHOME/include/solaris;;
		*)TMP_JAVA_ARCH_INCLUDE=$JAVAHOME/include/idontknow;;
	esac
	#
	# User specified Java architecture, used to find the jdk include files
	#
	AC_ARG_WITH(javaarchinclude, [  --with-javaarchinclude=DIR        use Java arch dependent includes from DIR],
	        JAVA_ARCH_INCLUDE=$withval, JAVA_ARCH_INCLUDE="$TMP_JAVA_ARCH_INCLUDE")
	if test ! -d $JAVA_ARCH_INCLUDE; then
	    AC_MSG_ERROR(Java directory $JAVA_ARCH_INCLUDE doesn't exist)
	fi
	AC_MSG_CHECKING([for the java oobj_md.h include file])
	if test -f $JAVA_ARCH_INCLUDE/oobj_md.h; then
		AC_MSG_RESULT($JAVA_ARCH_INCLUDE/oobj_md.h)
	else
	    AC_MSG_ERROR([There's no oobj_md.h in $JAVA_ARCH_INCLUDE/include;
use the --with-javaarchinclude= configure flag to specify the location
of the architecture dependent include files in the JDK.])
	fi

	case "`uname -s" in
		HP-UX) TMP_JAVA_ARCH_LIB=$JAVAHOME/lib/PA_RISC/green_threads
			JAVA_ARCH_LIB_CHK=libjava.sl
			;;
		Linux) TMP_JAVA_ARCH_LIB=$JAVAHOME/lib/linux/green_threads
			JAVA_ARCH_LIB_CHK=libjava.so
			;;
		SunOS) TMP_JAVA_ARCH_LIB=$JAVAHOME/lib/sparc/green_threads
			JAVA_ARCH_LIB_CHK=libjava.so
			;;
		*)TMP_JAVA_ARCH_LIB=$JAVAHOME/lib/idontknow;;
	esac
	#
	# User specified Java architecture, used to find the jdk shared libs
	#
	AC_ARG_WITH(javaarchlib, [  --with-javaarchlib=DIR        use Java architecture dependent libraries from DIR],
	        JAVA_ARCH_LIB=$withval, JAVA_ARCH_LIB="$TMP_JAVA_ARCH_LIB")
	if test ! -d $JAVA_ARCH_LIB; then
	    AC_MSG_ERROR(Java directory $JAVA_ARCH_LIB doesn't exist)
	fi
	AC_MSG_CHECKING([for the java $JAVA_ARCH_LIB_CHK library file])
	if test -f $JAVA_ARCH_LIB/$JAVA_ARCH_LIB_CHK; then
		AC_MSG_RESULT($JAVA_ARCH_LIB/$JAVA_ARCH_LIB_CHK)
	else
	    AC_MSG_ERROR([There's no $JAVA_ARCH_LIB_CHK in $JAVA_ARCH_LIB.
Use the --with-javaarchlib= configure flag to specify the location of the
architecture dependent library files in the JDK.])
	fi


fi

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h)

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.
AC_FUNC_VPRINTF

dnl Unfortunately tcl7.6 has the wrong TCL_SHLIB_LD command in
dnl tclConfig.sh if we are running gcc.
AC_MSG_CHECKING([command to build shared libs])
if test "$TCL_CC" = "gcc"; then
	# Under hppa10.20 gcc, we need to pass -fPIC to gcc so that
	# collect will compile the intermediate file with -fPIC
	TCL_SHLIB_LD="gcc -shared $TCL_SHLIB_CFLAGS"
fi
AC_MSG_RESULT($TCL_SHLIB_LD)

dnl Substitute the following variables in the Makefile (in alphabetical order)
AC_SUBST(JAVAHOME)
AC_SUBST(JAVA_ARCH_INCLUDE)
AC_SUBST(JAVA_ARCH_LIB)
AC_SUBST(TCL_CC)
AC_SUBST(TCL_CFLAGS)
AC_SUBST(TCL_DL_LIBS)
AC_SUBST(TCL_INCLUDE_DIR)
AC_SUBST(TCL_LD_FLAGS)
AC_SUBST(TCL_LD_SEARCH_FLAGS)
AC_SUBST(TCL_LIB_DIR)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LD_LIBS)
AC_SUBST(TCL_SHLIB_SUFFIX)
AC_SUBST(TCL_SHLIB_VERSION)
AC_SUBST(TCL_SRC_DIR)
AC_SUBST(TK_INCLUDE_DIR)
AC_SUBST(TK_LIBS)
AC_SUBST(TK_LIB_DIR)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TK_SRC_DIR)
AC_SUBST(TK_XINCLUDES)
AC_SUBST(TYJAVA)

# Removed tksteal/makefile for the 0.7 release
AC_OUTPUT(makefile tcl.mk:../mk/tcl.mk.in java.mk:../mk/java.mk.in \
	profile/makefile \
	tyjava/makefile tyjava/tcljava/makefile tyjava/eprintf/makefile \
	tytimer/makefile tytest/makefile tycgc/makefile tyjni/makefile)
