# One line description of file.
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### controlpanel
#
# Create a control panel. This procedure is provided to make
# it easier for user scripts to create a control panel and
# connect it to a background task. The argument is the name
# of the shared-library file containing the task to run. By
# default, the new control panel is packed into a Displayer
# window and the name of the control panel widget returned. If,
# however, the second argument is supllied, the control panel
# widget is created with this name, and is _not_ packed into
# a Displayer. (The same name is returned.)
#
# To access the widget after creating it, you can also
# use the *::tycho::ControlPanel::getControlPanel* procedure.
#
proc ::tycho::controlpanel {filename {widgetname {}}} {
    set name [file rootname [file tail $filename]]
    set directory [file dirname $filename]

    # First make sure support packages are loaded
    # Use update idletasks so we can see that packages are loading
    ::tycho::loadIfNotPresent ::tycho::timer tytimer
    update idletasks
    ::tycho::loadIfNotPresent ::tycho::cgc tycgc
    update idletasks

    # Check that it's not already loaded
    if { [::info which -command ::tycho::$name] != "" } {
        error "Module \"$name\" is already loaded"
    }

    # Load it
    puts "loading $filename"
    update idletasks
    load $filename

    # Create the control panel widget
    if { $widgetname != "" } {
        uplevel #0 ::tycho::ControlPanel $widgetname -taskname $name
    } else {
        set widgetname [::tycho::view ControlPanel -taskname $name]
    }

    # Register the new widget so that we can access it by name later
    ::tycho::ControlPanel::register $name $widgetname

    # Get the name of this module's custom script file. If not
    # null, source the file. To get the name of the widget, the
    # source file can use $controlPanel. (This is a global variable
    # set before sourcing the file.)
    set scriptfile [::tycho::$name scriptfile]
    if { $scriptfile != "" } {
        global controlPanel
        set controlPanel $widgetname
puts "Sourcing [::tycho::expandPath $scriptfile]"
        source [::tycho::expandPath $scriptfile]
    }

    # Return the widget name
    return $widgetname
}

#######################################################################
#### ControlPanel
#
# A <i>ControlPanel</i> is a class that displays a control panel
# for a Tycho task running in the "background" in Tycho.
# The task is executed by the _Scheduler_ class, and
# interleaves execution with other tasks.
#
class ::tycho::ControlPanel {
    inherit ::tycho::View

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    # The name of the task being run by this panel
    itk_option define -taskname taskName TaskName ""

    # The orientation of the button box
    itk_option define -orient orient Orient vertical

    ###################################################################
    ####                         public methods                    ####

    # One line description of the method; listed in alphabetical order
    method publicMethodA {}

    # One line description of the method
    method publicMethodB {}

    ###################################################################
    ####                      public procs                         ####

    # Register a widget by task name
    proc register {name widget}

    # Register a callback from a star
    proc starConnect {galaxy star control callback}

    ###################################################################
    ####                   protected methods                       ####

    ###################################################################
    ####                   protected variables                     ####

    # The common array of iteration counters
    protected common iterationcounter

    # The common array of widgets, indexed by task name
    protected common widgetnames

    # The array of star parameters. Each index is a list
    # of star name and control name; the corresponding
    # value is the callback function.
    protected variable starparameters

    ###################################################################
    ####                   private methods                         ####

    # One line description; listed in alphabetical order
    private method privateMethodA {}

    ###################################################################
    ####                   private variables                       ####

    # A comment before one or a group of private variables;
    # alphabetical order unimportant
    private variable privateVariableA
    private variable privateVariableB

    private common privateCommonA
}

######################################################################
#### -orient configuration option
# Set the button box to be vertical or horizontal.
#
configbody ::tycho::ControlPanel::orient {
    if { $itk_option(-orient) == "vertical" } {
        $itk_component(bbox) configure -columns 1
    } else {
        $itk_component(bbox) configure -columns 0
    }
}

#######################################################################
#### constructor
#
body ::tycho::ControlPanel::constructor {args} {
    # Create a bunch of buttons
    itk_component add bbox {
        ::tycho::ButtonBox $itk_interior.bbox
    } {
	keep -background -cursor -font -padx -pady
    }
    pack $itk_component(bbox) -expand no -padx 2 -pady 4

    # Create the iteration display
    itk_component add counter {
        label $itk_interior.counter -textvariable iterationcounter($this)
    }  {
	keep -background -cursor -font
    }
    pack $itk_component(counter) -expand no

    # Initialize args
    eval itk_initialize $args

    # Set the command name
    set cmd ::tycho::$itk_option(-taskname)

    # Now that we have the -orient option set, add the buttons
    $itk_component(bbox) add start \
            -text Start \
            -command \
            "::tycho::Scheduler::startC $cmd iterationcounter($this)"
    
    $itk_component(bbox) add pause \
            -text Pause \
            -command "::tycho::Scheduler::suspend $cmd"
    
    $itk_component(bbox) add resume \
            -text Resume \
            -command "::tycho::Scheduler::resume $cmd"
    
    $itk_component(bbox) add stop \
            -text Stop \
            -command "::tycho::Scheduler::kill $cmd"
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####


    ###################################################################
    ###################################################################
    ####                      public procedures                    ####

#######################################################################
#### register
#
# Register a widget by task name.
#
body ::tycho::ControlPanel::register {name widget} {
    set widgetnames($name) $widget
}

#######################################################################
#### starConnect
#
# Register a callback for a star control. This procedure is
# called by the *connectControl* function in the *tycgc*
# support package. Stars call *connectControl* in their
# *tychoSetup* code stream, to enable user-interface scripts
# to control their parameters. The callbacks are regular
# Tcl C functions, and will be the same ones used by the
# TclTk target.
#
body ::tycho::ControlPanel::starConnect {galaxy star control callback} {
    puts "starConnect $galaxy $star $control $callback"
    # Add the 
}

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####


    ###################################################################
    ###################################################################
    ####                      private methods                      ####

