#########################################################################
# @Version: @(#)Scheduler.itcl	1.10 01/20/99
# @Author: H. John Reekie
#
# @Copyright (c) 1997-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


####
# If we are going to use the scheduler, then the Tycho
# timer module must be loaded
#
::tycho::loadIfNotPresent ::tycho::timer tytimer


##########################################################################
## Scheduler
#
# The Tycho scheduler. This class provides a simple way of
# managing background processing with more control than supported
# directly by Tk's event mechanism. The primary motivation for this is to
# support execution of long-running C programs while keeping the Tk
# interface live, but it should also be used to execute Tcl programs
# that might take a long time to execute, in order to avoid holding up
# realtime programs.
#
# The scheduler requires that a task be broken into setup, execute,
# and wrapup scripts. The first and last can be null, but the second
# can't. Provided the <a href="../../../../src/tytimer/index.html">tyTimer
# package</a> has been loaded, the script can use ::tycho::timer to
# see if it has used up enough time yet. If the script is directly
# calling a function in a C module, the C code can use Ty_StartTimer
# for the same purpose.
#
# The scheduler is deliberately designed to be "non-reentrant." That
# is, none of the three phases may:
# <ul>
# <li>Cause the Tk <code>update</code> proc to be called, or
# <li>Cause any of the scheduler procs to be called.
# </ul>
#
# If these requirements are violated, <i>then Tycho may crash or hang</i>.
# The reason for these restrictions is to keep the scheduling code
# simple and reliable. A task that can't guarantee to meet these
# constraints should probably be redesigned, anyway...
#
# The following example illustrate the schedule in action. For a slightly
# more complete example, see below. First, we need to load a package
# that contains a <a href="../../../../src/tytest/index.html">Tycho
# task written in C</a>:
# <tcl quiet><pre>
#   ::tycho::loadIfNotPresent ::tycho::timer tytimer
#   ::tycho::loadIfNotPresent ::tycho::testtask tytest
# </pre></tcl>
#
# Now, we are going to start two tasks running, one written in C and one
# in Tcl. Each will simply increment a counter and display it as fast
# as it can. First, create some labels and a counter for each:
# <tcl quiet><pre>
#   set ccounter 0
#   set tclcounter 0
#   catch {destroy .t}
#   toplevel .t
#   label .t.a -textvariable ccounter -width 12 -font 12x24
#   label .t.b -textvariable tclcounter -width 12 -font 12x24
#   pack .t.a
#   pack .t.b
# </pre></tcl>
#
# Now, to start the Tcl task, we simply provide the scheduler with
# the task name, and a script to execute each time through the
# loop. The script returns 1 in order to indicate that it has not
# yet completed:
# <tcl quiet><pre>
#   ::tycho::Scheduler::startTcl tcltask {
#      incr tclcounter
#      expr 1 ;# 1 means that we haven't terminated
#   }
# </pre></tcl>
#
# Running a C task is very similar. In general, a
# <a href="../../../../src/tytest/tyTimerTest.c">C task will be
# implemented as a loadable package</a>, and will have single Tcl interface
# procedure in the tycho namespace. The first argument to the
# procedure is one of "setup," "execute," or "wrapup," and the C
# task is expected to perform appropriately. The execute phase
# must use <code>Ty_TimerStart</code> and <code>Ty_TimerElapsed</code>
# to ensure that it processes for the right amount of time, like this:
# <pre>
#    /* Start the timer */
#    Ty_TimerStart();
#
#    /* Loop while the timer is running */
#    while ( ! Ty_TimerElapsed() ) {
#      taskcounter++;
#    }
#
#    /* Return "1" so we know that the task didn't terminate */
#    interp->result = "1";
#    return TCL_OK;
# </pre>
#
# To start the C task running, give it the name of the interface
# procedure and the arguments to be passed to the <code>setup</code>
# phase:
# <tcl quiet><pre>
#   ::tycho::Scheduler::startC ::tycho::testtask ccounter
# </pre></tcl>
#
# Before you leave, make sure you kill the tasks:
# <tcl quiet><pre>
#   ::tycho::Scheduler::kill tcltask
#   ::tycho::Scheduler::kill testtask
#   destroy .t
# </pre></tcl>
#
# For a more complete example, see the
# <a href="../../../../src/tytest/index.html">Tycho package test package</a>.
# For more information on the timer support functions, see the
# <a href="../../../../src/tytimer/index.html">tyTimer
# package</a>.
#
class ::tycho::Scheduler {
    inherit ::tycho::Uninstantiable

    ###################################################################
    ####                         protected variables               ####

    # The setup scripts
    protected common _setup

    # The execute scripts
    protected common _execute

    # The wrapup scripts
    protected common _wrapup

    # The completion callbacks
    protected common _notify

    # The list of "real-time" tasks
    protected common realtimetasks {}

    # A flag saying whether the scheduler is currently running
    protected common running 0

    # The scheduler period in ms
    protected common schedulerPeriod 20

    # An array of suspended tasks
    protected common suspended

    # The list of "non-real-time" tasks
    protected common tasks {}

    ###################################################################
    ####                            public procs                   ####

    # Kill and delete a task. The task's wrapup code is executed.
    proc kill {task}

    # Get or set the period of the scheduler.
    proc period {{period {}}}

    # Resume a suspended task.
    proc resume {task}

    # Start a task.
    proc start {task setup execute wrapup notify {realtime 0}}

    # Start a C task.
    proc startC {procname args}

    # Start a Tcl task.
    proc startTcl {task args}

    # Suspend a task.
    proc suspend {task}

    # Query current tasks.
    proc tasks {{type background}}

    ###################################################################
    ####                            public procs                   ####

    # Start the scheduler running. This proc returns only when there are
    # no more active tasks.
    protected proc go {}
}

##########################################################################
## kill
#
# Remove a task from the schedule, and schedule its wrapup proc. If there
# are no tasks left, stop the scheduler. If the task is not in the
# scheduler, ignore (since the task may have already terminated). Note
# that the tasks notify procedure is _not_ called.
#
body ::tycho::Scheduler::kill {task} {
    set t [lsearch -exact $realtimetasks $task]
    if { $t != -1 } {
	set realtimetasks [lreplace $realtimetasks $t $t]
    } else {
	set t [lsearch -exact $tasks $task]
	if { $t != -1 } {
	    set tasks [lreplace $tasks $t $t]
	} elseif { [::info exists suspended($task)] } {
	    unset suspended($task)
	} else {
	    return
	}
    }
    # Execute the wrapup proc
    if { $_wrapup($task) != "" } {
	uplevel #0 $_wrapup($task)
    }
    # Forget it
    unset _setup($task)
    unset _execute($task)
    unset _wrapup($task)
    unset _notify($task)

    # If there are no active tasks, stop the scheduler
    if { $realtimetasks == "" && $tasks == "" } {
	set running 0
    }
}

##########################################################################
## period
#
# Get or set the period of the scheduler in ms.
#
body ::tycho::Scheduler::period {{period {}}} {
    if { $period == "" } {
	return $schedulePeriod
    } else {
	set schedulePeriod $period
	::tycho::timer period $period
    }
}

##########################################################################
## resume
#
# Resume a task. If the task is not suspended, flag an error.
#
body ::tycho::Scheduler::resume {task} {
    if { ! [::info exists suspended($task)] } {
	error "Task $task is not suspended"
    }
    # Add to the appropriate list
    if { $suspended($task) } {
	lappend realtimetasks $task
    } else {
	lappend tasks $task
    }
    unset suspended($task)
    
    # Start schedule if necessary
    if { ! $running } {
	set running 1
	go
    }
}

##########################################################################
## start
#
# Add a task to the schedule, and call its setup proc. If the scheduler
# is not running, start it. The second, third, and fourth arguments
# are Tcl scripts that are evaluated to initialize, execute for
# one timeslice, and to terminate the task. The execute script is
# obliged to return after the timer period set by the
# <a href="../../../../src/tytimer/index.html">tyTimer</a> package,
# either by calling <code>::tycho::timer elapsed</code> if written
# in Tcl) or <code>Ty_TimerElapsed</code> if written in C. (The _exact_
# period of time before it returns is not critical, but it should return
# as soon as possible after detecting that the timer has elapsed in
# order for the scheduler to work properly.) The execute script must
# also return one of these three values:
# <ul>
# <li><b>-1</b>: The script was not able to do any processing. This
# is meaningful only for real-time tasks.
# <li><b>0</b>: The task executed and has terminated itself. The notify
# script will be evaluated; the wrapup script will not be.
# <li><b>1</b>: The task executed and wants to do more!
# </ul>
#
# The fifth argument is
# a script that is evaluated when the task terminates itself.
# Note that if the task is terminated
# by calling kill{}, this wrapup script is evaluated but the notify
# script is _not_. The sixth argument, if present
# and true, indicates the the task is "real-time." Realtime tasks can return
# -1 to indicate that they have not performed any processing because they
# are runnable (waiting on I/O, for example). Real-time tasks, if they
# can process, always take priority over non-real-time tasks.
#
body ::tycho::Scheduler::start \
	{task setup execute wrapup notify {realtime 0}} {
    if { [lsearch -exact $realtimetasks $task] != -1 \
	    || [lsearch -exact $tasks $task] != -1 } {
	error "Task $task is already scheduled"
    }

    # Add to the appropriate list
    if { $realtime } {
	lappend realtimetasks $task
    } else {
	lappend tasks $task
    }
    # Remember scripts
    set _setup($task) $setup
    set _execute($task) $execute
    set _wrapup($task) $wrapup
    set _notify($task) $notify

    # Initialize it
    if { $setup != "" } {
	uplevel #0 $setup
    }
    
    # Start the scheduler if necessary
    if { ! $running } {
	set running 1
	go
    }
    return $task
}

##########################################################################
## startC
#
# Start a C task. This is an easier front-end to the start{}
# procedure. The first argument is the name of a procedure that
# accepts, as its first argument, one of the keywords <b>setup</b>,
# <b>execute</b>, or <b>wrapup</b>. Following arguments are
# option-value pairs, which can be any of:
#
# <ul>
# <li><b>-notify</b> <i>script</i>: Evaluate _script_ if the task
# terminates itself.
# <li><b>-realtime</b> <i>bool</i>: If _bool_ is true, the task
# is scheduled as a real-time task, and is should return -1 if
# is it called but cannot proceed. The default is false.
# </ul>
#
# Any other arguments are passed to the setup phase of the task.
# The execute phase must use the C function <code>Ty_TimerElapsed</code>
# to check whether its time-slice is up.
#
# This procedure returns the name assigned to the task.
#
body ::tycho::Scheduler::startC {procname args} {
    set notify {}
    set realtime 0
    ::tycho::getopt notify args
    ::tycho::getopt realtime args
    set taskname [namespace tail $procname]

    start $taskname \
            [list eval $procname setup $args] \
            [list $procname execute] \
            [list $procname wrapup] \
            $notify $realtime
}

##########################################################################
## startTcl
#
# Start a Tcl task. This is an easier front-end to the start{}
# procedure. The first argument is the task name; the second argument
# is a script which is repeatedly executed while the task is executing
# a time-slice -- it should perform only a "small" amount of processing.
# The remaining arguments are option-value pairs, which can be any of:
#
# <ul>
# <li><b>-setup</b> <i>script</i>: Evaluate _script_ when starting
# the task.
# <li><b>-wrapup</b> <i>script</i>: Evaluate _script_ if the task
# is terminated by a kill{}.
# <li><b>-notify</b> <i>script</i>: Evaluate _script_ if the task
# terminates itself.
# </ul>
#
# Note that we don't give Tcl tasks the opportunity to be
# realtime. The procedure returns the task name.
#
body ::tycho::Scheduler::startTcl {task command args} {
    set setup {}
    set wrapup {}
    set notify {}
    ::tycho::getopt setup args
    ::tycho::getopt wrapup args
    ::tycho::getopt notify args

    regsub %% {
        ::tycho::timer start
        while { ! [::tycho::timer elapsed] && [uplevel #0 {%%}] } {}
        expr 1
    } $command execute

    start $task $setup $execute $wrapup $notify
}

##########################################################################
## suspend
#
# Suspend a task. If the task is not in the
# scheduler, ignore (since the task may have already terminated).
#
body ::tycho::Scheduler::suspend {task} {
    set t [lsearch -exact $realtimetasks $task]
    if { $t != -1 } {
	set suspended([lindex $realtimetasks $t]) 1
	set realtimetasks [lreplace $realtimetasks $t $t]
    } else {
	set t [lsearch -exact $tasks $task]
	if { $t != -1 } {
	    set suspended([lindex $tasks $t]) 0
	    set tasks [lreplace $tasks $t $t]
	} else {
	    # Not there: just return
	    return
	}
    }
    # If there are no active tasks, stop scheduler
    if { $realtimetasks == "" && $tasks == "" } {
	set running 0
    }
}

##########################################################################
## tasks
#
# Query current tasks. The first argument, if supplied, selects
# a type of task, and can be one of realtime, background,
# suspended, or all. The default is background.
#
body ::tycho::Scheduler::tasks {{type background}} {
    switch -exact $type {
        "realtime" {
            return $realtimetasks
        }
        "background" {
            return $tasks
        }
        "suspended" {
            return [array names suspended]
        }
        "all" {
            return [concat $realtimetasks $tasks [array names suspended]]
        }
        default {
            error "Invalid type \"$type\""
        }
    }
}

##########################################################################
## go
#
# Run the scheduler. In between executing each task, this proc calls
# update{} to process pending Tk events. If a task terminates,
# by itself, do _not_ call its wrapup proc (because it has presumably
# already done that itself), but do call its notify callback to
# inform someone that the task finished.
#
body ::tycho::Scheduler::go {} {
    # Keep going while we stil have active tasks
    while { $running } {
	# Execute the next task: try realtime tasks first
	set done 0
	foreach task $realtimetasks {
	    # Evaluate its execution function
	    set code [uplevel #0 $_execute($task)]
	    if { $code == 0 } {
		# Terminated by itself: remove task from list
		set t [lsearch -exact $realtimetasks $task]
		set realtimetasks [concat \
			[lreplace $realtimetasks 0 $t] \
			[lreplace $realtimetasks $t end]]
		# Call callback. We can do this immediately.
		if { $_notify($task) != "" } {
		    uplevel #0 $_notify($task)
		}
		# Forget it
		unset _setup($task)
		unset _execute($task)
		unset _wrapup($task)
		unset _notify($task)

		# If there are no active tasks, stop the scheduler
		if { $realtimetasks == "" && $tasks == "" } {	
		    set running 0
		}
		# Exit
		set done 1
		break
	    } elseif { $code == 1 } {
		# Did some processing, so break
		set t [lsearch -exact $realtimetasks $task]
		set realtimetasks [concat \
			[lreplace $realtimetasks 0 $t] \
			[lrange $realtimetasks 0 $t]]
		set done 1
		break
	    }
	    # (Otherwise, the task wasn't ready, so try the next one)
	}

	# Do a non-realtime task if no real-time task executed
	if { ! $done && $tasks != "" } {
	    set task  [lindex $tasks 0]
	    set tasks [lreplace $tasks 0 0]

	    # Evaluate its execution function
	    if { [uplevel #0 $_execute($task)] } {
		# Didn't terminate, so add task to end of list
		lappend tasks $task
	    } else {
		# Terminated, so call notify callback.
		if { $_notify($task) != "" } {
		    uplevel #0 $_notify($task)
		}
		# Forget it
		unset _setup($task)
		unset _execute($task)
		unset _wrapup($task)
		unset _notify($task)

		# If there are no active tasks, stop the scheduler
		if { $realtimetasks == "" && $tasks == "" } {	
		    set running 0
		}
	    }
	}
	# Before doing the next task, allow all pending events
	# to be processed
	update
    }
}
