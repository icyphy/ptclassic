# Definition of a Tcl editor that handles Ptolemy Tcl extensions
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditPtcl
# This class defines a window that provides an emacs-like editor
# specialized for editing Ptolemy Tcl files.  Usually ptcl commands
# are used to define Ptolemy Universes.
#
# The EditPtcl class colorizes the code, identifying comments and
# procedure definitions, supports hyperlinks to procedures that can be
# auto-loaded, automatically indents the code, and fills blocks of
# comments.  It also provides a command for evaluating a region of
# Ptcl code.

class ::tycho::EditPtcl {
    inherit ::tycho::EditItcl
 
    ###################################################################
    ####                            options                        ####

    # Specify the name of the Oct facet associated with the data being edited.
    itk_option define -facet facet File ""

    ###################################################################
    ####                     public methods                        ####


    # Open a help window.
    method help {}

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                  protected methods                        ####

    # Return the name of the type of text widget to use (EditPtclText).
    protected method textWidget {} {return ::tycho::EditPtclText}
}

#######################################################################
#### -facet configuration
# Use oct2ptcl to convert a facet from Oct to Ptcl format.
#
configbody ::tycho::EditPtcl::facet {
    set facet $itk_option(-facet)
    if {$facet != "" } {
	set facet [::tycho::expandPath $facet]
	# temporary name
	# FIXME: Unix-ism here, /tmp is not portable
	set facetTmpFile /tmp/[file tail $facet][::tycho::autoName a].pt
	while {[file exists $facetTmpFile]} {
	    # Danger: we could go into a tight loop here
	    set facetTmpFile /tmp/[file tail $facet][::tycho::autoName a].pt
	}

	# Unix-ism here.  Why anyone would buy (let alone write)
	# an operating system without an exec is beyond me. :-)
	#
	# oct2ptcl is part of Ptolemy, it converts Oct facets to Ptolemy
	# tcl commands.  
	# -r recursive translation: convert sub-galaxies
	# -g append a run and a wrap up command
	exec oct2ptcl -rg $facet > $facetTmpFile

	configure -file $facetTmpFile
    }
}


###################################################################
#
body ::tycho::EditPtcl::constructor {args} {
    
    eval itk_initialize $args
    
    addMenu Special left Window -underline 0
    addMenuItem "Retarget" Special -underline 0 \
	    -command {set w [::tycho::Retarget .retrg#auto]; $w centerOnScreen}

    addMenuItem "Open Facet" File -underline 0 \
	    -command "$this openFacet"
}

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditPtcl::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/editors/textedit/doc/usersGuides/EditPtclHelp.html
}
