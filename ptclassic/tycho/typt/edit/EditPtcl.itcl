# Definition of a Tcl editor that handles Ptolemy Tcl extensions
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### options
# Define colors for the Ptcl context-sensitive editor. These are done
# as options so that they can be overridden by the user. Other colors
# that work reasonably well are: forestGreen, chocolate3, DarkOrange,
# coral, OrangeRed, DeepPink, maroon, magenta, and DarkOrchid.
#
# NOTE: Unfortunately, itcl appears to require that all options
# from the base class be repeated here with the new class name.
# Otherwise, they are not recognized.
option add *EditPtcl.textWidth 80 widgetDefault
option add *EditPtcl.textHeight 40 widgetDefault
option add *EditPtcl.parenColor \
	[ptkColor lightskyblue white] widgetDefault
option add *EditPtcl.targetColor \
	[ptkColor lightskyblue white] widgetDefault
option add *EditPtcl.fillMaxLineLength 70 widgetDefault
option add *EditPtcl.textBackground \
	[ptkColor antiqueWhite white] widgetDefault
option add *EditPtcl.textfont [.tychoFonts defaultFont fixed]
option add *EditPtcl.relief raised widgetDefault
option add *EditPtcl.selectColor [ptkColor yellow white] widgetDefault
option add *EditPtcl.commentColor [ptkColor firebrick black] widgetDefault
option add *EditPtcl.fixmeColor [ptkColor red black] widgetDefault
option add *EditPtcl.stringColor [ptkColor gray50 black] widgetDefault

# new options

option add *EditPtcl.procColor [ptkColor blue black] widgetDefault


#######################################################################
#### EditPtcl
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing Ptolemy Tcl files. Tcl is an
# interpreted language developed by John Ousterhout of Berkeley. 
# Ptolemy extends Tcl with new commands, these commands are called
# ptcl commands.
# 
# This editor is like the Tcl editor, but it can also use the oct2ptcl
# binary to convert Octtools facets to ptcl commands.
#
class ::tycho::EditPtcl {
    inherit ::tycho::EditItcl

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # Specify the name of the Oct facet associated with the data being edited.
    itk_option define -facet facet File ""

    ##########################################################################
    ####                         public methods                           ####

    # Open a help window.
    method help {}

    # Open a Oct facet, call oct2ptcl and read in the oct2ptcl output
    method openFacet {}

    # Color the Tcl code in a region.
    method parseNow {start stop} {}

    # Open a retargetting window.
    method retarget {}

    # Evaluate the file and then run it for 'iterations', and call wrapup
    method run {iterations}

    # Color the Tcl code in a region.
    # Return a list of the stars in the file, organized as { {DOMAIN star} ...}
    method stars {}

    # Tag identifiers in the file that are defined elsewhere.
    method tagLinks {}

    # Return the universe name
    method universeName {}

    ####################################################################
    ####                    protected methods                       ####

    # Return the regular expression used to identify line-oriented comments.
    protected method commentRegexp {}

    ##########################################################################
    ####                         protected variables                      ####

    # Counter for hyperlinks.
    protected variable hypcount 0

    ##########################################################################
    ####                         private variables                      ####

    # Name of the universe defined in this file
    private variable univName {}
}

###################################################################
#
body ::tycho::EditPtcl::constructor {args} {
    global PTOLEMY
    eval itk_initialize $args
    
    # Set the fill prefix to be the comment character for Tcl.
    set fillPrefix "#"

    menubar addMenu Special left {} -underline 0
    menubar addMenuItem "Retarget" Special -underline 0 \
	    -command "set w \[::tycho::Retarget .rtrg#auto -edit \
                      \[$this component text\]\]; \$w centerOnScreen"

    menubar addMenuItem "List Stars" Special -underline 0 \
            -command "::tycho::inform \
        \"Stars used: \[\[$this component text\] stars\]\""

    menubar addMenuItem "Universe Name" Special -underline 0 \
            -command "::tycho::inform \
            \" Universe: \[\[$this component text\] universeName\]\""

    menubar addMenuItem "Open Facet" File -underline 0 \
	    -command "$this openFacet"

    # Stuff for the help menu
    menubar addMenuItem "Ptolemy Universes" Help -underline 0 \
            -command "::tycho::File::openContext \
	    \[file join \$env(PTOLEMY) tycho typt lib PtolemyFacets.fst\]"

    menubar addMenuItem "Star/Demo Xref" Help -underline 11 \
            -command "::tycho::File::openContext \
            [file join $PTOLEMY doc star-demo-index index.html]"

    menubar addMenuItem "Ptolemy stars" Help -underline 0 \
            -command "::tycho::File::openContext \
	    \[file join \$env(PTOLEMY) src domains starHTML.idx.fst\]"
}

#######################################################################
#### -facet configuration
# Use oct2ptcl to convert a facet from Oct to Ptcl format.
#
configbody ::tycho::EditPtcl::facet {
    set facet $itk_option(-facet)
    if {$facet != "" } {
	set facet [::tycho::expandPath $facet]
	# temporary name
	# FIXME: Unix-ism here, /tmp is not portable
	set facetTmpFile /tmp/[file tail $facet][::tycho::autoName a].pt
	while {[file exists $facetTmpFile]} {
	    # Danger: we could go into a tight loop here
	    set facetTmpFile /tmp/[file tail $facet][::tycho::autoName a].pt
	}

	# Unix-ism here.  Why anyone would buy (let alone write)
	# an operating system without an exec is beyond me. :-)
	#
	# oct2ptcl is part of Ptolemy, it converts Oct facets to Ptolemy
	# tcl commands.  
	# -r recursive translation: convert sub-galaxies
	# -g append a run and a wrap up command
	exec oct2ptcl -rg $facet > $facetTmpFile

	configure -file $facetTmpFile
    }
}
    ###################################################################
    ###################################################################
    ####                      public methods                       ####

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditPtcl::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/editors/textedit/doc/usersGuides/EditPtclHelp.html
}

#####################################################################
#### openFacet
# Bring up a file browser, allow the user to select an octtools
# facet, then run oct2ptcl on the facet.  Grab the output of oct2ptcl
# and put it into a buffer.
body ::tycho::EditPtcl::openFacet {} {
}

###################################################################
#### retarget
# Open a retarget window.
#
body ::tycho::EditPtcl::retarget {} {
    set w [::tycho::Retarget .retrg#auto -edit [$this textWinName]]
    $w centerOnScreen
}

#####################################################################
#### run
# Evaluate the contents of the text window as Tcl commands
# in the global context.  Display and return the result of the evaluation.
#
body ::tycho::EditPtcl::run {iteration} {
    set code [getSelection]
    if { $code == {} } {
	set code [get 1.0 end]
	set type "File"
    } else {
	set type "String"
    }

    set ret [uplevel #0 $code]
    if {$ret != {}} {
	puts $ret
	putStatus "$type evaluated"
	::tycho::inform "$type evaluation returned:\n$ret"
	putStatus ""
    } {
        putStatus "$type evaluated (empty result)"
    }
    return $ret
    focusin
}

#####################################################################
#### parseNow
# Invoke the base class parser to color comments and the strings
# "NOTE" and "FIXME".  Then tag and color procedure names.
#
body ::tycho::EditPtcl::parseNow {start stop} {

    EditItcl::parseNow $start $stop
    set text $itk_component(text)

    # Remove tags first, if necessary
    $text tag remove procname $start $stop

    # Search for procedure definitions.
    set ind $start
    set endc $stop
    set spaces "\[ \t\]"
    set procregexp "^$spaces*((defgalaxy|newuniverse)$spaces+)(\[^ \t\]*)"
    while {[set ind [$text search -count len -regexp $procregexp \
	    $ind $stop]] != {}} {

	set endc [$text index "$ind + $len chars"]
	set line [$text get $ind $endc]
	
	# Procedures
	if [regexp -indices $procregexp $line match access procName] {
	    # Procedure definitions. Tag the procedure name.
	    # Note that we support Itcl qualifiers here.
	    # Should they be colored too?
	    set first [lindex $procName 0]
	    set last [lindex $procName 1]
	    $text tag add procname "$ind + $first chars" \
		    "$ind + $last chars +1 char"
	}
        set ind $endc
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }
    
    # Set the visual characteristics of the tagged text
    $text tag configure procname -foreground \
	    [option get $itk_component(hull) procColor EditPtcl]
}

#####################################################################
#### stars
# Return a list of the stars in the file, organized as { {DOMAIN star} ...}
body ::tycho::EditPtcl::stars {} {
    set text $itk_component(text)

    if [catch {domain} currentDomain] {
        # We don't have ptcl commands, so we punt
        set currentDomain SDF
    }

    set start 0.0
    set stop end
    set results {}
    set ind $start
    set endc $stop
    set spaces "\[ \t\]"
    set lineregexp "^$spaces*(domain|star|newuniverse).*"
    set procregexp "^$spaces*(domain|star)$spaces+(\[^ \t\]*)"
    set starregexp "^$spaces*(star)$spaces+(\[^ \t\]*)$spaces+(\[^ \t\]*)"
    while {[set ind [$text search -count len -regexp $lineregexp \
	    $ind $stop]] != {}} {

	set endc [$text index "$ind + $len chars"]
	set line [$text get $ind $endc]
	
	# Procedures
	if [regexp $procregexp $line match domainOrStar domain] {
            if { $domainOrStar == "domain" } {
                set currentDomain $domain
            } else {
                if [regexp $starregexp $line \
                        match star starInstance starType] {
                    set domainStarList [list $currentDomain $starType]
                    if {[lsearch $results $domainStarList] == -1 } {
                        lappend results $domainStarList
                    }
                }
            }

	}

        # Check for newuniverse, if it is present then save the value
        regexp {newuniverse[ \t]+([^ \t]+)} $line match univName

        set ind $endc
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }
    return $results
}

#####################################################################
#### tagLinks
# This method tags identifiers in the file that are defined elsewhere
# and are registered for auto-loading in the global array "auto_index".
# A binding is attached to the tag to perform a hyper jump to the file
# given in the auto_index array, annotated with the name of the identifier.
#
body ::tycho::EditPtcl::tagLinks {} {

    global ::auto_index
    
    # Construct regular expressions for all identifiers in the
    # auto_index array. Delimiters that might be found before or after
    # a classname invocation or procedure call.  Some care is required
    # here because there may be many items in the array, and the size
    # of a regular expression is limited.  Thus, we construct a set
    # of regular expressions.  The size is limited to 100 entries.

    set count 0
    set delim "\[\] \t\[\(\)\{\}\:\;\]"
    foreach entry [array names auto_index] {
	if {$count >= 100} {
	    set count 0
	    append ids "\)\(\$\|$delim\)"
	    lappend regexps $ids
	}
	if {$count == 0} {
	    set ids "\(\^\|$delim\)\($entry"
	} {
	    append ids "|$entry"
	}
	incr count
    }
    append ids "\)\(\$\|$delim\)"
    lappend regexps $ids

    set text $itk_component(text)

    # The following finds the line number of the line beyond the end
    set end [$text index end]
    regexp {[0-9]+} $end endline
    
    # We now step through each line, one at a time, for each regexp.
    foreach ids $regexps {

	set next 1.0
	while {[set next [$text search -regexp $ids $next end]] \
		!= {}} {
	    set line [$text get $next "$next lineend"]
	    if [regexp -indices $ids $line match p1 key p2] {
		set start "$next +[lindex $key 0] char"
		set stop "$next +[lindex $key 1] char +1 char"
		$text tag add hyperlink$hypcount $start $stop
		$text tag configure hyperlink$hypcount \
			-foreground \
			[option get $itk_component(hull) procColor EditPtcl]
		$text tag configure hyperlink$hypcount \
			-underline 1
		
		set word [$text get $start $stop]
		
		# Remove the "source " from the auto_index word
		set filename [string range $auto_index($word) 7 end]
		
		# FIXME: Despite the "break" here, some other binding kicks
		# in after this one, causing text to be selected.  Tk bug?
		$text tag bind hyperlink$hypcount \
			<Double-Button-1> \
			"$this hyperJump $filename $word; break"
		
		incr hypcount
		set next [$text index \
			"$next +[string length $word] char"]
	    } else {
		set next [$text "$next lineend"]
	    }
	    # The following appears to be needed to prevent infinite loops.
	    if [$text compare $next >= end] {break}
	}
    }
}
#####################################################################
#### universeName
# Return the name of the universe
body ::tycho::EditPtcl::universeName {} {
    # The stars method will also find the universe name for us.
    stars
    return $univName
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### commentRegexp
# Return the regular expression used to identify line-oriented comments.
#
body ::tycho::EditPtcl::commentRegexp {} {
    return "(^|;)\[ \t\]*#.*\$"; #line comment
}
