# Ptolemy Retargetting mechanism: Display information about domains
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################
catch {delete  class EditRetarg}

#######################################################################
#### EditRetarg
# Display Ptolemy Retargetting information.
# <p>
# Here is an example of how to use the EditRetarg
# <tcl><pre>
#	::tycho::EditRetarg .t
#	.t centerOnScreen
# </pre></tcl>
class ::tycho::EditRetarg {
    inherit ::tycho::EditForest
    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Generate data for new domains
    method compareDomains {}

    # Update domainA
    method changeDomainA {}
    # Update domainB
    method changeDomainB {}
    ###################################################################
    ####                         public procedures                 ####

    # Print the same star from two different domains
    public proc printStars { starName relation domainA domainB}

    ###################################################################
    ####                         private variables                 ####
    private variable domainA {CG56}
    private variable domainB {C50}
}

#######################################################################
#### constructor
#
body ::tycho::EditRetarg::constructor {args} {
    addTool newDomains -text {Compare Domains} -command "$this compareDomains"
    addTool domainAButton -text "Change Domain A: $domainA" \
            -command "$this changeDomainA"
    addTool domainBButton -text "Change Domain B: $domainB" \
            -command "$this changeDomainB"

    eval itk_initialize $args

    addInfo domainACount {Domain A stars} 0 3
    addInfo domainBCount {Domain B stars} 0 3
    addInfo commonStars {Common Stars} 0 3
    addInfo diffPorts {Different Ports} 0 3
    addInfo diffMultiports {Different MultiPorts} 0 3
    addInfo diffStates {Different States} 0 3
    addInfo domainAOnly {Domain A only} 0 3
    addInfo domainBOnly {Domain B only} 0 3
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### changeDomainA
# Change the name of one of the domains that we are going to compare
#
body ::tycho::EditRetarg::changeDomainA {} {
   set arglist [DialogWindow::newModal EntryQuery .e2 -queries "
       {domainA {Domain A:} $domainA}" ]

    foreach arg $arglist {
        set [lindex $arg 0] [lindex $arg 1]
    }
    addTool domainAButton -text "Change Domain A: $domainA" \
            -command "$this changeDomainA"
}
#######################################################################
#### changeDomainB
# Change the name of one of the domains that we are going to compare
#
body ::tycho::EditRetarg::changeDomainB {} {
   set arglist [DialogWindow::newModal EntryQuery .e2 -queries "
       {domainB {Domain B:} $domainB}" ]

    foreach arg $arglist {
        set [lindex $arg 0] [lindex $arg 1]
    }
    addTool domainBButton -text "Change Domain B: $domainB" \
            -command "$this changeDomainB"
}
#######################################################################
#### compareDomains
# Determine what stars are in two domains and compare them by plotting
# the information as a Forest.
#
body ::tycho::EditRetarg::compareDomains {} {
    set clashList [::tycho::DomainInfo::diffDomains $domainA $domainB]

    clear
    catch {delete object component graphics}

    # Cycle through the different types of clashes
    set headers [list commonStars commonButPorts commonButMultiPorts \
            commonButStates ${domainA}Only ${domainB}Only]
    set indexCount 0
    foreach header $headers {
        component graphics add $header {}
        foreach star [lindex $clashList $indexCount] {
            set contents [list tcl \
                    "::tycho::EditRetarg::printStars $star $header \
                    $domainA $domainB" ]
            component graphics add $star $contents $header
        }
        incr indexCount
    }
    domain $domainA
    addInfo domainACount {Domain A stars} [llength [knownlist]] 3
    domain $domainB
    addInfo domainBCount {Domain B stars} [llength [knownlist]] 3

    addInfo commonStars {Common stars} [llength [lindex $clashList 0]] 3
    addInfo diffPorts {Different Ports} [llength [lindex $clashList 1]] 3
    addInfo diffMultiports {Different MultiPorts} [llength \
            [lindex $clashList 2]] 3
    addInfo diffStates {Different States} [llength [lindex $clashList 3]] 3
    addInfo domainAOnly {Domain A only} [llength [lindex $clashList 4]] 3
    addInfo domainBOnly {Domain B only} [llength [lindex $clashList 5]] 3

    component graphics redrawGraph
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### printStars
# Print the same star from two different domains
# This procedure is called when the user double clicks on a star name
body ::tycho::EditRetarg::printStars { starName relation domainA domainB} {
    domain $domainA
    if [catch {set domainAPrint [::print $starName]}] {
        set domainAPrint "Star $starName is not present in domain $domainA"
    }
    domain $domainB
    if [catch {set domainBPrint [::print $starName]}] {
        set domainBPrint "Star $starName is not present in domain $domainB"
    }
    
    switch $relation "
        commonStars { 
            set relationMessage \
                    \"The $starName star has the same ports, multiports \
                    and states \
                    in $domainA and $domainB.\"
        }

        commonButPorts {
            set relationMessage \
                    \"The $starName star does not have the same ports \
                    in $domainA and $domainB.\"
        }
        commonButMultiPorts {
            set relationMessage \
                    \"The $starName star does not have the same multiports \
                    in $domainA and $domainB.\"
        }
        commonButStates {
            set relationMessage \
                    \"The $starName star does not have the same states \
                    in $domainA and $domainB.\"
        }
        ${domainA}Only {
            set relationMessage \
                    \"The $starName star is only in $domainA, not in $domainB.\"
        } 
        ${domainB}Only {
            set relationMessage \
                    \"The $starName star is only in $domainB, not in $domainA.\"
        }
        default {
            set relationMessage \
                    \"Internal Error: I don't know about: $relation\"
        }
    "
    ::tycho::HTMLMessage .editRetargPrintStars -html "
        <H1>Star: $starName in domains $domainA and $domainB</H1>
        $relationMessage

        <tcl><pre>
        ::tycho::EditPtlang .ePtlangA -star {$domainA $starName}
        .ePtlangA centerOnScreen
        </pre></tcl>
        <tcl><pre>
        ::tycho::EditPtlang .ePtlangB -star {$domainB $starName}
        .ePtlangB centerOnScreen
        </pre></tcl>
        <H2>$domainA Domain</H2>
        <pre>
        $domainAPrint
        </pre>
        <H2>$domainB Domain</H2>
        <pre>
        $domainBPrint
        </pre>
    "

    .editRetargPrintStars centerOnScreen
}
