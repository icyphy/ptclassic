# Itcl interface to the Ptolemy Block class.
#
# @Author: Edward A. Lee
#
# @Version: @(#)Block.itcl	1.4	07/21/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# For easier debugging
catch {delete class ::ptolemy::Block}

# Create the namespace if it doesn't exist
namespaceEval ::ptolemy {}

#######################################################################
#### Block
# This class defines an Itcl interface to the Ptolemy Block class.
# Here is an example of how to use the Block:
# <tcl><pre>
#     ::ptolemy::Block .main.x Ramp
# </pre></tcl>
# This creates a Ptolemy block called "x" in the universe "main" from
# class Ramp. The name of the *Block* object should always be the full
# name of the Ptolemy instance, which has the form
# _.univ.gal1.gal2...block_. This avoids name collisions because blocks
# in Ptolemy are only unique up to this full name. If the block is a
# master (e.g. a galaxy being defined), then its name has no leading
# period, and is a simple string. In Ptolemy, this corresponds to a
# block that is on the *KnownList* and that cannot be used as an
# instance.
#
# You can query this block for its ports
# <tcl><pre>
#     .main.x getPorts
# </pre></tcl>
# or its descriptor
# <tcl><pre>
#     .main.x getDescriptor
# </pre></tcl>
#
class ::ptolemy::Block {

    constructor {master args} {}
    destructor {}
    
    ###################################################################
    ####                   public variables                        ####

    ###################################################################
    ####                         public methods                    ####

    # Return the descriptor for the block.
    method getDescriptor {}

    # Return the domain of the block. FIXME: Not implemented yet!
    method getDomain {}

    # Return a list of ports to the block.
    method getPorts {args}

    ###################################################################
    ####                   protected methods                       ####

    # Create the Ptolemy block underlying this object.
    protected method createBlock {ptblockname master}

    # Remove the Ptolemy block with the current block name.
    protected method deleteBlock {}

    ###################################################################
    ####                   protected variables                     ####

    # The full name, including parent galaxies delimited by periods.
    protected variable fullname {.main.noname}

    # The block name without the parent galaxies.
    protected variable rootname {noname}

    ###################################################################
    ####                   private methods                         ####

    ###################################################################
    ####                   private variables                       ####
}

#######################################################################
#### constructor
#
body ::ptolemy::Block::constructor {master args} {
    # Block name is the instance name, minus the namespace information.
    # The name can be absolute (beginning with a period) or relative
    # to the current galaxy.
    set fullname [namespaceTail $this]

    # The part of this object name after the last period is called the
    # root name.
    set rootname [lindex [split $fullname .] end]

    # Delete then create the Ptolemy block.
    deleteBlock
    createBlock $fullname $master
}


#######################################################################
#### destructor
#
body ::ptolemy::Block::destructor {} {
    deleteBlock
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### getDescriptor
# Return a short description of the block.
#
body ::ptolemy::Block::getDescriptor {} {
    return [::pitcl::getDescriptor $fullname]
}

#######################################################################
#### getDomain
# Return the domain of the block.
#
body ::ptolemy::Block::getDomain {} {
    return [::pitcl::getDomain $fullname]
}

#######################################################################
#### getPorts
# Return a list of port names for the specified block.
# If options are specified, they can be any combination of:
# <ul>
# <li> -inputs
# <li> -outputs
# <li> -multiports
# </ul>
# The first two options indicate that inputs or outputs should be
# listed. Specifying both of these options lists only ports that are
# both an input and an output, supported in some domains.
# Specifying neither results in all ports being listed.
# The -multiports option specifies that only multiports should be
# listed, rather than the individual ports within the multiport.
# In this case, after each multiport is a list of its contained ports.
# For example, a multiport named "input" with two contained ordinary
# ports will appear in the result as "input {input#1 input#2}".
#
body ::ptolemy::Block::getPorts {args} {
    return [eval ::pitcl::ports $args $fullname]
}


    ###################################################################
    ###################################################################
    ####                      public procedures                    ####

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#####################################################################
#### createBlock
# Create a Ptolemy block in the current galaxy with the given name
# from the specified master.  The block name can be absolute (starting
# with a period) or relative to the current galaxy.
#
body ::ptolemy::Block::createBlock {ptblockname master} {
    if {$master == {}} {
        error "need a Ptolemy master for $ptblockname"
    }
    ::pitcl::addBlock $ptblockname $master
}

#####################################################################
#### deleteBlock
# Remove the Ptolemy block with the current block name.
# Derived classes may do something different.
#
body ::ptolemy::Block::deleteBlock {} {
    # The catch is in case the block does not exist in Ptolemy.
    catch {::pitcl::remove $fullname}
}

    ###################################################################
    ###################################################################
    ####                      private methods                      ####
