# Compiler baseclass that compiles and loads files
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### Compile
# The Compile baseclass provides a common interface that can be used
# to compile files and load them in.  Child clases, such as CompileCTcl
# derive from this class and refine the functionality.
#
# <p>
# Here is an example of how to use the Compile.  This example
# does not do much
# <tcl><pre>
#     set compiler [::tycho::Compile]
#     $compiler compileAndLoad {Compile.itcl}
# </pre></tcl>
#
class ::tycho::Compile {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    ###################################################################
    ####                         public methods                    ####

    # Compile each file in the list of filenames.
    method compile { filenames}

    # Compile and load in each file in the list of filenames.
    method compileAndLoad { filenames}

    # Compile and run in each file in the list of filenames.
    method compileAndRun { filenames}

    ###################################################################
    ####                         public methods                    ####

    public variable view {}
    ###################################################################
    ####                   protected methods                       ####

    # Check the source files for necessary features.
    protected method checkSourceFiles {}

    # Compile the file.
    protected method compileFiles {}

    # Create a makefile.
    protected method createMakefile {}

    # Initialize variables from the filename list.
    protected method initialize {filenames}

    # Run make and then load the result back into Tycho.
    protected method loadFiles {}

    # Determine the name of the makefile.
    protected method makefileName {}

    # Access the "misc" preferences
    protected method preference {mode args}

    # Print status messages to the controlling widget, if any.
    protected method putStatus {msg}

    ###################################################################
    ####                   protected variables                     ####

    # basename (filename before the extension) of the first file in the list.
    protected variable basename {}

    # Directory that the first file in the list resides in.
    protected variable dirname {}

    # List of files to be compiled and loaded.
    protected variable filenameList {}

    # First file in filenameList
    protected variable firstFile {}

    # Name of the makefile to use.
    protected variable makefile makefile
}

#######################################################################
#### constructor
#
body ::tycho::Compile::constructor {args} {
}


#######################################################################
#### destructor
#
body ::tycho::Compile::destructor {} {
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### compile
# Compile each file in the list of filenames.
#
body ::tycho::Compile::compile {filenames} {
    initialize $filenames
    # Should we check that the files exist here?
    checkSourceFiles
    set makefile [makefileName]
    createMakefile
    compileFiles
}
#######################################################################
#### compileAndLoad
# Compile and load in each file in the list of filenames.
#
body ::tycho::Compile::compileAndLoad {filenames} {
    compile $filenames
    loadFiles
}
#######################################################################
#### compileAndRun
# Compile and load in each file in the list of filenames.
#
body ::tycho::Compile::compileAndRun {filenames} {
    initialize $filenames
}


    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#######################################################################
#### checkSourceFiles
# Check the source files for necessary features. 
# For example, when a C file is loaded into Tcl, an initialization
# procedure with a specific name is called.
# In the Compile baseclass, this method is a noop.
#
body ::tycho::Compile::checkSourceFiles {} {
}

#######################################################################
#### compileFiles
# Compile the files
#
body ::tycho::Compile::compileFiles {} {
    putStatus "About to make shared object, when complete, be sure to \
	    close the Exec window to continue."
    set results [::tycho::execModal "make -f $makefile" $dirname]
    putStatus ""
    return $results
}

#######################################################################
#### createMakefile
# Create a makefile.   Usually subclasses modify this method.
# The makefile that is created is named by the *makefile* protected variable.
body ::tycho::Compile::createMakefile {} {
}

#######################################################################
#### initialize
# Initialize the some protected variables from the list of filenames.
# 
body ::tycho::Compile::initialize {filenames} {
    if {[llength $filenames] == 0} {
	error "::tycho::Compile::compileAndLoad must be passed a list of files"
    }
    set filenameList $filenames
    set firstFile [lindex $filenameList 0]
    set dirname [file dirname $firstFile]
    set basename [file rootname [file tail $firstFile]]
}

#######################################################################
#### loadFiles
# Run load the shared objects back into Tycho.
# In the Compile baseclass, this method is a noop.
#
body ::tycho::Compile::loadFiles {} {
}

#######################################################################
#### makefileName
# Determine the name of the makefile
# The directory where the first file in the list is searched for
# the following files in order:
# <OL>
# <LI> <CODE>makefile</CODE>
# <LI> <CODE>Makefile</CODE>
# <LI> A file with the same base as the file being evaluated and
# a <CODE>.mk</CODE> extension.  For example, if the file being
# evaluated is named <CODE>myTclCommands.c</CODE>, then we look for 
# <CODE>myTclCommands.mk</CODE>
# </OL>
#
body ::tycho::Compile::makefileName {} {
    if [file exists [file join $dirname makefile]] {
	set makefile makefile
    } elseif [file exists [file join $dirname Makefile]] {
	set makefile Makefile
    } else {
	set makefile $basename.mk
    }
}

#####################################################################
#### preference
# Access the preferences associated with this widget. This method
# overrides the default method in ::tycho::TWidget to access the
# "misc" preferences.
#
body ::tycho::Compile::preference {mode args} {
    eval ::tycho::preference $mode "misc" $args
}

#######################################################################
#### printStatus
# Print status messages if -view was passed at construction time.
#
body ::tycho::Compile::putStatus {msg} {
    if {$view != {}} {
	$view putStatus $msg
    }
}
