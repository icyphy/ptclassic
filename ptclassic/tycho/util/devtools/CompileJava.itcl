# Compile a Java file and run it.
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### CompileJava
# This class compiles a Java class and optionally runs it.
#
# <H2>Compilation Methods</H2>
# If the *.java* file contains a *main()*, then we call
# <CODE>java -cs</CODE> _ClassName_, which will check the modification times
# of the *.java* and *.class* file and compile if necessary.  Then
# the class file is run and we are done.
#
# If the *.java* file does not contain a *main()*, then we call 
# *javac* _ClassName_, which will compile the file.
#
# After the compilation successfully completes, we check 
# if there is a _ClassName_*.html* file present, then we run
# *appletViewer* _ClassName.html_.  It would be nice if we checked to
# see if the *.java* file extends *Applet*, but that is more work.
#
# <H2>Other possible compilation methods</H2>
# Below we discuss other possible compilation methods that are 
# <B>not</B> implemented.
#
# If a *makefile* is present in the same directory as the _ClassName.java_
# file, then we should run 'make'.  There are several problems here:
# Most directories that have version control in them will have a makefile.
# The makefile might not know how to compile or run the classes.  There
# could be multiple targets, so just running *make* might not be sufficient.
#
# We could generate a *ClassName.mk* file and then run
# *make -f ClassName.mk*.  This is what the *CompileCTcl* class does.
#
# <H2>CLASSPATH</H2>
# The *CLASSPATH* environment variable controls where the Java tools
# such as *javac*, *java*, and *appletviewer*.   *javac* and *java* tak
# a *-classpath* option, *appletviewer* does not.
# Tycho reads the *classpath* preference and sets the *CLASSPATH* environment
# variable before calling the java tools.  The *classpath* preference is
# set in the miscellaneous preferences.
#
# <p>
# Here is an example of how to use the CompileJava class:
# <tcl><pre>
#    set compiler [::tycho::CompileJava [::tycho::autoName .compileJava]]
#    $compiler configure -view Blink.java
#    $compiler compileAndLoad [list Blink.java]
#    delete object $compiler
# </pre></tcl>
#
class ::tycho::CompileJava {
    inherit ::tycho::Compile

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                   public methods                          ####

    # Compile and optionally run a java class.
    method compileAndRun {filename}

    ###################################################################
    ####                   protected methods                       ####


    # Check the source files for necessary features.
    protected method checkSourceFiles {}

    ###################################################################
    ####                   protected methods                       ####

}

#######################################################################
#### constructor
#
body ::tycho::CompileJava::constructor {args} {
}


#######################################################################
#### destructor
#
body ::tycho::CompileJava::destructor {} {
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### compileAndRun
# Compile and optionally run a java file.
#
body ::tycho::CompileJava::compileAndRun {filenames} {
    global env
    set classPath [preference get classPath]
    if {$classPath == {} } { 
        if [info exists env(CLASSPATH)] { 
            unset env(CLASSPATH)
        }
    } else {
        set env(CLASSPATH) $classPath
    }
    ::tycho::Compile::compileAndRun $filenames

    foreach javaFile $filenameList {
        lappend classNameList [file tail [file rootname $javaFile]]
    }
    if [checkSourceFiles] {
        # We have a main()
        putStatus "about to exec java -cs -v $classNameList"
        ::tycho::execModal "java -cs -v $classNameList" $dirname
    } else {
        # We don't have a main
        ::tycho::execModal "javac -verbose $filenameList" $dirname
        set appletFile [file rootname $firstFile]
        if [file exists $appletFile.html] {
            ::tycho::execModal "appletviewer $appletFile.html" $dirname
        }
    }
    
}
    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#######################################################################
#### checkSourceFiles
# Check the source files for necessary features. 
# Return 1 if this file has a main() statement.
# 
body ::tycho::CompileJava::checkSourceFiles {} {
    # Search for main()
    set sawMain 0
    # catch all of this incase the file does not yet exist
    if ![catch {set fd [open $firstFile r]}] {
        while {[gets $fd linein] >= 0} {
            if [regexp {main(.*)} $linein] {
                set sawMain 1
                break
            }
        }
        close $fd
    }
    return $sawMain
}
