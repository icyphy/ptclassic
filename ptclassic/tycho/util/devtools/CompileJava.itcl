# Compile a Java file and run it.
#
# @Author: Christopher Hylands
#
# @Version: @(#)CompileJava.itcl	1.26 09/09/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### CompileJava
# This class compiles a Java class and optionally runs it.
#
# <H2>Compilation Methods</H2>
# If the *.java* file contains a *main()*, then we call
# <CODE>java -cs</CODE> _ClassName_, which will check the modification times
# of the *.java* and *.class* file and compile if necessary.  Then
# the class file is run and we are done.
#
# If the *.java* file does not contain a *main()*, then we call 
# *javac* _ClassName_, which will compile the file.
#
# After the compilation successfully completes, we check 
# if there is a _ClassName_*.html* file present, then we run
# *appletViewer* _ClassName.html_.  It would be nice if we checked to
# see if the *.java* file extends *Applet*, but that is more work.
#
# <H2>Other possible compilation methods</H2>
# Below we discuss other possible compilation methods that are 
# <B>not</B> implemented.
#
# If a *makefile* is present in the same directory as the _ClassName.java_
# file, then we should run 'make'.  There are several problems here:
# Most directories that have version control in them will have a makefile.
# The makefile might not know how to compile or run the classes.  There
# could be multiple targets, so just running *make* might not be sufficient.
#
# We could generate a *ClassName.mk* file and then run
# <CODE>make -f ClassName.mk</CODE>.  This is what the *CompileCTcl* class does.
#
# <H2>CLASSPATH</H2>
# The *CLASSPATH* environment variable controls where the Java tools
# such as *javac*, *java*, and *appletviewer*.   *javac* and *java* take
# a *-classpath* option, *appletviewer* does not.
#
# If *useEnvClassPath* style parameter is true, then the *CLASSPATH* is read
# from the environment *$env(CLASSPATH)* and passed to *java* or *javac*
#
# If the *useEnvClassPath* style parameter is false, then Tycho reads the
# *classPath* parameter and sets the *CLASSPATH* environment
# variable before calling the java tools.  The *useEnvClassPath* and 
# *classpath* parameters are set in the "java" stylesheet.
#
# <p>
# Here is an example of how to use the CompileJava class:
# <tcl><pre>
#    set compiler [::tycho::CompileJava [::tycho::autoName .compileJava]]
#    $compiler configure -view Blink.java
#    $compiler compileAndLoad [list Blink.java]
#    delete object $compiler
# </pre></tcl>
#
class ::tycho::CompileJava {
    inherit ::tycho::Compile

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                   public methods                          ####

    # Compile and optionally run a java class.
    method compileAndRun {filename}

    ###################################################################
    ####                   public procs                          ####

    # Get the classpath from the preferences.
    proc classpath {}

    ###################################################################
    ####                   protected methods                       ####


    # Check the source files for necessary features.
    protected method checkSourceFiles {}

    ###################################################################
    ####                   protected variables                     ####

    # Name of the Exec widget used to run appletviewer.
    protected variable appletviewerWidget {}

    # Name of the Exec widget used to run java once we've compiled.
    protected variable javaRunWidget {}
}

#######################################################################
#### constructor
#
body ::tycho::CompileJava::constructor {args} {
}


#######################################################################
#### destructor
#
body ::tycho::CompileJava::destructor {} {
    if {$monitorWidget != {} && \
            [infoObjects ::tycho::$monitorWidget] != {}} {
        $monitorWidget markUnmodified
        catch {delete object $monitorWidget}
    }
    if {$appletviewerWidget != {} && \
            [infoObjects ::tycho::$appletviewerWidget] != {}} {
        $appletviewerWidget markUnmodified
        catch {delete object $appletviewerWidget}
    }
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####
#######################################################################
#### classpath
# Determine what the classpath should be.
#
body ::tycho::CompileJava::classpath {} {
    global env tcl_platform
    set classPathArg ""
    set classPath ""
    if [::tycho::stylesheet get java useEnvClassPath] {
        if [info exists env(CLASSPATH)] { 
	    set classPath [::tycho::expandPathSplit $env(CLASSPATH)]
	    set classPathArg "-classpath $classPath"
	}
    } else {
	set classPath [::tycho::expandPath \
                [::tycho::stylesheet get java classPath]]
	if {$classPath != {} } { 
	    set classPathArg "$classPath"
	}
    }
    
    # Check that each element of the class path exists
    foreach dirorfile $classPath {
        if [catch {set expandeddirorfile \
                [uplevel #0 subst $dirorfile]} errMsg ] {
            # This is an error because if the substitution above failed,
            # then the substitution at the end of this file will fail too.
            error "The classPath style parameter contains `$dirorfile' \
		    which failed to expand properly.  The error message \
		    was: \n$errMsg\n\n\
                    To change the classPath parameter, select Preferences \
                    menu choice under the Help menu, and then select the \
		    Java style-sheet"
        }
        if { ![ file isdirectory $expandeddirorfile] && \
		![file readable $expandeddirorfile] } {
            ::tycho::warn \
		    "The classPath style parameter contains `$dirorfile' \
		    as an element, which expands to `$expandeddirorfile' \
		    which does not exists  (Either it is not a directory \
                    or it is not a readablefile).\n\
		    To change the classPath parameter, select Preferences \
                    menu choice under the Help menu, and then select the \
		    Java style-sheet"
        }
        if {$tcl_platform(platform) == "windows"} {
            if [regexp {[^\]\\[^\]} $expandeddirorfile] {
                ::tycho::warn "The classPath style parameter contains \
			`$dirorfile' as an element, which \
                        expands to `$expandeddirorfile' which contains a \
			backslash.  In the Sun JDK1.1.2 \
                        under Windows, a backslash might prevent javac from \
			properly finding a class.\n\
			To change the classPath parameter, select \
			Preferences menu choice under the Help menu, and then \
			select the Java style-sheet"
            }
        }
    }


    switch $tcl_platform(platform) {
        {unix} { set classpath [join $classPathArg ":"]}
	# Yes, we need that many slashes.
        {windows} { set classpath [join $classPathArg "\\\\\\\\\\;"]}
        {macintosh} { error "Internal error: CompileJava::classPath, \
		macintosh not supported"}
    }
    if {"$classpath" != ""} { 
        return [uplevel #0 subst $classpath]
    } else {
        return ""
    }
}

#######################################################################
#### compileAndRun
# Compile and optionally run a java file.
#
# If useEnvClassPath is true, then get the CLASSPATH from $env(CLASSPATH).
# If useEnvClassPath is false, then get the CLASSPATH from the classPath
# style parameter.
#
body ::tycho::CompileJava::compileAndRun {filenames} {
    global env tcl_platform

    # Initialize protected vars in the parent class such as dirname
    ::tycho::Compile::compileAndRun $filenames

    foreach filename $filenames {
        lappend shortFilenameList [file tail $filename]
    }

    # Under NT, if you add -verbose, then execModal will think that there
    # are errors.
 #     switch $tcl_platform(platform) {
 #         unix { set compileString \
 #                 "javac -classpath [classpath] $shortFilenameList"}
 #         windows { 
 #             # Windows has a length limit on the size of the command we
 #             # can execute.
 #             set env(CLASSPATH) [classpath]
 #             set compileString "javac $shortFilenameList"
 #         }
 #    }
    set classpath [classpath]
    if {"$classpath" != ""} {
        set compileString \
                 "[::tycho::stylesheet get java javaCompileCommand] -classpath $classpath $shortFilenameList"
     } else {
         set compileString \
                 "[::tycho::stylesheet get java javaCompileCommand] $shortFilenameList"
     }
    if [checkSourceFiles] {
        # We have a main(), so we don't run appletviewer
        set runAppletViewer 0
    } else {
        set runAppletViewer 1
    }

    # Compile.  If we already have a monitorWidget, reuse it. 
    if {![winfo exists $monitorWidget] && \
            [infoObjects $monitorWidget] == {}} {
        set retList [::tycho::execModal $compileString $dirname]
    } else {
        set retList [::tycho::execModal {} {} $monitorWidget]
    }
    set monitorWidget [lindex $retList 1]

    # If necessary, run the appletviewer.
    # If there is already an appletviewer widget, reuse it.
    set execStatus [lindex $retList 0]
    if {$runAppletViewer == 1 && $execStatus == "normal"} {
        set appletFile [file rootname $firstFile]
        if [file exists $appletFile.html] {
            if {![winfo exists $appletviewerWidget] && \
                    [infoObjects $appletviewerWidget] == {}} {
                set appletviewerWidget [::tycho::view Monitor -toolbar 1]
                set retList [::tycho::execModal \
                        "appletviewer $appletFile.html" $dirname \
                        $appletviewerWidget]
            } else {
                set retList [::tycho::execModal {} {} $appletviewerWidget]
            }
            set appletviewerWidget [lindex $retList 1]
        }
    } else {
        if {$execStatus == "normal"} {
            # The .java file contains a main statement, so run it
            if {![winfo exists $javaRunWidget] && \
                    [infoObjects $javaRunWidget] == {}} {
                set javaRunWidget [::tycho::view Monitor -toolbar 1]
                set retList [::tycho::execModal \
                        "java [file root [file tail $filenames]]" $dirname \
                        $javaRunWidget]
            } else {
                set retList [::tycho::execModal {} {} $javaRunWidget]
            }
            set javaRunWidget [lindex $retList 1]
        }

    }
}
    ###################################################################
    ###################################################################
    ####                      protected methods                    ####


#######################################################################
#### checkSourceFiles
# Check the source files for necessary features. 
# Return 1 if this file has a main() statement.
# 
body ::tycho::CompileJava::checkSourceFiles {} {
    # Search for main()
    set sawMain 0
    # catch all of this incase the file does not yet exist
    if ![catch {set fd [open $firstFile r]}] {
        while {[gets $fd linein] >= 0} {
            if [regexp {main(.*)} $linein] {
                set sawMain 1
                break
            }
        }
        close $fd
    }
    return $sawMain
}
