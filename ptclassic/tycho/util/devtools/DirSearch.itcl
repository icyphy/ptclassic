# Search files in a directory using an egrep like proc
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### DirSearch
# Search a directory with a regexp.
#
# <p>
# Here is an example of how to use the DirSearch:
# <tcl><pre>
#     ::tycho::DirSearch .x
# </pre></tcl>
#
class ::tycho::DirSearch {
    inherit ::tycho::FileBrowser

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Bring up help window.
    method help {}

    # This method is invoked by the Ok button.
    method ok {}

    ##################################################################
    ####                   protected methods                      ####

    # Set the contents of the entry box.
    protected method setEntry {string}

    # Process a file or directory selection.
    protected method processItem {filename {ifdir {}}}

    ###################################################################
    ####                   private variables                       ####

    # Name of the file that contains the .idx format egrep data.
    private variable egrepOutputFile {}
}


#######################################################################
#### constructor
#
body ::tycho::DirSearch::constructor {args} {
    configure -text {Select File(s) (globbing ok):} \
            -title {Directory Search}
    # Delete directory button.
    $itk_component(bbox) delete mkdir 

    line regexp {Search for} {}
    check ignorecase {Ignore case} 1
    # Process any unevaluated arguments.
    eval itk_initialize $args

    set egrepOutputFile [::tycho::tmpFileName egrep .idx]

    # Register this window so it appears on the menus
    ::tycho::register window DirSearch $this \
            -label [tycho::autoName "DirSearch "] \
            -mode dirsearch
}


#######################################################################
#### destructor
#
body ::tycho::DirSearch::destructor {} {
    file delete -force $egrepOutputFile
    # Deregister this window
    ::tycho::deregister window DirSearch $this
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### ok
# Method that is called when the Ok button is hit
#
body ::tycho::DirSearch::ok {} {
    # Change the what ever directory we ended up in from the FileBrowser  
    cd $localCWD

    if { [set entry [get entry]] == {} } {
        set lb $itk_component(listbox)
        foreach selectIndex [$lb curselection] {
            lappend entry [list [$lb get $selectIndex]]
        }
    } else {
        if [file isdirectory $entry] {
            processItem $entry
            return
        }
    }

    set regexp [get regexp]
    if { $regexp == {} } {
        return
    }

    if [get ignorecase] {
        set egrepList [eval ::tycho::egrep -i [list $regexp] $entry]
    } {
        set egrepList [eval ::tycho::egrep [list $regexp] $entry]
    }

    #puts " $regexp [get entry] $egrepList"
    set fd [open $egrepOutputFile w]
    puts $fd "# <h1>This is a Tycho index file.  Use tycho to view it.</h1>\
            <nothtml"
    puts $fd "\{Egrep `$regexp'\}\n\{"

    foreach egrepItem $egrepList {
        regexp {(^[^ :]*): *([0-9]*):(.*)} $egrepItem dummy \
                filename linenum patternline
        if ![info exists filename] {
            set printerrmsg 1
            # Deal with egreps on only one file, where the filename
            # is not in the output
            if {[llength $entry] == 1 && \
                    [regexp {([0-9]*):(.*)} $egrepItem dummy \
                    linenum patternline]} {
                set filename $entry
                set printerrmsg 0
            }
            if $printerrmsg {
                puts "Internal DirSearch error: regexp `$egrepItem' failed!\n\
                        line was: `$egrepItem'\n\
                        ::tycho::egrep $regexp $entry \n\
                        returned: $egrepList"
      h          continue
            }
        }
        if {[file pathtype $filename] != "absolute"} {
            #set filename [::tycho::simplifyPath [file join [pwd] $filename]]
            set filename [file join [pwd] $filename]
        }
        puts $fd "{[list "$filename $patternline"] $filename {line $linenum}}"
    }
    puts $fd "\}\n# >"
    close $fd

    # Bring up the index browser
    set nm [::tycho::autoName .index]
    ::tycho::IndexBrowser $nm \
            -file $egrepOutputFile \
            -width 100 -closewindow 0 \
            -text {Refine search:}
    $nm centerOnScreen
}


######################################################################
#### help
# Open a help window.
#
body ::tycho::DirSearch::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [::tycho::url join $TYCHO kernel doc \
            usersGuides DirSearchHelp.html]
}

    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

######################################################################
#### processItem
# Check and process the user selection. If the argument is the name of a
# file, then the command specified with the -command option is invoked
# with that filename as an argument, and a 1 is returned. If the argument
# is a directory name, then the listbox is updated with the contents
# of the directory and a 0 is returned. If the argument is an
# empty string, then nothing is done and a zero is returned. If the
# specified filename exists but is not readable, an error is triggered.
# If the filename does not exist as either a file or a directory, then
# the command given by the -command option is invoked on that file. If
# the entry is invalid for some reason, the user is warned and the
# method returns 0.
#
body ::tycho::DirSearch::processItem {filename {ifdir {}}} {
    ::tycho::FileBrowser::processItem $filename $ifdir
    return 0
}

######################################################################
#### setEntry
# This method clears the current contents of the entry box and replaces
# them with the string passed as an argument.  Derived classes may redefine
# this to take further action as well.
#
body ::tycho::DirSearch::setEntry {string} {
    clear entry
    insert entry $string
}
