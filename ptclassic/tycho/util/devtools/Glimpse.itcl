# Interface to the Glimpse search engine.
#
# @Author: Christopher Hylands
#
# @Version: @(#)Glimpse.itcl	1.39	01/27/99
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### options
#

#######################################################################
#### Glimpse
# Glimpse "is an indexing and query system that allows you to search through
# all your files very quickly"
#
# The glimpse binary is not shipped with Tycho, see
# see <A HREF="http://glimpse.cs.arizona.edu">http://glimpse.cs.arizona.edu</A>
#
# In Tycho, $TYCHO/makefile contains a 'glimpse' rule that will build
# $TYCHO/.glimpse_index
#
# Here is an example of how to use the Glimpse:
# <tcl><pre>
# ::tycho::Glimpse .g
# .g centerOnScreen
# </pre></tcl>
#
class ::tycho::Glimpse {
    inherit ::tycho::Query

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # The command to execute on a find command.
    itk_option define -findcommand findcommand Findcommand ""

    ###################################################################
    ####                         public methods                    ####

    # Call glimpse on the pattern and produce an index browser with the results
    method glimpseSearch {}

    # Bring up help for this widget
    method help {}

    # Update the glimpse_index entry widget
    method _updateGlimpseIndex {}

    ###################################################################
    ####                         public procs                      ####

    # Update the Tycho glimpse database
    proc updateTychoDatabase {}

    ###################################################################
    ####                         private variables                 ####
    private variable glimpseOutputFile {}
}

#######################################################################
#### constructor
#
body ::tycho::Glimpse::constructor {args} {
    global PTOLEMY TYCHO tcl_library tcl_platform
    if {$tcl_platform(platform) == "macintosh"} {
	error "Sorry, Glimpse is not supported on the Mac,\nthere is\
		no Tcl \"exec\" on the Mac."
    }

    configure -queries [list \
	{line pattern {Search pattern:} {}} \
	[list line glimpse_index {Glimpse Index:} \
                [file join $TYCHO .glimpse_index]] \
    ]

    eval itk_initialize $args

    # If the findcommand option has not been set, set the default now.
    # This has to be done in the constructor rather than in the class
    # definition (as a default) because "$this" is known here.
    if {$itk_option(-findcommand) == {}} {
	configure -findcommand "$this glimpseSearch"
    }

    $itk_component(bbox) buttonconfigure ok \
	    -text {Find <Ret>} \
	    -command "$this glimpseSearch"

    set buttonList {Tycho}
    # If the $PTOLEMY environment variable is set and 
    # $PTOLEMY/src/.glimpse_index exists, then offer two buttons,
    # one to set the index to use $PTOLEMY/src/.glimpse_index,
    # one to set the index to use $TYCHO/.glimpse_index
    if {[info exists PTOLEMY] && \
            [file exists [::tycho::expandPath \
            [file join $PTOLEMY src .glimpse_index]]]} {
        lappend buttonList {Ptolemy}
    }
    if [file exists /usr/sww/doc/faq] {
        lappend buttonList {SwwFaqs}
    }
    if [file exists [file join \
            [file dirname [file dirname [file dirname $tcl_library]]] \
            man .glimpse_index]] {
        lappend buttonList {Tcl}
    }
    if {$buttonList != {Tycho}} {
        lappend buttonList {Clear}
        radio defaultIndex {Default Index:} $buttonList \
                Tycho -command "$this _updateGlimpseIndex"
    }

    addButton update -text "Update Tycho DB" \
            -command "::tycho::Glimpse::updateTychoDatabase"

    addButton help -text "Help" -command "$this help"

    if {! [file exists [file join $TYCHO .glimpse_index]]} {
        set nm [::tycho::autoName .glimpseYNC]
        ::tycho::YesNoCancel $nm \
                -text "The glimpse file \
                `[file join $TYCHO .glimpse_index]' \
                does not exist.  Create it now?"
        set response [::tycho::Dialog::wait $nm]
        if {$response == -1 } {
            ::tycho::silentError
        }
        if {$response == 1 } {
            updateTychoDatabase
        }
    }

    # Register this window so it appears on the menus
    # FIXME: This should check that the "glimpse" mode actually exists
    ::tycho::register window Glimpse $this \
            -label [tycho::autoName "Glimpse "] \
            -mode glimpse
}

#######################################################################
#### destructor
#
body ::tycho::Glimpse::destructor {} {
    # Delete the temporary output file
    file delete -force $glimpseOutputFile

    # Deregister this window
    ::tycho::deregister window Glimpse $this
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#####################################################################
#### glimpseSearch
# Use the glimpse command to generate an index.

#
body ::tycho::Glimpse::glimpseSearch {} {
    global TYCHO
    set pattern [get pattern]
    set glimpse_index [list [get glimpse_index]]
    if {! [file exists [lindex $glimpse_index 0]]} {
        error "$glimpse_index does not exist.\n\
                If this is the Tycho glimpse file, and if you have glimpse\n\
                installed, then you need to run\
                (cd $TYCHO; make glimpse).\n\
                If you do not have glimpse, you can obtain it from\
                http://glimpse.cs.arizona.edu"
    } 
    # Open the temporary index file, write the header.
    set glimpseOutputFile [::tycho::tmpFileName glimpse .idx]
    set fd [open $glimpseOutputFile w]
    puts $fd "# <h1>This is a Tycho index file.  Use tycho to view it.</h1>\
            <nothtml"
    puts $fd "{Glimpse $pattern}\n{"

    # Unix only? exec glimpse and get the output:
    set glimpseIndexDir [file dirname [file join [lindex $glimpse_index 0]]]

    if {[::tycho::pathSearch glimpse] == {} } {
	error "glimpse is not in your path.\nSee the glimpse home page\
		(http://glimpse.cs.arizona.edu) for sources"

    }

    # glimpse options: -y = don't prompt -n = show line numbers
    set glimpseOut [busy exec glimpse -y -n -H "$glimpseIndexDir" $pattern]
    set listGlimpseOut [split $glimpseOut '\\\n']
    foreach glimpseItem $listGlimpseOut {
        # FIXME: we substitute $TYCHO for any pathname that starts with
        # */tycho/. Since we have paths like tycho/java/tycho, we need to
        # substitute the _first_ /tycho/ or we will get a bogus path.
        # We could use ::tycho::simplifyPath here, except we
        # want to be able to use the glimpse index created by a user
        # other than the user running glimpse, so we need to substitute
        # in the user's $TYCHO so that they can edit the files that
        # glimpse points to.  Note that simplifyPath will not do the
        # proper substitution here, since the user's $TYCHO is not
        # necessarily the same as the $TYCHO of the user who created
        # the glimpse index.  
        regsub {^[^t][^y][^c][^h][^o]*/tycho/(.*)} $glimpseItem \
                {$TYCHO/\1} shortGlimpseItem
        regexp {(^[^ :]*): ([0-9]*):(.*)} $shortGlimpseItem dummy \
                filename linenum patternline
        if ![info exists filename] {
            error "Internal Glimpse error: regexp `$shortGlimpseItem' failed!\n\
                    line was: `$glimpseItem'\n\
                    glimpse command returned: $glimpseOut" 
        }
        puts $fd "{[list "$filename $patternline"] $filename {line $linenum}}"
    }
    puts $fd "}\n# >"
    close $fd

    # Bring up the index browser
    set nm [::tycho::autoName .index]
    ::tycho::IndexBrowser $nm \
            -file $glimpseOutputFile \
            -width 100 -closewindow 0
    $nm centerOnScreen
}

######################################################################
#### help
# Open a help window.
#
body ::tycho::Glimpse::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO util devtools doc usersGuides \
	    GlimpseHelp.html] html
}

#####################################################################
#### _updateGlimpseIndex
# Update the glimpse_index entry from the value of the 
# Tycho/Ptolemy index buttons.  This method is public only because
# of the way Tk handles radiobutton -command options.
#
body ::tycho::Glimpse::_updateGlimpseIndex {} {
    global TYCHO PTOLEMY tcl_library

    clear glimpse_index

    # In alphabetical order
    switch [get defaultIndex] {
        Clear {}
        Ptolemy {insert glimpse_index [file join $PTOLEMY src .glimpse_index]}
        SwwFaqs {insert glimpse_index \
                [file join /usr sww doc faq .glimpse_index]}
        Tcl {insert glimpse_index [file join \
                [file dirname [file dirname [file dirname $tcl_library]]] \
                man .glimpse_index]}
        Tycho {insert glimpse_index [file join $TYCHO .glimpse_index]}

        default {error \
        "updateGlimpseIndex: Don't understand `[get defaultIndex]'"}
    }
}

    ###################################################################
    ###################################################################
    ####                      public procs                         ####

#####################################################################
#####################################################################
#### updateTychoDatabase
# Update $TYCHO/.glimpse_index by running 'make glimpse'
#
body ::tycho::Glimpse::updateTychoDatabase {} {
    global TYCHO
    if {[::tycho::pathSearch glimpseindex] == {} } {
	error "glimpseindex is not in your path.\nSee the glimpse home page\
		(http://glimpse.cs.arizona.edu) for sources"

    }

    # Save .glimpse_exclude, remove .glimpse*
    file delete -force [file join $TYCHO glimpse_exclude]
    file copy -force [file join $TYCHO .glimpse_exclude] \
	    [file join $TYCHO glimpse_exclude]

    eval file delete -force [glob [file join $TYCHO .glimpse*]]
    file copy -force [file join $TYCHO glimpse_exclude] \
	    [file join $TYCHO .glimpse_exclude]

    # Create a monitor window and make it run make glimpse.
    ::tycho::view Monitor -toolbar 1 \
            -command [list glimpseindex -H "$TYCHO" "$TYCHO"] \
            -dir [file join $TYCHO] \
            -autostart 1 -autodestroy 1
    file delete -force [file join $TYCHO glimpse_exclude]
}
