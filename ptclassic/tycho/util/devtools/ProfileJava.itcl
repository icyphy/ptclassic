# View Java Profiler output
#
# @Author: Christopher Hylands
# @Contributor: Edward A. Lee, based on ProfileTcl.itcl
#
# @Version: @(#)ProfileJava.itcl	1.4 01/27/99
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### ProfileJava
# View .prof files produced by java -profile output.
# A sample profile file starts with:
#<pre>
#count callee caller time
#2 Prof.C()V Prof.B()V 1
#2 java/io/PrintStream.println(Ljava/lang/String;)V Prof.C()V 1
#</pre>

class ::tycho::ProfileJava {
    inherit ::tycho::EditForest

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Open a help window.
    method help {}

    # Cancel ongoing profiling.
    method profileCancel {}

    # Turn profiling off and report the results
    method profileDisplay {}

    # Update the times displayed at the bottom.
    method updateTimes {}

    ###################################################################
    ####                         protected methods                 ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ###################################################################
    ####                         private variables                 ####

    # Controls whether profiling is stopped.
    private variable cancel 0

    ###################################################################
    ####                          private methods                  ####

    # Initialize the tool bar.
    private method _initializeToolbar {toolbar}


    ###################################################################
    ####                          private procs                    ####

    # Demangle a java method name
    private proc _javaDemangle {methodName}
}

#######################################################################
#### constructor
#
body ::tycho::ProfileJava::constructor {args} {
    global env tycho
 
    # Add a display at the bottom for the profile stats.
    addInfo count {Call count} 0 10 \
            "Number of times the function under the cursor was called."
    addInfo real {Real time} 0 10 \
            "Amount of Real time in milliseconds the function under the \
            cursor consumed."
    addInfo realPercent {Real %} 0 8 \
            "Percentage of the total Real time in milliseconds the function \
            under the cursor"
    addInfo cpu {CPU time} 0 10 \
            "Amount of CPU time in milliseconds the function under the \
            cursor consumed"
    addInfo cpuPercent {CPU %} 0 8 \
            "Percentage of the total CPU time in milliseconds the function \
            under the cursor"
    #eval itk_initialize $args

    # Set up bindings to update the times.
    $slate bind node <Enter> "$this updateTimes"

}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### help
# Open a help window.
#
body ::tycho::ProfileJava::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO util devtools doc \
	    usersGuides ProfileJavaHelp.html] html
}

#######################################################################
#### profileCancel.
# Turn profiling off and do not report the results.
#
body ::tycho::ProfileJava::profileCancel {} {
    set cancel 1
    toolbar enable display
    toolbar disable cancel
}

#######################################################################
#### profileDisplay
# 
#
body ::tycho::ProfileJava::profileDisplay {} {
    toolbar disable display
    toolbar enable cancel
    #profile off results
    #parray results
    clear
    set cancel 0
    set depth 1
    set maxdepth 1

    # If we knew we had TclX, then we could use lassign in the inner loop
    # However, the user might have installed our standalone
    # version of profile, in which case lassign is not present.

     # Place this outside the loop for performance
    set colors [list black navyblue blue cyan purple magenta red orange \
            yellow white white]

        #set fdin [open [filename] r] 
        set fdin [open java.prof r]
        # Get the first line, which contains the column headers:
        # 'count callee caller time'
	gets $fdin line
	set lineNumber 0
        set maxLineNumber 100
	while ![eof $fdin] {
	    if {[gets $fdin line] == -1 \
                    || [regexp {^handles_used:} $line] \
                    || $lineNumber > $maxLineNumber} {
		break
	    }

            if { [expr {$lineNumber % 10}] == 0 } {
                if { $cancel == 1 } {
                    set cancel 0
                    toolbar enable display
                    toolbar disable cancel
                    redrawGraph
                    return
                }
                putStatus "Processing Line Number $lineNumber of $maxLineNumber"
                ::tycho::safeUpdate $this
            }
	    incr lineNumber
	    #puts $line
	    set lineList [split $line]
	    set count [lindex $lineList 0]
	    set callee [lindex $lineList 1]
	    set caller [lindex $lineList 2]
	    set time [lindex $lineList 3]
            set color black
	    set contents [list \
		    count $count \
		    label [list $callee] \
		    color $color \
		    time $time]
	    #puts "\{add \{$callee\} \{label \{$callee\}\}\
	    #	   \{$caller\}\}"
            #   puts "[_javaDemangle $callee] $contents [_javaDemangle $caller]"
	    add [_javaDemangle $callee] $contents [_javaDemangle $caller]
	}
	close $fdin
    # Repair if necessary    
    [graph] verifyAll 1    
    toolbar enable display
    toolbar disable cancel
    redrawGraph

}


#######################################################################
#### updateTimes
# Update the times displayed at the bottom to those of the node closest
# to the current position of the mouse.
#
body ::tycho::ProfileJava::updateTimes {} {
    set node [current]
    if {$node == {}} {return}
    set root [[graph] roots]
    set fst [graph]

    # Determine the total about of Real and CPU time 
    array set contents [$fst contents $root]
    set totalReal $contents(real)
    set totalCPU $contents(cpu)

    array set contents [$fst contents $node]

    addInfo count {Call count} $contents(count) 
    addInfo real {Real time} $contents(real) 
    if {$totalReal != 0.0} {
        addInfo realPercent {Real %} \
                [format "%5.3f" \
                [expr {$contents(real) / ($totalReal + 0.0) *100}]]
    }
    addInfo cpu {CPU time} $contents(cpu) 
    if {$totalCPU != 0.0} {
        addInfo cpuPercent {CPU %} \
                [format "%5.3f" \
                [expr {$contents(cpu) / ($totalCPU + 0.0) *100}]]
    }
}


####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::ProfileJava::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$toolbar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::ProfileJava::_initializeToolbar $toolbar
    }

    # Give the window a title
    displayer configure -title {Java Profile Viewer}
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### _initializeToolbar
# Initialize the tool bar.  Adds entries specific to this class.
#
body ::tycho::ProfileJava::_initializeToolbar {toolbar} {
    $toolbar button display \
            -text Display \
            -description {Display profile as a call tree} \
            -command "$this busy $this profileDisplay"

    $toolbar button cancel \
            -text Cancel \
            -description {Cancel profile rendering} \
            -command "$this profileCancel"

    $toolbar disable cancel
}
#########################################################################
#########################################################################
####                     private procs                               ####

#####################################################################
#### _javaDemangle
# Demangle the name of a java method
#
body ::tycho::ProfileJava::_javaDemangle {methodName} {
    regsub {;} $methodName {,} m1
    regsub {\[} $m1 {array} m2
    return $m2
}
