##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Class
#
# The _Class_ class implements a model of a object-oriented class. It
# is general enough to represent classes in most OO languages, although
# there may be reason to subclass it to provide access methods 
# more suitable to particular languages. It is designed to be
# usable both for documenting classes and for use in 
# object models. The model has the following attributes:
# <ul>
#   <li><b>-name</b>: The class name of the class. (i.e. ::tycho::Class)
#   <li><b>-language</b>: The language in which the class was written.
#       Default is a null string.
#   <li><b>-source</b>: The file in which the class resides.
#   <li><b>-interface</b>: The file in which the class' interface resides.
# </ul>
#
# The model has the following entities:
# <ul>
# <li><b>parent</b> _name_: A parent of the current class. Parents can
# appear only at the top level. Parents have the following attributes:
#   <ul>
#   <li><b>-sourcefile</b>: The file in which the parent class resides.
#   <li><b>-docfile</b>: The file with the parents documentation (.tim).
#   </ul>
# 
# <li><b>constructor</b> _name_: A constructor. Constructors should be named
# according to the language. (See note following methods below.)
# Constructors can appear only at the top level. Constructors have the 
# following attributes:
#   <ul>
#   <li><b>-protection</b>: The protection level of the method. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "public."
#   <li><b>-modifiers</b>: Other modifiers. Possible values depend
#        on the languages. The default is null.
#   </ul>
# Constructors typically contain nested _parameter_ entitiers, which list
# the parameters of the constructor, and may contain nested _annotation_ 
# entities as documentation.
#
# <li><b>destructor</b> _name_: A destructor. Destructors should be named
# according to the language. (See note following methods below.)
# Destructors can appear only at the top level. Destructors have the 
# following attributes:
#   <ul>
#   <li><b>-protection</b>: The protection level of the method. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "public."
#   <li><b>-modifiers</b>: Other modifiers. Possible values depend
#        on the languages. The default is null.
#   </ul>
# Destructors may contain nested _parameter_ entitiers, which list
# any parameters, and may contain nested _annotation_ entities
# as documentation.
#
# <li><b>method</b> _name_: A method. Methods can appear only
# at the top level. Methods have the following attributes:
#   <ul>
#   <li><b>-protection</b>: The protection level of the method. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "public."
#   <li><b>-modifiers</b>: Other modifiers. Possible values depend
#        on the languages, but will include "virtual" for C++ and
#        "synchronized" for Java. The default is null.
#   <li><b>-type</b>: The return type of the method. The default is null.
#   <li><b>-scope</b>: The scope of the method. This can be either
#        "instance," meaning that the method operates on an instance
#        of this class, or "class," meaning that the method operates
#        on the shared class data. (These are called "class methods"
#        in Smalltalk and "procs" in [Incr Tcl]). Default is
#        "instance."
#   </ul>
# Methods typically contain nested _parameter_ entities, which lists
# the parameters of the method, and nested _annotation_ entities
# which document its purpose. Methods should be uniquely named. In
# languages which support polymorphism, method "names" in the Class
# model should be the signatures of the given method, i.e.: add(int,int):int,
# add(int,float):float, etc. 
#
# <li><b>variable</b> _name_: A variable. Variables can appear only
# at the top level. Variables have the following attributes:
#   <ul>
#   <li><b>-protection</b>: The protection level of the variable. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "protected."
#   <li><b>-modifiers</b>: Other modifiers. Possible values depend
#        on the languages, but will include "static" for C++ and
#        "synchronized" for Java. The default is null.
#   <li><b>-type</b>: The type of the variable. The default is null.
#   <li><b>-scope</b>: The scope of the variable. This can be either
#        "instance," meaning that the method operates on an instance
#        of this class, or "class," meaning that the method operates
#        on the shared class data. (These are called "class variables"
#        in Smalltalk and "common variables" in [Incr Tcl]). Default is
#        "instance."
#   <li><b>-default</b>: The initial/default value of the variable. The defualt 
#        is null. This attribute does not apply to certain languages and
#        should then be ignored.
# A variable often contains nested _annotation_ entities
# which document its purpose.
#
# <li><b>annotation</b> _name_ _value_: A documentation annotation.
# Annotations can appear at any level -- by convention, an annotation
# named "description" is a short description while one named "explanation"
# is a long description. Both are generally in HTML format.
# Annotations have the following attributes:
#   <ul>
#   <li><b>-format</b>: The formatting of the annotation. This may
#        include "plain" or "HTML". Default is HTML.
#   </ul>
#
# <li><b>parameter</b> _name_: A parameter. At the top level,
# this is a class parameter, which probably only makes sense if the
# languages supports generics ("templates" in C++). Inside a
# method, it represents an argument to the method. It has the
# following attributes:
#   <ul>
#   <li><b>-type</b>: The type of the parameter. Default is null.
#   <li><b>-optional</b>: True is the parameter is optional. Default
#       is zero (false).
#   <li><b>-default</b>: The default value of the parameter. This makes
#       sense only if the parameter is optional. Default is a null string.
#   </ul>
# </ul>
#
# Here is an example of a class model. This creates
# a model and loads it with a string in TIM format -- usually,
# though, you would set the *-datafile* option and
# call load{} (see <a href="Model.html">Model</a>). After
# creating it, call the describe{} method to confirm its
# contents:
# <pre><tcl>
#     catch {delete object $class}
#     set class [::tycho::Class [::tycho::autoName class]]
#     $class read string {
#        modelconfigure -language Itcl -name ::tycho::exampleclass
#        parent ::tycho::Mommy -sourcefile {$TYCHO/kernel/mommy.itcl}
#        annotation description {An example class.}
#        annotation explanation {This is a <i>silly</i> class.}
#        variable foo {
#            -protection public
#            annotation explanation "This is a public variable."
#        }
#        method bar {
#            annotation explanation "This is a public method."
#            parameter x
#            parameter y
#        }
#     }
#     $class describe
# </tcl></pre>
#
# Return the public methods of the class:
# <pre><tcl>
#     $class methods -protection public
# </tcl></pre>
#
# Return the explanation of a method:
# <pre><tcl>
#     $class get annotation bar.explanation
# </tcl></pre>
#
# Return the parameters of a method:
# <pre><tcl>
#     $class parameters bar
# </tcl></pre>
#
# Return the source file of a parent:
# <pre><tcl>
#     $class itemcget parent ::tycho::Mommy -sourcefile
# </tcl></pre>
#
class ::tycho::Class {
    inherit ::tycho::HierModel

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####
    
    #################################################################
    ####                     public methods                      ####

    # Add a top-level annotation with attributes to the class
    method annotation {name string args}

    # Add a constructor with attributes to the class
    method construct {name args}

    # Get the constructor(s) of the class
    method constructors {}

    # Add a destructor with attributes to the class
    method destruct {name args}

    # Get the destructor(s) of the class
    method destructors {}

    # Add a method with attributes to the class
    method method {name args}

    # Get the methods with matching attributes
    method methods {args}

    # Add a parameter with attributes to the class
    method parameter {method name args}

    # Get the parameters of a method
    method parameters {method}

    # Add a parent with attributes to the class
    method parent {name args}

    # Get the parents of the class
    method parents {}

    # Add a top-level variable with attributes to the class
    method variable {name args}

    # Get the variables with matching attributes
    method variables {args}

    #################################################################
    ####                  protected methods                      ####
    
    # Evaluate code in this object's context
    protected method evalInSpecificContext {args} {eval $args}

    # Add a nested annotation with attributes to the class
    protected method _annotation {context name string args}

    # Methods cannot be nested
    protected method _method {context name args} {
    	_nesterror method $context $name
    }

    # Add a nested parameter with attributes to the class
    protected method _parameter {context name string args}

    # Variables cannot be nested
    protected method _variable {context name args} {
    	_nesterror variable $context $name
    }
}

########################################################################
#### constructor
#
body ::tycho::Class::constructor {args} {
    # Evaluate options
    eval configure $args

    # Define the attributes of this model. See the class
    # comment for information.
    defineModelAttributes \
            -interface "" \
            -name "" \
            -language "" \
            -source ""

    # Define the "annotation" entity
    defineEntityType annotation \
	    -valued 1 \
            -leaf 1 \
	    -format HTML

    # Define the "parent" entity
    defineEntityType parent \
            -ordered 1 \
            -scope "" \
            -sourcefile "" \
            -docfile ""

    # Define the "constructor" entity
    defineEntityType constructor \
            -ordered 1 \
	    -protection public \
	    -modifiers "" 

    # Define the "destructor" entity
    defineEntityType destructor \
            -ordered 1 \
	    -protection public \
	    -modifiers "" 

    # Define the "method" entity
    defineEntityType method \
            -ordered 1 \
	    -protection public \
	    -modifiers "" \
	    -type "" \
	    -scope instance \

    # Define the "variable" entity
    defineEntityType variable \
	    -protection protected \
	    -modifiers "" \
	    -type "" \
	    -scope instance \
            -default "" \

    # Define the "parameter" entity
    defineEntityType parameter \
	    -ordered 1 \
	    -type "" \
	    -optional 0 \
	    -default ""
}

########################################################################
#### annotation
#
# Add a new annotation and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# annotation. Flag an error if the annotation already exists. 
#
body ::tycho::Class::annotation {name value args} {
    set splut [split $name $separator]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verifynot annotation $cntxt $local $name
    _addentity annotation $cntxt $local $name $value $args
    list delete annotation $name
}

########################################################################
#### construct
#
# Add a new constructor and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# constructor. Flag an error if the constructor already exists. 
#
body ::tycho::Class::construct {name args} {
    _verifynot constructor {} $name $name
    _addentity constructor {} $name {} {} $args
    list delete constructor $name
}

########################################################################
#### constructors
#
# Get the constructors of the class.
#
body ::tycho::Class::constructors {} {
    _children constructor {}
}

########################################################################
#### destruct
#
# Add a new destructor and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# destructor. Flag an error if the destructor already exists. 
#
body ::tycho::Class::destruct {name args} {
    _verifynot destructor {} $name $name
    _addentity destructor {} $name {} {} $args
    list delete destructor $name
}

########################################################################
#### destructors
#
# Get the destructors of the class.
#
body ::tycho::Class::destructors {} {
    _children destructor {}
}

########################################################################
#### method
#
# Add a new method and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# method. Flag an error if the method already exists. 
#
body ::tycho::Class::method {name args} {
    # Just make sure that the method name is top-level
    if { [llength [split $name $separator]] > 1 } {
        error "Method $name is not top-level"
    }
    _verifynot method {} $name $name
    _addentity method {} $name {} {} $args
    list delete method $name
}

########################################################################
#### methods
#
# Get the methods of the class with attributes that match the
# given attributes and values. This can be used to get methods
# with a given protection level, scope, and so on.
#
body ::tycho::Class::methods {args} {
    set result {}
    foreach method [_roots method] {
    	array set temp $_attrs($method)
    	set matching 1
    	foreach {attr val} $args {
	    if { $temp($attr) != $val } {
		set matching 0
		break
	    }
    	}
    	if { $matching } {
	    lappend result $method
    	}
    }
    return $result
}

########################################################################
#### parameter
#
# Add a parameter to a method. This method is provided for
# convenience -- it is not used by the TIM file parser.
# Additional arguments are a flat attribute-value list for the
# parameter. Flag an error if the parameter already exists. 
#
body ::tycho::Class::parameter {method name args} {
    _verifynot parameter $method $name $method$separator$name
    _addentity parameter $method $name $method$separator$name {} $args
    list delete parameter $method$separator$name
}

########################################################################
#### parameters
#
# Get the parameters of a method.
#
body ::tycho::Class::parameters {method} {
    _children parameter $method
}

########################################################################
#### parent
#
# Add a new parent and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# parent. Flag an error if the parent already exists.
#
body ::tycho::Class::parent {name args} {
    _verifynot parent {} $name $name
    _addentity parent {} $name {} {} $args
    list delete parent $name
}

########################################################################
#### parents
#
# Get the parents of the class.
#
body ::tycho::Class::parents {} {
    _children parent {}
}

########################################################################
#### variable
#
# Add a new variable and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# variable. Flag an error if the variable already exists. 
#
body ::tycho::Class::variable {name args} {
    # Just make sure that the variable name is top-level
    if { [llength [split $name $separator]] > 1 } {
        error "Variable $name is not top-level"
    }
    _verifynot variable {} $name $name
    _addentity variable {} $name {} {} $args
    list delete variable $name
}

########################################################################
#### variables
#
# Get the variables of the class with attributes that match the
# given attributes and values. This can be used to get variables
# with a given protection level, scope, and so on.
#
body ::tycho::Class::variables {args} {
    set result {}
    foreach variable [_roots variable] {
    	array set temp $_attrs($variable)
    	set matching 1
    	foreach {attr val} $args {
	    if { $temp($attr) != $val } {
		set matching 0
		break
	    }
    	}
    	if { $matching } {
	    lappend result $variable
    	}
    }
    return $result
}


########################################################################
########################################################################
####                       protected methods                        ####


########################################################################
#### _annotation
#
# Add a nested annotation.
# Additional arguments are a flat attribute-value list for the
# annotation. Flag an error if the annotation already exists. 
#
body ::tycho::Class::_annotation {context name value args} {
    _verifynot annotation $context $name $context$separator$name
    _addentity annotation $context $name $context$separator$name \
            $value $args
}

########################################################################
#### _parameter
#
# Add a nested parameter.
# Additional arguments are a flat attribute-value list for the
# parameter. Flag an error if the parameter already exists. 
#
body ::tycho::Class::_parameter {context name args} {
    _verifynot parameter $context $name $context$separator$name
    _addentity parameter $context $name $context$separator$name {} $args
}


