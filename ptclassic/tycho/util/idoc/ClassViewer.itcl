# A viewer for the idocumentation.
#
# @Author: Cliff Cordeiro
#
# @Version: $Id$
#
# @Copyright (c) 1995-1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### IDoc
# This class defines a combination of a MultiPanel widget and two HTML
# widgets which is used for efficient class browsing of Itcl and Java
# source.
#
# The MultiPanel widget along the left side of the screen is used
# for controlling the contents of the two HTML widgets. A click brings 
# items into the proper HTML widgets, and placing the mouse over an item
# puts an abbreviated version of the information in the statusbar at the
# bottom of the screen. Items within the Panel can be expanded and 
# contracted are able to scroll as well.
#
# The top HTML widget holds entire-class information, usually will
# be sized larger than the bottom one, and changes less often.
# 
# The bottom HTML widget holds specific information relating to
# constructs the user selects in the Panel on the left. 
#
# Data is stored in a <a href="../../../../kernel/doc/codeDoc/Class.idoc">
# ::tycho::Class</a> model. The model is in turn generated from the code.
# (See <a href="IDocSys.idoc">::tycho::IdocSys</a> for information about 
# generation.)
# 
# IDoc supports any language that can be encoded into a ::tycho::Class
# representation. Currently, keywords are correct for Itcl as well as Java.
# However, the default behaviour will allow browsing of any language,
# though certain information may be left out in the current implementation.
#
# To add a new language to IDoc, many methods must be modified. These include:
# <ul> 
# <li><b>display</b> Sets up the MultiPanel widget when a file is loaded or
# it's parent classes are imported. 
# <li><b>displayCon</b> Chooses the names and ordering for constructors in the
# MultiPanel. 
# <li><b>displayDes</b> Chooses the names and ordering for destructors in the 
# MultiPanel.
# <li><b>displayRel</b> Chooses the names and ordering for related class 
# information in the MultiPanel. 
# <li><b>displayMeth</b> Chooses the names and ordering for methods in the
# MultiPanel.
# <li><b>displayVar</b> Chooses the names and ordering for variables in the
# MultiPanel.
# <li><b>formatExpl</b> Formats the explanations of variables and methods in
# HTML.
# <li><b>hyperLink</b> Creates links to the code.
# <li><b>docFile</b> Given a class name, returns a documentation file name
# and path.
# <li><b>relFile</b> Given a class name, returns the relative documentation
# file name and path.
# <li><b>generateHtml</b> Tranforms the current main Class into a standalone
# HTML document.
# <li><b>generateHtmlContents</b> Generates the table of contents for the 
# standalone HTML.
# <li><b>generateHtmlBody</b> Generates the body of the standalone HTML.
# </ul> An easier way is to search for <code>switch $language</code>.
# 
# IDoc also is able to transform ::tycho::Class models into pure HTML documents.
#  
# To use this class, go to the Special menu in either the Itcl or Java editors
# and select _Generate IDoc Documentation_. 
#
class ::tycho::IDoc {
    inherit ::tycho::File

    ##########################################################################
    ####                            options                               ####

    # Whether or not to generate verbose HTML
    itk_option define -verbose verbose Verbose 0

    # The color of inherited entities.
    itk_option define -inheritcolor inheritColor InheritColor grey

    # The color of Itcl options.
    itk_option define -optioncolor optionColor OptionColor black
  
    # The color of public constructs.
    itk_option define -publiccolor publicColor PublicColor black
    
    # The color of protected constructs.
    itk_option define -protectedcolor protectedColor ProtectedColor black

    # The color of package protection constructs.
    itk_option define -packagecolor packageColor PackageColor black
    
    # The color of private constructs.
    itk_option define -privatecolor privateColor PrivateColor black 

    # The default head font -- an X font which should be made symbolic in Tk 8.0
    itk_option define -headfont headFont Font [::tycho::font \
            {New Century Schoolbook} 18 Roman]

    # The default body font -- an X font which should be made symbolic in Tk 8.0
    itk_option define -bodyfont bodyFont Font [::tycho::font Hevetica 12 Bold]
    
    # The height of the entire compound widget.
    itk_option define -height height Height "20 c"
    
    # The width of the entire compound widget.
    itk_option define -width width Width "30 c"

    # The relative width of the contents widget compared to the entire window.
    itk_option define -relwidth relWidth RelWidth 0.22

    # The relative height of the top HTML widget. (The bottom is 1-relheight). 
    itk_option define -relheight relHeight RelHeight 0.6

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####

    # Reinitialize the internal data.
    public method clear {}

    public method debug {} {
        foreach class [array names myClass] {
            puts $class
        }
        puts "MH: $myHeritage"
    }
    
    # Return a description of the main or given class.
    public method describe {{class {}}}

    # Return the filename of the documentation of the given class.
    public method docFile {classname}
    
    # Make the fonts in all FIMXE: widgets smaller.
    public method downSize {}

    # Generate a DAG for the current class and it's parents.
    public method generateDAG {}

    # Generate an HTML representation of the current class.
    public method generateHtml {}

    # Place a ghost handle a certain number of pixels from the actual one.
    public method ghostHandle {horizontal pixels}

    # Bring up the User's Guide
    public method help {} 

    # Import the main class' parents, the parents' parents, etc.
    public method inheritAll {{redisplay 1}}

    # Insert the specified data.
    public method insertData {data}
    
    # Insert HTML into myHtml(Top or Bottom) widget
    public method putHtml {class data {top 1}}

    # Return the filename of the relative documentation of the given class.
    public method relFile {classname}

    # Resize the appropriate frame.
    public method resizeFrame {horizontal pixels}
    
    # Make the fonts in all FIMXE: widgets bigger.
    public method upSize {}

    ###################################################################
    ####                      public procs                         ####

    ###################################################################
    ####                      protected variables                  ####
    # The name of the currently displayed class (others are related to this)
    protected variable mainClass

    # Array of ::tycho::Class objects indexed by class -> myClass(::foo::bar)
    protected variable myClass

    # List of classes in myClass() in inheritance order.
    protected variable myHeritage ""
   
    # Internal contents widget
    protected variable myContents

    # My class diagram
    protected variable myDAG

    # Internal HTML widget for class-wide documentation
    protected variable myHtmlTop

    # Internal HTML widget for user-chosen documentation
    protected variable myHtmlBottom

    # Data currently shown in bottom HTML widget.
    protected variable myBottomData ""

    # Data currently shown in top HTML widget.
    protected variable myTopData ""

    # Language of current class (should be same for all classes loaded)
    protected variable language

    # Location where mouse button was pressed.
    protected variable lastPress

    # The levels of protection the current language supports. Set in display.
    protected variable protections

    ###################################################################
    ####                     protected methods                     ####

    # Initialize the menu/status/tool bars
    protected method initialize {{menubar {}} {statusbar {}} {toolbar {}}}

    protected method preference {mode args}

    ###################################################################
    ####                      private methods                      ####

    # Bind a description to <enter>ing a label.
    private method bindDesc {class item label}
  
    # Bind an explanation to button 1 clicking a label.
    private method bindExpl {class item label}

    # Delete the classes in the myClass array and unset the array.
    private method deleteClasses {{all 1}}

    # Display the contents of $myClass($mainClass) in contents widget.
    private method display {}

    # Display the constructor(s) in the contents widget.
    private method displayCon {}
    
    # Displayer the destructor(s) in the contents widget.
    private method displayDes {}

    # Display the proper methods/procedures in the contents widget.
    private method displayMeth {protection}

    # Display the related procs in the contents widget.
    private method displayRel {}

    # Display the proper variables in the contents widget.
    private method displayVar {protection}
    
    # Format the explanation of the given item in HTML.
    private method formatExpl {class item type {extern 0}}

    # Create the body of an HTML document describing the current mainClass.
    private method generateHtmlBody {}

    # Create the internal links for an HTML output of the class model. 
    private method generateHtmlContents {}

    # Format the given item as an HTML link
    private method hyperLink {class item type {text {}} {itemtype {}}}

    # Initialize the menu bar.
    private method initializeMenubar {menubar}

    # Perform an info namespace qualifiers, Java style.
    private method javaNamespaceQual {className}

    # Perform an info namespace tail, Java style.
    private method javaNamespaceTail {className}

    # Calculate a new -relwidth parameter (doesn't reset it)
    private method newRelWidth {pixels}

    # Calculate a new -relheight parameter (doesn't reset it)
    private method newRelHeight {pixels}

    # Reload the data in HTML widgets after an event has cleared them.
    private method resetHtml {{top 1}}

    # Setup the resizing handles to behave properly.
    private method setupHandles {}

    # Remove the argument list from a unique name
    private method fixName {name {short 1}}
}

#########################################################################
#### -headfont configuration
# Parse the given X font to figure out what font family, size,
# and style to use for the display font
#
configbody ::tycho::IDoc::headfont {

    set f $itk_option(-headfont)
    foreach panel [$myContents panels] {
        $myContents itemconfig $panel -font $f
    }
    # must be caught because class may not exist
    catch {$myContents itemconfig class -font $f}
}

#########################################################################
#### -bodyfont configuration
# Parse the given X font to figure out what font family, size,
# and style to use for the display font
#
configbody ::tycho::IDoc::bodyfont {

    set f $itk_option(-bodyfont)
    foreach label [$myContents labels] {
        if {$label != "class"} {    
            $myContents itemconfig $label -font $f
        }
    }
}

#########################################################################
#### -height configuration
# Height of the compound widget must be passed to the displayer.
#
configbody ::tycho::IDoc::height {
    displayer config -height $itk_option(-height)
}

#########################################################################
#### -width configuration
# Width of the compound widget must be passed to the displayer.
#
configbody ::tycho::IDoc::width {
    displayer config -width $itk_option(-width)
}

#########################################################################
#### -relheight configuration
# Reset the placement of widgets to reflect the new relative height
# priorities.
#
configbody ::tycho::IDoc::relheight {

    set h $itk_option(-relheight)
    set cw $itk_option(-relwidth)
    set hw [expr 1 - $cw]

    place $itk_component(html1) -anchor ne -relx 1.0 -rely 0.0 \
            -relheight $h -relwidth $hw -in $itk_interior

    place $itk_component(html2) -anchor se -relx 1.0 -rely 1.0 \
            -relheight [expr 1 - $h] -relwidth $hw -in $itk_interior

    place $itk_component(leftright) -anchor n -relx $cw -rely 0.0 \
            -relheight 1.0 -in $itk_interior

    place $itk_component(updown) -anchor e -relx 1.0 -rely $h \
            -relwidth $hw -in $itk_interior
}

#########################################################################
#### -relwidth configuration
# Reset the placement of widgets to reflect the new relative width
# priorities.
#
configbody ::tycho::IDoc::relwidth {

    set h $itk_option(-relheight)
    set cw $itk_option(-relwidth)
    set hw [expr 1 - $cw]

    place $itk_component(contents) -relx 0.0 -rely 0.0 \
            -relheight 1.0 -relwidth $cw -in $itk_interior

    place $itk_component(html1) -anchor ne -relx 1.0 -rely 0.0 \
            -relheight $h -relwidth $hw -in $itk_interior

    place $itk_component(html2) -anchor se -relx 1.0 -rely 1.0 \
            -relheight [expr 1 - $h] -relwidth $hw -in $itk_interior
    
    place $itk_component(leftright) -anchor n -relx $cw -rely 0.0 \
            -relheight 1.0 -in $itk_interior

    place $itk_component(updown) -anchor e -relx 1.0 -rely $h \
            -relwidth $hw -in $itk_interior
}

###################################################################
#### constructor
#
body ::tycho::IDoc::constructor {args} {
    # Set the view "type" for the Window menu
    set viewType "graphics"

    itk_component add html1 {
        ::tycho::HTML $itk_interior.html1
    } {
        keep -background -cursor
    }

    set myHtmlTop $itk_component(html1)

    itk_component add html2 {
        ::tycho::HTML $itk_interior.html2
    } {
        keep -background -cursor
    }

    set myHtmlBottom $itk_component(html2)

    itk_component add contents {
        ::tycho::MultiPanel $itk_interior.contents
    } {
       keep -background -cursor
    }

    set myContents $itk_component(contents)

    # add handle to resize frames vertically
    itk_component add updown {
        frame $itk_interior.updown
    } {
        keep -cursor
    }
    
    # add handle to resize frames horizontally
    itk_component add leftright {
        frame $itk_interior.leftright
    } {
        keep -cursor
    }

    # add ghost handles which move with the mouse
    itk_component add hGhost {
        frame $itk_interior.hGhost
    } {
        usual
    }

    itk_component add vGhost {
        frame $itk_interior.vGhost
    } {
        usual
    }

    # NOTE: placing of widgets occurs in the configbody of -relheight/-relwidth

    eval itk_initialize $args

    # Configure the handles
    setupHandles

    # Something annoying inherited insists on creating this thing
    pack forget $itk_interior.childsite
}

###################################################################
#### destructor
# FIXME: unset the -file option in the HTML widgets. This was set
# in order to make hyperlinks work. This is the fix of least cost.
# However, a better fix would be to somehow separate the file=widget 
# assumption.
#
body ::tycho::IDoc::destructor {args} {
    $myHtmlTop config -file "NoName"
    $myHtmlBottom config -file "NoName"
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#####################################################################
#### clear
# Clear the internal data.
#
body ::tycho::IDoc::clear {} {
}

#####################################################################
#### describe 
# Return a description of the current class by calling describe. The 
# class must be loaded. Calling with no arguments describes the mainClass.
#
body ::tycho::IDoc::describe {{class {}}} {
    if {$class == {}} {
        set class $mainClass
    }
    return [$myClass($class) describe]
}

#####################################################################
#### docFile
#
# Return the documentation file for a given classname. This
# can be any class of the language of the current IDoc. This method will
# attempt to find the file using a language specific algorithm and will return 
# the filename or {} if one isn't found.
#
# FIXME: The Itcl implementation is a hack and not valid under all cases.
# There needs to be a facility for specifying where classes are (for Itcl 
# especially). Java uses the CLASSPATH, which may or may not point to the
# needed file.
#
body ::tycho::IDoc::docFile {classname} {
    if {$classname == $mainClass} {
        return [$this cget -file]
    }
    
    switch $language {
        Itcl {
            set docname "[info namespace tail $classname].idoc"
            
            lappend dirs {$TYCHO/kernel}
            lappend dirs {$TYCHO/editors/textedit}
            lappend dirs {$TYCHO/editors/slate}
            lappend dirs {$TYCHO/editors/visedit}
            lappend dirs {$TYCHO/lib/tydoc}
            
            foreach dir $dirs {
                set findfile [file join $dir doc codeDoc $docname]
                set findfile [::tycho::expandPath $findfile]
                set docfile [glob -nocomplain $findfile]
                if {$docfile != {}} {
                    break
                }
            }
            return "$docfile"
        }
        Java {
            # Shorten the full classname
            set docname [javaNamespaceTail $classname]
            
            # Add the idoc extension
            set docname "$docname.idoc"

            # Get the CLASSPATH, turn into a list
            set classPath [::tycho::expandPathSplit \
                    [::tycho::preference get java classPath]]
            set classPathList [split $classPath [::tycho::pathSeparator]]

            # Can't read .zip files (Assume at most one.)
            set zipfile [lsearch -glob $classPathList *.zip]
            if {$zipfile != -1} {
                lreplace $classPathList $zipfile $zipfile                
            }

            # Add tycho java directories, which may not be in the classPath
            # NOTE: let's not do this...

            foreach dir $classPathList {
                set findfile [::tycho::expandPath \
                        [file join $dir doc codeDoc $docname]]
                set docfile [glob -nocomplain $findfile]
                if {$docfile != {}} {
                    break
                }
            }
            
            # Last, check java source docs. FIXME: Where will they go?

            return "$docfile"
        }
    }
}

#####################################################################
#### downSize
# Call downSize (decrease the current font size) on the constituent (HTML)
# widgets.
# 
body ::tycho::IDoc::downSize {} {
    $myHtmlTop downSize
    $myHtmlBottom downSize
}

#####################################################################
#### generateDAG
# Generate the DAG for the current class and its parents.
#
body ::tycho::IDoc::generateDAG {} {
    if {$myHeritage == {}} {
        inheritAll 0
    }
    if ![info exists myDAG] {
        set myDAG [::tycho::EditDAG $this.[::tycho::autoName dag]]
        set myDAG [info namespace tail $myDAG]
        # FIXME: does not place anywhere!
    }
    foreach parent "$mainClass $myHeritage" {
        set docfile [docFile $parent]
        set source [$myClass($parent) modelcget -source]
        set sourcedir [::tycho::expandPath [file join \
                [file dirname $docfile] .. ..]]
        set source [file join $sourcedir $source]
        set parents [$myClass($parent) parents]
        lappend DAGinfo "add $parent \{label [info namespace tail $parent] \
                link $source altlink $docfile\} \{$parents\}"
    }
    $myDAG clear
    puts $myDAG
    foreach entry $DAGinfo {
        eval "$myDAG $entry"
    }    
}

#####################################################################
#### generateHtml
# Output the class data in HTML form. 
#
body ::tycho::IDoc::generateHtml {} {
    set verbose $itk_option(-verbose)
    set classModel $myClass($mainClass)
    set className [$classModel modelcget -name]
    
    set html "<!-- Automatically generated by the Tycho IDoc viewer -->\
            \n<html>\
            \n<title>Class $className</title>\
            \n</head>\
            \n<body bgcolor=\"$itk_option(-background)\">\
            \n<h1> Class "

    switch $language {
        Itcl {
            append html "\
                    <a name = \"[info namespace tail $className] \
                    class documentation ([info namespace qualifiers \
                    $className] namespace)\">\
                    $className</a></h1>\n"
        }
        Java {
            append html "\
                    <a name = \"$className\
                    class documentation ([$classModel modelcget -package]\
                    package)\">\
                    $className</a></h1>\n"
          }
      }
      
      append html [generateHtmlContents]
      append html [generateHtmlBody]
      append html "</body>\n</html>\n"
      
      # Save it as blah_i.html where the current file is blah.idoc
      set htmlFile [file root [docFile $mainClass]]_i.html
      set fp [open $htmlFile w]
      puts $fp $html
      close $fp
      ::tycho::File::openContext $htmlFile 
}

#####################################################################
#### ghostHandle
# Control the ghost handle (for lack of a standard name), which is the
# handle (Iwidgets' panedwindow calls it a "sash") that moves when you
# are resizing a frame. This is done by _placing_ a frame of the correct
# size on top of the proper location.
#
body ::tycho::IDoc::ghostHandle {horizontal pixels} {
    if {$horizontal} {
        if {$pixels == 0} {
            # when the mouse is released, sent ghostHandle 1 0
            place forget $itk_component(hGhost)
        } {
            set newRelX [newRelWidth $pixels]

            place $itk_component(hGhost) -anchor n -relx $newRelX \
                    -rely 0.0 -width 4 -relheight 1.0 -in $itk_interior
        }
    } {
        if {$pixels == 0} {
            # when the mouse is released, sent ghostHandle 0 0
            place forget $itk_component(vGhost)
        } { 
            set hw [expr 1 - $itk_option(-relwidth)]

            set newRelY [newRelHeight $pixels]

            place $itk_component(vGhost) -anchor e -relx 1.0 -rely $newRelY \
                    -relwidth $hw -height 4 -in $itk_interior
        }   
    }
}

#########################################################################
#### help
# Open a window with help on the IDoc widget.
#
body ::tycho::IDoc::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO lib tydoc doc usersGuides IDocHelp.html]
}

#######################################################################
#### inheritAll
# Load the current mainClass' parents, then recurse until no new classes
# need to be loaded. Inherited methods are placed properly in the 
# hierarchy according to language and protection levels. (Parent classes
# _must_ of course be the same language as the current class. This is not
# explicitly checked here.)
#
body ::tycho::IDoc::inheritAll {{redisplay 1}} {
    set classModel $myClass($mainClass)

    # clear inherited classes
    deleteClasses 0

    set parents [$classModel parents -inheritance implementation]
        
    while {[llength $parents] != 0} {
        set parent [lindex $parents 0]
        set parents [lreplace $parents 0 0]
        
        if [info exists myClass($parent)] {
            catch {delete object $myClass($parent)}
            unset myClass($parent)
        }
        
        # Create a new class model if the parent can be found.
        set parentFile [docFile $parent]
        if {$parentFile != {}} {
            # NOTE: parents which aren't loaded aren't part of myHeritage
            lappend myHeritage $parent

            set myClass($parent) [::tycho::Class [::tycho::autoName class]]
            putStatus "Loading $parent"
            ::tycho::safeUpdate $this
            $myClass($parent) read file $parentFile
            
            # Load my parents too.
            set newparents [$myClass($parent) parents]
            set parents "$parents $newparents"
        } else {
            putStatus "$parent idoc file not found."
        }
    }
    if {$redisplay} {
        putStatus "Redisplaying contents."
        ::tycho::safeUpdate $this
        display
    }
    putStatus ""
}


#######################################################################
#### insertData
# Append the specified data to the existing display. The data is in the
# form of a ::tycho::Class and is read by methods from that class.
#
body ::tycho::IDoc::insertData {data} {
    if [getReadOnly] {bell; return}
    deleteClasses
    set tempClass [::tycho::Class [::tycho::autoName class]]
    $tempClass read string "$data"
    set language [$tempClass modelcget -language]
    set mainClass [$tempClass modelcget -name]
    set myClass($mainClass) $tempClass
    
    # get the related file, if it exists
    set relfile [relFile $mainClass]
    if {$relfile != {}} {
        set myClass(related) [::tycho::Class [::tycho::autoName class]]
        $myClass(related) read file $relfile
    }
    
    display
    putHtml $mainClass [$tempClass get annotation explanation]
}

#########################################################################
#### putHtml
# Load a portion of HTML into the proper HTML widget. Add tags to format
# properly. If top is true, format the data for the upper HTML widget. If 
# show is true, reload the data in the HTML widget. Show is set to false 
# when generating HTML for output to a file.
#
body ::tycho::IDoc::putHtml {class data {top 1}} {
    switch $top {
        1 {
            set myTopData "
               <head>
               <title>Class [$myClass($class) modelcget -name]</title>
               </head>
               <body bgcolor=\"$itk_option(-background)\">
               <h1><a href = \"[$myClass($class) modelcget -source]\">
               Class [$myClass($class) modelcget -name]</a></h1>
               $data
               </body>
               </html>"
            resetHtml 1
            $myHtmlTop config -file [docFile $class]
        }
        0 {
            set myBottomData "
               <html>
               <body bgcolor=\"$itk_option(-background)\">
               $data
               </body>
               </html>"
            resetHtml 0
            $myHtmlBottom config -file [docFile $class]
        }
    }
}


#####################################################################
#### relFile
# FIXME: this is a hack and not valid under all (many) cases 
# This should use the class model -source option and modify that
# to get the _rel.idoc name.
# 
body ::tycho::IDoc::relFile {classname} {
    set relname "[info namespace tail $classname]_rel.idoc"

    lappend dirs {$TYCHO/kernel}
    lappend dirs {$TYCHO/editors/textedit}
    lappend dirs {$TYCHO/editors/slate}
    lappend dirs {$TYCHO/editors/visedit}
    lappend dirs {$TYCHO/lib/tydoc}
    
    foreach dir $dirs {
        set findfile [file join $dir doc codeDoc $relname]
        set findfile [::tycho::expandPath $findfile]
        set relfile [glob -nocomplain $findfile]
        if {$relfile != {}} {
            break
        }
    }
    return "$relfile"
}

#####################################################################
#### resizeFrame
# Resize the frame after a mouse event involving either handle.
#
body ::tycho::IDoc::resizeFrame {horizontal pixels} {
    if {$horizontal} {
        $this config -relwidth [newRelWidth $pixels]
    } {
        $this config -relheight [newRelHeight $pixels]
    }
}

#####################################################################
#### upSize
# Call upSize (increase the current font size) on the constituent (HTML)
# widgets.
#
body ::tycho::IDoc::upSize {} {
    $myHtmlTop upSize
    $myHtmlBottom upSize
}

    ###################################################################
    ###################################################################
    ####                      public procs                         ####


    ###################################################################
    ###################################################################
    ####                     protected methods                     ####

#####################################################################
#### initialize
# Initialize the menu, status, and toolbars associated with this widget.
# The root (view) class sets up the menubar methods in it's initialize
# via the chain command, which should always be the first command in
# this method.
# 
# This method is called by it's displayer when attachView is called (usually
# in ::tycho::view)
#
body ::tycho::IDoc::initialize {{menubar {}} {statusbar {}} {toolbar {}}} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::IDoc::initializeMenubar $menubar
    }

    # Bindings
    # font size control
    set myDisplayer [info namespace tail [displayer]]
    if {$myDisplayer != {}} {
        bind $myDisplayer <Control-equal> "$this upSize; break"
        bind $myDisplayer <Control-plus> "$this upSize; break"
        bind $myDisplayer <Control-minus> "$this downSize; break"   
        pack propagate $myDisplayer 0
        $myDisplayer attachView $itk_component(html1) -menubar 0
        $itk_component(html1) forgetDisplayer
        $myDisplayer attachView $itk_component(html2) -menubar 0
        $itk_component(html2) forgetDisplayer
    }

    # Subscribe to the preference set
    preference subscribeoptions $this \
            -headfont displayFont \
            -bodyfont entryFont \
            -background bgColor \
            -height height \
            -width width \
            -publiccolor publicColor \
            -protectedcolor protectedColor \
            -packagecolor packageColor \
            -privatecolor privateColor \
            -optioncolor optionColor  \
            -inheritcolor inheritColor \
            -verbose verboseHtml
}

#####################################################################
#### preference
# preference function for IDoc
#
body ::tycho::IDoc::preference {mode args} {
    eval ::tycho::preference $mode "idoc" $args
}

    ###################################################################
    ###################################################################
    ####                      private methods                      ####

###########################################################################
#### bindDesc
# bind to the enter and shift release events on the given label
# the display of the description of the given item in the statusbar
# if such a description exists
#
body ::tycho::IDoc::bindDesc {class item label} {
    set classModel $myClass($class)

    # get the type of the label
    switch [string range $label end end] {
        "\p" {set type method}
        "\m" {set type method}
        "\v" {set type variable}
        "\r" {set type method}
        "\c" {set type Constructor}
        "\d" {set type Destructor}
        default {set type {}}
    }

    if {$class != $mainClass && $class != "related"} {
        # Don't display class it's from if it's from this class.
        set class "<$class> "
    } {
        set class ""
    }

   if ![catch {set desc [$classModel get annotation $item.description $type]}] {
        $myContents bind $label <Enter> \
                [code "$this putStatus \{$class$desc\}"]
        $myContents bind $label <KeyRelease-Shift_L> \
                [code "$this putStatus \{$class$desc\}"]
        $myContents bind $label <KeyRelease-Shift_R> \
                [code "$this putStatus \{$class$desc\}"]
        $myContents bind $label <Leave> \
                [code "$this putStatus {}"]
    }   
}

###########################################################################
#### bindExpl
# bind to the button 1 click event on the given label
# the display of the explanation of the given item in HTML
# the explanation includes extra information besides the
# actual explanation field of the item
#
body ::tycho::IDoc::bindExpl {class item label} {
    # get the type of the label
    switch [string range $label end end] {
        "\p" {set type method}
        "\m" {set type method}
        "\v" {set type variable}
        "\r" {set type method}
        "\c" {set type Constructor}
        "\d" {set type Destructor}
        default {set type {}}
    }

    # format explanation
    set expl [formatExpl $class $item $type]

    # bind explanation to button 1 click
    $myContents bind $label <Button-1> \
            [code "$this putHtml $class {$expl} {0}"]
}

###########################################################################
#### deleteClasses
# Unset the array of classes and delete each class object if all is set. If 
# all is 0, delete only the inherited classes. Either way, set myHeritage to
# an empty string.
#
body ::tycho::IDoc::deleteClasses {{all 1}} {
    if ![info exists myClass] {
        return
    }

    if {$all} {
        foreach class [array names myClass] {
            catch {delete object $myClass($class)}
        }
        unset myClass
    } else {
        # Only delete inherited classes
        foreach class $myHeritage {
            catch {delete object $myClass($class)}
        }
    }
    set myHeritage ""
}

###########################################################################
#### display
# display the contents of myClass($mainClass) in the myContents widget
#
body ::tycho::IDoc::display {} {
    set classModel $myClass($mainClass)

    # clear the contents widget
    $myContents clear
    ::tycho::safeUpdate $this

    # insert the class name
    switch $language {
        Java {
            set package [$classModel modelcget -package]
            if {$package != {}} {
                set classname $package.$mainClass
            } {
                set classname $mainClass
            }
            $myContents appendlabel class \
                    -text $classname \
                    -font [$this cget -headfont] \
                    -fg [$this cget -publiccolor]
        }
        default {
            $myContents appendlabel class \
                    -text $mainClass \
                    -font [$this cget -headfont] \
                    -fg [$this cget -publiccolor]
        }
    }

    $myContents bind class <Button-1> \
            [code "$this putHtml \
            $mainClass \{[$classModel get annotation explanation]\}"]

    # Class description is optional
    if ![catch {$classModel get annotation description}] {
        $myContents bind class <Enter> [code \
                "$this putStatus \{[$classModel get annotation description]\}"]
        $myContents bind class <Leave> [code \
                "$this putStatus {}"]
    }
    # FIXME in general, insert class parameters here

    if [info exists myClass(related)] {
        putStatus "Displaying related information."
        ::tycho::safeUpdate $this
        displayRel
    }
    
    # insert each type (Protected Method, etc.) by protection order
    switch $language {
        "Java" {set protections "public protected package private"}
        default {set protections "public protected private"}
    }

    putStatus "Displaying constructors."
    ::tycho::safeUpdate $this
    displayCon

    putStatus "Displaying destructors."
    ::tycho::safeUpdate $this
    displayDes

    foreach protection $protections {
        # Variables        
        putStatus "Displaying $protection variables."
        ::tycho::safeUpdate $this
        displayVar $protection   
        # Methods
        putStatus "Displaying $protection methods."
        ::tycho::safeUpdate $this
        displayMeth $protection
    }
    putStatus ""
}

#####################################################################
#### displayCon
# Display the constructor(s) in the myContents
# widget according to the $language variable.
#
body ::tycho::IDoc::displayCon {} {
    set classModel $myClass($mainClass)

    switch $language {
        Itcl {
            set subnames {}
            foreach Constructor [$classModel Constructors] {
                # put label into contents widget
                $myContents appendlabel $Constructor\c \
                        -text $Constructor \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -publiccolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $Constructor $Constructor\c
                bindExpl $mainClass $Constructor $Constructor\c
                lappend subnames $Constructor\c
            }
            
            # No inherited (overloading) constructors
            
            # insert panel if a Constructor found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                $myContents append Constructor\c "$subnames" \
                        -text "Constructor" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -publiccolor]
            }
        }
        Java {
            set subnames {}
            foreach Constructor [$classModel Constructors] {
                # put label into contents widget
                $myContents appendlabel $Constructor\c \
                        -text [fixName $Constructor 0] \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -publiccolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $Constructor $Constructor\c
                bindExpl $mainClass $Constructor $Constructor\c
                lappend subnames $Constructor\c
            }
            
            # No inherited (overloading) constructors
            
            # insert panel if a Constructor found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                $myContents append Constructor\c "$subnames" \
                        -text "Constructors" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -publiccolor]
            }
        }
    }
}

#####################################################################
#### displayDes
# Display the destructor(s) in the myContents
# widget according to the $language variable.
#
body ::tycho::IDoc::displayDes {} {
    set classModel $myClass($mainClass)

    switch $language {
        Itcl {
            set subnames {}
            foreach Destructor [$classModel Destructors] {
                # put label into contents widget
                $myContents appendlabel $Destructor\d \
                        -text $Destructor \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -publiccolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $Destructor $Destructor\d
                bindExpl $mainClass $Destructor $Destructor\d
                lappend subnames $Destructor\d
            }
            
            # No inherited (overloading) destructors
            
            # insert panel if a Destructor found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                $myContents append Destructor\d "$subnames" \
                        -text "Destructor" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -publiccolor]
            }
        }
        Java {
            set subnames {}
            foreach Destructor [$classModel Destructors] {
                # put label into contents widget
                $myContents appendlabel $Destructor\d \
                        -text [fixName $Destructor 0] \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -publiccolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $Destructor $Destructor\d
                bindExpl $mainClass $Destructor $Destructor\d
                lappend subnames $Destructor\d
            }
            
            # No inherited (overloading) destructors
            
            # insert panel if a Destructor (finalizer) found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                $myContents append Destructor\d "$subnames" \
                        -text "Finalizers" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -publiccolor]
            }
        }
    }
}

#####################################################################
#### displayMeth
# Display the methods/procedures of the given protection in the myContents
# widget in according to the $language variable.
#
body ::tycho::IDoc::displayMeth {protection} {
    set classModel $myClass($mainClass)

    switch $language {
        Itcl {
            # Itcl uses -scope instance to signify a method
            # and -scope class to signify a class
            
            # Methods
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection -scope instance] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\m
                bindExpl $mainClass $method $method\m
                lappend subnames $method\m
            }
            # check for inherited methods
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach method [$currentModel methods \
                            -protection $protection -scope instance] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$method\m"] == -1} {
                            $myContents appendlabel $method\m \
                                    -text $method \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $method $method\m
                            bindExpl $class $method $method\m
                            lappend subnames $method\m
                        }
                    }
                }
            }
            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                set subnames [lsort $subnames]
                $myContents append $protection\m "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }

            # Procs
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection -scope class] {
                # put label into contents widget
                $myContents appendlabel $method\p \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\p
                bindExpl $mainClass $method $method\p
                lappend subnames $method\p
            }
            # check for inherited procs
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach method [$currentModel methods \
                            -protection $protection -scope class] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$method\p"] == -1} {
                            $myContents appendlabel $method\p \
                                    -text $method \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $method $method\p
                            bindExpl $class $method $method\p
                            lappend subnames $method\p
                        }
                    }
                }
            }
            # insert panel if any procs found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                set subnames [lsort $subnames]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Procs" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }   
        }
        Java {
            # It's convenient to separate static methods from others.
            
            # Instance methods
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection -scope instance] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text [fixName $method 0] \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\m
                bindExpl $mainClass $method $method\m
                lappend subnames $method\m
            }

            # check for inherited methods
            # FIXME: account for package as well
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach method [$currentModel methods \
                            -protection $protection -scope instance] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$method\m"] == -1} {
                            $myContents appendlabel $method\m \
                                    -text [fixName $method 0] \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $method $method\m
                            bindExpl $class $method $method\m
                            lappend subnames $method\m
                        }
                    }
                }
            }

            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                set subnames [lsort $subnames]
                $myContents append $protection\m "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }

            # Static Methods
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection -scope class] {
                # put label into contents widget
                $myContents appendlabel $method\p \
                        -text [fixName $method 0] \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\p
                bindExpl $mainClass $method $method\p
                lappend subnames $method\p
            }

            # check for inherited procs
            # FIXME: package vis?
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach method [$currentModel methods \
                            -protection $protection -scope class] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$method\p"] == -1} {
                            $myContents appendlabel $method\p \
                                    -text [fixName $method 0] \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $method $method\p
                            bindExpl $class $method $method\p
                            lappend subnames $method\p
                        }
                    }
                }
            }

            # insert panel if any procs found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                set subnames [lsort $subnames]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Static Methods" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }   
        }
        default {
            # NOTE: mainly for documentation purposes, does not do inheritance
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\p
                bindExpl $mainClass $method $method\p
                lappend subnames $method\p
            }
            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }
        }   
    }
}

#####################################################################
#### displayRel
# Display the related procs (only) to the current class in the myContents 
# widget according to the $language variable. NOTE: only Itcl supported
# here.
body ::tycho::IDoc::displayRel {} {
    set classModel $myClass(related)
    
    switch $language {
        "Itcl" {
            set subnames {}
            foreach method [$classModel methods \
                    -protection public -scope class] {
                # put label into contents widget
                $myContents appendlabel $method\r \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -publiccolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc related $method $method\r
                bindExpl related $method $method\r
                lappend subnames $method\r
            }
            # insert panel if any procs found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                $myContents append RelatedProcs "$subnames" \
                        -text "Related Procs" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -publiccolor]
            }   
           
        }
        default {}
    }
}


#####################################################################
#### displayVar
# Display the variables of the given protection in the myContents
# widget according to the $language variable.
#
body ::tycho::IDoc::displayVar {protection} {
    set classModel $myClass($mainClass)

    switch $language {
        Itcl {
            # itcl uses -modifiers itk_option to signify an itk_option.
            # check for itk_options
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection -modifiers itk_option] {
                # put label into contents widget
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -optioncolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass $variable $variable\v
                lappend subnames $variable\v
            }
            
            # check for inherited itk_options
            if {$protection == "public"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach variable [$currentModel variables \
                            -protection $protection -modifiers itk_option] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$variable\v"] == -1} {
                            $myContents appendlabel $variable\v \
                                    -text $variable \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $variable $variable\v
                            bindExpl $class $variable $variable\v
                            lappend subnames $variable\v
                        }
                    }
                }
            }

            # insert panel if any itk_options found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                $myContents append $protection\i "$subnames" \
                        -text "Itk Options" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -optioncolor]
            }
            
            # do other variables
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection -modifiers {}] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass $variable $variable\v
                lappend subnames $variable\v
            }

            # check for inherited variables
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach variable [$currentModel variables \
                            -protection $protection -modifiers {}] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$variable\v"] == -1} {
                            $myContents appendlabel $variable\v \
                                    -text $variable \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $variable $variable\v
                            bindExpl $class $variable $variable\v
                            lappend subnames $variable\v
                        }
                    }
                }
            }


            # insert panel if any variables found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }
        }
        Java {
            # It's convenient to separate static variables from others
           
            # Instance variables
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection -scope instance] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass $variable $variable\v
                lappend subnames $variable\v
            }

            # check for inherited instance variables
            # FIXME: need to check for inherited package variables as well
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach variable [$currentModel variables \
                            -protection $protection -scope instance] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$variable\v"] == -1} {
                            $myContents appendlabel $variable\v \
                                    -text $variable \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $variable $variable\v
                            bindExpl $class $variable $variable\v
                            lappend subnames $variable\v
                        }
                    }
                }
            }

            # insert panel if any instance variables found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }

            # Static variables
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection -scope class] {
                # put label into contents widget
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -optioncolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass $variable $variable\v
                lappend subnames $variable\v
            }
            
            # Check for inherited static variables
            # FIXME: need to check for inherited package variables as well
            if {$protection == "public" || $protection == "protected"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach variable [$currentModel variables \
                            -protection $protection -scope class] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$variable\v"] == -1} {
                            $myContents appendlabel $variable\v \
                                    -text $variable \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $variable $variable\v
                            bindExpl $class $variable $variable\v
                            lappend subnames $variable\v
                        }
                    }
                }
            }
            
            # insert panel if any static variables found
            if {$subnames != {}} {
                set subnames [lsort $subnames]
                set temp [::tycho::capitalize $protection] 
                $myContents append $protection\i "$subnames" \
                        -text "Static $temp Variables" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -optioncolor]
            }            
        }
        default { 
            # NOTE: for documentation, mainly. Does not implement inheritance.
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass variable $variable\v
                lappend subnames $variable\v
            }
            # insert panel if any variables found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }
        }
    }
}

#####################################################################
#### formatExpl
# Format the explanation of the given item in HTML. This is usually
# bound to a button 1 click on an item in the contents widget.
# An item may not have an explanation, but _must_ have a description.
# 
# If extern is set (it's to be externally viewed), follow the Tydoc
# style of formatting. If unset, follow the IDoc style.
#
body ::tycho::IDoc::formatExpl {class item type {extern 0}} {
    set classModel $myClass($class)

    if [catch {set expl [$classModel get annotation $item.explanation $type]}] {
        set expl [$classModel get annotation $item.description $type]
    }
    
    switch $language {
        Itcl {
            set other {}

            if {$type == "method" || $type == "Constructor"} {

                # Get method parameters and their defaults
                # NOTE: Itcl destructors don't have parameters
                set paramlist {}
                foreach parameter [$classModel parameters $item] {
                    set default [$classModel itemcget parameter \
                            $item.$parameter -default $type]
                    if {$default == {}} {
                        lappend paramlist $parameter
                    } else {
                        lappend paramlist "$parameter $default"
                    }
                }
                if {$paramlist != {}} {
                    set other $paramlist
                }
            } elseif {$type == "variable"} {
                                
                # Get the variable's default value
                set default [$classModel itemcget variable $item -default]
                if {$default != {}} {
                    set other $default
                }
            }

            # Create hyperLink to source
            set item [hyperLink $class $item $type]
            
            # Format HTML
            if {$extern} {
                set html "<dt><code>$item $other</code>\
                        \n<dd>$expl"
            } else {
                set html "<b>$item</b> <i>$other</i><p> $expl"
            }

            # Add footer for inherited items
            if {$class != $mainClass && $class != "related"} {
                append html "<br><br><br><hr>\
                        <a href=\"[docFile $class]\">$class</a>"
            }
        }
        Java {
            set other {}
            set exceptions {}

            if {$type == "method" || $type == "Constructor" \
                    || $type == "Destructor"} {

                # Get method parameters and their types
                set paramlist "("
                foreach parameter [$classModel parameters $item] {
                    set paramtype [$classModel itemcget parameter \
                            $item.$parameter -type $type]
                    append paramlist $paramtype " " $parameter ", "
                }
                # Remove extra comma
                set other [string trimright $paramlist " ,"])
            
                # Get exceptions
                set exceptions [$classModel itemcget $type $item -exceptions]
                
                # Format exceptions
                if {$exceptions != {}} {
                    set temp ""
                    append temp "throws "
                    foreach exception $exceptions {
                        append temp "$exception, "
                    }
                    set exceptions [string trimright $temp ", "]
                }
            } elseif {$type == "variable"} {
                
                # Get the default value
                set default [$classModel itemcget variable $item -default]
                if {$default != {}} {
                    set other "= $default"
                }
            }
            
            set shortname [fixName $item]
            set modifiers [$classModel itemcget $type $item -modifiers]
            # Constructors don't have an explicit type
            if {$type != "Constructor"} {
                # Remove signature portion of item name
                set shortname [fixName $item]
                set itemtype [$classModel itemcget $type $item -type]
            } {
                set shortname "$mainClass"
                set itemtype ""
            }

            # Create hyperlink to source
            set shortname [hyperLink $class $item $type $shortname $itemtype]
            
            # Format HTML
            if {$modifiers != {} || $itemtype != {}} {
                if {$extern} {
                    set html "<dt><code>$modifiers $itemtype $shortname"
                } else {
                    set html "$modifiers $itemtype <b>$shortname</b> "
                }
            } {
                if {$extern} {
                    set html "<dt><code>$shortname"
                } else {
                    set html "<b>$shortname</b> "
                }
            }
            
            if {$extern} {
                append html "$other $exceptions</code>\
                        \n<dd>$expl"
            } else {
                append html "<i>$other</i> $exceptions<p> $expl"            
            }

            # Add footer for inherited items
            if {$class != $mainClass && $class != "related"} {
                append html "<br><br><br><hr>\
                        <a href=\"[docFile $class]\">$class</a>"
            }
        }
    }
    return $html
}

#####################################################################
#### generateHtmlContents
# Create the internal links for an HTML output of the class model. 
# If verbose is unset, only output Constructors and Destructors if 
# they have a non-blank description, and only do not output private
# entities. Verbose outputs everything.
#
body ::tycho::IDoc::generateHtmlContents {} {
    set classModel $myClass($mainClass)
    set verbose $itk_option(-verbose)
    
    # Remove "private" from the protection list if non-verbose
    if {$verbose} {
        set tempprotect $protections
    } else {
        set tempprotect [lreplace $protections end end]
    }
        
    switch $language {
        Itcl {
            set html "<HR>\n"
            set parents [$classModel parents]
            if {$parents != {}} {
                append html "Inherits: "
                foreach parent $parents {
                    append html "<a href=\"[::tycho::relativePath\
                            [file dirname [docFile $mainClass]]\
                            [docFile $parent]]\">"
                    append html "<code>$parent</code></a> -\n"
                }
            }
            append html "<a href=\"[$classModel modelcget -source]\">Source\
                    File</a> -\n"
            append html "Contents:\n"
            
            set of_class "of [info namespace tail [$classModel modelcget\
                    -name]] class"
            
            # Check for itk_options
            if {[$classModel variables -protection public \
                    -modifiers itk_option]!= {}} {
                append html "<a href=\"#itk_options $of_class\"\
                        >itk_options</a> -\n"
            }
            
            # Check for constructor
            set constructor [$classModel Constructors]
            if {$constructor != {}} {
                if {$verbose || !$verbose && [$classModel get annotation \
                        $constructor.description Constructor] != { }} {
                    append html "<a href=\"#constructor $of_class\"\
                            >constructor</a> -\n"
                }
            }
            
            # Check for destructor
            set destructor [$classModel Destructors]
            if {$destructor != {}} {
                if {$verbose || !$verbose && [$classModel get annotation \
                        $destructor.description Destructor] != { }} {
                    append html "<a href=\"#destructor $of_class\"\
                            >destructor</a> -\n"
                }
            }
            
            # Check for methods/procs/variables/commons by protection
            foreach protection $tempprotect {
                # Check for methods
                if {[$classModel methods -protection $protection \
                        -scope instance] != {}} {
                    append html "<a href=\"#$protection methods\
                            $of_class\">$protection methods</a> -\n"
                }
                # Check for procs
                if {[$classModel methods -protection $protection \
                        -scope class] != {}} {
                    append html "<a href=\"#$protection procs\
                            $of_class\">$protection procs</a> -\n"
                }
                # Check for variables
                if {[$classModel variables -protection $protection \
                        -scope instance -modifiers {}] != {}} {
                    append html "<a href=\"#$protection variables\
                            $of_class\">$protection variables</a> -\n"
                }
                # Check for commons
                if {[$classModel variables -protection $protection \
                        -scope class] != {}} {
                    append html "<a href=\"#$protection commons\
                            $of_class\">$protection commons</a> -\n"
                }
            }
            set html "[string trimright $html "- \n"]\n<HR>\n"      
        }
        Java {
            set html "<HR>"
            set extends [$classModel parents -inheritance implementation]
            if {$extends != {}} {
                append html "Extends: "
                append html "<a href=\"[::tycho::relativePath\
                        [file dirname [docFile $mainClass]]\
                        [docFile $extends]]\">"
                append html "<code>$extends</code></a> -\n"
            }
            
            set implements [$classModel parents -inheritance interface]
            if {$implements != {}} {
                append html "Implements: "
                foreach parent $implements {
                    append html "<a href=\"[::tycho::relativePath\
                            [file dirname [docFile $mainClass]]\
                            [docFile $parent]]\">"
                    append html "<code>$parent</code></a> -\n"
                }
            }
            append html "<a href=\"[$classModel modelcget -source]\">Source\
                    File</a> -\n"
            append html "Contents: "
            
            set of_class "of $mainClass class"
            
            # Check for constructors
            if {[$classModel Constructors] != {}} {
                append html "<a href=\"#constructor $of_class\">constructor</a>\
                        -\n"
            }
            
            # Check for destructor
            set destructor [$classModel Destructors]
            if {$destructor != {}} {
                if {$verbose || !$verbose && [$classModel get annotation \
                        $destructor.description Destructor] != { }} {
                    append html "<a href=\"#finalizer $of_class\"\
                            >finalizer</a> -\n"
                }
            }
            
            # Check for methods/procs/variables/commons by protection
            foreach protection $tempprotect {
                # Check for methods
                if {[$classModel methods -protection $protection \
                        -scope instance] != {}} {
                    append html "<a href=\"#$protection methods\
                            $of_class\">$protection methods</a> -\n"
                }
                # Check for static methods
                if {[$classModel methods -protection $protection \
                        -scope class] != {}} {
                    append html "<a href=\"#$protection static methods\
                            $of_class\">$protection static methods</a> -\n"
                }
                # Check for variables
                if {[$classModel variables -protection $protection \
                        -scope instance] != {}} {
                    append html "<a href=\"#$protection variables\
                            $of_class\">$protection variables</a> -\n"
                }
                # Check for static variables
                if {[$classModel variables -protection $protection \
                        -scope class] != {}} {
                    append html "<a href=\"#$protection static variables\
                            $of_class\">$protection static variables</a> -\n"
                }
            }
            set html "[string trimright $html "- \n"]\n<HR>\n"      
        }
        default {
            set html {}
        }
    }
    return $html
}

#####################################################################
#### generateHtmlBody
# Create the body of an HTML document describing the current mainClass.
# Similar to display. 
#
# If verbose is unset, only output Constructors and Destructors if 
# they have a non-blank description, and only do not output private
# entities. Verbose outputs everything.
#
# We could pull this information from the contents
# widget, however, we might have to reload if it contains inherited data,
# which we do not document in the HTML (yet). 
#
# It may be desireable to generate "flattened" documentation, listing all
# methods/variables available to a class. This is a FIXME for future versions.
#
body ::tycho::IDoc::generateHtmlBody {} {
    set classModel $myClass($mainClass)
    set verbose $itk_option(-verbose)

    # Remove "private" from the protection list if non-verbose
    if {$verbose} {
        set tempprotect $protections
    } else {
        set tempprotect [lreplace $protections end end]
    }
    
    set html [$classModel get annotation explanation]
    # Remove footer
    regexp {^(.*<hr>)(<br>[^:]+:.*)$} $html dmy html footer
    
    switch $language {
        Itcl {
            set of_class "of [info namespace tail $mainClass] class"
            
            # Check for itk_options
            set itk_options [$classModel variables -protection public \
                    -modifiers itk_option]
            if {$itk_options != {}} {
                append html "<H2><a name=\"itk_options $of_class\">\
                        Itk_options</a></H2>\n<dl>"
                foreach option $itk_options {
                    set nodash [string trimleft $option "-"]
                    append html "<a name = \"$nodash \
                            itk_option $of_class\"></a>"
                    append html "[formatExpl $mainClass $option variable 1]"
                }
                append html "</dl>"
            }
            
            # Check for constructor
            set constructor [$classModel Constructors]
            if {$constructor != {}} {
                if {$verbose || !$verbose && [$classModel get annotation \
                        $constructor.description Constructor] != { }} {
                    append html "<H2><a name=\"constructor $of_class\"\
                            >Constructor</a></H2>\n<dl>"
                    append html "<a name = \"constructor of\
                            $mainClass class\"></a>"
                    append html "[formatExpl $mainClass\
                            $constructor Constructor 1]"
                    append html "</dl>"
                }
            }
            
            # Check for destructor
            set destructor [$classModel Destructors] 
            if {$destructor != {}} {
                if {$verbose || !$verbose && [$classModel get annotation \
                        $destructor.description Destructor] != { }} {
                    append html "<H2><a name=\"destructor $of_class\"\
                            >Destructor</a></H2>\n<dl>"
                    append html "<a name = \"destructor of\
                            $mainClass class\"></a>"
                    append html "[formatExpl $mainClass\
                            $destructor Destructor 1]"
                    append html "</dl>"
                }     
            }
            
            # Check for methods/procs/variables/commons by protection
            foreach protection $tempprotect {
                set Protection [::tycho::capitalize $protection]
                set temp {}

                # Check for methods
                set methods [$classModel methods -protection $protection \
                        -scope instance]
                if {$methods != {}} {
                    append temp "<H3><a name=\"$protection methods\
                            $of_class\">$Protection Methods</a></H3><dl>"
                    foreach method $methods {
                        append temp "<a name = \"$method method of $mainClass\
                                class\"></a>"
                        append temp "[formatExpl $mainClass\
                                $method method 1]"
                    }
                    append temp "</dl>"
                }
                                
                # Check for procs
                set procs [$classModel methods -protection $protection \
                        -scope class]
                if {$procs != {}} {
                    append temp "<H3><a name=\"$protection procs\
                            $of_class\">$Protection Procs</a></H3><dl>"
                    foreach proc $procs {
                        append temp "<a name = \"$proc proc of $mainClass\
                                class\"></a>"
                        append temp "[formatExpl $mainClass\
                                $proc method 1]"
                    }
                    append temp "</dl>"
                }

                # Check for variables
                set variables [$classModel variables -protection $protection \
                        -scope instance -modifiers {}]
                if {$variables != {}} {
                    append temp "<h3><a name=\"$protection variables\
                            $of_class\">$Protection Variables</a></h3><dl>"
                    foreach variable $variables {
                        append temp "<a name = \"$variable variable of\
                                $mainClass class\"></a>"
                        append temp "[formatExpl $mainClass\
                                $variable variable 1]"
                    }
                    append temp "</dl>"
                }

                # Check for commons
                set commons [$classModel variables -protection $protection \
                        -scope class]
                if {$commons != {}} {
                    append temp "<h3><a name=\"$protection commons\
                            $of_class\">$Protection Commons</a></h3><dl>"
                    foreach common $commons {
                        append temp "<a name = \"$common common of $mainClass\
                                class\"></a>"
                        append temp "[formatExpl $mainClass\
                                $common variable 1]"
                    }
                    append temp "</dl>"
                }
                
                if {$temp != {}} {
                    append html "<h2>$Protection constructs</h2>"
                    append html "$temp\n<HR>"
                }
            }
        }
        Java {
            # For anchors i.e: constructor of String class
            set of_class "of $mainClass class"
            # For anchors i.e.: clear method of java.lang.String class
            set of_lclass "of\
                    [$classModel modelcget -package].[$classModel\
                    modelcget -name] class"

            # Check for constructors
            set constructors [$classModel Constructors]
            if {$constructors != {}} {
                append html "<h2><a name=\"constructor $of_class\"\
                        >Constructor</a></h2>\n<dl>"
                foreach constructor $constructors {
                    append html "<a name = \"[fixName $constructor 0]\
                            $of_lclass\"></a>\n"
                    append html "[formatExpl $mainClass\
                            $constructor Constructor 1]\n"
                }
                append html "</dl>\n"
            }
            
            # Check for destructors
            set destructors [$classModel Destructors]
            set destructor [$classModel Destructors]
            if {$destructor != {}} {
                if {$verbose || !$verbose && [$classModel get annotation \
                        $destructor.description Destructor] != { }} {
                    append html "<h2><a name=\"finalizer $of_class\"\
                            >Finalizer</a></h2><dl>"
                    append html "<a name = \"finalizer $of_lclass\"></a>\n"
                    append html "[formatExpl $mainClass\
                            $destructor Destructor 1]\n"
                    append html "</dl>\n"
                }
            }
            
            # Check for methods/variables by protection
            foreach protection $tempprotect {
                set Protection [::tycho::capitalize $protection]
                set temp {}
                
                # Check for methods
                set methods [$classModel methods -protection $protection \
                        -scope instance] 
                if {$methods != {}} {
                    append temp "<h3><a name=\"$protection methods\
                            $of_class\">$Protection Methods</a></h3><dl>"
                    foreach method $methods {
                        append temp "<a name = \"[fixName $method 0]\
                                method $of_lclass\"></a>\n"
                        append temp "[formatExpl $mainClass $method method 1]\n"
                    }
                    append temp "</dl>\n"
                }

                # Check for static methods
                set smethods [$classModel methods -protection $protection \
                        -scope class]
                if {$smethods != {}} {
                    append temp "<h3><a name=\"$protection static methods\
                            $of_class\">$Protection Static Methods</a></h3><dl>"
                    foreach smethod $smethods {
                        append temp "<a name = \"[fixName $smethod 0]\
                                static method $of_lclass\"></a>\n"
                        append temp "[formatExpl $mainClass \
                                $smethod method 1]\n"
                    }
                    append temp "</dl>\n"
                }

                # Check for variables
                set variables [$classModel variables -protection $protection \
                        -scope instance]
                if {$variables != {}} {
                    append temp "<h3><a name=\"$protection variables\
                            $of_class\">$Protection Variables</a></h3><dl>"
                    foreach variable $variables {
                        append temp "<a name = \"[fixName $variable 0]\
                                variable $of_lclass\"></a>\n"
                        append temp "[formatExpl $mainClass $variable\
                                variable 1]\n"
                    }
                    append temp "</dl>\n"
                }

                # Check for static variables
                set svariables [$classModel variables -protection $protection \
                        -scope class]
                if {$svariables != {}} {
                    append temp "<h3><a name=\"$protection static variables\
                            $of_class\">$Protection Static Variables</a>\
                            </h3><dl>"
                    foreach svariable $svariables {
                        append temp "<a name = \"[fixName $svariable 0]\
                                static variable $of_lclass\"></a>\n"
                        append temp "[formatExpl $mainClass $svariable\
                                variable 1]\n"
                    }
                    append temp "</dl>\n"
                }
                
                if {$temp != {}} {
                    append html "<h2>$Protection constructs</h2>"
                    append html "$temp\n<HR>"
                }
            }                
        }
        default {
        }
    }
    append html $footer
    return $html
}

#####################################################################
#### hyperLink
# Generates a reasonable hyperLink tag to the given item, using the text
# field as the link text, if it's given (otherwise use item). This will
# not work if the source is formatted differently.
#
body ::tycho::IDoc::hyperLink {class item type {text {}} {itemtype {}}} {
    set classModel $myClass($class)

    if {$text == {}} {
        set text $item
    }

    switch $language {
        Itcl {
            if {$type == "method" || $type == "Destructor" \
                    || $type == "Constructor"} {
                set text "<a href = \
                    \"[$classModel modelcget -source]#body [$classModel \
                    modelcget -name]::$item\">$text</a>"
            } elseif {$type == "variable" && [$classModel itemcget \
                    variable $item -modifiers] != "itk_option"} { 
                set text "<a href = \
                    \"[$classModel modelcget -source]#variable $item\">\
                    $text</a>"
            } else {
                # It's an itk_option, link to the itk_option define
                set text "<a href = \
                    \"[$classModel modelcget -source]#itk_option\
                    define $item\">$text</a>"
            }  

        }
        Java {
            # Assume text is the fixed name and item is the full name
            set protection [$classModel itemcget $type $item -protection]
            if {$protection == "package"} {
                set protection {}
            } else {
                set protection "$protection "
            }
            set modifiers [$classModel itemcget $type $item -modifiers]
            if {$modifiers != {}} {
                set modifiers "$modifiers "
            }
            if {$itemtype != {}} {
                set itemtype "$itemtype "
            }

            if {$type != "method" && $type != "Constructor"} {
                set text "<a href = \
                    \"[$classModel modelcget \
                    -source]#$protection$modifiers$itemtype$text\"\
                    >$text</a>"
            } else {
                # FIXME: Need the arguments to distinguish methods, constructors
                set text "<a href = \
                        \"[$classModel modelcget \
                        -source]#$protection$modifiers$itemtype$text\"\
                        >$text</a>"
            }
        }
    }
    return $text
}

#####################################################################
#### initializeMenubar
# Initialize the menu bar.  Adds entries specific to this class.
#
body ::tycho::IDoc::initializeMenubar {menubar} {
    $menubar delete compareto
    $menubar delete insert
    $menubar delete save
    $menubar delete saveas
    $menubar delete evaluate
    $menubar delete revisioncontrol
    
    $menubar addMenu special -label Special -after window -underline 0
    # Add font size control
    $menubar command biggerfont special \
            -label "Bigger Font" -underline 0\
            -accelerator "C-+" -command "$this upSize"
        
    $menubar command smallerfont special \
            -label "Smaller Font" -underline 0\
            -accelerator "C--" -command "$this downSize"
    
    $menubar separator specialsep1 special

    # Add a way to get the text description.
    $menubar command describe special \
            -label Describe \
            -underline 0 -command "::tycho::inform \[$this describe\]"
    
    $menubar command inherit special \
            -label Inherit \
            -underline 0 -command "$this inheritAll"
    
    $menubar command generateHtml special \
            -label "Generate HTML" \
            -underline 0 -command "$this generateHtml"
    
    # FIXME: add in when generalized place is working in displayer
    #        $menubar command GenDAG Special \
    #                -underline 0 -command "$this generateDAG"
}

#####################################################################
#### javaNamespaceQual
# Perform an info namespace qualifiers, Java style
#
body ::tycho::IDoc::javaNamespaceQual {classname} {
    if [regexp {^(.+)[.][^.]+$} $classname dmy classname] {
        return $classname
    } else {
        return {}
    }
}

#####################################################################
#### javaNamespaceTail
# Perform an info namespace tail, Java style
#
body ::tycho::IDoc::javaNamespaceTail {classname} {
    regexp {[.]([^.]+)$} $classname dmy classname
    return $classname
}

#####################################################################
#### newRelWidth
# Calculate the new -relwidth option to the placer which will put the
# division of widgets over the cursor. _pixels_ is the distance from the 
# old location to the desired location
#
body ::tycho::IDoc::newRelWidth {pixels} {
    set contentsRelW $itk_option(-relwidth)
    set totalW [winfo width [$this windowName]]
    set newX [expr ($totalW * $contentsRelW) + $pixels] 
    set newRelX [expr $newX/$totalW]
            
    if {$newRelX < 0.0} {
        set newRelX 0.0
    } elseif {$newRelX > 1.0} {
        set newRelX 1.0
    }

    return $newRelX
}

#####################################################################
#### newRelHeight
# Calculate the new -relheight option to the placer which will put the
# division of widgets over the cursor. _pixels_ is the distance from the
# old location to the desired location
#
body ::tycho::IDoc::newRelHeight {pixels} {
    set topRelH $itk_option(-relheight)
    set totalH [winfo height [$this windowName]]
    set newY [expr ($totalH * $topRelH) + $pixels]
    set newRelY [expr $newY/$totalH]

    if {$newRelY < 0.0} {
        set newRelY 0.0
    } elseif {$newRelY > 1.0} {
        set newRelY 1.0
    }
    
    return $newRelY
}

#####################################################################
#### resetHtml
# HTML widgets are loaded by changing their data variables and then
# calling this procedure. It used to be necessary when sizes were
# changed. It no longer is probably due to JohnR's removal of the 
# -data option.
#
body ::tycho::IDoc::resetHtml {{top 1}} {
    switch $top {
        "0" {$myHtmlBottom insertData $myBottomData}
        "1" {$myHtmlTop insertData $myTopData}
        default {
            $myHtmlTop insertData $myTopData
            $myHtmlBottom insertData $myBottomData
        }
    }
}

#####################################################################
#### setupHandles
# Setup the resizing handles to behave properly: configure the cursor,
# bind the behaviours. Called by the constructor.
#
body ::tycho::IDoc::setupHandles {} {
    set updown $itk_component(updown)
    set leftright $itk_component(leftright)

    $updown config -cursor sb_v_double_arrow -height 4 -bg black
    $leftright config -cursor sb_h_double_arrow -width 4 -bg black
    $itk_component(vGhost) config -cursor sb_h_double_arrow -bg white
    $itk_component(hGhost) config -cursor sb_v_double_arrow -bg white
    
    bind $updown <B1-Motion> {%Q ghostHandle 0 "%y"}
    bind $updown <ButtonRelease-1> {
        %Q resizeFrame 0 "%y"
        %Q ghostHandle 0 0
    }

    bind $leftright <B1-Motion> {%Q ghostHandle 1 "%x"}
    bind $leftright <ButtonRelease-1> {
        %Q resizeFrame 1 "%x"
        %Q ghostHandle 1 0
    }
}

#####################################################################
#### fixName
# A ::tycho::Class model requires unique names for its entities (including
# methods). Because some languages support method overloading, their
# method names are stored as their signatures: i.e. name(argtype1, argtype2...).
# 
# When short is set, this method (proc?) removes the trailing portion of 
# the unique name.
#
# If short is unset, it just beautifies the name, changing char<> to char[], 
# (Itcl has problems with string matching brackets.) and foo(int,int) to 
# foo (int, int)
#
body ::tycho::IDoc::fixName {name {short 1}} {
    if {$short} {
        regexp {^(.*)[(]} $name dmy name
        return $name
    } {
        set retval ""
        set index 0
        set length [string length $name]
        for {} {$index < $length} {incr index} {
            set letter [string index $name $index]
            if {$letter == "\<"} {
                append retval \[
            } elseif {$letter == "\>"} {
                append retval \]
            } elseif {$letter == "\("} {
                append retval " ("
            } elseif {$letter == ","} {
                append retval ", "
            } {
                append retval $letter
            }
        }
        return $retval
    }
}
