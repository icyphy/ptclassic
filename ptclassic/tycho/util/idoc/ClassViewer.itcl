# A viewer for the idocumentation.
#
# @Author: Cliff Cordeiro
#
# @Version: $Id$
#
# @Copyright (c) 1995-1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### IDoc
# This class defines a combination of a MultiPanel widget and two HTML
# widgets which will soon be used for more efficient class browsing.
#
# The MultiPanel widget is along the left side of the screen and is used
# for controlling the contents of the two HTML widgets. A click brings 
# items into the proper HTML widgets, and placing the mouse over an item
# puts an abbreviated version of the information in the statusbar at the
# bottom of the screen. Items within the Panel can be expanded and 
# contracted and should be able to scroll as well.
#
# The top HTML widget holds entire-class information, and usually will
# be sized larger than the bottom one and changes less often.
# 
# The bottom HTML widget holds specific information relating to specific
# constructs the user selects in the Panel on the left. 
# This class defines a combination of an HTML widget and a text widget
# which will eventually be used for more efficient class browsing.
#  
# Data is stored in a <a href="$TYCHO/kernel/doc/codeDoc/Class.idoc">
# ::tycho::Class</a> model. The model is in turn generated from the code.
# 
# IDoc supports any language that can be encoded into a ::tycho::Class
# representation. Currently, keywords are only correct for Itcl. However,
# the default behaviour will allow browsing of any language, though certain
# information may be left out in the current implementation.
#
# To add a new language to IDoc, modify the displayMeth (chooses the names 
# and ordering for methods and procs in the MultiPanel), displayVar 
# (chooses the names and ordering for variables in the MultiPanel), and 
# formatExpl (formats the explanations of variables and methods in HTML) 
# methods.
#  
# I am currently working on the generation of ::Class files and then the
# importation of ancestors...I think it's important that the documentation
# have the ability to be flattened. That is, a developer or user needs to know
# which variables and methods have been inherited from the parents. Switching
# back and forth is time consuming, confusing, and downright frustrating.
#
# Here's an example of how to use this class:
#
# <tcl><pre>
# catch {destroy .u}
# ::tycho::Displayer .u
# ::tycho::IDoc .u.i
# .u showView .u.i
# .u centerOnScreen
# .u.i configure -file  $TYCHO/lib/tydoc/test/IDoc.idoc
# .u.i reload
# </tcl></pre>
#
class ::tycho::IDoc {
    inherit ::tycho::File

    ##########################################################################
    ####                            options                               ####

    # The background color of the HTML documents.
    itk_option define -bgcolor bgColor BgColor white

    # The color of inherited entities.
    itk_option define -inheritcolor inheritColor InheritColor grey

    # The color of Itcl options.
    itk_option define -optioncolor optionColor OptionColor black
  
    # The color of public constructs.
    itk_option define -publiccolor publicColor PublicColor black
    
    # The color of protected constructs.
    itk_option define -protectedcolor protectedColor ProtectedColor black
    
    # The color of private constructs.
    itk_option define -privatecolor privateColor PrivateColor black 

    # The default head font -- an X font which should be made symbolic in Tk 8.0
    itk_option define -headfont headFont Font [::tycho::font \
            {New Century Schoolbook} 18 Roman]

    # The default body font -- an X font which should be made symbolic in Tk 8.0
    itk_option define -bodyfont bodyFont Font [::tycho::font Hevetica 12 Bold]
    
    # The height of the entire compound widget.
    itk_option define -height height Height "20 c"
    
    # The width of the entire compound widget.
    itk_option define -width width Width "30 c"

    # The relative width of the contents widget compared to the entire window.
    itk_option define -relwidth relWidth RelWidth 0.2

    # The relative height of the top HTML widget. (The bottom is 1-relheight). 
    itk_option define -relheight relHeight RelHeight 0.6

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####

    public method debug {} {
        foreach class [array names myClass] {
            puts $class
        }
        puts "MH: $myHeritage"
    }
    
    # Return a description of the main or given class.
    public method describe {{class {}}}

    # Make the fonts in all FIMXE: widgets smaller.
    public method downSize {}

    # Place a ghost handle a certain number of pixels from the actual one.
    public method ghostHandle {horizontal pixels}

    # Import the main class' parents, the parents' parents, etc.
    public method inheritAll {}

    # Insert the specified data.
    public method insertData {data}
    
    # Insert HTML into myHtml(Top or Bottom) widget
    public method putHtml {class data {top 1}}

    # Resize the appropriate frame.
    public method resizeFrame {horizontal pixels}
    
    # Make the fonts in all FIMXE: widgets bigger.
    public method upSize {}

    ###################################################################
    ####                      public procs                         ####

    # Return the filename of the documentation of the given class.
    public method docFile {classname}

    ###################################################################
    ####                      protected variables                  ####

    # The name of the currently displayed class (others are related to this)
    protected variable mainClass

    # Array of ::tycho::Class objects indexed by class -> myClass(::foo::bar)
    protected variable myClass

    # List of classes in myClass() in inheritance order.
    protected variable myHeritage ""
   
    # Internal contents widget
    protected variable myContents

    # My displayer window
    protected variable myDisplayer

    # Internal HTML widget for class-wide documentation
    protected variable myHtmlTop

    # Internal HTML widget for user-chosen documentation
    protected variable myHtmlBottom

    # Data currently shown in bottom HTML widget.
    protected variable myBottomData ""

    # Data currently shown in top HTML widget.
    protected variable myTopData ""

    # Language of current class (should be same for all classes loaded)
    protected variable language

    # Location where mouse button was pressed.
    protected variable lastPress

    ###################################################################
    ####                      private methods                      ####

    # Bind a description to <enter>ing a label.
    private method bindDesc {class item label}
  
    # Bind an explanation to button 1 clicking a label.
    private method bindExpl {class item label}

    # Delete the classes in the myClass array and unset the array.
    private method deleteClasses {{all 1}}

    # Display the contents of $myClass($mainClass) in contents widget.
    private method display {}

    # Display the proper methods/procedures in the contents widget.
    private method displayMeth {protection}

    # Display the proper variables in the contents widget.
    private method displayVar {protection}

    # Format the explanation of the given item in HTML.
    private method formatExpl {class item type}

    # Calculate a new -relwidth parameter (doesn't reset it)
    private method newRelWidth {pizels}

    # Calculate a new -relheight parameter (doesn't reset it)
    private method newRelHeight {pixels}

    # Reload the data in HTML widgets after an event has cleared them.
    private method resetHtml {{top 1}}

    # Setup the resizing handles to behave properly.
    private method setupHandles {}
     
    # Preference function for this class
    private method preference {mode args}
}

#########################################################################
#### -headfont configuration
# Parse the given X font to figure out what font family, size,
# and style to use for the display font
#
configbody ::tycho::IDoc::headfont {

    set f $itk_option(-headfont)
    foreach panel [$myContents panels] {
        $myContents subconfig $panel -font $f
    }
    # must be caught because class may not exist
    catch {$myContents subconfig class -font $f}
}

#########################################################################
#### -bodyfont configuration
# Parse the given X font to figure out what font family, size,
# and style to use for the display font
#
configbody ::tycho::IDoc::bodyfont {

    set f $itk_option(-bodyfont)
    foreach label [$myContents labels] {
        if {$label != "class"} {    
            $myContents subconfig $label -font $f
        }
    }
}

#########################################################################
#### -height configuration
# Height of the compound widget must be passed to the displayer.
#
configbody ::tycho::IDoc::height {
    $myDisplayer config -height $itk_option(-height)
}

#########################################################################
#### -width configuration
# Width of the compound widget must be passed to the displayer.
#
configbody ::tycho::IDoc::width {
    $myDisplayer config -width $itk_option(-width)
}

#########################################################################
#### -relheight configuration
# Reset the placement of widgets to reflect the new relative height
# priorities.
#
configbody ::tycho::IDoc::relheight {

    set h $itk_option(-relheight)
    set cw $itk_option(-relwidth)
    set hw [expr 1 - $cw]

    place $itk_component(html1) -anchor ne -relx 1.0 -rely 0.0 \
            -relheight $h -relwidth $hw -in $itk_interior

    place $itk_component(html2) -anchor se -relx 1.0 -rely 1.0 \
            -relheight [expr 1 - $h] -relwidth $hw -in $itk_interior

    place $itk_component(leftright) -anchor n -relx $cw -rely 0.0 \
            -relheight 1.0 -in $itk_interior

    place $itk_component(updown) -anchor e -relx 1.0 -rely $h \
            -relwidth $hw -in $itk_interior
}

#########################################################################
#### -relwidth configuration
# Reset the placement of widgets to reflect the new relative width
# priorities.
#
configbody ::tycho::IDoc::relwidth {

    set h $itk_option(-relheight)
    set cw $itk_option(-relwidth)
    set hw [expr 1 - $cw]

    place $itk_component(contents) -relx 0.0 -rely 0.0 \
            -relheight 1.0 -relwidth $cw -in $itk_interior

    place $itk_component(html1) -anchor ne -relx 1.0 -rely 0.0 \
            -relheight $h -relwidth $hw -in $itk_interior

    place $itk_component(html2) -anchor se -relx 1.0 -rely 1.0 \
            -relheight [expr 1 - $h] -relwidth $hw -in $itk_interior
    
    place $itk_component(leftright) -anchor n -relx $cw -rely 0.0 \
            -relheight 1.0 -in $itk_interior

    place $itk_component(updown) -anchor e -relx 1.0 -rely $h \
            -relwidth $hw -in $itk_interior
}

###################################################################
#### constructor
#
body ::tycho::IDoc::constructor {args} {

    itk_component add html1 {
        ::tycho::HTML $itk_interior.html1
    } {
        keep -background -cursor
    }

    set myHtmlTop $itk_component(html1)

    itk_component add html2 {
        ::tycho::HTML $itk_interior.html2
    } {
        keep -background -cursor
    }

    set myHtmlBottom $itk_component(html2)

    itk_component add contents {
        ::tycho::MultiPanel $itk_interior.contents
    } {
       keep -background -cursor
    }

    set myContents $itk_component(contents)

    # add handle to resize frames vertically
    itk_component add updown {
        frame $itk_interior.updown
    } {
        usual
    }
    
    # add handle to resize frames horizontally
    itk_component add leftright {
        frame $itk_interior.leftright
    } {
        usual
    }

    # add ghost handles which move with the mouse
    itk_component add hGhost {
        frame $itk_interior.hGhost
    } {
        usual
    }

    itk_component add vGhost {
        frame $itk_interior.vGhost
    } {
        usual
    }

    # NOTE: placing of widgets occurs in the configbody of -relheight/-relwidth

    # Insert items in the menubar, if there is one.
    if {$myMenubar != {}} {
        $myMenubar disable {Undo/Redo}
        $myMenubar disable {Cut}
        $myMenubar disable {Paste}
        $myMenubar disable "Font..."
        $myMenubar delete "Fill Region"
        $myMenubar delete "Right Fill Column"
        $myMenubar delete "Set Fill Prefix"
        $myMenubar delete "Lower Case"
        $myMenubar delete "Upper Case"
        $myMenubar delete "Capitalize"
        $myMenubar delete "Insert..."
        $myMenubar delete "Save"
        $myMenubar delete "SaveAs..."
        $myMenubar delete "Evaluate"
        $myMenubar delete "Revision Control..."
        
        $myMenubar addMenu Special -after Window -underline 0
        # Add a way to get the text description.
        $myMenubar command Describe Special \
                -underline 0 -command "::tycho::inform \[$this describe\]"

        $myMenubar command Inherit Special \
                -underline 0 -command "$this inheritAll"
       
        $myMenubar addMenu Format -after Special -underline 0
        # Add font size control
        $myMenubar command "Bigger Font" Format -underline 0\
                -accelerator "C-+" -command "$this upSize"
        
        $myMenubar command "Smaller Font" Format -underline 0\
                -accelerator "C--" -command "$this downSize"
    }

    set myDisplayer [[$this displayer] windowName]

    eval itk_initialize $args

    # Subscribe to the preference set
    preference subscribeoptions $this \
            -headfont displayFont \
            -bodyfont entryFont \
            -bgcolor bgColor \
            -height height \
            -width width \
            -publiccolor publicColor \
            -protectedcolor protectedColor \
            -privatecolor privateColor \
            -optioncolor optionColor  \
            -inheritcolor inheritColor

    # Bindings
    # font size control
    bind $myDisplayer <Control-equal> "$this upSize; break"
    bind $myDisplayer <Control-plus> "$this upSize; break"
    bind $myDisplayer <Control-minus> "$this downSize; break"
    
    # Configure the handles
    setupHandles

    pack propagate $myDisplayer 0

    # Something annoying inherited insists on creating this thing
    pack forget $itk_interior.childsite
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#####################################################################
#### describe 
# Return a description of the current class by calling describe. The 
# class must be loaded. Calling with no arguments describes the mainClass.
#
body ::tycho::IDoc::describe {{class {}}} {
    if {$class == {}} {
        set class $mainClass
    }
    return [$myClass($class) describe]
}

#####################################################################
#### downSize
# 
body ::tycho::IDoc::downSize {} {
    $myHtmlTop downSize
    $myHtmlBottom downSize
    resetHtml 2
}

#####################################################################
#### ghostHandle
# Control the ghost handle (for lack of a standard name), which is the
# handle (Iwidgets' panedwindow calls it a "sash") that moves when you
# are resizing a frame. This is done by _placing_ a frame of the correct
# size on top of the proper location.
#
body ::tycho::IDoc::ghostHandle {horizontal pixels} {
    if {$horizontal} {
        if {$pixels == 0} {
            # when the mouse is released, sent ghostHandle 1 0
            place forget $itk_component(hGhost)
        } {
            set newRelX [newRelWidth $pixels]

            place $itk_component(hGhost) -anchor n -relx $newRelX \
                    -rely 0.0 -width 4 -relheight 1.0 -in $itk_interior
        }
    } {
        if {$pixels == 0} {
            # when the mouse is released, sent ghostHandle 0 0
            place forget $itk_component(vGhost)
        } { 
            set hw [expr 1 - $itk_option(-relwidth)]

            set newRelY [newRelHeight $pixels]

            place $itk_component(vGhost) -anchor e -relx 1.0 -rely $newRelY \
                    -relwidth $hw -height 4 -in $itk_interior
        }
        
    }

}

#######################################################################
#### inheritAll
# Load the current mainClass' parents, then recurse until no new classes
# need to be loaded. Inherited methods are placed properly in the 
# hierarchy according to language and protection levels. (Parent classes
# _must_ of course be the same language as the current class. This is not
# explicitly checked here.)
#
body ::tycho::IDoc::inheritAll {} {
    set classModel $myClass($mainClass)

    # clear inherited classes
    deleteClasses 0

    set parents [$classModel parents]
        
    while {[llength $parents] != 0} {
        set parent [lindex $parents 0]
        set parents [lreplace $parents 0 0]
        
        if [info exists myClass($parent)] {
            catch {delete object $myClass($parent)}
            unset myClass($parent)
        }
        
        # Create a new class model if the parent can be found.
        set parentFile [docFile $parent]
        if {$parentFile != {}} {
            # NOTE: parents which aren't loaded aren't part of myHeritage
            lappend myHeritage $parent

            set myClass($parent) [::tycho::Class [::tycho::autoName class]]
            $myClass($parent) read file $parentFile
            
            # Load my parents too.
            set newparents [$myClass($parent) parents]
            set parents "$parents $newparents"
        } else {
            puts "$parent idoc file not found"
        }
    }
    display
}


#######################################################################
#### insertData
# Append the specified data to the existing display. The data is in the
# form of a ::tycho::Class and is read by methods from that class.
#
body ::tycho::IDoc::insertData {data} {
    if [getReadOnly] {bell; return}
    deleteClasses
    set tempClass [::tycho::Class [::tycho::autoName class]]
    $tempClass read string "$data"
    set language [$tempClass modelcget -language]
    set mainClass [$tempClass modelcget -name]
    set myClass($mainClass) $tempClass
    display
    putHtml $mainClass [$tempClass get annotation explanation]
}

#########################################################################
#### putHtml
# Load a portion of HTML into the proper HTML widget. Add tags to format
# properly.
#
body ::tycho::IDoc::putHtml {class data {top 1}} {
    switch $top {
        1 {
            set myTopData " 
               <head>
               <title>Class [$myClass($class) modelcget -name]</title>
               </head>
               <body bgcolor=\"$itk_option(-bgcolor)\">
               $data
               </body>
               </html>"
            resetHtml 1
            $myHtmlTop config -file [docFile $class].base
        }
        0 {
            set myBottomData "
               <html>
               <body bgcolor=\"$itk_option(-bgcolor)\">
               $data
               </body>
               </html>"
            resetHtml 0
            $myHtmlBottom config -file [docFile $class].base
        }
    }
}

#####################################################################
#### resizeFrame
# Resize the frame after a mouse event involving either handle.
#
body ::tycho::IDoc::resizeFrame {horizontal pixels} {
    if {$horizontal} {
        $this config -relwidth [newRelWidth $pixels]
    } {
        $this config -relheight [newRelHeight $pixels]
    }
}

#####################################################################
#### upSize
# 
body ::tycho::IDoc::upSize {} {
    $myHtmlTop upSize
    $myHtmlBottom upSize
    resetHtml 2
}

    ###################################################################
    ###################################################################
    ####                      public procs                         ####

#####################################################################
#### docFile
# FIXME: this is a hack and not valid under all (many) cases 
#
body ::tycho::IDoc::docFile {classname} {
    if {$classname == $mainClass} {
        return [$this cget -file]
    }

    set docname "[info namespace tail $classname].idoc"

    lappend dirs {$TYCHO/kernel}
    lappend dirs {$TYCHO/editors/textedit}
    lappend dirs {$TYCHO/editors/slate}
    lappend dirs {$TYCHO/editors/visedit}
    lappend dirs {$TYCHO/lib/tydoc}
    
    foreach dir $dirs {
        set findfile [file join $dir doc codeDoc $docname]
        set findfile [::tycho::expandPath $findfile]
        set file [glob -nocomplain $findfile]
        if {$file != {}} {
            break
        }
    }
    return "$file"
}

    ###################################################################
    ###################################################################
    ####                      private methods                      ####

###########################################################################
#### bindDesc
# bind to the enter and shift release events on the given label
# the display of the description of the given item in the statusbar
# if such a description exists
#
body ::tycho::IDoc::bindDesc {class item label} {
    set classModel $myClass($class)

    # get the type of the label
    switch [string range $label end end] {
        "\p" {set type method}
        "\m" {set type method}
        "\v" {set type variable}
        default {set type {}}
    }

    if {$class != $mainClass} {
        # Don't display class it's from if it's from this class.
        set class "<$class> "
    } {
        set class ""
    }

   if ![catch {set desc [$classModel get annotation $item.description $type]}] {
        $myContents bind $label <Enter> \
                [code "$this putStatus \{$class$desc\}"]
        $myContents bind $label <KeyRelease-Shift_L> \
                [code "$this putStatus \{$class$desc\}"]
        $myContents bind $label <KeyRelease-Shift_R> \
                [code "$this putStatus \{$class$desc\}"]
        $myContents bind $label <Leave> \
                [code "$this putStatus {}"]
    }   
}

###########################################################################
#### bindExpl
# bind to the button 1 click event on the given label
# the display of the explanation of the given item in HTML
# the explanation includes extra information besides the
# actual explanation field of the item
#
body ::tycho::IDoc::bindExpl {class item label} {
    # get the type of the label
    switch [string range $label end end] {
        "\p" {set type method}
        "\m" {set type method}
        "\v" {set type variable}
        default {set type {}}
    }

    # format explanation
    set expl [formatExpl $class $item $type]

    # bind explanation to button 1 click
    $myContents bind $label <Button-1> \
            [code "$this putHtml $class {$expl} {0}"]
}

###########################################################################
#### deleteClasses
# Unset the array of classes and delete each class object if all is set. If 
# all is 0, delete only the inherited classes. Either way, set myHeritage to
# an empty string.
#
body ::tycho::IDoc::deleteClasses {{all 1}} {
    if ![info exists myClass] {
        return
    }

    if {$all} {
        foreach class [array names myClass] {
            catch {delete object $myClass($class)}
        }
        unset myClass
    } else {
        # Only delete inherited classes
        foreach class [array names myClass] {
            if {$class != $mainClass} {
                catch {delete object $myClass($class)}
            }
        }
    }
    set myHeritage ""
}

###########################################################################
#### display
# display the contents of myClass($mainClass) in the myContents widget
#
body ::tycho::IDoc::display {} {
    set classModel $myClass($mainClass)

    # clear the contents widget
    $myContents clear

    # insert the class name
    $myContents appendlabel class \
            -text $mainClass \
            -font [$this cget -headfont] \
            -fg [$this cget -publiccolor]

    $myContents bind class <Button-1> \
            [code "$this putHtml \
            $mainClass \{[$classModel get annotation explanation]\}"]

    # Class description is optional
    if ![catch {$classModel get annotation description}] {
        $myContents bind class <Enter> [code \
                "$this putStatus \{[$classModel get annotation description]\}"]
        $myContents bind class <Leave> [code \
                "$this putStatus {}"]
    }

    # FIXME in general, insert class parameters here

    # insert each type (Protected Method, etc.) by protection order
    foreach protection {public protected private} {
        # Variables        
        displayVar $protection   
        # Methods
        displayMeth $protection   
    }
}

#####################################################################
#### displayMeth
# Display the methods/procedures of the given protection in the myContents
# widget in according to the $language variable.
#
body ::tycho::IDoc::displayMeth {protection} {
    set classModel $myClass($mainClass)

    switch $language {
        Itcl {
            # Itcl uses -scope instance to signify a method
            # and -scope class to signify a class
            
            # Methods
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection -scope instance] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\m
                bindExpl $mainClass $method $method\m
                lappend subnames $method\m
            }
            # check for inherited methods
            if {$protection == "public" || $protection == "private"} {
                if {$protection == "public"} {
                    set inprotection "public"
                } {
                    set inprotection "protected"
                }
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach method [$currentModel methods \
                            -protection $inprotection -scope instance] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$method\m"] == -1} {
                            $myContents appendlabel $method\m \
                                    -text $method \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $method $method\m
                            bindExpl $class $method $method\m
                            lappend subnames $method\m
                        }
                    }
                }
            }
            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\m "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }

            # Procs
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection -scope class] {
                # put label into contents widget
                $myContents appendlabel $method\p \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\p
                bindExpl $mainClass $method $method\p
                lappend subnames $method\p
            }
            # check for inherited procs
            if {$protection == "public" || $protection == "private"} {
                if {$protection == "public"} {
                    set inprotection "public"
                } {
                    set inprotection "protected"
                }
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach method [$currentModel methods \
                            -protection $inprotection -scope class] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$method\p"] == -1} {
                            $myContents appendlabel $method\p \
                                    -text $method \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $method $method\p
                            bindExpl $class $method $method\p
                            lappend subnames $method\p
                        }
                    }
                }
            }
            # insert panel if any procs found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Procs" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }   
        }
        default {
            # NOTE: mainly for documentation purposes, does not do inheritance
            set subnames {}
            foreach method [$classModel methods \
                    -protection $protection] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $method $method\p
                bindExpl $mainClass $method $method\p
                lappend subnames $method\p
            }
            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }
        }   
    }
}

#####################################################################
#### displayVar
# Display the variables of the given protection in the myContents
# widget in according to the $language variable.
#
body ::tycho::IDoc::displayVar {protection} {
    set classModel $myClass($mainClass)

    switch $language {
        Itcl {
            # itcl uses -modifiers itk_option to signify an itk_option.
            # check for itk_options
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection -modifiers itk_option] {
                # put label into contents widget
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -optioncolor]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass $variable $variable\v
                lappend subnames $variable\v
            }
            
            # check for inherited itk_options
            if {$protection == "public"} {
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach variable [$currentModel variables \
                            -protection $protection -modifiers itk_option] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$variable\v"] == -1} {
                            $myContents appendlabel $variable\v \
                                    -text $variable \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $variable $variable\v
                            bindExpl $class $variable $variable\v
                            lappend subnames $variable\v
                        }
                    }
                }
            }

            # insert panel if any itk_options found
            if {$subnames != {}} {
                $myContents append $protection\i "$subnames" \
                        -text "Itk Options" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -optioncolor]
            }
            
            # do other variables
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection -modifiers {}] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass $variable $variable\v
                lappend subnames $variable\v
            }

            # check for inherited variables
            if {$protection == "public" || $protection == "private"} {
                if {$protection == "public"} {
                    set inprotection "public"
                } {
                    set inprotection "protected"
                }
                foreach class $myHeritage {
                    set currLabels [$myContents labels]
                    set currentModel $myClass($class)
                    foreach variable [$currentModel variables \
                            -protection $inprotection -modifiers {}] {
                        # put label into contents widget if not there
                        if {[lsearch -exact $currLabels "$variable\v"] == -1} {
                            $myContents appendlabel $variable\v \
                                    -text $variable \
                                    -font [$this cget -bodyfont] \
                                    -fg [$this cget -inheritcolor]
                            # setup bindings on <Enter> and <B1-Click>
                            bindDesc $class $variable $variable\v
                            bindExpl $class $variable $variable\v
                            lappend subnames $variable\v
                        }
                    }
                }
            }


            # insert panel if any variables found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }
        }
        default { 
            # NOTE: for documentation, mainly. Does not implement inheritance.
            set subnames {}
            foreach variable [$classModel variables \
                    -protection $protection] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <B1-Click>
                bindDesc $mainClass $variable $variable\v
                bindExpl $mainClass variable $variable\v
                lappend subnames $variable\v
            }
            # insert panel if any variables found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont] \
                        -foreground [$this cget -$protection\color]
            }
        }
    }
}

#####################################################################
#### formatExpl
# Format the explanation of the given item in HTML. This is usually
# bound to a button 1 click on an item in the contents widget.
# An item may not have an explanation, but _must_ have a description.
#
body ::tycho::IDoc::formatExpl {class item type} {
    set classModel $myClass($class)

    if [catch {set expl [$classModel get annotation $item.explanation $type]}] {
        set expl [$classModel get annotation $item.description $type]
    }
    
    set paramlist {}
    if {$type == "method"} {
        foreach parameter [$classModel parameters $item] {
            set default [$classModel itemcget parameter \
                    $item.$parameter -default $type]
            if {$default == {}} {
                lappend paramlist $parameter
            } else {
                lappend paramlist "$parameter $default"
            }
        }
    }

    set html "<b>$item</b> <i>$paramlist</i><p> $expl"
    
    if {$class != $mainClass} {
        set html "$html<br><br><br><hr>\
                <a href=\"[docFile $class]\">$class</a>"
    }

    return $html
}

#####################################################################
#### newRelWidth
# Calculate the new -relwidth option to the placer which will put the
# division of widgets over the cursor. _pixels_ is the distance from the 
# old location to the desired location
#
body ::tycho::IDoc::newRelWidth {pixels} {
    set contentsRelW $itk_option(-relwidth)
    set totalW [winfo width [$this windowName]]
    set newX [expr ($totalW * $contentsRelW) + $pixels] 
    set newRelX [expr $newX/$totalW]
            
    if {$newRelX < 0.0} {
        set newRelX 0.0
    } elseif {$newRelX > 1.0} {
        set newRelX 1.0
    }

    return $newRelX
}

#####################################################################
#### newRelHeight
# Calculate the new -relheight option to the placer which will put the
# division of widgets over the cursor. _pixels_ is the distance from the
# old location to the desired location
#
body ::tycho::IDoc::newRelHeight {pixels} {
    set topRelH $itk_option(-relheight)
    set totalH [winfo height [$this windowName]]
    set newY [expr ($totalH * $topRelH) + $pixels]
    set newRelY [expr $newY/$totalH]

    if {$newRelY < 0.0} {
        set newRelY 0.0
    } elseif {$newRelY > 1.0} {
        set newRelY 1.0
    }
    
    return $newRelY
}

#####################################################################
#### resetHtml
# When the HTML widget fonts are changed, the HTML widgets go blank,
# possibly because they attempt to load from their "files". Because 
# they aren't associated with valid files, they need to be reset
# manually.
#
body ::tycho::IDoc::resetHtml {{top 1}} {
    switch $top {
        "0" {$myHtmlBottom insertData $myBottomData}
        "1" {$myHtmlTop insertData $myTopData}
        default {
            $myHtmlTop insertData $myTopData
            $myHtmlBottom insertData $myBottomData
        }
    }
}

#####################################################################
#### setupHandles
# Setup the resizing handles to behave properly: configure the cursor,
# bind the behaviours. Called by the constructor.
#
body ::tycho::IDoc::setupHandles {} {
    set updown $itk_component(updown)
    set leftright $itk_component(leftright)

    $updown config -cursor sb_v_double_arrow -height 4 -bg black
    $leftright config -cursor sb_h_double_arrow -width 4 -bg black
    $itk_component(vGhost) config -cursor sb_h_double_arrow -bg white
    $itk_component(hGhost) config -cursor sb_v_double_arrow -bg white
    
    bind $updown <B1-Motion> {%Q ghostHandle 0 "%y"}
    bind $updown <ButtonRelease-1> {
        %Q resizeFrame 0 "%y"
        %Q ghostHandle 0 0
    }

    bind $leftright <B1-Motion> {%Q ghostHandle 1 "%x"}
    bind $leftright <ButtonRelease-1> {
        %Q resizeFrame 1 "%x"
        %Q ghostHandle 1 0
    }
}

#####################################################################
#### preference
# preference function for IDoc
#
body ::tycho::IDoc::preference {mode args} {
    eval ::tycho::preference $mode "idoc" $args
}
  
