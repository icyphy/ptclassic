# The superclass of all simulation controllers.
#
# @Author: John Reekie
#
# @Version: @(#)Simulation.itcl	1.12 09/14/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### Simulation
#
# A <i>Simulation</i> object controls and communicates with a
# running Ptolemy II simulation. It is a subclass of the Tycho
# Model class, in order that multiple views can monitor the
# simulation.
#
# The simulation object
# represents a "live" simulation, and is distinct from the
# graph object that represents the static structure of the
# simulation. We say that the simulation object "performs"
# the graph.
#
# Most of the implementations of the methods in here are garbage,
# and will be fixed when we get a proper interface to Ptolemy II.
#
class ::tycho::Simulation {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####
    
    # The name of the simulation for messages and the like
    public variable simulationName ""

    # The debug flag
    public variable debug 0

    # The port number to use to talk to the simulator
    public variable portnum 13579

    # A flag that says that we have no simulation running
    public variable offline

    ###################################################################
    ####                         public methods                    ####

    # Respond to changes in the graph
    method notify {method args}

    # Pause the simulation
    method pause {}

    # Accept and remember the graph describing the simulation
    method perform {graph}

    # Resume the simulation
    method resume {}

    # Start the simulation
    method start {}

    # Start the simulation server
    method startServer {}

    # Stop the simulation
    method stop {}

    ###################################################################
    ####                      public procs                         ####

    ###################################################################
    ####                   protected methods                       ####

    # Print a debug message
    protected method debug {msg} {
	#if $debug {
	    puts "DEBUG: $simulationName: $msg"
            update
	#}
    }

    # Generate simulation from the current graph
    protected method _construct {}

    # Send a script to the simulation
    protected method _send {script}

    ###################################################################
    ####                   protected variables                     ####

    # The graph we are performing
    protected variable _graph

    ###################################################################
    ####                     private variables                     ####

    # The Java system
    private variable system ""

    # The Java executive director
    private variable director ""

    public method getSystem {} {
	return $system
    }
    public method getDirector {} {
	return $director 
    }
    public method setSystem {s} {
	set system $s
    }
    public method setDirector {d} {
	set director $d
    }
}

#######################################################################
#### debug
#
# Set or clear the debug flag.
#
configbody ::tycho::Simulation::debug {
    ;#
}

#######################################################################
#### offline
#
# Set or clear the offline mode flag.
#
configbody ::tycho::Simulation::offline {
    if !$offline {
	if {[catch {package require java}]} {
	    if $offline {
		puts "Java could not be loaded. Staying in offline mode"
	    } else {
		puts "Java could not be loaded. Going into offline mode"
	    }
	    set offline 1
	} else {
	    set offline 0
	}
    } else {
	set offline 1
    }
    if $offline {
	# Clear java variables to release memory
	setSystem ""
	setDirector ""
    }
}

#######################################################################
#### portnum
#
# Update the port number used for talking to the simulation.
# This trashes the old process and creates a new one.
# FIXME: this is bogus because of the way that itk_options
# are initialized twice...
#
configbody ::tycho::Simulation::portnum {
    puts "Simulation::portnum is no longer used"
}

#######################################################################
#### constructor
#
body ::tycho::Simulation::constructor {args} {
    set simulationName [namespace tail $this]

    # Initialize args
    eval configure $args
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### notify
#
# Handle data change notification from the graph.
#
body ::tycho::Simulation::notify {method args} {
    # FIXME
    # puts "$this notify $method"
}

########################################################################
#### perform
#
# Accept a graph describing the simulation and construct the
# run-time simulation. Subscribe to the graph, so that any changes
# to it (from, for example, the user interface) update the
# simulation.
#
body ::tycho::Simulation::perform {graph} {
    if [info exists _graph] {
        # Unsubscribe from the graph
        $_graph subscribe data $this

        # FIXME: unlink from it as well?
    }
    set _graph $graph

    # Subscribe to the graph
    $graph subscribe data $this

    # Generate the initial simulation run-time
    _construct
}

#######################################################################
#### pause
#
# Pause the simulation.
#
body ::tycho::Simulation::pause {} {
    debug "Pause"
    $director pause 
}

#######################################################################
#### resume
#
# Resume the simulation.
#
body ::tycho::Simulation::resume {} {
    debug "Resume"
    $director resume
}

#######################################################################
#### start
#
# Start the simulation.
#
body ::tycho::Simulation::start {} {
    debug "Start"
   $director run
}

#######################################################################
#### startServer
#
# Start the simulation server.
#
body ::tycho::Simulation::startServer {} {
    configure -offline 0
}

#######################################################################
#### stop
#
# Stop the simulation.
#
body ::tycho::Simulation::stop {} {
    debug "Stop"
    $director stop
}


    ###################################################################
    ###################################################################
    ####                    protected methods                      ####

########################################################################
#### _construct
#
# Construct a simulation from the current graph. Subclasses must
# override (for now, at least).
#
body ::tycho::Simulation::_construct {} {
    ;#
}
