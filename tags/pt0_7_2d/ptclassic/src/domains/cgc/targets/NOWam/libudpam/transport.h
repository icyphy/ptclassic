/* transport.h:  Macros for transport.c */
/******************************************************************
Version identification:
@(#)transport.h	1.4 07/23/96

Copyright (c) 1995-1997  The Regents of the University of California.
All Rights Reserved.

Permission is hereby granted, without written agreement and without
license or royalty fees, to use, copy, modify, and distribute this
software and its documentation for any purpose, provided that the above
copyright notice and the following two paragraphs appear in all copies
of this software.

IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
ENHANCEMENTS, OR MODIFICATIONS.

                                                PT_COPYRIGHT_VERSION_2
                                                COPYRIGHTENDKEY

 Programmer: Brent Chun
 Creation Date: Fri May 24 19:39:12 PDT 1996
*/

#ifndef _TRANSPORT_H
#define _TRANSPORT_H 


#define AM_GetXferAsynch4(request_endpoint, reply_endpoint, source_offset, \
                          handler, dest_addr, nbytes, arg0, arg1, arg2, arg3) \
   AM_GetXfer4(request_endpoint, reply_endpoint, source_offset, \
               handler, dest_addr, nbytes, arg0, arg1, arg2, arg3)

#define AM_GetXferAsynch8(request_endpoint, reply_endpoint, source_offset, \
                          handler, dest_addr, nbytes, arg0, arg1, arg2, arg3, \
                          arg4, arg5, arg6, arg7) \
   AM_GetXfer8(request_endpoint, reply_endpoint, source_offset, \
               handler, dest_addr, nbytes, arg0, arg1, arg2, arg3, \
               arg4, arg5, arg6, arg7) 

/*
 * FindReply(replyEndpoint, bufID, seqNum, sender, replyElem)
 *
 * DESCRIPTION:  If a reply has not been generated by replyEndpoint for the request
 * identified by bufID/seqNum/sender, return 1.  Otherwise, return 0.
 */
#define FindReply(replyEndpoint,bufID,seqNum,sender,replyElem) \
        SeenRequest(replyEndpoint, bufID, seqNum, &sender, &replyElem)

#define NO_ERRORS             0x0

/*
 * DEST_SOCKADDR_SET(sockaddr, request_endpoint, reply_endpoint)
 *
 * DESCRIPTION:  Fill in the socket address sockaddr for reply_endpoint based
 * on its entry in request_endpoint's translation table.
 */
#define DEST_SOCKADDR_SET(_sockaddr, _request_endpoint, _reply_endpoint) \
  _sockaddr.sin_family = AF_INET; \
  _sockaddr.sin_port   = \
          _request_endpoint->translation_table[_reply_endpoint].name.port; \
  _sockaddr.sin_addr.s_addr = \
          _request_endpoint->translation_table[_reply_endpoint].name.ip_addr;

/*
 * UDPAM_PACKET4_SET(_packet, _type, _seq_num, _buf_id, _src_tag, _dst_tag,
 *                   _handler, _arg0, _arg1, _arg2, _arg3)
 *
 * DESCRIPTION:  Fills in packet fields common to all types of UDPAM packets (short,
 * medium, long, get) for 4 argument type packets.
 */
#define UDPAM_PACKET4_SET(_packet, _type, _seq_num, _buf_id, _src_tag, _dst_tag, \
                          _handler, _arg0, _arg1, _arg2, _arg3) \
        _packet->type     = _type;    \
        _packet->seq_num  = _seq_num; \
        _packet->buf_id   = _buf_id;  \
        _packet->src_tag  = _src_tag; \
        _packet->tag      = _dst_tag; \
        _packet->handler  = _handler; \
        _packet->arg0     = _arg0;    \
        _packet->arg1     = _arg1;    \
        _packet->arg2     = _arg2;    \
        _packet->arg3     = _arg3;
/*
 * UDPAM_PACKET8_SET(_packet, _type, _seq_num, _buf_id, _src_tag, _dst_tag,
 *                   _handler, _arg0, _arg1, _arg2, _arg3, _arg4, _arg5, 
 *                   _arg6, _arg7)
 *
 * DESCRIPTION:  Fills in packet fields common to all types of UDPAM packets (short,
 * medium, long, get) for 8 argument type packets.
 */
#define UDPAM_PACKET8_SET(_packet, _type, _seq_num, _buf_id, _src_tag, _dst_tag, \
                          _handler, _arg0, _arg1, _arg2, _arg3, _arg4, _arg5, \
                          _arg6, _arg7) \
        _packet->type     = _type;    \
        _packet->seq_num  = _seq_num; \
        _packet->buf_id   = _buf_id;  \
        _packet->src_tag  = _src_tag; \
        _packet->tag      = _dst_tag; \
        _packet->handler  = _handler; \
        _packet->arg0     = _arg0;    \
        _packet->arg1     = _arg1;    \
        _packet->arg2     = _arg2;    \
        _packet->arg3     = _arg3;    \
        _packet->arg4     = _arg4;    \
        _packet->arg5     = _arg5;    \
        _packet->arg6     = _arg6;    \
        _packet->arg7     = _arg7;

#endif /* _TRANSPORT_H */
