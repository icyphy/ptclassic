<!-- documentation file generated from DEDynMap.pl by ptlang -->
<html>
<head>
<title>DE DynMap star</title>
</head>
<body bgcolor="#eeeee0">
<h1><a name="DynMap star, DE domain">DynMap star in DE domain</a></h1>
<p>
This star implements a dynamic map-function. It is inherited from 
<tt>DEDynMapBase</tt>. It instantiates and deletes any block given by the 
parameter <i>blockname</i> on demand from <i>newBlock</i> or <i>delBlock</i>, 
respectively. In <i>newBlock</i> and <i>delBlock</i> an integer value as unique identifier for the block to be created is expected.
<p>
<b>Derived from:</b> <a href="$PTOLEMY/src/domains/de/domain.idx#DynMapBase ">DEDynMapBase</a><br>
<b>Location:</b> $PTOLEMY/src/domains/de/contrib/stars<br>
<b>Version:</b> 1.7 "03/27/98"<br>
<b>Author:</b> J. Voigt<br>
<h2>Inputs</h2>
<table BORDER="1">
<tr>
<td><i><b><font color=forestGreen>newBlock</font></b></i></td><td>int</td>
<td>gets the number of the instance to create</td>
</tr>
<tr>
<td><i><b><font color=forestGreen>delBlock</font></b></i></td><td>int</td>
<td>gets the number of the instances to delete</td>
</tr>
<tr>
<td><i><b><font color=forestGreen>in</font></b></i> (multiple)</td><td>anytype</td>
<td>dummy input, we just need a connection to DEDynFork</td>
</tr>
</table>
<h2>Outputs</h2>
<table BORDER="1">
<tr>
<td><i><b><font color=firebrick>out</font></b></i> (multiple)</td><td>ANYTYPE</td>
<td>dummy output, we just need a connection to DEDynMerge</td>
</tr>
</table>
<h2>Details</h2><p>
This star creates and deletes blocks dynamically. It must be 
connected to <tt>DynMerge</tt>-star(s) and/or <tt>DynFork</tt>-star(s) in order 
to get and release all the portholes needed for the dynamically created blocks.
<p>
It is a real implementation of a dynamic map-function. Each time 
<i>newBlock</i> gets an event, a new instance of a block of type 
<i>blockname</i> is put into the system's configuration. Each time 
<i>delBlock</i> gets an event, a block is taken from the configuration.
<p>
Actually, this star is just an example on how to do this. We here use just 
plain integers for the <i>instancename</i> of the block we create dynamically. 
Other, very similar stars can also be inherited from <tt>DEDynMapBase</tt> and 
might have portholes of other datatypes. Especially the message-type will be 
very useful to send more information about and to the dynamically created block.
<p>
In <i>setup()</i> we check whether or not the number of outputs of 
<i>blockname</i> fits to the number of <tt>DEDynMerge</tt> this star is 
connected to. And so we do with the number of inputs <i>blockname</i>
 has and the number of <tt>DEDynMerge</tt> this star is connected to.
If there are any differences, an errormessage is given out. In fact, we do need
one <tt>DEDynMerge</tt> for each output of <i>blockname</i> and one 
<tt>DEDynFork</tt> for each input <i>blockname</i> has.
<p>
We use now the states of the baseclass <tt>DEDynMapBase</tt> to get all 
information we need about the block to create. See the description of 
<tt>DEDynMapBase</tt>, where this star is derived from, for further information.
<p>
<h3>Connecting the output-portholes is as follows (<i>connectOutputs</i>):</h3>
<p>
We check how many output-portholes our block with <i>blockname</i> has. From 
<i>setup</i> we know that we have exactly as many <tt>DEDynMerge</tt> connected to the <i>out</i>-multiporthole of that star. Each of the portholes in <i>out</i> is connected to the first porthole of the input-multiporthole of its 
<tt>DEDynMerge</tt>. 
<p>
So, each output-porthole of our newly created block of type <tt>blockname</tt>
is to connect to another <tt>DEDynMerge</tt>. For each output-porthole we do:
We look for the farside of the next porthole in <i>out</i>. The parent of this farside is exactly a pointer to the <tt>DEDynMerge</tt>-star this porthole in <i>out</i> is connected to. If this parent is not a <tt>DEDynMerge</tt> an 
errormessage is given out. Then we look in the <i>output_map</i> for the name of the porthole of <i>blockname</i> and get a pointer to this porthole. We create a new porthole in the input-multiporthole of our <tt>DEDynMerge</tt> and connect both portholes.
<p>
The same procedure is done for every output-porthole of our newly created 
instance of type <i>blockname</i>.
<p>
<h3>Connecting the input-portholes is as follows (<i>connectInputs</i>):</h3>
<p>
We check how many input-portholes our block with <i>blockname</i> has. From 
<i>setup</i> we know that we have exactly as many <tt>DEDynFork</tt> connected to the <i>out</i>-multiporthole of that star. Each of the portholes in <i>out</i> is connected to the first porthole of the output-multiporthole of its 
<tt>DEDynFork</tt>. 
<p>
So, each input-porthole of our newly created block of type <tt>blockname</tt>
is to connect to another <tt>DEDynFork</tt>. For each input-porthole we do:
We look for the farside of the next porthole in <i>in</i>. The parent of this farside is exactly a pointer to the <tt>DEDynFork</tt>-star this porthole in 
<i>in</i> is connected to. If this parent is not a <tt>DEDynFork</tt> an 
errormessage is given out. Then we look in the <i>input_map</i> for the name of the porthole of <i>blockname</i> and get a pointer to this porthole. We create a new porthole in the output-multiporthole of our <tt>DEDynFork</tt> and connect both portholes.
<p>
The same procedure is done for every input-porthole of our newly created 
instance of type <i>blockname</i>.
<p>
<h3>Disconnection of portholes is as follows (<i>disconnectInputs</i> and <i>disconnectOutputs</i>):</h3>
<p>
We do the same procedure as in <i>connectXXXputs</i>, but we do it in the reverse order. We
disconnect the portholes and delete the portholes on the farside in the <tt>DEDynMerge</tt> and <tt>DEDynFork</tt>-stars.
<p>
However, we have to be careful with deleting the input-portholes of <tt>DEDynMerge</tt>. Some events might be scheduled to them. If there are any, we better delete them.
<p>
<br><b>See:</b> <a href="DEDynMap.pl">source code</a>,
 <a href="$PTOLEMY/src/domains/de/domain.idx#DynMap facet, DE user">DynMap users</a>
<p><hr><p>
copyright (c) 1997 Dresden University of Technology
All rights reserved.
See the file <a href="$PTOLEMY/copyright">$PTOLEMY/copyright</a> for copyright notice,
limitation of liability, and disclaimer of warranty provisions.
</body>
</html>
