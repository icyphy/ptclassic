# Test suite for target and domain-related commands in pitcl.
#
# @Author: Edward A. Lee
#
# @Version: @(#)testTarget.itcl	1.2   04/04/97
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source $TYCHO/kernel/test/testDefs.tcl
} {}

# Uncomment this to get a full report, or set in your Tcl shell window.
# set VERBOSE 1

# Set the following to avoid endless calls to exit.
set reallyExit 0

######################################################################
#### setup
# Create a hierarchical universe with a wormhole.

test target-0 {create a test universe} {
    namespace ::pitcl {
        defWormhole ymw SDF DE {} {
            addBlock z BlackHole
            galaxyPort in z.input
        }
        defWormhole zmw SDF SDF {loop-SDF} {
            addBlock e Ramp
            galaxyPort out e.output
        }
        addUniverse x SDF
        addBlock y ymw
        addBlock b Const
        addBlock c Add
        addBlock z zmw
        connect .x.z.out .x.c.input
        connect .x.b.output .x.c.input
        connect .x.c.output .x.y.in
    }
} {}

######################################################################
#### getDomain

test target-1 {Check getDomain on the universe} {
    ::pitcl::getDomain .x
} {SDF}

test target-2 {Check getDomain on the wormhole} {
    ::pitcl::getDomain .x.y
} {SDF}

test target-3 {Check getDomain -inside on the wormhole} {
    ::pitcl::getDomain -inside .x.y
} {DE}

test target-4 {Check getDomain on a star in the wormhole} {
    ::pitcl::isGalaxy .x.y.z
} {0}

test target-5 {isGalaxy on a star} {
    ::pitcl::isGalaxy .x.b
} {0}

test target-6 {isGalaxy on a wormhole} {
    ::pitcl::isGalaxy .x.y
} {0}

test target-7 {getTarget on a universe} {
    ::pitcl::getTarget .x
} {}

test target-8 {getTarget inside a universe} {
    ::pitcl::getTarget -inside .x
} {default-SDF}

test target-9 {getTarget on a star before a run} {
    ::pitcl::getTarget .x.b
} {}

test target-10 {getTarget on a star after a run} {
    ::pitcl::init .x
    ::pitcl::getTarget .x.b
} {default-SDF}

test target-11 {getTarget inside a wormhole} {
    ::pitcl::getTarget -inside .x.y
} {default-DE}

test target-12 {getTarget inside another wormhole} {
    ::pitcl::getTarget -inside .x.z
} {loop-SDF}

test target-13 {getTarget on a star inside wormhole} {
    ::pitcl::getTarget .x.z.e
} {loop-SDF}

test target-13 {getTarget on (outside) a wormhole} {
    ::pitcl::getTarget .x.z
} {default-SDF}

test target-14 {setTarget on a universe} {
    ::pitcl::setTarget .x loop-SDF
    ::pitcl::getTarget -inside .x
} {loop-SDF}

# NOTE: It is not clear how the setTarget propogates to the internal stars
# without a call to init, but it seems to.
test target-15 {getTarget on a star} {
    ::pitcl::getTarget .x.b
} {loop-SDF}

test target-16 {getTarget on a star after initialize} {
    ::pitcl::init .x
    ::pitcl::getTarget .x.b
} {loop-SDF}

test target-17 {getTarget on a star inside a wormhole after initialize} {
    ::pitcl::getTarget .x.y.z
} {default-DE}

doneTests
