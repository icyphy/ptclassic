# Definition of a Java context-sensitive editor.
#
# @Author: Christopher Hylands
#
# @Version: @(#)EditJava.itcl	1.49 01/27/99
#
# @Copyright (c) 1996-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### EditJava
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing Java files. Java is a
# machine independent language developed at Sun.  The Java editor
# editor automatically indents a line in response to a Tab character,
# and provides a command for indenting a region (the selection). To
# enter a literal Tab, enter the sequence <Control-q><Tab>. This editor
# also colors comments, procedure names, and the strings "FIXME" and
# "NOTE", and provides a method for commenting out a region. It also
# provides a command for evaluating a region of code.
#
class ::tycho::EditJava {
    inherit ::tycho::EditCpp

    ##########################################################################
    ####                            options                               ####

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Insert a body template
    method bodyTemplate {}

    # Compile and Run the Java code in the current file
    method compileAndRun {}

    # Compile the Java code in the current file
    method compile {}

    # Get the blank Java template for a file and insert it into the window
    method fileTemplate {{newClassName {}}}

    # Generate and display a doc file from the current buffer
    method gendocBuffer {}

    # Generate and display an IDoc file from the current buffer
    method genidocBuffer {}
 
    # Open a help window.
    method help {}

    # Open up the Java HTML documentation
    method openJavaHTMLPage {} {}

    # Color the Java code in a region.
    method parseNow {start stop} {}

    # Tag identifiers in the file that are defined elsewhere.
    method tagLinks {}

    ##########################################################################
    ####                         public procedures                        ####

    # Fix the links in the Java documentation html files in directory dirname. 
    proc fixJavaHTMLFiles {javaHTMLDir dirname}

    ####################################################################
    ####                    protected methods                       ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ##########################################################################
    ####                         protected variables                      ####

    # Counter for hyperlinks.
    protected variable hypcount 0

    # Compile widget
    protected variable compileWidget {}

    # The name of the java package in this file.
    protected variable packageName {}

    ###################################################################
    ####                          private methods                  ####

    # Initialize the menu bar.
    private method _initializeMenubar {menubar}
}

###################################################################
#
body ::tycho::EditJava::constructor {args} {
    eval itk_initialize $args

    # Set the fill prefix to be the comment character for Java.
    set fillPrefix "//"
}

###################################################################
#
body ::tycho::EditJava::destructor {args} {
    if {$compileWidget != {}} {
        catch {delete object $compileWidget}
    }
}
#####################################################################
#### bodyTemplate
# Insert a body template
#
body ::tycho::EditJava::bodyTemplate {} {

    set template "
    /** A Public Method
     * @see full-classname#method-name
     * @param parameter-name description
     * @param parameter-name description
     * @return description
     * @exception full-classname description
     */	
    public AMethod() {
    }
"

    insertData $template
    markModified
}

#####################################################################
#### evaluate
# Save the buffer if necessary, and compile it.
# If there is no makefile present in the current directory, then create a
# makefile with a name based on the current file.
#
body ::tycho::EditJava::compile {} {
    global env tycho
    saveQuery
    if {$compileWidget == {} } {
        set compileWidget [::tycho::CompileJava [::tycho::autoName .editJava]]
        $compileWidget configure -view $this
    }
    $compileWidget compile [list [filename]]
}


####################################################################
#### compileAndRun
# Save the buffer if necessary, compile it and then run it.
# If there is no makefile present in the current directory, then create a
# makefile with a name based on the current file.
#
body ::tycho::EditJava::compileAndRun {} {
    compile
    if {$compileWidget != {}} {
	$compileWidget compileAndRun [list [filename]]
    }
}

#####################################################################
#### fileTemplate
# Insert the blank template into the file.
#
# If the optional className argument is set, then its value will 
# be substituted wherever the template file contains the string 'ClassName'
#
# The Java 'package' line is adjusted if this file is located below
# $TYCHO/java, otherwise the Java package line is commented out.
#
body ::tycho::EditJava::fileTemplate {{newClassName {}}} {
    global TYCHO
    set fileTemplate \
	    [file join $TYCHO edit textedit templates JavaTemplate.java]
    ::tycho::EditProgram::fileTemplate $fileTemplate $newClassName
    set className $newClassName

    # Create a list of the canonical path to this file by using $TYCHO
    # If this file is not within $TYCHO, then the first element of
    # the list will not be $TYCHO
    set canonicalPath [file split [::tycho::simplifyPath \
            [filename] [list TYCHO]]]
    if {[lindex $canonicalPath 0] == {$TYCHO} && \
            [lindex $canonicalPath 1] == {java} && \
            [llength $canonicalPath] > 2 } {
        # This file is below $TYCHO/java, so we subsitute in the proper
        # java package
        set packageName [join [lrange $canonicalPath 2 \
                [expr {[llength $canonicalPath] - 2}]] .]
        substituteText "package MyPackageName;" \
                "package $packageName;"

    } else {
        set packageName {}
        substituteText "package MyPackageName;" \
                "//package MyPackageName;"
    }

    # Fix the author tag by substituting in the author
    substituteText "@author" "@author [stylesheet get system userName]"

}
###################################################################
#### gendocBuffer
# Generate and display a doc file from the current file.
# If the doc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
#
#
body ::tycho::EditJava::gendocBuffer {} {
    global tcl_platform
    if {$tcl_platform(platform) == "macintosh"} {
	error "Sorry, the gendoc method is not supported on the Macintosh,\nit\
		calls the tcl exec command."
    }
    set docDir [file join [file dirname [filename]] doc codeDoc]
    if {![file isdirectory $docDir]} {
        file mkdir $docDir
    }
    # Figure out what file to open
    if {$packageName != {} } {
        set htmlFile [file join [file dirname [filename]] \
                doc codeDoc $packageName.[getClassName].html]
    } else {
        set htmlFile [file join [file dirname [filename]] \
                doc codeDoc [getClassName].html]
    }

    # Everytime we run javadoc, it wants to write AllNames.html,
    # packages.html and tree.html.  We remove these incase they are
    # links to files that we can't write.
    file delete -force [file join $docDir AllNames.html] \
	    [file join $docDir packages.html] \
	    [file join $docDir tree.html]

    putStatus "Running javadoc"
    ::tycho::safeUpdate $this

    # FIXME: should we have a preference for the javadoc command? 
    ::tycho::EditProgram::gendocBufferInternal \
            [list set docfile $htmlFile] \
            {::tycho::tyexec javadoc -version -author \
            -d [file join doc codeDoc] $tail}

    putStatus "Fixing HTML files in\
            [file join [file dirname [filename]] $docDir]"
    #::tycho::safeUpdate $this
    fixJavaHTMLFiles [file join \
            [stylesheet get java javaHome] docs api] \
            [file join [file dirname [filename]] $docDir]
    putStatus ""
    #::tycho::safeUpdate $this
    if ![file exists $htmlFile] {
        putStatus "$htmlFile does not exist"
        set treeFile [file join doc codeDoc tree.html]
        if [file exists $treeFile] {
            set window [::tycho::File::openContext $treeFile]
	    $window reload
	    return $window
        } else {
            error "$htmlFile does not exist, nor does $treeFile.\
                    perhaps javadoc had an error?"
        }
    }
    set window [::tycho::File::openContext $htmlFile]
    return $window
}

###################################################################
#### genidocBuffer
# Generate and display an idoc file from the current file.
# If the idoc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
#
body ::tycho::EditJava::genidocBuffer {} {
    return [ ::tycho::EditProgram::gendocBufferInternal \
        [list set docfile [file join doc codeDoc \
                [namespaceTail [getClassName]].idoc]] \
    {
        set debug 0
        set generateIndex 0
        file delete -force $docfile
        ::tycho::ClassParser::generateIDoc \
                $debug $generateIndex {A Java Class} $tail
    }]
}

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditJava::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
        [file join $TYCHO edit textedit doc usersGuides \
	    EditJavaHelp.html] html
}

#####################################################################
#### openJavaHTMLPage
# Open up the Java HTML documentation.  The jdk1.1.1 documentation
# is at jdk1.1.1/docs/index.html
# contain the Java HTML documentation at java2.2/html/TclTkMainList.html
#
# In Tycho, the *javaHome* style parameter controls what file is opened.
#
body ::tycho::EditJava::openJavaHTMLPage {} {
    set javaHome [stylesheet get java javaHome]
    if { $javaHome != "" } {
	set javaHome [::tycho::expandPath $javaHome]
    }
    
    set javaHTMLPage [file join $javaHome docs index.html]
    if [file exists $javaHTMLPage] {
        ::tycho::File::openContext "$javaHTMLPage"
    } else {
	error "Sorry, `$javaHTMLPage' does not exist. The pathname to
	the Java documentation is generated using the javaHome\
	Java style parameter and the path 'docs/index.html'."
    }
}

#####################################################################
#### parseNow
# Invoke the base class parser to color comments and the strings
# "NOTE" and "FIXME".  Then tag and color procedure names.
#
body ::tycho::EditJava::parseNow {start stop} {
    # To get C style comments:
    EditC::parseNow $start $stop

    # To get C++ style comments:
    EditProgram::parseNow $start $stop
   
    # If the user comments out the package directive and then reparses
    # the file, the packageName should reflect the change and be {}
    # Note that Edit::parseRegion will call this function more than once
    # if the file is large.
    if { "$start" == "1.0" && "$stop" == "[expr $maxNumLinesToParse + 1].0"} {
	set className {}
        set packageName {}
    }
    set text $itk_component(text)

    # Remove tags first, if necessary
    $text tag remove procname $start $stop

    # Search for procedure definitions.
    set ind $start
    set endc $stop
    set spaces "\[ \t\]"
    #set procregexp "^$spaces*(package$spaces+|public$spaces+|protected$spaces+|private$spaces+)\[^()\]*$spaces+(\[^ \t()\]+)$spaces*\(.*\)\[^;\]$spaces*$"
    set procregexp "^$spaces*(package$spaces+|public$spaces+|protected$spaces+|private$spaces+)\[^()\]*"
    while {[set ind [$text search -count len -regexp $procregexp \
	    $ind $stop]] != {}} {

	set endc [$text index "$ind + $len chars"]
	set line [$text get $ind $endc]
	if [regexp -indices "$spaces*package$spaces+\(\[^ \t\]*\);" \
		$line match packageNameIndices] {
	    # Package definition. Tag and save the package name.
	    set first [lindex $packageNameIndices 0]
	    set last [lindex $packageNameIndices 1]
	    set packageName [string range $line $first $last]
	    $text tag add packagename "$ind + $first chars" \
		    "$ind + $last chars +1 char"
        }
	if [regexp -indices "$spaces*\(public|private|protected\)$spaces+\(class|interface\)$spaces\(\[^ \t\]*\)" \
		$line match access classOrInterface classNameIndices] {
	    # Class definitions. Tag and save the class name.
	    set first [lindex $classNameIndices 0]
	    set last [lindex $classNameIndices 1]
	    set className [string range $line $first $last]
	    $text tag add classname "$ind + $first chars" \
		    "$ind + $last chars +1 char"
        }
        # Methods
        if [regexp {\(.*\)} $line] {
            if [regexp -indices $procregexp $line match access methodName] {
                # Method definitions. Tag the method name.
                # Note that we support Java qualifiers here.
                # Should they be colored too?
                set first [lindex $methodName 0]
                set last [lindex $methodName 1]
                $text tag add methodname "$ind + $first chars" \
                        "$ind + $last chars +1 char"
            }
        }
        set ind $endc
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $ind >= end] {break}
    }
    
    # Set the visual characteristics of the tagged text
    set hull $itk_component(hull)
    $text tag configure packagename -foreground \
	    [option get $hull classColor EditJava]
    $text tag configure classname -foreground \
	    [option get $hull classColor EditJava]
    $text tag configure methodname -foreground \
	    [option get $hull methodColor EditJava]

    # Put useful info in the status bar
    putStatus "Package Name: $packageName  Class Name: $className"
}

#####################################################################
#### tagLinks
# This method tags identifiers in the file that are defined elsewhere
# and are registered for auto-loading in the global array "auto_index".
# A binding is attached to the tag to perform a hyper jump to the file
# given in the auto_index array, annotated with the name of the identifier.
#
body ::tycho::EditJava::tagLinks {} {

    global ::auto_index
    
    # Construct regular expressions for all identifiers in the
    # auto_index array. Delimiters that might be found before or after
    # a classname invocation or procedure call.  Some care is required
    # here because there may be many items in the array, and the size
    # of a regular expression is limited.  Thus, we construct a set
    # of regular expressions.  The size is limited to 100 entries.

    set count 0
    set delim "\[\] \t\[\(\)\{\}\:\;\]"
    foreach entry [array names auto_index] {
	if {$count >= 100} {
	    set count 0
	    append ids "\)\(\$\|$delim\)"
	    lappend regexps $ids
	}
	if {$count == 0} {
	    set ids "\(\^\|$delim\)\($entry"
	} {
	    append ids "|$entry"
	}
	incr count
    }
    append ids "\)\(\$\|$delim\)"
    lappend regexps $ids

    set text $itk_component(text)

    # The following finds the line number of the line beyond the end
    set end [$text index end]
    regexp {[0-9]+} $end endline
    
    # We now step through each line, one at a time, for each regexp.
    foreach ids $regexps {

	set next 1.0
	while {[set next [$text search -regexp $ids $next end]] \
		!= {}} {
	    set line [$text get $next "$next lineend"]
	    if [regexp -indices $ids $line match p1 key p2] {
		set start "$next +[lindex $key 0] char"
		set stop "$next +[lindex $key 1] char +1 char"
		$text tag add hyperlink$hypcount $start $stop
		$text tag configure hyperlink$hypcount \
			-foreground \
			[option get $itk_component(hull) procColor EditJava]
		$text tag configure hyperlink$hypcount \
			-underline 1
		
		set word [$text get $start $stop]
		
		# Remove the "source " from the auto_index word
		set filename [string range $auto_index($word) 7 end]
		
		# FIXME: Despite the "break" here, some other binding kicks
		# in after this one, causing text to be selected.  Tk bug?
		$text tag bind hyperlink$hypcount \
			<Double-Button-1> \
			"$this hyperJump $filename $word; break"
		
		incr hypcount
		set next [$text index \
			"$next +[string length $word] char"]
	    } else {
		set next [$text "$next lineend"]
	    }
	    # The following appears to be needed to prevent infinite loops.
	    if [$text compare $next >= end] {break}
	}
    }
}

####################################################################
####################################################################
####                    public procedures                       ####

#####################################################################
#### fixJavaHTMLFiles
# Fix the links in the Java documentation html files in directory dirname. 
# Too bad javadoc is so lame that this hack is necessary.
#
body ::tycho::EditJava::fixJavaHTMLFiles {javaHTMLDir dirname} {
    # We fix the java and images links

    set saveDir [pwd]
    set fileList [glob -nocomplain [file join $dirname *]]
    if { $fileList == {} } {
        cd $saveDir
        error "There are no files in $dirname, so we can't fix the html.\
                perhaps there was an error running javadoc?"
    }
    foreach file $fileList {
	if [file writable $file] {
	    set fd [open $file r]
	    set fileContents [read $fd]
	    close $fd

            # We only rewrite the file if we actually substituted
	    if {[regsub -all {<a href="java} $fileContents \
                    "<a href=\"$javaHTMLDir/java" \
                    newFileContents] > 0} {
                if {[regsub -all {<img src="images/} $newFileContents \
                        "<img src=\"$javaHTMLDir/images/" \
                        newNewFileContents] > 0} {
                    set fd [open $file w]
                    puts $fd $newNewFileContents 
                    close $fd
                }
            }
	}
    }
    cd $saveDir
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::EditJava::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::EditJava::_initializeMenubar $menubar
    }
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### _initializeMenubar
# Initialize the menu bar.  Adds entries specific to this class.
#
body ::tycho::EditJava::_initializeMenubar {menubar} {
    global tcl_platform

    $menubar delete cctemplate
    $menubar delete htemplate
    $menubar delete tclinit
    $menubar delete specialsep2

    $menubar delete compileandload
    $menubar delete compile
    $menubar delete filesep3
    $menubar insert command compile close \
	    -label Compile \
            -underline 6 \
            -command "$this compile"

    $menubar insert command compileandrun close \
	    -label {Compile and Run} \
            -command "$this compileAndRun"
    $menubar insert separator filesep3 close

    $menubar command filetemplate special \
	    -label "File Template" -underline 0 \
	    -command "$this fileTemplate \[$this getClassName\]"

    $menubar separator specialsep2 special

    $menubar command generatedoc special \
	    -label "Generate HTML Documentation" -underline 9 \
            -command "$this gendocBuffer"

    $menubar command generateidoc special \
	    -label "Generate IDoc Documentation" -underline 9 \
            -command "$this genidocBuffer"

    $menubar command appletviewer special \
	    -label "Appletviewer" -underline 0 \
            -command "$this execProcess appletviewer"

    if {$tcl_platform(platform) == "macintosh"} {
	$menubar disable generatedoc
	$menubar disable appletviewer
    }
    $menubar insert command javadocumentation preferences \
	    -label "Java Documentation" -underline 0 \
	    -command "$this ::tycho::EditJava::openJavaHTMLPage"
}
