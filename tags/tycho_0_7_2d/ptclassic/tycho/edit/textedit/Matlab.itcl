# A Matlab console widget.
#
# @Author: Edward A. Lee
#
# @Version: @(#)Matlab.itcl	1.20	01/27/99
#
# @Copyright (c) 1995-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Matlab
# A Matlab widget is a Console widget that accepts Matlab commands
# instead of Tcl commands.
#
class ::tycho::Matlab {
    inherit ::tycho::TclShell

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Evaluate a command. Return the result.
    method evalCommand {com}

    # Evaluate the current command in the text widget.
    method evalTextEntry {}

    # Open a help window.
    method help {}

    ###################################################################
    ####                        protected methods                  ####

    # Initialize the menu/status/tool bars associated with this widget.
    protected method _initializeBars {menubar statusbar toolbar}

    ##########################################################################
    ####                          common members                          ####
    
    # Keep a count on the number of Consoles.
    private common consoleCount 0

}

###################################################################
#
body ::tycho::Matlab::constructor {args} {

    if {[uplevel #0 info commands matlab] == {}} {
	error "Command matlab not defined. \
		Perhaps you are not running Ptolemy?"
    }

    # Start matlab, if necessary
    if {[matlab status] != 0} {
	uplevel #0 [list \
		::tycho::Message .patience -text \
		{Starting Matlab.  Please be patient.}]
	.patience centerOnScreen
	update
	uplevel #0 matlab start Matlab
	if [winfo exists .patience] {
	    delete object .patience
	}
    }
    if {[matlab status] != 0} {
	error "Failed to start Matlab!"
    }
  
    incr consoleCount 
  
    eval itk_initialize $args
}

###################################################################
#
body ::tycho::Matlab::destructor {} {

    incr consoleCount -1

    if {$consoleCount == 0} {
	matlab end Matlab
    }

}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#########################################################################
#### evalCommand
# Evaluate a command. Return the result.
#
body ::tycho::Matlab::evalCommand {com} {
    # To be sure a prompt gets printed even if an error occurs,
    # catch errors here
    if {[catch {matlab eval $com} retval] != 0} {
	tkerror $retval
    }
    return $retval
}

#########################################################################
#### evalTextEntry
# Evaluate the current command in the text widget.
# There seems to be no way to tell whether a Matlab command is complete.
#
body ::tycho::Matlab::evalTextEntry {} {

    append command [$itk_component(text) get "promptEnd + 1 chars" end]
    
    # Add it to history in the first position.
    set com [string trim $command " \n\t"]
    if {$com != ""} {lappend commandList $com}
    set historypos 0
	
    set result [evalCommand $command]
    set command ""
	
    # Note: cannot use displayResult here because it will only
    # conditionally display the result.
    if {$result != ""} {
	insertWithTags $result\n result
	$itk_component(text) tag config result \
		-foreground \
		[option get $itk_component(hull) answerForeground Matlab]
    }
    printPrompt $result
}

###################################################################
#### help
# Open a help window.
#
body ::tycho::Matlab::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
        [file join $TYCHO edit textedit doc usersGuides \
	    EditMatlabHelp.html] html
}

    ###################################################################
    ###################################################################
    ####                     protected methods                     ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::Matlab::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar
   
    displayer configure -title "Matlab Shell"
}
