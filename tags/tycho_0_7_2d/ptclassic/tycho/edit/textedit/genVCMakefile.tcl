# Generate a Microsoft Visual C++ makefile from a Unix makefile
#
# @Author: Christopher Hylands
#
# @Version: @(#)genVCMakefile.tcl	1.1 02/04/99
#
# @Copyright (c) 1995-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

#####################################################################
#### genVCMakefile
# Generate a Microsoft Visual C++ makefile from a Unix makefile.
# The name of the generated VC makefile is the name of the original
# makefile with <code>.vc</code> appended.
#
# The following substitutions occur:
# <menu>
# <li> Backslashes are substituted for forward slashes.
# <li> <code>!include</code> is substituted for the <code>include</code>
# make directive.
# <li> The filename associated with an <code>include</code> directive
# has <code>.vc</code> appended to it. 
# </menu>
#
proc genVCMakefile {makefile} {
    global TYCHO

    if ![ file readable $makefile] {
	warn "Cannot generate Microsoft Visual C++ nmake style makefile:\n\
		`$makefile' is not readable or does not exist."
	return
    }
    set fdin [open $makefile r]
    set outfile $makefile.vc
    set fdout [open $outfile "w"]
    puts $fdout "# Do not Edit - This file is a MS Visual C++ file that is"
    puts $fdout "#  automatically generated by Tycho from a Unix makefile\n"
    while {[gets $fdin linein] >= 0} {
        # Convert forward slashes to backslashes
        regsub -all {/} $linein {\\} linein2

        # Convert GNU conditionals to VC conditionals
        regsub {^[ 	]*ifeq[ 	]*\(([^,]*),([^)]*)\)} $linein2 {!if "\1" == "\2" #ifeq} linein2a
        regsub {^[ 	]*ifneq[ 	]*\(([^,]*),([^)]*)\)} $linein2a {!if "\1" != "\2" #ifneq} linein3
        regsub {^[ 	]*ifndef(.*)$} $linein3 {!ifndef \1} linein3a
        regsub {^[ 	]*ifdef(.*)$} $linein3a {!ifdef \1} linein3b
        regsub {^[ 	]*else} $linein3b {!else} linein4
        regsub {^[ 	]*endif} $linein4 {!endif} linein4a

        # Rather than setting a variable to nothing, undefine it
        regsub {^[ 	]*([A-Za-z0-9_]+)[	 ]*=[ 	]*$} $linein4a \
                {!undef \1} linein4b
        # Convert dependency rules that refer to .o to .obj
        regsub -all {\.o} $linein4b {.obj} linein5
        # Strip out leading whitespace in makefile variable assignments
        regsub {^[ 	]+([A-Za-z0-9_]+)[	 ]*=} $linein5 {\1 =} linein5a
        regsub {^[	 ]+([A-Za-z0-9_]+)[ 	]*=} $linein5a {\1 =} linein5b
        regsub {^[	]*([A-Za-z0-9_]+)[ 	]*\+=} $linein5b {\1 = $(\1)} linein5c
        if [regexp {^[- 	]*include(.*)$} $linein5c {\1} linein6] {
            # If we include any makefiles, then append .vc to the name.
            puts $fdout "!include $linein6.vc"
        } else {
            puts $fdout "$linein5c"
        }
    }

    close $fdin
    close $fdout
}
