# Test suite for CircularLists that will work from within itclsh
#
# @Author: Christopher Hylands
#
# @Version: @(#)testCircularList.itcl	1.7 03/23/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the require packages are loaded
package require tycho.util.tytest
package require tycho.kernel.basic

test CircularList-1.1 {Build a CircularList} {
    catch {delete object foo}
    ::tycho::CircularList foo
    foo insert a {}
    foo insert c a
    foo insert b a
    set initialValue "initialValue: [foo elements]"
    set initialValueStartingAtB "initialValueStartingAtB: [foo elements b]"
    foo remove b 
    set removedB [foo elements]
    foo remove a 
    set removedA [foo elements]
    foo remove c 
    set removedC [foo elements]
    foo clear
    set dummy "$initialValue $initialValueStartingAtB\nRemoving Items: - $removedB - $removedA - $removedC -"
} {initialValue: c b a initialValueStartingAtB: b a c
Removing Items: - c a - c -  -}

test CircularList-1.2 {Clear a list that was just created} {
    catch {delete object foo}
    ::tycho::CircularList foo
    foo clear
} {}

test CircularList-1.3 {Get the contents of a newly created list} {
    catch {delete object foo}
    ::tycho::CircularList foo
    foo elements
} {}

test CircularList-1.4 {Remove an element that does not exist} { 
    catch {delete object foo}
    ::tycho::CircularList foo
    catch {foo remove a} errmsg
    foo insert a
    foo insert b a
    catch {foo remove c} errmsg2
    foo remove a 
    catch {foo remove a} errmsg3
    list $errmsg $errmsg2 $errmsg3 "List contains: [foo elements]"
} {{CircularList::remove: Can't find element: a} {CircularList::remove: Can't find element: c} {CircularList::remove: Can't find element: a} {List contains: b}}

test CircularList-1.4 {Check out append} {
    catch {delete object foo}
    ::tycho::CircularList foo
    foo append a
    foo append b
    foo append c b
    foo elements c
} {c a b}
