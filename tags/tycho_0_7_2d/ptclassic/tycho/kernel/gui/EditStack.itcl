# Stack display for Tcl errors.
#
# @Author: Edward A. Lee
#
# @Version: @(#)EditStack.itcl	1.33 01/27/99
#
# @Copyright (c) 1996-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### EditStack
# This class defines a text widget for displaying Tcl stack trace information.
#
class ::tycho::EditStack {
    inherit ::tycho::Edit

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Open a help window.
    method help {}

    # openContext a file, then jump to the line
    method hyperJump {filename method line} {}

    # Color the stack information in a region.
    method parseNow {start stop}

    # Change the associated file to the specified file name and then save.
    method saveAsFile {filename}

    # Add me to the window menus of all menu bars
    method windowMenuAddAll {label}

    ##########################################################################
    ####                       protected methods                          ####
   
    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}
}

###################################################################
#
body ::tycho::EditStack::constructor {args} {

    eval itk_initialize $args

    
    # The default fill prefix works for Tcl and shell scripts.
    set fillPrefix "#"
}

###################################################################
#### help
# Open a help window.
#
body ::tycho::EditStack::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO kernel gui doc usersGuides \
	    EditStackHelp.html] html

}

#######################################################################
#### hyperJump
# This will open file context, and jump to entry number.
#
body ::tycho::EditStack::hyperJump {filename method line} {
    # Name of our editor/viewer
    set editorName [::tycho::File::openContext $filename]
    set editorName [string trim $editorName :]

    set methodline 0
    set methodline [$editorName findOne 0 0 0 0 $method 1.0 end {}]
    # Return in the following format: "23.53 53"
    if {$methodline=={}} {
        return
    }

    set methodline [lindex $methodline 0]
    set methodline [lindex [split $methodline .] 0]
    set methodline [expr $methodline + $line - 1]

    # Jump to the right line
    $editorName seeFragment "line $methodline"
}

#####################################################################
#### parseNow
# Parse the stack information, coloring it for better readability.
# Eventually, this should insert hyperlinks to the code referenced in
# the stack.
#
body ::tycho::EditStack::parseNow {start stop} {

    set hull $itk_component(hull)
    set text $itk_component(text)

    # The first line is always a title
    $text tag add title 1.0 "0.0 lineend"
    $text tag configure title -foreground \
	    [stylesheet get stacktrace titleColor]

    set comments {while executing|invoked from within|\(while constructing [^)]*\)|\(command bound to event\)}
    set point $start
    set first {}
    while {[set st [$text search -count cnt -regexp $comments $point $stop]] \
	    != {}} {
	set end [$text index "$st + $cnt chars"]
	if {$first == {}} {
	    # Color the error message
	    $text tag add error 2.0 "$st -1 chars"
	    set first 0
	}
	$text tag add comment $st "$st + $cnt chars"
	set point $end
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $point >= end] {break}
    }

    # The following will be hyperlinks to the error.
    set linkcount 0
    set linkmatch {\([^\)]* body line [0-9]*\)|\(procedure [^\)]*\)}
    set point $start

    while {[set st [$text search -count cnt -regexp $linkmatch $point $stop]] \
	    != {}} {
	set end [$text index "$st + $cnt chars"]
	$text tag add link$linkcount $st "$st + $cnt chars"
	set point $end

        set line [$text get $st $end]
        # Parse the above line, and determine the action.
        # If the message has the format:
        #    (....... (method|class|procedure) "<method name>" body line <line>
        #    then open $auto_index(<method name>) then go to <line>
        # If the message has the format:
        #    (... line <line>)
        #    then open previous file, then go to <line>
        set fname ""
        $text tag configure link$linkcount -foreground \
                [stylesheet get text hyperlinkColor] -underline 1
        if {[regexp {(method|class|procedure) "([^"]+)".* line ([0-9]+)} \
                $line match _ meth lnum]} { ;#"
            # WARNING: This is TclIndex dependent.
            set classnm [namespaceQualifiers $meth]
            if { [uplevel #0 "info exists auto_index($meth)"] } {
                # Get the file directly from the auto_index array
                set fname [lindex [uplevel #0 "set auto_index($meth)"] 1]
            } elseif { [uplevel #0 "info exists auto_index($classnm)"] } {
                # If it's not there, use the same file as the class
                set fname [lindex [uplevel #0 "set auto_index($classnm)"] 1]
            }
        }
        if { $fname != "" } {
            # Found a filename, so create a hyperlink
            $text tag bind link$linkcount <Double-Button-1> \
                    "$this hyperJump $fname $meth $lnum"
        } else {
            # Unknown error message or no filename known, so no hyperlink.
            $text tag configure link$linkcount -underline 0
        }
        incr linkcount
    }
    
    # Set the visual characteristics of the tagged text
    $text tag configure error -foreground \
	    [stylesheet get stacktrace errorColor]
    $text tag configure comment -foreground \
	    [stylesheet get stacktrace commentColor]
}


#####################################################################
#### saveAsFile
# Save a complete record of the transcript in the console window,
# including return values and prompts, to the specified file. 
#
body ::tycho::EditStack::saveAsFile {filename} {
    set fd [open $filename w+]
    puts -nonewline $fd [$itk_component(text) get 1.0 {end -1 char}]
    close $fd
    return 1
}

#####################################################################
#### windowMenuAddAll
# Add me to all "Window" menus of all current file objects.
# The argument is just the tag used to reference this
# window, and is basically ignored. The label used in the Window
# menu will be "Stack Trace #n" where #n is a unique integer.
# Do nothing if this View is not inside a Displayer.
#
body ::tycho::EditStack::windowMenuAddAll {label} {
    if { [displayer] == {} } {
	return
    }
    ::tycho::register window $label $this \
	    -label [::tycho::autoName "Stack Trace "] \
	    -mode "tclshell"
}

#####################################################################
#####################################################################
####                     protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::EditStack::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    displayer configure -title "Stack Trace"

    markUnmodified

    if {$menubar != {}} {
        # Remove the unneeded menu items.
        $menubar delete reload
        $menubar delete insert
        $menubar delete switchfile
	$menubar delete save
        $menubar delete togglereadonly
        $menubar delete revisioncontrol
        $menubar delete evaluate
        $menubar delete compareto
        $menubar delete gotoline
        $menubar delete spelling

	# Leave these these but disable them
	$menubar disable cut
	$menubar disable paste

        # Remove the Format menu altogether
	$menubar delete format
    }
}
