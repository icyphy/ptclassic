# File browser.
#
# @Author: Edward A. Lee
# @Contributors: Based on a Tcl/Tk version by Wei-Jen Huang and
# 	Mario Jorge Silva.
#
# Version: @(#)FileBrowser.itcl	1.72 01/27/99
#
# @Copyright (c) 1990-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# NOTE:  I considered using the file browser in the iwidgets library,
# which is more like the standard Motif file browser.  I rejected it for
# aesthetic reasons, settling on this simpler browser.  This one is
# fashioned after the file browser in FrameMaker.


##########################################################################
#### queryfilename
# Query the user for a filename and return it.  This procedure brings up
# a file browser, and returns only when that file browser is dismissed.
# The first argument is a text string used as a label in the file browser.
# The optional second argument is an absolute file path that gives the
# directory in which the file browser is opened if the <b>interaction</b>
# style-sheet has the <b>fileBrowserUseLastDirectory</b> parameter not
# set. The optional third
# argument is the string to insert into the file browser when
# opened; if it is blank, then the file browser inserts text only
# if there are zero or one entries in the file list. If it is not
# blank and the second argument is not null, then the file browser
# will change to that directory regardless of the setting
# of the <b>fileBrowserUseLastDirectory</b> style parameter.
# <p>
# This procedure indirectly calls <code>update</code>, a Tk utility
# that processes pending events, including mouse events. If this
# procedure is called from within an Itcl object, directly or
# indirectly, it may be necessary to take precautions to prevent the
# calling object from being deleted during the call. Because of a
# defect in at least some versions of Itcl, failure to do so can result
# in catastrophic failure of the application (a core dump). In Tycho
# objects, the <code>safeEval</code> method should be used to evaluate
# this procedure or any method or procedure that in turn calls this
# procedure. If the procedure is called from the top level or from a
# Tcl procedure that is not itself called from within an Itcl object,
# then there is no cause for worry.
#
proc ::tycho::queryfilename {string {directory {}} {filename {}}} {
    set nm [::tycho::autoName .fileBrowser]
    if { $filename == {} } {
        uplevel #0 [list ::tycho::FileBrowser $nm -text $string \
                -initial $directory]
    } else {
        uplevel #0 [list ::tycho::FileBrowser $nm -text $string]
        if { $directory != {} } {
            $nm changeDir $directory
        }
        $nm configure -default $filename
    }
    return [::tycho::Dialog::wait $nm]
}

##########################################################################
#### FileBrowser
# This file browser displays a list of the files in the current
# directory, permitting the user to select a file or directory by
# clicking or by typing the name in an entry box. File completion (only
# in the current directory) is supported via the Tab key, as is
# glob-style pattern matching. Control+Tab moves the focus from one
# field to the next. The file browser has a "Help" button and
# a "New Directory" button. When the user selects a directory, the
# listbox is normally updated to reflect the contents of that
# directory. However, if a Tycho editor has been registered by
# contents, extension, or name, then that editor is invoked instead
# (see the register commands in the File class). When the user has
# selected a file, the file browser self-destructs. If the -command
# option is specified, then the value of the option is taken as a
# command to execute before self destructing. The filename selected by
# the user (with the complete path, and which may represent a file that
# does not exist) is appended to the command as an argument.
# <p>
# For example, the following command will query the user for a file name,
# and then post that filename in top-level window:
# <tcl><pre>
# ::tycho::FileBrowser .w -command ::tycho::post
# .w centerOnScreen
# </pre></tcl>
# <p>
# The <code>FileBrowser</code> class maintains its own notion of the
# current working directory that is not necessarily the same as the
# current working directory of the Tcl interpreter. Each instance of
# the <code>FileBrowser</code> updates this when the user selects a new
# directory. If multiple file browsers are open at once, they navigate
# the file system independently. But the most recently selected
# directory will then be the default directory of any newly created
# file browser.
#
# For information about the difference between Unix, Mac and Windows filenames
# see the tcl filename documentation.  In the Itcl2.2 distribution, this
# file is at itcl2.2/tcl7.6/doc/filename.n, and is in Unix Man page format.
#
class ::tycho::FileBrowser {
    inherit ::tycho::ListBrowser

    constructor {args} {}
    destructor {}

    ##################################################################
    ####                         options                          ####

    # Specify the initial directory to open in.
    # Must be set in constructor call, otherwise ignored.
    itk_option define -initial initial Initial ""

    ##################################################################
    ####                     public methods                       ####
   
    # Change to a new directory
    method changeDir {directory}

    # Complete the partially entered item.
    method complete {}

    # Open a help window.
    method help {}

    # Make a new directory and go to it.
    method mkdir {}

    ##################################################################
    ####                     public procs                         ####

    # Set the global current working directory.
    proc setCWD {cwd} {set CWD $cwd}

    ##################################################################
    ####                   protected methods                      ####

    # Process a file or directory selection.
    protected method processItem {filename {ifdir {}}}

    # Fill the listbox with file and directory names.
    protected method updateListbox {}

    ##################################################################
    ####                   protected variables                    ####

    # The parent directory string: platform-dependent
    protected common directoryParent [::tycho::directoryParent]

    # The directory separator: platform-dependent
    protected common directorySeparator [::tycho::directorySeparator]

    # The directory separator to use at the end of a directory.
    protected common directorySeparatorTrailer "/"

    # The directory last visited.
    protected common CWD

    # The last file opened.
    protected common fileLastOpened {}

    # A local version of the CWD is kept in case multiple file browsers
    # are open at once (each has to have its own notion of the current
    # working directory).
    protected variable localCWD

    # The contents of the entry after the last completion.
    # If tab is hit again with the same entry, the directory will
    # be changed (ala Emacs)
    protected variable lastCompletion
}

######################################################################
#
body ::tycho::FileBrowser::constructor {args} {
    # The text to insert at the top of the file browser
    configure -text "Select File:"
    
    global ::env
    
    if {! [info exists CWD]} {
      # First FileBrowser window constructed.
      # If the environment variable PTPWD exists, it gives the directory.
      # Otherwise, we issue the Tcl command pwd.
      if [info exists env(PTPWD)] {
          set CWD $env(PTPWD)
      } {
          set CWD [pwd]
      }
    }
    set localCWD $CWD

    # Current directory display.
    itk_component add dir {
	label $itk_component(childsite).dir \
                -text $localCWD -width 35 -anchor e
    } {
	keep -background -cursor -foreground
	rename -font -messagefont messageFont Font
    }
    pack $itk_component(dir) -side top -fill x \
            -after $itk_component(listscroll)
    
    # Create directory button.
    addButton mkdir \
	    -text "New Directory" \
            -underline 0 \
	    -command "$this mkdir" \
	    -row 1 -column 0

    # Process any unevaluated arguments.
    eval itk_initialize $args

    # Subscribe to the style-sheets
    stylesheet subscribe \
	    -width  layout browsers.fileBrowserWidth \
	    -height layout browsers.fileBrowserHeight

    # The fileBrowserUseLastDirectory parameter controls which directory
    # the browser opens in. By the time we get to here, the localCWD
    # directory is set to the most recently-accessed directory,
    # so we don't have to do anything if that's the directory we
    # want to open in. Otherwise, we execute the code below, which
    # sets the CWD and localCWD variables to the directory extracted
    # from the -default option. When the browser is created, this
    # option will be set to the path of the file from which the
    # browser was opened -- if the option is not set, then the
    # most recent directory is used anyway.
    if { [::tycho::stylesheet get interaction fileBrowserUseLastDirectory] } {
	# Load the files into the listbox
	updateListbox

        # In case updateListbox inserts into the entry; to avoid repetition
        clear entry
        insert entry $fileLastOpened
        select entry range 0 end
    } else {
	if {$itk_option(-initial) != {} && \
		[::tycho::url pathtype $itk_option(-initial)] \
                == "absolute" } {
            changeDir $itk_option(-initial)
        } else {
            # Load the files into the listbox
            updateListbox
        }
    }
}


    ##################################################################
    ##################################################################
    ####                     public methods                       ####

######################################################################
#### changeDir
# Change to a new directory. The directory name can be relative to
# the current directory or an absolute path. Any filename
# component at the end of the directory name is ignored. Return 1 if
# successful, or 0 if failure.
#
body ::tycho::FileBrowser::changeDir {directory} {
    if { ! [::tycho::resource isdirectory $directory] } {
        set directory [::tycho::url dirname $directory]
    }
    set directory [::tycho::url expand $directory]

    if { ! [::tycho::resource exists $directory] } {
        safeEval ::tycho::warn \
                "\"[string trimright $directory /]\" does not exist"
        return 0
    }
    if { ! [::tycho::resource readable $directory] \
	    || ! [::tycho::resource executable $directory]} {
        safeEval ::tycho::warn \
                "Directory \"[string trimright $directory /]\" is unreadable"
        return 0
    }
    set CWD $directory
    set localCWD $CWD
    $itk_component(dir) config -text $CWD
    updateListbox
    return 1
}

#####################################################################
#### complete
# Complete a partially entered item. On the first invocation, this
# method finds an entry in the listbox that has the contents of the
# entry box as a prefix. Glob-style rules are used, so the entry can be
# a pattern (* for any substring, ? for any single character, [chars]
# for a set of characters, or \x for a single character. If there is
# more than one matching entry, then all matching entries are selected
# in the listbox. The selected entries can then be scrolled with the up
# and down arrow keys. If the method is invoked again without an
# intervening invocation of <code>breakCompleteSequence</code>, then it
# scrolls through the selected entries as if the down arrow had been
# pressed. If the optional argument is given and has a non-zero value,
# then the match is case sensitive.  Otherwise, it is not case sensitive.
# Return 0 if no matching entry is found, 1 if one matching
# entry is found, and 2 if more than one matching entry is found.
#
# If there is more than one matching entry, we increase the length of the
# pattern to consist of all of the initial common characters of the matching
# string.  For example, if the pattern is "Foo" and we have "FooBar.tcl" and
# "FooBar.java", then the pattern is increased to "FooBar.".
#
# This implementation differs from the parent in that it attempts to complete
# filenames in directories other than the current one. This does not change
# the directory, only increases the length of the pattern to coincide with
# common characters.
#
# Hitting tab again after such a completion WILL change the directory, however.
# For example: tycho/ke <Tab> tycho/kernel/ <Tab> (now in kernel directory).
#
body ::tycho::FileBrowser::complete {} {
    # check to see if the lastCompletion is valid
    if [catch {set lastCompletion}] {
        set lastCompletion {#bogusvalue#}
    }

    set pattern "[get entry]"

    # check if the file/directory is in the current ListBrowser
    if {[::tycho::url dirname "$pattern"] == "."} {
        set listReturn [::tycho::ListBrowser::complete]
        # check if completion had already been done and only 1 found
        if {$pattern == $lastCompletion && $listReturn == 1} {
            processItem $pattern ifdir
            return 1
        } {
            set lastCompletion "[get entry]"
            return $listReturn
        }
    }
    
    set case $caseSensitiveCompletion
    
    # not in current ListBrowser. Check if in another directory

    # check if tab has been hit twice. If so, change directory.
    if {$lastCompletion == $pattern} {
        if {[string index $pattern \
                [expr [string length $pattern] - 1]] == $directorySeparator} {
            # it's a complete directory
            processItem [::tycho::url join $localCWD $pattern]
            setEntry {}
            return 1
        } else {
            # it's a directory/something
            processItem [::tycho::url join $localCWD \
		    [::tycho::url dirname $pattern]]
            setEntry [::tycho::url tail $pattern]
            return [complete]
        }
    }

    set dir [::tycho::url dirname $pattern]
    set pattern [::tycho::url tail $pattern]*
    
    # NOTE: don't tolower dirname, assume it's in proper case
    # otherwise, can't complete beyond upper case directories
    # because the glob has to have an exact dirname
    if !$case {
        set pattern [string tolower "$pattern"]
    }

    set matches {}
    set files [::tycho::resource dirlist [::tycho::url join $localCWD $dir]]

    # add parent directory if it exists
    # FIXME: probably won't work with URL's on Mac
    if {[::tycho::url expand $dir] != [::tycho::rootDir $localCWD]} {
        lappend files $directoryParent
    }
    # Build list of matching files
    foreach name "$files" {
        set name [::tycho::url tail $name]
        if $case {
            set nm $name
        } else {
            set nm [string tolower $name]
        }
        if [string match $pattern $nm] {
            lappend matches $name
        }
    }    
    switch [llength $matches] {
        0 {
            # no matches, send annoying beep
            bell
            return 0
        }
        1 {
            # found exactly one match, replace entry contents
            set temp [lindex $matches 0]
            if [::tycho::resource isdirectory \
		    [::tycho::url join $localCWD $dir $temp]] {
                # it's a directory
                set lastCompletion \
			[::tycho::url join $dir $temp]$directorySeparator
                setEntry $lastCompletion
            } else {
                # just a file
                set lastCompletion [::tycho::url join $dir $temp]
                setEntry $lastCompletion
            }
            return 1
        }
        default {
            # more than 1 match, complete partially:

            # Set the entry widget to the longest common string among all the
            # matches. If no common initial string (example: *.itcl), don't
            # complete, leave pattern.

            set compMatch [::tycho::lsubstring $matches]
            if {$compMatch != {}} {
                set lastCompletion [::tycho::url join $dir $compMatch]
            } else {
                set lastCompletion [::tycho::url join $dir \
			[string trimright $pattern *]]
            }
            setEntry $lastCompletion
            return 2
        }
    }
}

######################################################################
#### help
# Open a help window.
#
body ::tycho::FileBrowser::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [::tycho::url join $TYCHO kernel gui doc \
            usersGuides FileBrowserHelp.html] html
}

######################################################################
#### mkdir
# Make a new directory and list its contents in the list box.
# Also, make this new directory the common working directory.
#
body ::tycho::FileBrowser::mkdir {} {
    set dirname [safeEval ::tycho::queryinfo \
            "Directory name" "$localCWD/" 80]
    if {$dirname != {}} {
	::tycho::resource mkdir $dirname
	processItem $dirname
    }
}

    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

######################################################################
#### processItem
# Check and process the user selection. If the argument is the name of a
# file, then the command specified with the -command option is invoked
# with that filename as an argument, and a 1 is returned. If the argument
# is a directory name, then the listbox is updated with the contents
# of the directory and a 0 is returned. If the argument is an
# empty string, then nothing is done and a zero is returned. If the
# specified filename exists but is not readable, an error is triggered.
# If the filename does not exist as either a file or a directory, then
# the command given by the -command option is invoked on that file. If
# the entry is invalid for some reason, the user is warned and the
# method returns 0.
#
body ::tycho::FileBrowser::processItem {filename {ifdir {}}} {
    global tcl_platform
    if {$filename == ""} {return 0}

    # If the name is relative, prepend with current path.
    if { [::tycho::url pathtype $filename] == "relative"} {
	set file [::tycho::url join $localCWD $filename]
    } {
	set file $filename
    }
    # Expand to absolute path.
    set file [::tycho::url expand $file]

    # If expansion failed, trigger an error
    if { [::tycho::url pathtype $file] == "relative" } {
	error "Cannot expand $filename"
    }
    # If the file does not exist, check to see whether the
    # directory exists.  If it does, execute the command given by -command
    # (which will probably create the file).  Otherwise, trigger an error.
    if {! [::tycho::resource exists $file] && $ifdir != {ifdir}} {
	set dir [::tycho::url dirname $file]
	if {[::tycho::resource exists $dir] \
		&& [::tycho::resource isdirectory $dir]} {
            # set CWD [::tycho::url dirname $file]
	    # set fileLastOpened [::tycho::url tail $file]
            set fileLastOpened $filename
	    execCommand -command $file
	    return 1
	} {
	    safeEval ::tycho::warn "Directory does not exist: $dir"
	    return 0
	}
    } 

    # If the file does exist, and is a directory
    if {[::tycho::resource isdirectory $file] \
            && [::tycho::registry filemode $file] == {}} {
        set fileLastOpened ""
        changeDir $file
        return 0
    } elseif {$ifdir != {ifdir}} {
	# It's a plain file or a directory with a registered editor
	if {[::tycho::resource readable $file]} {
            # set CWD [::tycho::url dirname $file]
	    # set fileLastOpened [::tycho::url tail $file]
            set fileLastOpened $filename
	    execCommand -command $file
	    return 1
	} {
	    safeEval ::tycho::warn "\"$file\" is unreadable"
	    return 0
	}
    }
    return 0
}

######################################################################
#### updateListbox
# Fill the listbox with filenames. Classify directories and files.
# Directories are inserted at the top and are arranged alphabetically.
# Files are listed next, also alphabetically.
#
body ::tycho::FileBrowser::updateListbox {} {

    # clear the list box
    clearListbox
    
    # Get a list of filenames in the current working directory
    set files [::tycho::resource dirlist $localCWD]
    # Split the filename list into directories and plain files
    set dirList ""
    set fileList ""
    foreach file $files {
        set tail [::tycho::url tail $file]
	if [::tycho::resource isdirectory $file] {
	    lappend dirList "$tail/"
	} else {
	    lappend fileList $tail
	}
    }
    set dirList [lsort $dirList]
    set fileList [lsort $fileList]
    
    # Insert directories into the listbox
    # Note that Tcl seems to understand trailing / reasonably well.
    # See the Tcl filename man page for details
    appendItems $dirList ;# $directorySeparatorTrailer

    # Insert the files into the listbox
    appendItems $fileList

    # Clear the entry widget
    clear entry
    
    # Choose intelligently which default file or directory
    # to put in the entry box.
    set dirLength [llength $dirList]
    set fileLength [llength $fileList]
    
    if {$localCWD != [::tycho::rootDir $localCWD] } {
	$itk_component(listbox) insert 0 $directoryParent
    }
    if {($dirLength == 1) && ($fileLength == 0)} {
	insert entry [lindex $dirList 0]
    } elseif {($dirLength == 0) && ($fileLength == 1)} {
	insert entry [lindex $fileList 0]
    } elseif {($dirLength == 0) && ($fileLength == 0)} {
	if {$localCWD != [::tycho::rootDir $localCWD] } {
	    insert entry $directoryParent
	}
    }
}
