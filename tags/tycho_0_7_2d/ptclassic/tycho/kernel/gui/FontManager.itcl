# Control the fonts in the Tycho system.
#
# @Author: Edward A. Lee, John Reekie
# @Version: @(#)FontManager.itcl	1.49   05/22/98
#
# @Copyright Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
###########################################################################

##########################################################################
#### font
# Return a valid font given a font family and a set of additional
# constraints. This procedure
# is simply an interface to the class proc ::tycho::FontManager::getFont,
# and is provided for convenience.
#
proc ::tycho::font {family {size 12} {style roman} {shift 0}} {
    ::tycho::FontManager::getFont $family $size $style $shift
}

##########################################################################
#### xfont
# Return a valid font from a symbolic font specification. This procedure
# is simply an interface to the class proc ::tycho::FontManager::getXFont,
# and is provided for convenience.
#
# <b>Warning</b>: This procedure is available publicly only because
# not all files have been updated to use *getFont*. Do not
# call it directly.
#
proc ::tycho::xfont {family {size 12} {weight medium} {style r} {shift 0}} {
    ::tycho::FontManager::getXFont $family $size $weight $style $shift
}

#########################################################################
#### FontManager
# This is a "non-instantiable" class that
# manages selection of fonts. It simplifies the interface to the
# available fonts in a number of ways:
# <ul>
# <li>If a font of the request family and weight is not found, it
# scans through a list of similar font families trying to find
# something.
# <li>If that fails, it trys different weights and sizes.
# <li>As a last resort, it returns the "fixed" font.
# <li>The "special" X window fonts like 8x13 and 9x15 are treated as members
# of a font family called "Screen."
# </ul>
#
class ::tycho::FontManager {
    inherit ::tycho::Uninstantiable

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                        public procedures                         ####

    # Check whether a system-dependent font description is valid
    proc checkXFont {font}

    # Set or return "preferred"  font families
    proc family {{type {}} {family {}} args}

    # Given a partial font specification, return a legal system-specific font
    proc getFont {family {size 12} {style roman} {shift 0}}

    # Given a symbolic X font specification, return a legal X font name.
    proc getXFont {family {size 12} {weight medium} {style r} {shift 0}}

    # Given an X font specification, parse it and return a symbolic font name
    proc parseFont {font}

    # Return a valid font size
    proc size {{proposed {}} {shift 0}}
 
    ##########################################################################
    ####                       private procedures                         ####

    # Given a complete font specification, return a font name or
    # an empty string.
    private proc tryFont {family size weight style}

    # Given a complete font specification, return a font name in this
    # or related families, or an empty string.
    private proc trySimilarFamilies {family size weight style} 

    # Given a complete font specification, return a font name in this
    # or related families, possibly using a different style, or an
    # empty string.
    private proc trySimilarStyles {family size weight style} 

    ##########################################################################
    ####                      private common variables                    ####

    # A widget to test fonts on
    private common fontScratch \
	    [uplevel #0 \
	    label .[::tycho::autoName fontScratch] -text Fred]

    # The foundries to scan through
    private common foundries {adobe b&h *}
    
    # The font resolutions to scan through
    private common resolutions {75 *}
    
    # The font encodings to scan through
    private common encodings {iso8859 *}

    # An array of found fonts indexed by font spec
    private common foundFonts

    # An array of flags indicating whether an X font is valid
    private common validXFonts

    # An array of flags indicating whether a font spec is valid
    private common validFontSpecs

    # The preferred font families
    private common serifFamilies {
	Times
	Palatino
	{Lucida Bright} 
	{New Century Schoolbook}
    }
    private common sansserifFamilies {
	Helvetica
	Lucida
    }
    private common constantwidthFamilies {
        {Courier New}
	Courier
        {Lucida Console}
	{Lucida Typewriter}
	{ITC Avant Garde}
	Screen
    }

    # Legal font sizes
    private common legalSizes {2 4 6 8 10 12 14 16 18 24 32 48}

    # Alternate font family names
    private common alternateFamilyName
    set alternateFamilyName(lucidabright) {lucida bright}
    set alternateFamilyName(lucidatypewriter) {lucida sans typewriter}
    set alternateFamilyName(lucidaconsole) {lucida console}
    set alternateFamilyName(lucida) {lucida sans}
    set alternateFamilyName(newcenturyschoolbook) {new century schoolbook}

    # The lists of alternate fonts for each family, indexed by concatenated
    # family name
    private common relatedFamilies

    set relatedFamilies(screen) \
            {{courier new} lucidaconsole lucidatypewriter courier}
    set relatedFamilies(courier) \
            {{courier new} lucidaconsole lucidatypewriter screen}
    # By putting screen first below, we get screen fonts under X
    # unless there is a Courier New font.
    set cn {courier new}
    set relatedFamilies($cn) \
            {screen courier lucidaconsole lucidatypewriter}
    set relatedFamilies(lucidatypewriter) \
            {lucidaconsole {courier new} courier screen}
    set relatedFamilies(lucidaconsole) \
            {lucidatypewriter {courier new} courier screen}

    set relatedFamilies(times)        {lucidabright palatino}
    set relatedFamilies(lucidabright) {times palatino}
    set relatedFamilies(palatino)     {times lucidabright}
    set relatedFamilies(newcenturyschoolbook) {palatino times lucidabright}

    set relatedFamilies(helvetica) {lucida {itc avant garde}}
    set relatedFamilies(lucida)    {helvetica {itc avant garde}}
    set relatedFamilies(itcavantgarde) {lucida helvetica}

    # The special screen fonts
    private common screenFont
    set screenFont(8)  5x8
    set screenFont(10) 6x12
    set screenFont(12) 7x13
    set screenFont(14) 9x15
    set screenFont(16) 9x15
    set screenFont(18) 8x16
    set screenFont(24) 10x20
    set screenFont(32) 12x24  

    # The regular expression used to parse X fonts.
    # This expression may need to be changed to cope with
    # un-anticipated foundries etc. For example, I just added
    # the "&" to the foundry expression so it gets "b&h".
    private common _xfontRegexp "^-(\[a-z&\]*|\\*)-(\[a-zA-Z\ \]*)-(medium|bold)-(r|i)-(\[a-z\]*|\\*)-(\[a-z\]*|\\*)-(\[a-z\]*|\\*)-(\[0-9\]+)0-"
}


#########################################################################
#########################################################################
####                      public procedures    
####


#########################################################################
########################################################################
#### checkXFont
# Return 0 if the specified font is not available on the current
# system, otherwise return 1.
#
body ::tycho::FontManager::checkXFont {font} {
    if { ! [::info exists validXFonts($font)]} {
	set validXFonts($font) \
		[expr ! \
		[catch [list $fontScratch configure -font $font]]]
    }
    return $validXFonts($font)
}

#########################################################################
########################################################################
#### family
# Set or get the font manager's preferred font families. If no arguments
# are given, then return a list of preferred font families. If a single
# argument is given then it is the "type" of font family, and is
# one of "serif," "sansserif," or "constantwidth": the procedure
# return a list of font families of that particular type. If the
# two or more arguments are given, then the second argument is the
# family name which is added to the list of preferred fonts of a
# particular type. Following arguments are a list of alternative
# fonts to scan through if the font manager fails to satisfy a request
# for that family.
#
# <b>Warning</b>: Use of this procedure with more than one argument
# is not for casual use. The facility is provided to allow customization
# of the font choices for particular Tycho installations, not to allow
# users (for example) to arbitrarily mess with the font setup.
#
# A special value of the family argument is recognized: if "replace"
# then the list of fonts that particular type is set to following arguments
# Note again that this is only for customization to a particular
# installation.
#
body ::tycho::FontManager::family {{type {}} {family {}} args} {
    if { $type == "" } {
	# Return the preferred fonts
	return [concat $serifFamilies $sansserifFamilies \
		$constantwidthFamilies]
    } elseif { $family == "" } {
	# Return preferred fonts of a given type
	return [set ${type}Families]
    } else {
	if { $family == "replace" } {
	    # Clear the font list
	    set ${type}Families $args
	} else {
	    # Add a preferred font
	    lappend ${type}Families $family
	    set relatedFamilies($family) $args
	}
    }
}

########################################################################
#### getFont
# Find a font, given a partial specification of the font.  This procedure
# always returns a legal font name. The family name is compulsory,
# but everything else is optional.  A font specification consists of
# three items, the family, point size, and style. Common
# families are "Times", "Courier", and "Helvetica". Reasonable point
# sizes are 12, 14, 18, and 24. If omitted, it defaults to 12.
# The style can be one of "Roman," "Italic,"
# "Bold," or "Bold Italic."  If 
# the style is omitted, it defaults to "Roman". The final optional argument
# specifies the font size relative to the given size. This field
# must be an integer: it's value indicates the number of legal font
# sizes to move. For example, "-1" will return the next smaller size.
# (Note that this value is _not_ in points!)
#
# All arguments are case-insensitive.
#
# In addition to the real font families, there is the pseudo-family
# "Screen," which is mapped to constant-width screen fonts on the
# X window system. Also, the
# font family can be one of "Serif," "Sans-serif," or "Constant-width,"
# in which case the preferred font of the specified type is chosen.
#
# If the font request is not found immediately, this procedure
# attempts to find a reasonable alternative:
# <ol>
# <li>Try an alternate family name, such as "lucida bright" instead
# of "lucidabright."
# <li>Try an alternate family. For example, if times is requested,
# try lucidabright and palatino.
# <li>If the requested font is bold, try a non-bold version.
# <li>If the requested font is italicized, try a roman version.
# <li>Try the same thing with the next size up.
# <li>Try the same thing with the next size down.
# <li>Give up and return "fixed."
# </ol>
#
body ::tycho::FontManager::getFont {family {size 12} {style roman} {shift 0}} {
    # See if the family looks like an X font specification
    if [regexp -- $_xfontRegexp $family] {
        regexp -- $_xfontRegexp $family \
                match foundry family weight style _ _ _ size
    } else {
        # Figure out X weight/style specs
        switch [string tolower $style] {
            "roman" {
                set weight medium
                set style  r
            }
            "italic" {
                set weight medium
                set style  i
            }
            "bold" {
                set weight bold
                set style  r
            }
            "bold italic" -
            "bolditalic" {
                set weight bold
                set style  i
            }
            default {
                # Unrecognized font
                set weight medium
                set style r
            }
        }
    }
    # Call the lower-level routine
    return [getXFont $family $size $weight $style $shift]
}

########################################################################
#### getXFont
# Find a font, given a symbolic specification of the font. This procedure
# always returns a legal X font name. A font specification consists of
# four items, the family, point size, weight, and style. Common
# families are "Times", "Courier", and "Helvetica". Reasonable point
# sizes are 12, 14, 18, and 24. The weight is typically either "medium"
# or "bold", and the style is either "r" or "i" for roman or italic. If
# the style is omitted, it defaults to "r". If the style and weight are
# omitted, they default to "medium" and "r". If the point size, style,
# and weight are omitted, they default to "14", "medium", and "r". The
# family is not optional.
#
# <b>Warning</b>: This procedure is available publicly only because
# not all files have been updated to use *getFont*. Do not
# call it directly.
#
body ::tycho::FontManager::getXFont {family {size 12} {weight medium} \
	{style r} {shift 0}} {
    # Get correct font size
    set size [size $size $shift]

    # Case-insensitivity
    set family [string tolower $family]
    set weight [string tolower $weight]
    set style  [string tolower $style]

    # Map family type onto family if necessary
    switch -exact $family {
	"serif" {
	    set family [string tolower [lindex $serifFamilies 0]]
	}
	"sans-serif" -
	"sans serif" -
	"sansserif"  {
	    set family [string tolower [lindex $sansserifFamilies 0]]
	}
	"constant-width" -
	"constant width" -
	"constantwidth" {
	    set family [string tolower [lindex $constantwidthFamilies 0]]
	}
    }

    # Try getting the requested font
    set font [tryFont $family $size $weight $style]
    if { $font == "" } {
	# That failed, so try getting a font of the requested size
	# and style in this or related families
	set font [trySimilarStyles $family $size $weight $style]
	if { $font == "" } {
	    # Oo, looks bad. Try again with a larger size
	    set font [trySimilarStyles $family [size $size +1] $weight $style]
	    if { $font == "" } {
		# Nope. Try again with a smaller size
		set font [trySimilarStyles $family [size $size -1] \
			$weight $style]
		if { $font == "" } {
		    # OK, forget it.  Resort to fixed.
		    set font fixed
		}
	    }
	}
    }
    # Remember the font we found
    set foundFonts($family-$size-$weight-$style) $font
    return $font
}

########################################################################
#### parseFont
# Given a font name given in the X window style, and return a symbolic
# font name. This is useful for getting an initial font and changing
# the size without changing type, and so on.
#
body ::tycho::FontManager::parseFont {font} {
    if [regexp -- $_xfontRegexp $font \
	    match foundry family weight style junk1 junk2 junk3 size] {
	# Parse succeeded -- get non-X style
	switch -exact $weight-$style {
	    "medium-r" {
		set style Roman
	    }
	    "bold-r" {
		set style Bold
	    }
	    "medium-i" {
		set style Italic
	    }
	    "bold-i" {
		set style BoldItalic
	    }
	}
	return [list $family $size $style]

    } else {
	# Parse failed: try for a "screen" font
	set found 0
	foreach {size f} [array get screenFont] {
	    if { $f == $font } {
		set found 1
		break
	    }
	}
	if { $found } {
	    return [list Screen $size Roman]
	} else {
	    return {Screen 12 Roman}
	}
    }
}

########################################################################
#### size
# Return a legal font size or sizes. If no arguments are given, return
# a list of legal font sizes. If the first argument is given, return that
# size if it is legal or a similar size if it is not. If the second argument
# is also given, return the size shifted by that many legal font sizes.
#
body ::tycho::FontManager::size {{proposed {}} {shift 0}} {
    if { $proposed == "" } {
	# No size given, so return legal sizes
	return $legalSizes
    }

    # Get a legal size
    set index [lsearch $legalSizes $proposed]
    if { $index < 0 } {
	foreach size $legalSizes {
	    if {$proposed <= $size} {
		break
	    }
	}
    } else {
	set size $proposed
    }

    # Shift the size is requested
    if { $shift != 0 } {
	set index [lsearch $legalSizes $size]
	set index [expr $index + ($shift)]
	if { $index < 0 } {
	    set index 0
	} elseif { $index >= [llength $legalSizes] } {
	    set index [expr [llength $legalSizes] - 1]
	}
	set size [lindex $legalSizes $index]
    }
    return $size
}

#########################################################################
#########################################################################
####                      private procedures    
####


########################################################################
#### tryFont
# Given a font specification, check to see whether the font is
# available on the current system, and if it is, return the font name.
# Otherwise, return the empty string. A font specification consists of
# four items, the family, point size, weight, and style. Common
# families are "times", "courier", and "helvetica". Reasonable point
# sizes are 12, 14, 18, and 24. The weight is typically either "medium"
# or "bold", and the style is either "r" or "i" for roman or italic.
#
# Note that this method provides fast access to the font system,
# but is not guaranteed to return a valid font. Use the get{}
# method for a better interface.
#
body ::tycho::FontManager::tryFont {family size weight style} {
    set nm "$family-$size-$weight-$style"
    if [::info exists foundFonts($nm)] {
        return $foundFonts($nm)
    }
    # If the family is "screen," then use the pre-stored font
    # names for special X fonts
    if { $family == "screen" } {
	if { $style != "r" } {
	    # No italics available
	    return {}
	}
	if { [::info exists screenFont($size)] } {
	    set font $screenFont($size)
	    if { $weight == "bold" } {
		set font ${font}bold
	    }
	    if [checkXFont $font] {
		set foundFonts($nm) $font
		return $font
	    }
	}
    } else {
	# Otherwise try and find a valid font of the specified family
	foreach res $resolutions {
	    foreach foundry $foundries {
		foreach cod $encodings {
		    set font \
"-$foundry-$family-$weight-$style-normal-*-*-${size}0-$res-$res-*-*-$cod-*"
		    if [checkXFont $font] {
			set foundFonts($nm) $font
			return $font
		    }
		}
	    }
	}
    }
    return {}
}


########################################################################
#### trySimilarFamilies
# Given a complete font specification, return a font name in this
# or related families, or an empty string.
#
body ::tycho::FontManager::trySimilarFamilies {family size weight style} {
    # Try the font. If it works, return it.
    set font [tryFont $family $size $weight $style]
    if { $font != "" } {
	return $font
    }
    # It's possible that a "bold" is really a "demibold".
    if { $weight == "bold" } {
	set font [tryFont $family $size demibold $style]
	if { $font != "" } {
	    return $font
	}
    }

    # That didn't work: try an alternate family name
    if { [::info exists alternateFamilyName($family)] } {
	set font [tryFont $alternateFamilyName($family) $size $weight $style]
	if { $font != "" } {
	    return $font
	}
	# It's possible that a "bold" is really a "demibold".
	if { $weight == "bold" } {
	    set font [tryFont $alternateFamilyName($family) \
		    $size demibold $style]
	    if { $font != "" } {
		return $font
	    }
	}
    }

    # That didn't work: try concatenating the family name
    if { [llength $family] > 1 } {
	set family [join $family ""]
	set font [tryFont $family $size $weight $style]
	if { $font != "" } {
	    return $font
	}
	# It's possible that a "bold" is really a "demibold".
	if { $weight == "bold" } {
	    set font [tryFont $family $size demibold $style]
	    if { $font != "" } {
		return $font
	    }
	}
    }

    # That didn't work either: try related families
    if { [::info exists relatedFamilies($family)] } {
	foreach related $relatedFamilies($family) {
	    set font [tryFont $related $size $weight $style]
	    if { $font != "" } {
		return $font
	    }
	    # It's possible that a "bold" is really a "demibold".
	    if { $weight == "bold" } {
		set font [tryFont $related $size demibold $style]
		if { $font != "" } {
		    return $font
		}
	    }
	}
    }
    # Found nothing in this size and style
    return {}
}


########################################################################
#### trySimilarStyles
# Return a legal font size. If the optional second argument is
# Given a complete font specification, return a font name in this
# or related families, possibly using a different style, or an
# empty string.
#
body ::tycho::FontManager::trySimilarStyles {family size weight style} {
    # Try getting a font of the requested size and style in this
    # or related families
    set font [trySimilarFamilies $family $size $weight $style]
    if { $font != "" } {
	return $font
    }

    # No luck: Try making bold into non-bold
    if { $weight == "bold" } {
	if { $style == "i" } {
	    set font [trySimilarFamilies $family $size medium i]
	    if { $font != "" } {
		return $font
	    }
	    # Nope: make italic into roman
	    set font [trySimilarFamilies $family $size medium r]
	    if { $font != "" } {
		return $font
	    }
	} else {
	    set font [trySimilarFamilies $family $size medium r]
	    if { $font != "" } {
		return $font
	    }
	}
    } else {
	# Try making italic into roman
	set font [trySimilarFamilies $family $size medium r]
	if { $font != "" } {
	    return $font
	}
    }
    # Found nothing in this size
    return {}
}
