# Definition of a menu bar widget
# 
# @Author: Farhana Sheikh
# @Contributors: Edward A. Lee
#
# @Version: @(#)MenuBar.itcl	1.21 05/29/98
# 
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### MenuBar
# This class defines a menu bar widget. The widget is intended to
# make it easier to manage a complete menu bar, and provides
# simple access to menu, menu entries, and hierarchical menus.
# It may become obsolete once Tk 4.3 is out.
# <p>
# For examples illustrating the use of the menu-bar, see
# the <a href="../internals/decorators.html#MenuBar class">
# programmer's documentation</a>.
#
class ::tycho::MenuBar {
    inherit ::tycho::MenuSupport

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Add a menu to the menu bar
    method addMenu {tag args}

    # Get an option of a menu button
    method buttoncget {tag option}

    # Set options of a menu button
    method buttonconfigure {tag args}

    # Delete a menu or menu entry
    method delete {menu}

    # Disable an entry or an entire menu
    method disable {tag}

    # Enable an entry or an entire menu
    method enable {tag}

    # Return the entries in a menu
    method entries {{tag {}}}

    # Post a menu or cascade menu
    method post {tag}

    # Unpost a menu or cascade menu
    method unpost {tag}

    ###################################################################
    ####                       private variables                   ####
    
    # The list of menu buttons
    private variable menubuttons {}

}

#######################################################################
#### constructor
#
body ::tycho::MenuBar::constructor {args} {
    eval itk_initialize $args
}

###################################################################
###################################################################
####                      public methods                       ####


#######################################################################
#### addMenu
# Add a menu to the menu bar.  The first argument is the tag of the
# menu, and can be any arbitrary string. Remaining arguments control
# the appearance and layout of the menu. Options include the following:
#
# <ul>
# <li>*-side* _side_: Specify the side to pack in. Must be either _left_
# (the default) or _right_.
# <li>*-before* _menu_: Pack before the specified menu.
# <li>*-after* _menu_: Pack after the specified menu.
# <li>*-label* _string_: The label of the menu button. Note that
# this option will be translated into the *-text* option of
# the Tk *menubutton* widget -- this is for consistency with
# the option used for menu entries.
# <li>*-underline* _index_: Underline the specified character of the label.
# </ul>
#
# Other options are supported: the whole set of options supported
# by the Tk menubutton widget are supported, except for the
# and *-menu* options.
#
# The above options cannot be changed once the menu has been created.
# If the specified menu already exists, then this method does
# nothing. To specify options of the menu itself,
# use the *menuconfigure* method. Note that the menu is created with
# the menu's *-tearoff* option set false.
#
# The returned result is the menu's tag.
#
body ::tycho::MenuBar::addMenu {tag args} {

    # Do nothing at all if the menu already exists
    if { [::info exists entrypath($tag)] } {
	return
	# error "menu $tag already exists"
    }

    # Get special options
    array set temp [concat {-side left -before {} -after {} -label {}} $args]
    if { $temp(-label) != "" } {
	set temp(-text) $temp(-label)
    }
    unset temp(-label)
    set side   $temp(-side)
    set before $temp(-before)
    set after  $temp(-after)
    unset temp(-side)
    unset temp(-before)
    unset temp(-after)
    set args [array get temp]

    # Create the menu button
    set buttonpath $itk_interior.[incr _unique]
    set _menupath($tag) $buttonpath.menu
    set _tag($_menupath($tag)) $tag
    itk_component add button$tag {
	eval menubutton $buttonpath \
		$args \
		-menu $_menupath($tag)
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
 		-highlightcolor -padx -pady
    }

    # Create the new menu. This is done at the global scope so
    # that adding menu entries in the superclass (MenuSupport)
    # do not invoke unknown{}.
    itk_component add $tag {
	uplevel #0 menu $_menupath($tag) -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    # Pack it. This should be simplified with Tk8.0
    if { $before != "" } {
	pack $itk_component(button$tag) -side $side \
		-before $itk_component(button$before)
	set menubuttons [linsert $menubuttons \
		[lsearch -exact $menubuttons $before] $tag]
    } elseif { $after != "" } {
	pack $itk_component(button$tag) -side $side \
		-after $itk_component(button$after)
	set menubuttons [linsert $menubuttons \
		[expr [lsearch -exact $menubuttons $after] + 1] $tag]
    } else {
	pack $itk_component(button$tag) -side $side
	lappend menubuttons $tag
    }
    return $tag
}

#####################################################################
#### buttoncget
# Get a configuration option of a menu button. Flag an error if the button
# does not exist.
#
body ::tycho::MenuBar::buttoncget {tag option} {
    # Check validity
    if { ! [::info exists itk_component(button$tag)] } {
	error "$tag is not a top-level menu"
    }
    # Get the option
    if { $option == "-label" } {
	set option "-text"
    }
    $itk_component(button$tag) cget $option
}

#####################################################################
#### buttonconfigure
# Get or configure options of a menu button. Flag an error if the button
# does not exist.
#
body ::tycho::MenuBar::buttonconfigure {tag args} {
    # Check validity
    if { ! [::info exists itk_component(button$tag)] } {
	error "$tag is not a top-level menu"
    }
    # Get or set the option(s)
    array set opts $args
    if [::info exists opts(-label)] {
	set opts(-text) $opts(-label)
	unset opts(-label)
	set args [array get opts]
    }
    eval $itk_component(button$tag) configure $args
}

#####################################################################
#### delete
# Delete a menu or a menu entry. If the specified menu or entry
# does not exist, nothing happens.
#
body ::tycho::MenuBar::delete {tag} {
    # See if it's a top-level menu
    if { [::info exists itk_component(button$tag)] } {
	# Delete a top-level menu
	clear $tag

	destroy $itk_component($tag)
	destroy $itk_component(button$tag)
	catch {unset itk_component($tag)}
	catch {unset itk_component(button$tag)}
	unset _menupath($tag)
	set menubuttons [::tycho::ldelete $menubuttons $tag]
    } else {
	# If not, perform default removal
	chain $tag
    }
}

#####################################################################
#### disable
# Disable a menu or a menu entry. Signal an error if the menu or entry
# does not exist.
#
body ::tycho::MenuBar::disable {tag} {
    if { [::info exists itk_component(button$tag)] } {
	# Disable a menu button
	$itk_component(button$tag) configure -state disabled
	unpost $tag
    } else {
	chain $tag
    }
}

#####################################################################
#### enable
# Enable a menu or a menu entry. Signal an error if the menu or entry
# does not exist.
#
body ::tycho::MenuBar::enable {tag} {
    if { [::info exists itk_component(button$tag)] } {
	# Enable a menu button
	$itk_component(button$tag) configure -state normal
    } else {
	chain $tag
    }
}

#####################################################################
#### entries
# 
# Return the entries in a menu. If no tag is given,
# return the tags of the menu buttons. The returned entries
# will be in the order in which they appear on the screen.
#
body ::tycho::MenuBar::entries {{tag {}}} {
    if { $tag == "" } {
	return $menubuttons
    } else {
	chain $tag
    }
}

#####################################################################
#### post
# Post a menu or cascade-menu and make it active so that
# menu traversal can then be used on it. This method uses the
# tkMbPost{} procedure from the Tk library to post a top-level menu,
# in order that menu traversal then works correctly. This is
# unfortunate, since these procs are apparently not
# documented... The menu will not be posted if it's
# corresponding entry is disabled. If the menu is a top-level
# menu, raise the containing top-level window, since having
# menus pop up without being connected to a window looks really stupid.
# (Note: this can still happen if using Tk's menu traversal...)
# Return 1 is the menu posted, zero if not.
#
body ::tycho::MenuBar::post {tag} {
    if { [::info exists itk_component(button$tag)] } {
	# Post a top-level menu
	if { [$itk_component(button$tag) cget -state] == "disabled" } {
	    return 0
	}
        raise [winfo toplevel $itk_component(hull)]
	tkMbPost $itk_component(button$tag)
	return 1
    } else {
	chain $tag
    }
}

#####################################################################
#### unpost
# Unpost a menu or cascade-menu.
#
body ::tycho::MenuBar::unpost {tag} {
    if { [::info exists itk_component(button$tag)] } {
	# Unpost a top-level menu
	tkMenuUnpost $itk_component($tag)
    } else {
	chain $tag
    }
}
