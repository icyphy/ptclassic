# Ptolemy Tycho class that exec's a process and displays the output
#
# @Author: Christopher Hylands and Kevin Chang
#
# @Version: @(#)Monitor.itcl	1.37 07/21/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Monitor
# inherits from Exec, with tk widgets added. This function is added
# for fully backward compatibility with the original Exec.
#
# The following two examples illustrate a simple invocation
# of the Monitor. The two examples are equivalent:
# <tcl><pre>
#   ::tycho::view Monitor -toolbar 1 -command {ls} -autostart 1
# </pre></tcl>
#    or:
# <tcl><pre>
#   set win [::tycho::view Monitor -toolbar 1 -command {ls}]
#   $win execProcess
# </pre></tcl>
#
# In the next example, we bring up the Monitor window and then wait  
# until the user closes it. Try manually executing (press Return) or
# force kill:
# <tcl><pre>
#   set win [::tycho::view Monitor -toolbar 1 -command {ls -al}]
#   set retStatus [$win getStatusWait]
#   ::tycho::inform "Wait until Monitor window exited '$retStatus'"
# </pre></tcl>
#
# In another example, we automatically start up the subprocess, and then
# close the window if the subprocess completed without an error:
# <tcl quiet><pre>
#   ::tycho::view Monitor -toolbar 1 &#92
#      -command {ls -al} -autostart 1 -autodestroy 1
# </pre></tcl>
# If the make in the above example had returned an error, then the window
# would not have been destroyed.
#
# There are many ways to interface with the Monitor.
# The last example shows how to read in the input, parse, 
# change screen, etc. In this particular example, we changed the
# attribute for the file owner (ie. changing color and underline):
# <tcl><pre> 
# set win [::tycho::view Monitor -toolbar 1 &#92
#             -command {ls -al} -autostart 1 -autodestroy 0]
# $win getStatusWait                       ;# Wait until complete
# # Now parse, underline the owner of the file.
# set text $win.history.text
# set output [$win.history get 0.0 end]
# set output [split $output \n]
# set lineno 0
# foreach line $output {
#     incr lineno
#     # Typical format of a file:
#     # lrwxrwxrwx  5 root 28 Feb 25 18:33 README -&gt; /users/README
#     if {[regexp {([-a-zA-Z]+) +([0-9]+) +([a-zA-Z]+).*} $line match &#92
#             perm lnk usr]} {
#         set strstart [string first $usr $line]
#         set strend   [expr $strstart+[string length $usr]]
#         $text tag add color0 $lineno.$strstart $lineno.$strend
#         $text tag configure color0 -foreground red -underline 1
#     }
# }
# </pre></tcl>
class ::tycho::Monitor {
    inherit ::tycho::View ::tycho::Exec ;#::tycho::Query

    ###################################################################
    ####                            options                        ####

    # If non-zero, close widget after the number of seconds has passed.
    itk_option define -autodestroy autodestroy Autodestroy 0

    # If non-zero, start the subprocess automatically.
    itk_option define -autostart autostart Autostart 0

    # If modal, then just keep waiting. Currently this does nothing.
    itk_option define -modal modal Modal 0

    # Command to be executed.
    itk_option define -command command Command ""

    # Directory to execute the command in.
    itk_option define -dir dir Dir {}

    constructor {args} {}

    destructor {}

    ###################################################################
    ####                      public methods                       ####
    
    # Count down before closing window
    public method autoDestroy {{time 0}} {}

    # similar to execProcess, except execute in the monitor.
    public method execProcess {{type {}} {line {}}} {}

    # We want to make sure that only private function can write
    public method insertLine {line} {}

    # If a monitor has error line reported, jump to the editor and its line
    public method jumpToLine {monitorLine editorLine fname} {}
    
    # Uses jumpToLine to jump to the next reported error.
    public method jumpNextError {{direction 1}} {}

    # Set the error count so that jumpNextError will jump correctly.
    public method setErrorCount {num}
    
    # Update the status bar to read "autodestroy, autoclose, etc..."
    public method updateStatus {} {}

    ###################################################################
    ####                            public variables               ####

    # Count the number of errors in this execution, also current position
    public variable errorCount 0

    # Remember where the errors are located
    public variable errorList {}
   
    ###################################################################
    ####                         protected methods                 ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}
        
    ###################################################################
    ####                          private methods                  ####

    # Initialize the tool bar.
    private method _initializeToolbar {toolbar}

    ###################################################################
    ####                           private variables               ####

    # Variable to keep track so that the same error line isn't highlighted.
    private variable previousErrorLine -1

    # Keep track of the line number in monitor
    private variable monitorLine 0

    # The flag to determine whether we should execute the prev cmd or not.
    # This is not used because we currently do not support this feature
    # as per editor/file type basis.
    private common remembercommand 0

    # Remember the command to execute. Again, this is not used right now.
    private common commandtoexecute ""
}


#######################################################################
#### -autodestroy configuration
# If non-zero, destroy the widget if the process exits with an 'ok'
# status
#
configbody ::tycho::Monitor::autodestroy {
    updateStatus
}

#######################################################################
#### -autostart configuration
# 
configbody ::tycho::Monitor::autostart {
    updateStatus
}

#######################################################################
#### -modal configuration
#
configbody ::tycho::Monitor::modal {
    # Current, nothing is done, this should be done outside the Monitor class.
    updateStatus
}

#######################################################################
#### -command configuration
# Command to be Executed.
#
configbody ::tycho::Monitor::command {
    # toolbar exists will return {} if there's no toolbar
    if {[toolbar exists commandtoexec] == 1} {
        $this toolbar clear commandtoexec
        $this toolbar insert commandtoexec $itk_option(-command)
    }
}

#######################################################################
#### -dir configuration
# The directory that we should exec from.  If the value of this option
# is {}, then we don't change the current directory.  Otherwise,
# we cd to the value of this option.
#
configbody ::tycho::Monitor::dir {
    # toolbar exists will return {} if there's no toolbar
    if {[toolbar exists dirtoexecfrom] == 1} {
        $this toolbar clear dirtoexecfrom
        $this toolbar insert dirtoexecfrom $itk_option(-dir)
    }
}

#######################################################################
#### constructor
body ::tycho::Monitor::constructor {args} {
    # This is used to initialize the interface between Exec and Monitor
    doEachLine {$this insertLine "$line"}

    # Original Tk stuff here
    eval itk_initialize $args
            
    if {![info exists itk_component(history)] || \
            ![winfo exists $itk_component(history)]} {
        # We have not yet created the history window, so do so now.
        itk_component add history {
            ::tycho::Edit $itk_component(hull).history -textheight 15
        } {
            keep -readonly -textwidth -background \
                    -highlightbackground -highlightcolor -selectforeground \
                    -cursor -insertbackground -textforeground -textfont \
                    -textbackground
        }
        # Redefine to not focus on Edit automatically, so that we
        # can focus on the command entry bar.
        bind $itk_component(history) <Map> "break"
        pack $itk_component(history) -expand yes -fill both
        #-after $toolbar
        $itk_component(history) configure -readonly 1 -save 0
        # FIXME: add key binding for C-x C-r
    }

    #wm resizable $prefix 1 1
    # NOTE: There seems to be no way to find out the actual window size at this
    # point.  The commands "wm reqwidth" and "wm width" return 1, even after
    # a "tkwait visibility" and an "update".  So we just set some reasonable
    # minimum size.
    #wm minsize $prefix 10 10

    # If we are running under the test suite, then autostart and autodestroy
    global TY_TESTSUITE
    if [info exists TY_TESTSUITE] {
	set itk_option(-autodestroy) 1
	configure -autodestroy 1
    }

    # Register this window so it appears on the menus
    # FIXME: This should check that the "monitor" mode actually exists
    ::tycho::register window Monitor $this \
            -label [tycho::autoName "Monitor "] \
            -mode monitor

}

#######################################################################
#### destructor
#
body ::tycho::Monitor::destructor {} {
    global $statusVariableName
    # Make sure the variable is "done"
    set $statusVariableName "killed"

    # Adding this close seems to hang the window manager
    # Unregister our fileevent handler
    catch {fileevent $fd readable {}}

    # Mark the editor as unmodified so that we are not prompted as
    # to whether we want to save it.
    if {[info exists itk_component(text)] && \
            [winfo exists $itk_component(text)]} {
        $itk_component(text) markUnmodified
    }
    catch {unset ::tycho::Monitor::$statusVariableName}

    # Deregister this window
    ::tycho::deregister window Monitor $this
}


    ##################################################################
    ##################################################################
    ####                     public methods                       ####

#######################################################################
#### autoDestroy
#
body ::tycho::Monitor::autoDestroy { {time 0} } {
    # Base case, make sure we don't get an error if user closes first.
    if {![winfo exists [string trim $this :]]} {return}
    if {$itk_option(-autodestroy) > 0} {
        configure -autodestroy [expr $itk_option(-autodestroy) - 1]
        # Need to add one again, since configure will putStatus (replace)
        putStatus "closing after [expr $itk_option(-autodestroy)+1] seconds"
        # safeEval doesn't work! That's okay, this is not modal anyway.
        after 1000 "catch \"eval $this autoDestroy\""
        return
    }
    putStatus "Closing..."
    catch "safeEval [$this statusbar cget -closecommand]"
    #catch "destroy [winfo toplevel $this]"
}

#######################################################################
#### execProcess
# This simply calls the non-graphical Exec's execProcess. Also, it
# reads the autoDestroy flag and determines whether this widget should
# automatically exit upon successful execution.
#
body ::tycho::Monitor::execProcess { {type {}} {line {}} } {
    # By default we see message "Press ENTER ..."
    putStatus ""
    set errorList {}
    set errorCount -1
    set previousErrorLine -1

    # Need to keep track of internal line number so that user can
    # concurrently click at text while text is being updated.
    set monitorLine 0
    # Change cursor to busy
    set oldCursor [lindex [config -cursor] end]
    config -cursor {watch}

    # clear text widget
    $itk_component(history) configure -readonly 0
    $itk_component(history) clear
    $itk_component(history) configure -readonly 1
    # clear text variable
    $this clearHistory

    toolbar enable stop
    toolbar disable start
    toolbar disable commandtoexec
    toolbar disable dirtoexecfrom

    if [catch {::tycho::Exec::execProcess \
            [toolbar get commandtoexec] [toolbar get dirtoexecfrom]} errmsg] {
        addHistory "<<$errmsg>>"
    }
    set retstatus [$this getStatusWait]
    
    if ![winfo exists $prefix] {
        # If the process is a long running process, and the user hits
        # close, the we should just return here.
        return
    }
    toolbar enable start
    toolbar enable commandtoexec
    toolbar enable dirtoexecfrom
    if {[llength $errorList]!=0} {toolbar enable next}

    config -cursor $oldCursor
    if {$itk_option(-autodestroy) > 0} {
        if {$retstatus=="normal"} {
            updateStatus
            # If returned correctly, it's okay to exit this window
	    # Wrap this in a catch in case we already destroyed the
	    # parent window, which will cause this window to be destroyed.
	    # see tycho/editors/textedit/test/testEditC.itcl
            toolbar disable commandtoexec
            toolbar disable dirtoexecfrom
            autoDestroy
        } else {
            putStatus "<<NOTE: exit status is $retstatus,\
                    will not autodestroy.>>"
        }
    }
    # Make sure everything's done, then reset the error count
    set errorCount -1
    return
}

#######################################################################
#### insertLine
# In the constructor, doEachLine is set as "$this insertLine $line" so that
# during each input, this method will be called. This method is responsible
# for updating the history.text widget interactively, as well as colorization
# of the error and warning messages. Later on, this functionality will
# be moved to MonitorC and MonitorJava to handle different coloring and
# interaction.
#
body ::tycho::Monitor::insertLine {line} {
    set history $itk_component(history)
    set text $history.text
    #set monitorLine [lindex [split [$text index insert] .] 0]
    incr monitorLine

    # Need to lock up the output of the executable
    $history configure -readonly 0
    # The following line causes trouble when the user changes the
    # cursor position!
    #$itk_component(text) insertData "$line"
    $text insert $monitorLine.0 $line
    $history center
    $history configure -readonly 1

    # Now, if we have to, modify the line (ie. change color, etc)
    # The first regexp is for GNU make,the second for MS VC++ nmake.
    if {([regexp {^([^:]+):([0-9]+): (.+)$} $line tmp fname editorLine msg] \
            || [regexp {^([^(]+)\(([0-9]+)\) : (.+)$} $line \
            tmp fname editorLine msg] ) \
            && $previousErrorLine!=$editorLine} {
        set previousErrorLine $editorLine



        # (windows)Deal with pathnames that have backslashes as file separators 
        set fname [join [file split $fname] /]

        incr errorCount
        # This ensures only one line per many lines of error output
        if {[regexp {(warning):* (.+)} $msg]} {
            #FIXME: Change me to preference
            set color {purple}
        } else {
            #FIXME: Change me to preference
            set color {red}
            lappend errorList [list $monitorLine $editorLine $fname]
        }
        $text tag add error$errorCount \
                $monitorLine.0 $monitorLine.[expr [string length $line]-1]
        $text tag configure error$errorCount -foreground $color -underline 1
        # Two actions to the error binding:
        # 1) jump to the lines (and highlight)
        # 2) update internal count, so Next button will know where to jump
        $text tag bind error$errorCount <Double-Button-1> \
                "$this setErrorCount $errorCount;\
                $this jumpToLine $monitorLine $editorLine \"$fname\""
    }
}

#######################################################################
#### jumpNextError
# Make sure we don't jump too far. errorList has the following format:
# { {cLineNum eLineNum} {cLineNum eLineNum} ... }
# Where cLinNum is the compiler's line number, along with
# eLineNum, which is the editor's line number.
#
body ::tycho::Monitor::jumpNextError { {direction 1} } {
    incr errorCount $direction

    # Find out where in the list my information is located.
    # This has the format {{1 2 asdf.cc} {5 10 fdsa.cc} ...}
    set entry [lindex $errorList $errorCount]
    set monitorLine [lindex $entry 0]
    set editorLine [lindex $entry 1]
    set fname [lindex $entry 2]
    jumpToLine $monitorLine $editorLine $fname
}

#######################################################################
#### jumpToLine
# This will open file context, and jump to entry number.
# eLineNum = editor's line number (where error occurred)
# cLineNum = compiler's line number (where error reported)
# fname = filename of the error source code.
#
body ::tycho::Monitor::jumpToLine {monitorLine editorLine fname} {
    # FIXME: directory could potentially be anywhere, specified in Makefile.
    # Name of our editor/viewer

    toolbar enable prev
    toolbar enable next
    if {[llength $errorList]==1} {
        # always set position to 0
        set errorCount 0
        set entry [lindex $errorList $errorCount]
        set monitorLine [lindex $entry 0]
        set editorLine [lindex $entry 1]
        set fname [lindex $entry 2]
        toolbar disable prev
    } elseif {[expr $errorCount + 1]>=[llength $errorList]} {
        toolbar disable next
    } elseif {$errorCount==0} {
        toolbar disable prev
    }

    set fileToOpen [file join [toolbar get dirtoexecfrom] $fname]
    set editorName [::tycho::File::openContext $fileToOpen]
    set editorName [string trim $editorName :]

    # Jump to the line in the compile/exec widget
    set history $itk_component(history)
    if {[winfo exists $history]} {
        $history seeFragment "line $monitorLine"
    }

    # Jump to the line in editor
    $editorName seeFragment "line $editorLine"
}



#######################################################################
#### setErrorCount
# This method is called by each click on the error/warning lines, so
# that when NextError button is pressed, it'll know exactly where to
# jump to.
#
body ::tycho::Monitor::setErrorCount {count} {
    set errorCount $count
}



#######################################################################
#### updateStatus
# update the status bar, tell the user whether we're in modal,
# autodestroy, etc...
#
body ::tycho::Monitor::updateStatus {} {
    set string {}
    # autostart-- no need to output this
    if {$itk_option(-modal)==1} {
        append string {(modal mode)    }
    }
    if {$itk_option(-autodestroy)>0} {
        append string {(destroy after successful execution)    }
    }
    putStatus $string
}

    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::Monitor::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$toolbar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::Monitor::_initializeToolbar $toolbar
    }

    # Don't raise the window here, or we will see the window resize itself
    #$this raiseWindow
    
    after idle "$this toolbar focusin commandtoexec"
    if {$itk_option(-autostart) == 1} {
        # If autostart, no need to invoke focus on the user's command
        after idle $this execProcess
    } else {
        # If not autostart, default is to focus in on the user command
        putStatus "Press ENTER to start execute"
    }
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### _initializeToolbar
# Initialize the tool bar.  Adds entries specific to this class.
#
body ::tycho::Monitor::_initializeToolbar {toolbar} {
    $toolbar entry commandtoexec "Command to execute: " \
            "$itk_option(-command)" "$this execProcess cmd "
    $toolbar entry dirtoexecfrom "Directory to execute from: " \
            "$itk_option(-dir)"     "$this execProcess dir "

    $toolbar button prev -text {Prev Error} \
            -description {Jump to previous error} \
            -command "$this jumpNextError -1" -state disabled
    $toolbar button next -text {Next Error} \
            -description {Jump to next error} \
            -command "$this jumpNextError" -state disabled
    $toolbar button stop -text {Stop <Esc>} \
            -description {Stop execution} \
            -command "$this killProcess" -state disabled
    $toolbar button start -text {Start <Ret>} \
            -description {Start execution} \
            -command "$this execProcess" -state normal
    $toolbar button help -text {Help <h>} \
            -description {Help on Monitor} \
            -command "$this help"
}
