# Base class for Tycho widgets.
# 
# @Author: Edward A. Lee
#
# @Version: @(#)TArchetype.itcl	1.9  06/29/98
# 
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#
# Portions of the code in this file are modified from the [incr Tk]
# by Michael J. McLennan of Lucent Technologies.
# The copyrights below apply to those versions:
#
# ----------------------------------------------------------------------
#               Copyright (c) 1993-1996  Lucent Technologies
# ======================================================================
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and that
# both that the copyright notice and warranty disclaimer appear in
# supporting documentation, and that the names of Lucent Technologies
# any of their entities not be used in advertising or publicity
# pertaining to distribution of the software without specific, written
# prior permission.
#
# Lucent Technologies disclaims all warranties with regard to this
# software, including all implied warranties of merchantability and
# fitness.  In no event shall Lucent be liable for any special, indirect
# or consequential damages or any damages whatsoever resulting from loss
# of use, data or profits, whether in an action of contract, negligence
# or other tortuous action, arising out of or in connection with the use
# or performance of this software.
#
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### TArchetype
#
# This class is the base class for all widgets in Tycho. It
# is named after the [incr Tk] widget <code>itk::Archetype</code>,
# since it performs a similar role in the Tycho framework. Its
# two subclasses are <code>::tycho::TWidget</code> and
# <code>::tycho::TopLevel</code>, which are used in Tycho
# instead of the [incr Tk] classes  <code>itk::Widget</code> and
# <code>itk::Toplevel</code>.
#
# TArchetype provides all Tycho widgets with access to Tycho's
# widget support, including:
# <ul>
#
# <li>Cursor management. The <b>busy</b> method is used to modify
# the cursor during time-consuming operations.
#
# <li>Widget construction. [incr Tk] has no means of saying
# "do this when the constructor has completed." The method
# <b>whenConstructed</b> executes code when the widget has
# completed construction, and the <b>whenMapped</b> method
# executes code when a given component is mapped to the screen.
#
# <li>Style-sheets. Each Tycho package can define one or more
# style-sheets that the user can edit to specify widget
# appearances and user-interface options. The <b>stylesheet</b>
# method provides access to the stylesheet code.
#
# <li>Hyperlinking. Tycho has a uniform hyperlinking
# mechanism that and data-containing widget is expected
# to support. The <b>currentPoint</b>, <b>hyperJump</b>, and
# <b>seeFragment</b> methods support this.
#
# </ul>
#
# This class duplicates a small amount of code from the [incr Tk]
# classes <code>itk::Widget</code> and <code>::itk::Toplevel</code>.
# This is a little unfortunate, but we decided that the benefits
# of a common base class outweighed the disadvantages of not
# conforming to the standard [incr Tk] class hierarchy. In any
# case, the amount of duplicated code is very small and is limited
# to the constructor and destructor.
#
class ::tycho::TArchetype {
    inherit ::itk::Archetype

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Change the cursor to the "watch" and execute the arguments.
    method busy {args}

    # Configure options of this widget.
    method configure {args}

    # Return the current position of the cursor.
    method currentPoint {}

    # Give the window or a subwindow the focus.
    method focusin {}

    # Return the name of the hull as a Tk window name
    method hull {}
    
    # Open a file and go to its internal point identified by name.
    method hyperJump {file {point {}}}

    # Remember explicitly-set options and then call the built-in
    # itk_initialize
    method itk_initialize {args}

    # Find and make visible a point in the display.
    method seeFragment {point}

    # Access stylesheets of this widget.
    method stylesheet {mode args}

    ###################################################################
    ####                         protected methods                 ####

    # Return the type of widget to use for the hull
    protected method _hulltype {} {return "frame"}

    # Test if destruction is disabled
    protected method destructionDisabled {} {return $_disableDestruction}

    # Evaluatea arguments and ensure that this widget will not be destroyed
    protected method safeEval {args}

    # Register code to be evaluated when the widget has been constructed.
    protected method whenConstructed {command}

    # Register a command to execute when a component is mapped
    protected method whenMapped {component command}

    ###################################################################
    ####                         protected variables               ####

    # The prefix is just a shorthand for $itk_component(hull).
    protected variable prefix

    ###################################################################
    ####                         private methods                   ####

    # Execute code waiting for the status bar to be mapped
    private method _notifymapped {component}

    ###################################################################
    ####                         private variables                 ####

    # If non-zero, disable destruction.
    private variable _disableDestruction 0

    # A flag saying whether this widget is already constructed
    private variable _isConstructed 0

    # An array of options subscribed by "stylesheet subscribe"
    private variable _subscribedOptions

    # An array of subscribed style-sheets
    private variable _styleSheets

    # An array of options overridden by itk_initialize or configure
    private variable _overriddenOptions

    # Commands to execute when the widget has been constructed
    private variable _whenConstructed {}

    # A array of lists of commands to execute when a component
    # is mapped. The array is indexed by the component name
    private variable _whenMapped

    ####
    private variable itk_hull ""
}

#######################################################################
#### constructor
#
# Create the hull widget. The type of widget to create is found
# from the protected method _hulltype{}, and is <b>frame</b> by
# default. Set up the binding tags for the megawidget. This
# constructor duplicates code from <code>itk::Widget</code>.
#
body ::tycho::TArchetype::constructor {args} {
    #
    #  Create a hull with the same name as this object -- from itk::Widget
    # 
    set itk_hull [namespaceTail $this]
    set itk_interior $itk_hull
    set prefix $itk_hull
 
    itk_component add hull {
        [_hulltype] $itk_hull -class [namespaceTail [info class]]
    } {
        keep -background -cursor
    }
    bind itk-delete-$itk_hull <Destroy> "delete object $this"
    
    set tags [bindtags $itk_hull]
    bindtags $itk_hull [linsert $tags 0 itk-delete-$itk_hull]

    # Initialize options
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
# Delete the widget from stylesheets and delete the hull component.
# This destructor duplicates code from <code>itk::Widget</code>.
#
body ::tycho::TArchetype::destructor {} {
    # Delete myself from stylesheets
    # Note: this is not really necessary, as the stylesheets
    # will check whether this widget still exists when attempting
    # to change widget options. We should try removing this
    # statement to see if it speeds up exiting from Tycho.
    stylesheet remove

    # Destroy the hull -- from itk::Widget
    if {[winfo exists $itk_hull]} {
        set tags [bindtags $itk_hull]
        set i [lsearch $tags itk-delete-$itk_hull]
        if {$i >= 0} {
            bindtags $itk_hull [lreplace $tags $i $i]
        }
        destroy $itk_hull
    }
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#####################################################################
#### busy
# Change the cursor in the interior of this widget to the "watch"
# cursor (to indicate that the object is busy), execute the arguments
# and then change the cursor back to whatever it was before. In order
# for the cursor to actually change, the method calls "update", during
# which time the object may be deleted. If the object is deleted, this
# method never returns (it unwinds the stack by triggering a silent
# error). A typical invocation is as follows:
# <pre>
#     busy $this methodname arg1 arg2
# </pre>
# Notice that, unlike <code>safeEval</code>, this method does not prevent
# destruction of the object.  Instead, if the object is destroyed during
# the update, the method never returns.
#
body ::tycho::TArchetype::busy {args} {
    set oldCursor [lindex [config -cursor] end]
    $this configure -cursor {watch}
    ::tycho::safeUpdate $prefix
    # If we get here, then the object $this still exists.
    # Catch errors so that we can reset the cursor.
    if {[catch {eval $args} msg] != 0} {
        $this configure -cursor $oldCursor
        global ::errorInfo
        set saveInfo $errorInfo
	error $msg $saveInfo
    }
    $this configure -cursor $oldCursor
    return $msg
}

#####################################################################
#### configure
# Configure a widget. This method overrides the default in itk::Archetype.
# Any given options are unsubscribed from any style sheets that they
# are subscribed to. This ensures that the widget keeps the value
# set by this method -- that is, setting options with this method
# "overrides" the preferences.
#
# This is actually rather slow, since every time a megawidget
# creates a component that is a megawidget, this method
# will get called from within the keep{} and rename{}
# statements. To speed it up, we should keep a record of which
# options have been subscribed and which haven't...
#
body ::tycho::TArchetype::configure {args} {
    # As long as there are two or more args...
    if { [llength $args] >= 2 } {
        # If any options are subscribed, unsubscribe them
        foreach {option _} $args {
            if [::info exists _subscribedOptions($option)] {
                ::tycho::stylesheet unsubscribe $this \
                        $_subscribedOptions($option) $option
                unset _subscribedOptions($option)
            }
        }
        # Remember the over-ridden options
        array set _overriddenOptions $args
    }
    # Configure the options
    eval ::itk::Archetype::configure $args
}

#####################################################################
#### currentPoint
# In derived classes, this method will return the current position
# of the cursor in a form that will be understood by seeFragment{}.
# In this base class, return an empty string.
#
body ::tycho::TArchetype::currentPoint {} {
    return {}
}

#########################################################################
#### focusin
# Grab the focus.  This should be redefined in derived classes to give
# the focus to the appropriate subwindow.
#
body ::tycho::TArchetype::focusin {} {
    focus $itk_component(hull)
}

#########################################################################
#### hull
# Return the name of the hull component as a Tk window name. This
# method should be used when a handle to a window may include the
# global namespace qualifier (for example, <code>.mainConsole</code>,
# but the Tk window name (<code>.mainConsole</code>) is needed
# instead. Note that the <code>$this</code> variable includes
# the global namespace qualifier, but commands such as winfo{}
# require the Tk window name. This method is generally used as
# shorthand for <code>info namespace tail $this</code> or
# <code>component hull</code>.
#
body ::tycho::TArchetype::hull {} {
    return $itk_hull
}

#####################################################################
#### hyperJump
# Open a file and go to its internal point identified by name. If the
# filename is the empty string, just call <code>seeFragment</code>,
# passing it the second argument. Otherwise, the
# file is opened  with <code>::tycho::File::openContext</code>,
# which will choose an editor based on the filename extension.
# Invoke <code>seeFragment</code> to view the specified point within the
# file. The format for the <i>point</i> argument depends on the type of
# file being opened. For HTML files, it will normally be the name of an
# anchor in the file. For text files, it will normally be either "{line
# <i>linenumber</i>}" or "{range <i>start</i> <i>end</i>}", where
# <i>start</i> and <i>end</i> have the form
# <i>linenumber.characternumber</i>. The seeFragment{} method of the
# target widget is responsible for making sure that the <i>point</i>
# is displayed properly, using the whenMapped{} method if necessary to
# defer the jump until after the widget is mapped to the screen
# (see Edit.itcl for an example).
# 
body ::tycho::TArchetype::hyperJump {file {point {}}} {
    if {$file != {}} {
        set obj [uplevel #0 [list ::tycho::File::openContext $file]]
        if {$point != {}} {
            # The seeFragment{} method is called directly here,
            # on the assumption that $obj works properly.
            $obj seeFragment $point
        }
    } {
        seeFragment $point
    }
}

#####################################################################
#### itk_initialize
# Initialize options of a widget. This method overrides the
# default itk_initialize{} provided in ::itk::Archetype to
# remember the options that have been explicitly set by the
# user. This is used by the preferences manager so that these
# options "override" any option subscriptions.
#
# The last action taken by this method is to see if this is the
# most specific constructor, and, if it is, to execute any
# pending code given to the whenConstructed{} method.
#
body ::tycho::TArchetype::itk_initialize {args} {
    # If any options are subscribed, unsubscribe them
    foreach {option _} $args {
	if [::info exists _subscribedOptions($option)] {
	    ::tycho::stylesheet unsubscribe $this \
		    $_subscribedOptions($option) $option
	    unset _subscribedOptions($option)
	}
    }
    # Remember the over-ridden options
    array set _overriddenOptions $args

    # Configure the options
    uplevel ::itk::Archetype::itk_initialize $args

    # If called from the most specific class, execute the
    # post-construction commands.
    if { [uplevel infoContext] == [info class] } {
        foreach {scope cmd} $_whenConstructed {
            @scope $scope $cmd
        }
	set _whenConstructed {}
	set _isConstructed 1
    }
}

#####################################################################
#### seeFragment
# In derived classes, this method will go to the point in the display
# identified by the name argument.  What this means depends on what
# type of data being displayed.  In this base class, do nothing.
#
body ::tycho::TArchetype::seeFragment {point} {
}

#####################################################################
#### stylesheet
# Access stylesheets of this widget. This method should be used
# to access widget option preferences instead of direct access using the
# *::tycho::stylesheet* procedure, since it ensures that user-set
# options are not overridden by style-sheets. The method has several
# forms, depending on the value of the _mode_ argument:
#
# <dl>
# <dt><b>get</b> _stylesheet_ _parameter_
# <dd>
# Get the value of the given _parameter_ of _stylesheet_,
# where _parameter_ is parameter name with a style of the
# style-sheet. The style user is the correct style for this
# particular widget, based upon user's style preferences.
# Color and font values are converted to raw X values
# before returning.
#
# <dt><b>list</b>
# <dd>
# Return a list of subscribed stylesheets.
#
# <dt><b>remove</b>
# <dd>
# Remove myself from all stylesheets. To be called prior
# to destruction.
# 
# <dt><b>subscribe</b> ?_option_ _stylesheet_ _parameter_ ...?
# <dd>
# Subscribe each names _option_ to the given _stylesheet_
# _parameter_. Each _option_ that has not been explicitly
# overridden by supplying a value to the widget's constructor
# will be set to the current value of _parameter_, and any
# future changes to _parameter_ will update the option.
#
# </dl>
#
body ::tycho::TArchetype::stylesheet {mode args} {
    switch -exact $mode {
        "get" {
	    set sheet [lindex $args 0]
	    set param [lindex $args 1]
		    
            # Get my style
            set style [::tycho::userprofile getstyle $sheet $this]

            # Get the value
            ::tycho::stylesheet get $sheet $style $param
        }
        "list" {
	    array names _styleSheets
        }
        "remove" {
	    foreach sheet [array names _styleSheets] {
		::tycho::stylesheet style $sheet $this "delete"
	    }
        }
	"subscribe" {
	    # Pre-digest arguments
	    foreach {option sheet param} $args {
		if ![::info exists _overriddenOptions($option)] {
		    # Make lists of options per sheet
		    lappend lists($sheet) $option $param

		    # If an option is already subscribed, then
		    # remove that subscription so the new one will work
		    if [::info exists _subscribedOptions($option)] {
			::tycho::stylesheet unsubscribe $this \
				$_subscribedOptions($option) $option
		    }

		    # Remember the subscribed options
		    set _subscribedOptions($option) $sheet
		}
	    }
	    # Call the stylesheets to do the work
	    foreach {sheet opts} [array get lists] {
		# Tell the style manager what style I prefer
		if ![::info exists _styleSheets($sheet)] {
		    set style [::tycho::userprofile getstyle $sheet $this]
		    ::tycho::stylesheet style $sheet $this $style
		    set _styleSheets($sheet) $sheet
		}
		# Subscribe to it
		eval ::tycho::stylesheet subscribe $this $sheet $opts
	    }
	}
        default {
            error "Invalid mode \"$mode\": must be one of \
                    get, list, remove, or subscribe"
        }
    }
}

#####################################################################
#####################################################################
####                   protected methods                         ####


#####################################################################
#### safeEval
# Prevent destruction of this object while evaluating the arguments.
# Return the result of evaluating the arguments.
# Destruction will be cancelled by invoking a silent error, and will
# be scheduled for another attempt in the future.
# <p>
# This method is a workaround for a defect in Itcl. If "update",
# "update idletasks", or "tkwait" is called directly or indirectly from
# within an Itcl method, and during the update the Itcl object is
# destroyed, then when update returns, you may get a catastrophic failure
# of the application (a core dump).
#
body ::tycho::TArchetype::safeEval {args} {
    set _disableDestruction 1
    set retval {}
    if [catch {set retval [eval $args]} msg] {
        global ::errorInfo
        set saveInfo $errorInfo
        set _disableDestruction 0
        error $saveInfo
    }
    set _disableDestruction 0
    return $retval
}

########################################################################
#### whenConstructed
#
# Register a command to be executed when the last constructor in the
# chain of constructor executes. The command will be executed
# in the scope of the class from which this method was called,
# at the completion of the call to itk_initialize{}. The purpose of
# this method is to delay evaluation of code until construction
# of the widget is complete.
#
# If the widget is already constructed, the command will be
# executed immediately in the caller's context -- this method
# can therefore be called from methods that will only sometimes
# be executed within an object's constructor.
#
body ::tycho::TArchetype::whenConstructed {command} {
    if $_isConstructed {
        uplevel $command
    } else {
        lappend _whenConstructed [uplevel infoContext] $command
    }
}

#######################################################################
#### whenMapped
#
# Register a command to be executed when a component of the mega-widget
# is mapped. Any number of commands can be registered for each component.
# If the component is already mapped, the command will be executed
# immediately in the caller's scope; if not, a binding will be made
# to the component for the &lt;Map&gt; event and the pending commands
# executed within the caller's scope when the binding is triggered.
# The purpose of this method is to support code that depends on the
# screen appearance or size of the component.  The first argument is
# the symbolic name of the component (not the Tk window name), and the
# second argument is the command to be executed.
#
# Note that it is necessary to specify the deferred commands
# on a component basis (rather than just for the whole mega-widget),
# since Tk maps containing widgets before contained widgets.
#
body ::tycho::TArchetype::whenMapped {component command} {
    set w [@scope [info class] $this component $component]
    if [winfo ismapped $w] {
        uplevel $command
    } else {
        lappend _whenMapped($component) [uplevel infoContext] $command

        # Make the binding to the component
        bind $w <Map> "@scope [infoContext] $this _notifymapped $component"
    }
}

#######################################################################
#### _notifymapped
#
# This method is a callback to be executed when the <Map>
# event is triggered on a component. If the component is not
# already mapped, return without doing anything. Otherwise,
# evaluate the commands registered with the *whenMapped* method
# and remove the binding that triggered this callback.
#
body ::tycho::TArchetype::_notifymapped {component} {
    set w [@scope [info class] $this component $component]

    # Just check this to make sure...
    if ![winfo ismapped $w] {
        # Not mapped: return
        return
    } elseif [::info exists _whenMapped($component)] {
        # Mapped: evaluate commands and then remove the binding.
        # Regrettably, we have to unset before evaluating in case
        # there is an update in the commands evaluated.  Otherwise,
        # That update may process another <Map> event and invoke this
        # same command a second time.  Make a local copy of the command
        # first.
        set local_copy $_whenMapped($component)
        unset _whenMapped($component)
        foreach {scope cmd} $local_copy {
            @scope $scope $cmd
        }
        if { [::infoWhichCommand $w] != "" } {
            bind $w <Map> {}
        }
    }
}
