# A tool bar for use with various editors and viewers.
#
# @Version: @(#)ToolBar.itcl	1.30 12/05/97
# @Author: E. A. Lee
#
# @Copyright (c) 1990-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### ToolBar
# A tool bar with any of a variety of widgets.  It is meant to be put at
# the top of a Displayer. ToolBar extends the ButtonBox class
# by adding additional widgets, such as entry widgets and
# other forms of user-settable fields.
#
# Examples:
# <pre><tcl>
#    catch {delete object .t}
#    ::tycho::ToolBar .t
#    .t button foo -text Foo -command {puts Foo!}
#    .t button bar -text Bar -command {puts Bar!}
#    .t entry location Location {The default text} {puts}
#    pack .t
#    wm deiconify .
# </tcl></pre>
#
# NOTE: There is a certain amount of duplication here with the
# Query object, but enough differences that it is hard to see how to
# merge the two.  The objectives are somewhat different.  As facilities
# get added to each, we should try to at least keep the same interface.
#
class ::tycho::ToolBar {
    inherit ::tycho::ButtonBox

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # The foreground color of entry widgets
    itk_option define -entryforeground \
            entryForeground EntryForeground black

    # The background color of entry widgets
    itk_option define -entrybackground \
            entryBackground EntryBackground white

    # The font used in entry widgets
    itk_option define -entryfont entryFont EntryFont 8x13

    ###################################################################
    ####                         public methods                    ####

    # Add a button to the toolbar.
    method button {tag args}

    # Clear all widgets or one widget.
    method clear {{tag {}}}

    # Disable user interaction with the widget with the given tag.
    method disable {tag}

    # Enable user interaction with the widget with the given tag
    method enable {tag}

    # Add an entry widget to the toolbar.
    method entry {tag label default command args}

    # Test if a button or an entry exists
    method exists {tag}

    # Focus on the toolbar or on an entry within it
    method focusin {{tag {}}}

    # Get the current value of the widgets (or one widget). Ignored for buttons.
    method get {{tag {}}}

    # Insert the specified string into the specified entry box.
    method insert {tag str}

    ##################################################################
    ####             protected and private variables              ####

    # Remember the number of entries currently in this widget
    protected variable numentries 0

    # Keep track of tags in the order in which they are created.
    private variable tags {}

    # Array of clear commands for each tag.
    private variable tagsclear

    # Array of disable commands.
    private variable tagsdisable

    # Array of enable commands.
    private variable tagsenable

    # Array of insert commands for each tag.
    private variable tagsinsert

    # Array of get commands for each tag.
    private variable tagsget
}

#######################################################################
#### constructor
#
body ::tycho::ToolBar::constructor {args} {

    # Entry site
    itk_component add entrysite {
        frame $itk_interior.entrysite
    } {
        keep -background -cursor
    }
    # Leave a little extra padding at the sides when packing
    pack $itk_component(entrysite) -side top \
            -expand yes -fill x \
            -padx 2

    # Initialize options, first setting the -ringwidth option
    # and the -buttonwidth option also to zero
    configure -ringwidth 0 -buttonwidth 0
    eval itk_initialize $args
    
    # Subscribe to the style parameters
    stylesheet subscribe \
            -entryforeground colors entryForeground \
            -entrybackground colors entryBackground \
            -entryfont       fonts entryFont
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### button
# Add a button to the toolbar. This is just an alias for the add{}
# method defined in the superclass, <a href="ButtonBox.html">ButtonBox</a>.
# 
body ::tycho::ToolBar::button {tag args} {
    eval add $tag $args
}

#####################################################################
#### clear
# If no argument is given, clear all widgets. If a tag
# is given as an argument, clear the corresponding widget. If the tag is
# not recognized, do nothing.
# 
body ::tycho::ToolBar::clear {{tag {}}} {
    if {$tag == {}} {
	foreach tag $tags {
            set cmd $tagsclear($tag)
            if {$cmd != {}} {
                eval $cmd
            }
        }
    } {
	if { [::info exists tagsclear($tag)] } {
	    set cmd $tagsclear($tag)
	    if {$cmd != {}} {
		eval $cmd
	    }
        }
    }
}

#####################################################################
#### disable
# Disable user interaction with the widget with the given tag.
# The tag can represent a button or an entry widget. The
# method will cause an error if the tag is not recognized.
#
body ::tycho::ToolBar::disable {tag} {
    if { ! [::info exists tagsdisable($tag)] } {
	# Assume it's a button
	chain $tag
    } else {
	# Process some other widget
	set cmd $tagsdisable($tag)
	if {$cmd != {}} {
	    eval $cmd
	}
    }
}

#####################################################################
#### enable
# Enable user interaction with the widget with the given tag.
# The tag can represent a button or an entry widget. The
# method will cause an error if the tag is not recognized.
#
body ::tycho::ToolBar::enable {tag} {
    if { ! [::info exists tagsenable($tag)] } {
	# Assume it's a button
	chain $tag
    } else {
	# Process some other widget
	set cmd $tagsenable($tag)
	if {$cmd != {}} {
	    eval $cmd
	}
    }
}

#####################################################################
#### entry
# Add an entry widget to the toolbar.  The arguments are:
# <ul>
# <li>a tag (string) to use to name the entry widget,
# <li>a label to put to the left of the entry widget,
# <li>a default contents for the entry widget,
# <li>a command to execute when &lt;Return&gt; is typed in the widget,
# <li>additional arguments to pass to the Tk entry command.
# </ul>
# By default, the entry will replace an entire line with a
# Tk <b>label</b> and an entry box. But if the argument contains 
# "-command {any_cmd_here}", the line will also contain a
# Tk <b>button</b> to the left of the entry box.  In addition, if the argument
# contains "-underline <i>int</i>", then <i>int</i> specifies which character of
# the button label to underline (starting with 0).  A binding
# is automatically added so that if that character is pressed
# while the toolbar has the focus, then the button is invoked.
# <br><br>
# The entry widget has a "click to focus" model.  When the user types
# a return in the widget, the contents of the entry box are appended
# to the specified command, which is then invoked.
#
body ::tycho::ToolBar::entry {tag label default command args} {
    array set option {-command {}}
    array set option {-underline {}}
    array set option {-foreground {}}
    array set option $args

    # Augment the arguments to pass to button or label automatically.
    # -command goes to button only
    # -foreground goes to button and label
    # Rest go to label (ie. textvariable, etc)
    if {$option(-command)!={}} {
        set option(-command) "-command \{$option(-command)\}"
        if {$option(-underline)!={}} {
            set option(-command) \
                    "$option(-command) -underline \{$option(-underline)\}"
        }
    }
    if {$option(-foreground)!={}} {
        set option(-foreground) "-foreground $option(-foreground)"
    }
         
    # Check to see if the programmer intended a label or a button.
    # If the programmer used -command, then intention is button.
    # Otherwise, it's a normal label.
    if {$option(-command)!={}} {
        # if -command exists, then we want a button
        itk_component add label_$tag {
            # added eval and \" \" (highlighting: ")
            eval ::button $itk_component(entrysite).label_$tag \
                    -text {$label} $option(-foreground) $option(-command)
        } {
            keep -background -cursor -font
            rename -foreground labelcolor labelColor LabelColor
        }
        # Extract the command, pass the rest of args to entry
    } else {
        # if no -command, we just want a regular label
        itk_component add label_$tag {
            # added eval and \" \" (highlighting: ")
            eval ::label $itk_component(entrysite).label_$tag \
                    -text {$label} $option(-foreground)
        } {
            keep -background -cursor -font
            rename -foreground labelcolor labelColor LabelColor
        }
    }
    grid $itk_component(label_$tag) -column 0 -row $numentries -sticky e

    
    itk_component add tag_$tag {
        eval ::entry $itk_component(entrysite).tag_$tag \
                -relief sunken $option(-foreground)
    } {
        rename -background -entrybackground \
                entryBackground EntryBackground
        rename -foreground -entryforeground \
                entryForeground EntryForeground
        rename -font -entryfont entryFont EntryFont
    }
    grid $itk_component(tag_$tag) -column 1 -row $numentries -sticky ew
    # The following ensures that the column takes up available space.
    grid columnconfigure $itk_component(entrysite) 1 -weight 1

    $itk_component(tag_$tag) insert insert $default
    bind $itk_component(tag_$tag) <Return> \
            "$command \[$itk_component(tag_$tag) get\]"
    
    incr numentries

    # Record the tag and its access methods
    lappend tags $tag
    set tagsclear($tag) "$itk_component(tag_$tag) delete 0 end"
    set tagsinsert($tag) "$itk_component(tag_$tag) insert insert"
    set tagsget($tag) "$itk_component(tag_$tag) get"
    set tagsenable($tag) "$itk_component(tag_$tag) configure -state normal"
    set tagsdisable($tag) "$itk_component(tag_$tag) configure -state disabled"

    # If a character was underlined, bind the hull to invoke the button.
    if {$option(-underline) != {}} {
        set char [string index $label $option(-underline)]
        if {$char != {}} {
            bind $itk_component(hull) <Key-[string tolower $char]> \
                    [code [list $itk_component(entrysite).label_$tag invoke]]
        }
    }

}

#####################################################################
#### exists
# See if a button or an entry exists. This implies that button and entry
# must have unique names.
#
body ::tycho::ToolBar::exists {tag} {
    # First, check if button exists
    if {[::tycho::ButtonBox::exists $tag]} {return 1}
    winfo exists $itk_component(entrysite).tag_$tag
}

#####################################################################
#### focusin
# Redefine to take an optional argument that specified the tag of an
# entry into which to focus. If there is no such entry the command
# is ignored. 
#
body ::tycho::ToolBar::focusin {{tag {}}} {
    if {$tag != {}} {
        focus $itk_component(entrysite).tag_$tag
    } else {
        chain
    }
}


#####################################################################
#### get
# If no argument is given, get the current value of the queries,
# and return as a list in the form {tag value tag value ...}.  This list
# can be directly assigned to an array using <code>array set</code>,
# making it easy to use the results of the query. If a tag is given as an
# argument, return the value of the corresponding entry widget only.
# If the tag is not recognized or is a button tag, return an empty
# string.
# 
body ::tycho::ToolBar::get {{tag {}}} {
    set response {}
    if {$tag == {}} {
	foreach tag $tags {
            lappend response $tag
            set cmd $tagsget($tag)
            if {$cmd != {}} {
                set rp [eval $cmd]
            } {
                set rp $tag
            }
            lappend response $rp
        }
    } {
	if { [::info exists tagsget($tag)] } {
	    set cmd $tagsget($tag)
	    if {$cmd != {}} {
		set response [eval $cmd]
	    }
	}
    }
    return $response
}

#####################################################################
#### insert
# Insert the specified string into the specified entry box.
# If the tag is not recognized, flag an error.
# 
body ::tycho::ToolBar::insert {tag str} {
    set cmd $tagsinsert($tag)
    if {$cmd != {}} {
        eval $cmd [list $str]
    }
}
