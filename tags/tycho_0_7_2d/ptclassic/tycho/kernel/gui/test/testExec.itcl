# Test suite for Exec class, this uses graphics, so it must be run with tycho -e
#
# @Authors: Christopher Hylands
#
# @Version: @(#)testExec.itcl	1.14 05/12/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the required packages are loaded
package require tycho.util.tytest
package require tycho.kernel.basic

# For some bizarre reason, the tests require the GUI package:
package require tycho.kernel.gui

proc _initialize {} {
    catch {destroy .exec}
    catch {delete object .exec}
    ::tycho::Exec .exec
}

# Test the different 
test Exec-1.1 {run make} {
    _initialize
    
    .exec execProcess {make test_exec_msg} [file join $TYCHO kernel gui test]

    # Wait for return
    set status [.exec getStatusWait]
    set history [.exec getHistory]
    set results {}
    regexp {>>([^<]+)<<} $history match results

    # Strip out lines like 'make[1] entering directory foo'
    set removemake "make\[^\n\]*\n"
    regsub -all $removemake $results {} newresults

    list $status $newresults
} {normal {
This message is used to test the Exec class

}}

test Exec-1.2 {If we kill fast enough, then we'll get a result "Killed"} {
    _initialize
    .exec execProcess {ls -al} {}
    .exec killProcess
    set results [.exec getHistory]
    regexp {(killed)} $results match results
    list $results
} {killed}


test Exec-1.3 {Make sure that clear history really clears up everything} {
    _initialize
    .exec execProcess {ls -al} {}
    .exec getStatusWait
    .exec clearHistory
    # This should be empty
    set results [.exec getHistory]
    list $results
} {{}}

# This will dump all the content into the editor, and check
# whether they have been dumped or not
test Exec-1.4 {Check doEachLine and doWhenDone} {
    _initialize
    set text [::tycho::view Edit]
    update idletasks
    after 250
    
    .exec doEachLine "$text insertData \$line"
    .exec doWhenDone "$text insertData I_AM_DONE\n"
    .exec execProcess {ls -al} {}
    .exec getStatusWait


    set content [$text get 0.0 end]
    
    # Close the text window
    $text markUnmodified
    catch [$text statusbar cget -closecommand]
  
    set str1 {}
    set str2 {}
    set str3 {}
    regexp {(Running:)} $content _ str1
    regexp {(exited Normally)} $content _ str2
    regexp {(I_AM_DONE)} $content _ str3

    list $str1 $str2 $str3

} {Running: {exited Normally} I_AM_DONE}

# Check the method getStautsNow, which should return "running"
# WARNING: This is machine speed dependent
test Exec-1.5 {Check method getStatusNow without blocking} {
    _initialize
    .exec execProcess {ls -al} {}
    set statusnow1 [.exec getStatusNow]
    .exec killProcess
    set statusnow2 [.exec getStatusNow]

    list $statusnow1 $statusnow2
} {running killed}
