# Test suite for the File class
#
# @Authors: John Reekie
#
# @Version: @(#)testFile.itcl	1.14 05/12/98
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the required packages are loaded
package require tycho.util.tytest
package require tycho.kernel.gui

# We also have to load this helper file
source [file join $env(GUI_LIBRARY) test FileTester.itcl]

set foo [file join $env(GUI_LIBRARY) test test.junk]
set autofoo [file join $env(GUI_LIBRARY) test #auto#test.junk]
set bar [file join $env(GUI_LIBRARY) test test.knuj]

#set VERBOSE 1

############################################################################
# constructor{}
test File-constructor-1 {Create FileTester widget} {
    catch {delete object .f}
    ::tycho::FileTester .f
} {.f}

test File-constructor-2 {Create File with -file option} {
    _mkfile $foo {Yes, Stanley, a fine specimen indeed.}
    _file -file $foo
    .f saveText
} {Yes, Stanley, a fine specimen indeed.}

test File-constructor-3 {Create File with non-existent -file option} {
    _rmfile $foo
    _file -file $foo
    .f saveText
} {}

############################################################################
# reload{}
#
test File-reload-1 {Reload while blank} {
    _mkfile $foo {That hat. Yes, the yellow one.}
    _file
    # Configure -file and then call reload
    .f reload
    .f saveText
} {}
update
_update

test File-reload-2 {Reload new file starting with blank} {
    _mkfile $foo {That hat. Yes, the yellow one.}
    _file
    # Configure -file and then call reload
    .f configure -file $foo
    .f reload
    .f saveText
} {That hat. Yes, the yellow one.}
update
_update

test File-reload-3 {Reload after -file already set} {
    _mkfile $foo {The rain in Spain}
    _mkfile $bar {falls mainly on the plain.}
    _file -file $foo
    # Configure -file and then call reload
    .f configure -file $bar
    .f reload
    .f saveText
} {falls mainly on the plain.}
update
_update

test File-reload-4 {Reload with non-existent file} {
    _rmfile $foo
    _file
    # Configure -file and then call reload
    .f configure -file $foo
    .f reload
    .f saveText
} {}

#####################################################################
# saveAsFile{}
#
# saveAsFile{} performs no checking or user-level dialog.
#
test File-saveAsFile-1 {Save with the same file name} {
    _mkfile $foo {Fresh outta mud, dang it}
    _file -file $foo
    # To test that the save is happening, delete the file first
    _rmfile $foo
    .f saveAsFile $foo
    _rdfile $foo
} {Fresh outta mud, dang it}
update
_update

test File-saveAsFile-2 {Save with a different file name} {
    _mkfile $foo {Earl Grey, hot}
    _rmfile $bar
     _file -file $foo
    # To test that the save is happening, delete the file first
    .f saveAsFile $bar
    list [.f cget -file] [_rdfile $bar]
} [list $bar {Earl Grey, hot}]

#####################################################################
# saveAs{}
#
# saveAs{} performs a number of checks on the file name and
# initiates user-level dialogs.
#
test File-saveAs-1 {Query and save with a new file} {
    _mkfile $foo {A highly developed capacity for reason}
    _rmfile $bar
    _file -file $foo
    # To simulate the user selection of the new filename,
    # perform the modal-dialog-workaround-dance
    set TY_TEST_MODAL {
	{
	    %0 clear
	    %0 insert entry $bar
	    update
	    _update
	    %0 ok
	}
    }
    set result [.f saveAs]
    list $result [_rdfile $bar]
} {1 {A highly developed capacity for reason}}

test File-saveAs-2 {Query and save with a new file in given directory} {
    _mkfile $foo {No, not just a machine -- a thinking machine!}
    _rmfile $bar
    _file -file $foo
    # To simulate the user selection of the new filename,
    # perform the modal-dialog-workaround-dance
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry [file tail $bar]
            update
            _update
            %0 ok
        }
    }
    set result [.f saveAs -initial $foo -file NoName]
    list $result [_rdfile $bar]
} {1 {No, not just a machine -- a thinking machine!}}

test File-saveAs-3 {Query and try and save as "NoName"} {
    _mkfile $foo {Captain Halibut, I presume?}
    _rmfile $bar
    _file -file $foo
    # To simulate the user selection of the new filename,
    # perform the modal-dialog-workaround-dance
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry NoName
            update
            _update
            %0 invoke ok
        }
        {
            %0 invoke ok
        }
    }
    set result [.f saveAs -initial $foo -file NoName]
    list $result [file exists $bar]
} {0 0}

test File-saveAs-4 {Query and cancel} {
    _mkfile $foo {You can quote me on that}
    _rmfile $bar
    _file -file $foo
    # To simulate the user selection of the new filename,
    # perform the modal-dialog-workaround-dance
    set TY_TEST_MODAL {
        {
            update
            _update
            %0 invoke cancel
        }
    }
    set result [.f saveAs]
    list $result [file exists $bar]
} {0 0}

test File-saveAs-5 {Query and overwrite an existing file} {
    _mkfile $foo {Adding a sparkle to Henry's day}
    _mkfile $bar {Cheaper than you think, buddy}
    _file -file $foo
    # To simulate the user selection of the new filename,
    # perform the modal-dialog-workaround-dance
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $bar
            update
            _update
            %0 ok
        }
        {
            %0 invoke yes
        }
    }
    set result [.f saveAs]
    list $result [_rdfile $bar]
} {1 {Adding a sparkle to Henry's day}}

test File-saveAs-6 {Query and cancel overwrite of an existing file} {
    _mkfile $foo {Cheaper than you think, buddy}
    _mkfile $bar {Adding a sparkle to Henry's day}
    _file -file $foo
    # To simulate the user selection of the new filename,
    # perform the modal-dialog-workaround-dance
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $bar
            update
            _update
            %0 ok
        }
        {
            %0 invoke no
        }
    }
    set result [catch {.f saveAs} msg]
    list $result $msg [_rdfile $bar]
} {1 silent {Adding a sparkle to Henry's day}}
update
_update
.f save

############################################################################
# save{}
#
test File-save-1 {Insert data and save} {
    _mkfile $foo {Empty}
    _file -file $foo
    # Insert data and call save
    .f clear
    .f insertData {Oh, for goodness' sake, not the elephant again!}
    .f save
    _rdfile $foo
} {Oh, for goodness' sake, not the elephant again!}

test File-save-2 {Insert data and save new file} {
    _rmfile $foo
    _file
    .f insertData {Realistically? Not a chance.}
    update
    _update
    # Script to select a filename
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $foo
            update
            _update
            %0 ok
        }
    }
    # Save it
    set result [.f save]
    list $result [_rdfile $foo]
} {1 {Realistically? Not a chance.}}

test File-save-3 {Insert data and overwrite existing file} {
    _mkfile $foo {Hardly worth deleting...}
    _file
    .f insertData {Magic! she thought.}
    # Script to select a filename
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $foo
            update
            _update
            %0 ok
        }
        {
            %0 invoke yes
        }
    }
    # Save it
    set result [.f save]
    list $result [_rdfile $foo]
} {1 {Magic! she thought.}}

test File-save-4 {Don't overwrite existing file} {
    _mkfile $foo {Hardly worth deleting...}
    _file
    .f insertData {Sinister thoughts crept unsummoned...}
    update
    _update
    # Script to select a filename
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $foo
            update
            _update
            %0 ok
        }
        {
            %0 invoke no
        }
    }
    # Save it
    set result [catch {.f save} msg]
    list $result $msg [_rdfile $foo]
} {1 silent {Hardly worth deleting...}}
# So we can delete it..
.f configure -file $foo
.f save

test File-save-5 {Save an auto-save file} {
    _mkfile $autofoo {Marvin's bullet-proof quilt}
    _rmfile $foo
    _file -file $autofoo
    update
    _update
     # Script to select a filename
    set TY_TEST_MODAL {
        {
            update
            _update
            %0 ok
        }
    }
    # Save it
    set result [.f save]
    list $result [_rdfile $foo]
} {1 {Marvin's bullet-proof quilt}}

test File-save-6 {Cancel saving an auto-save file} {
    _mkfile $autofoo {The first warning sign of hypothermia}
    _rmfile $foo
    _file -file $autofoo
    update
    _update
     # Script to select a filename
    set TY_TEST_MODAL {
        {
            update
            _update
            %0 invoke cancel
        }
    }
    # Save it
    set result [.f save]
    list $result [file exists $foo]
} {0 0}

test File-save-7 {Save a NoName auto-save file} {
    set autononame [file join $TYCHO kernel test #auto#NoName]
    _mkfile $autononame {Mmmm... donuts}
    _rmfile $foo
    _file -file $autononame
    update
    _update
    # Script to select a filename
    set TY_TEST_MODAL {
        {
	    %0 clear
            set result1 [%0 get entry]
            %0 insert entry [file tail $foo]
            update
            _update
            %0 ok
        }
    }
    # Save it
    set result2 [.f save]
    update
    _update
    list $result1 $result2 [_rdfile $foo]
} {{} 1 {Mmmm... donuts}}


############################################################################
# saveQuery{}
#
test File-saveQuery-1 {If not modified, do nothing} {
    _mkfile $foo {Verbal veracity}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Save it, checking that the file is not touched
    set fd [open $foo "w+"]
    close $fd
    set result [.f saveQuery]
    list $result [_rdfile $foo]
} {2 {}}

test File-saveQuery-2 {If modified, answer yes} {
    _mkfile $foo {Voluminous verbiage}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Modify it
    .f clear
    .f insertData {Voluble vilification}
    update
    _update
   # Script to answer dialog
    set TY_TEST_MODAL {
        {
            %0 invoke yes
        }
    }
    # Save it, checking that the file is overwritten
    set fd [open $foo "w+"]
    close $fd
    set result [.f saveQuery]
    list $result [_rdfile $foo]
} {1 {Voluble vilification}}

test File-saveQuery-3 {If modified, answer no} {
    _mkfile $foo {Vellacious vivre}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Modify it
    .f insertData {Vitriolic verve}
    update
    _update
    # Script to answer dialog
    set TY_TEST_MODAL {
        {
            %0 invoke no
        }
    }
    # Save it, checking that the file is not touched
    set fd [open $foo "w+"]
    close $fd
    set result [.f saveQuery]
    list $result [_rdfile $foo]
} {0 {}}
# So we can delete it...
.f save

test File-saveQuery-4 {If modified, cancel} {
    _mkfile $foo {Vital vivisection}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Modify it
    .f insertData {Vapid Volvos}
    update
    _update
    # Script to answer dialog
    set TY_TEST_MODAL {
        {
            %0 invoke cancel
        }
    }
    # Save it, checking that the file is not touched
    set fd [open $foo "w+"]
    close $fd
    set result [catch {.f saveQuery} msg]
    list $result $msg [_rdfile $foo]
} {1 silent {}}
# So we can delete it...
.f save

############################################################################
# altFile{}
#
test File-altFile-1 {Switch to another file, data not modified} {
    _mkfile $foo {Elastically scholastically}
    _mkfile $bar {Croissants.. with tea?}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Script to answer dialog
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $bar
            update
            _update
            %0 ok
        }
    }
    # Switch to another file
    .f altFile
    list [.f cget -file] [.f saveText]
} [list [::tycho::expandPath $bar] {Croissants.. with tea?}]

test File-altFile-2 {Switch to another file, save modified data} {
    _mkfile $foo {Henry? Henry! HENRY!!!}
    _mkfile $bar {One lump, but never stir}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Modify the data
    .f clear
    .f insertData {On, no, Henry... <sob>}
    update
    _update
    # Script to answer dialog
    set TY_TEST_MODAL {
        {
	    # Yes, save it
            %0 invoke yes
        }
        {
	    # Insert file bar
            %0 clear
            %0 insert entry $bar
            update
            _update
            %0 ok
        }
    }
    # Switch to another file
    .f altFile
    list [_rdfile $foo] [.f saveText]
} {{On, no, Henry... <sob>} {One lump, but never stir}}

############################################################################
# autoSave{}
#
# These are a little doubtful -- each one will start another series
# of after{} events...
#
test File-autoSave-1 {Call autosave -- file not modified} {
    _mkfile $foo {He's on the edge, right on the edge}
    _rmfile $autofoo
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Call autoSave -- nothing should happen
    .f autoSave
    file exists $autofoo
} 0

test File-autoSave-2 {Call autosave -- file is modified} {
    _mkfile $foo {}
    _rmfile $autofoo
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Modify
    .f insertData {Larson? Larson who?}
    # Call autoSave -- should create file
    .f autoSave
    list [file exists $autofoo] [_rdfile $autofoo]
} {1 {Larson? Larson who?}}
update
_update
.f save

############################################################################
# insertFile{}
#
test File-insertFile-1 {Insert a file} {
    _mkfile $foo {Motorcycles transport the body}
    _mkfile $bar {
Ducati's transport the soul}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Script to answer dialog
    set TY_TEST_MODAL {
        {
            %0 clear
            %0 insert entry $bar
            update
            _update
            %0 ok
        }
    }
    # Insert a file
    .f insertFile
    list [.f cget -file] [.f saveText]
} [list $foo {Motorcycles transport the body
Ducati's transport the soul}]
update
_update
# So we can delete
.f save

############################################################################
# toggleReadOnly{}
#
# NOTE: These tests will probably fail on Windows and Mac...
#
# NOTE: Doesn't test file under revision control.
#
test File-toggleReadOnly-1 {Toggle an existing file} {
    _mkfile $foo {I had a little beetle}
    _file -file $foo
    # Wait around for a while...
    update
    _update
    # Do it
    set result [file writable $foo]
    .f toggleReadOnly
    lappend result [file writable $foo]
    .f toggleReadOnly
    lappend result [file writable $foo]
} {1 0 1}
update
_update

test File-toggleReadOnly-2 {Non-existent file} {
    _rmfile $foo
    _file
    # Wait around for a while...
    update
    _update
    .f insertData {Alexander was his name}
    # Script to answer dialog
    set TY_TEST_MODAL {
        {
            # Yes, save changes
            %0 invoke yes
        }
        {
            %0 clear
            %0 insert entry $foo
            update
            _update
            %0 ok
        }
    }
    # Do it
    .f toggleReadOnly
    set result [file writable $foo]
    .f toggleReadOnly
    lappend result [file writable $foo]
} {0 1}
update
_update

############################################################################
# openContext{}
#
# These tests make sure that openContext is doing some reasonable
# things. They assume that at least the plain text and Itcl editor
# modes are installed.
#
# Some of these tests require the Itcl editor...
package require tycho.edit.textedit

test File-openContext-1 {Open a plain text file} {
    _mkfile $foo {Nuts. Just plain nuts.}
    set w [::tycho::openContext $foo]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::Edit {Nuts. Just plain nuts.}}
_update
catch "delete object [$w displayer]"

test File-openContext-2 {Open an Itcl file} {
    _mkfile $foo.itcl {Salted or plain?}
    set w [::tycho::openContext $foo.itcl]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::EditItcl {Salted or plain?}}
_update
catch "delete object [$w displayer]"

test File-openContext-3 {Open a non-existent plain text file} {
    catch {file delete $foo}
    set w [::tycho::openContext $foo]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::Edit {}}
_update
catch "delete object [$w displayer]"

test File-openContext-4 {Open a non-existent Itcl file} {
    catch {file delete $foo.itcl}
    set w [::tycho::openContext $foo.itcl]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::EditItcl {}}
_update
catch "delete object [$w displayer]"

test File-openContext-5 {Open a file and override default mode} {
    _mkfile $foo {The fine art of roasting}
    set w [::tycho::openContext $foo "itcl"]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::EditItcl {The fine art of roasting}}
_update
catch "delete object [$w displayer]"

_mkfile $foo {Your hat, Madam.}
set v [::tycho::openContext $foo]
test File-openContext-6 {Open an already-open file} {
    set w [::tycho::openContext $foo]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}] \
            $w
} [list ::tycho::Edit {Your hat, Madam.} ::$v]
_update
catch "delete object [$w displayer]"

test File-openContext-7 {Open a file and override default mode} {
    _mkfile $foo {The fine art of roasting}
    set w [::tycho::openContext $foo "itcl"]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::EditItcl {The fine art of roasting}}
_update
catch "delete object [$w displayer]"

test File-openContext-8 {Try opening a directory} {
    set w [::tycho::openContext [file join $TYCHO kernel test]]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::Edit {}}
_update
catch "delete object [$w displayer]"

test File-openContext-9 {Open a file and override with bogus mode} {
    _mkfile $foo {The fine art of roasting}
    set w [::tycho::openContext $foo "bogus"]
    list \
            [$w info class] \
            [$w component text get 0.0 {end - 1 char}]
} {::tycho::Edit {The fine art of roasting}}
_update
catch "delete object [$w displayer]"

########################################################################
## CLEAN UP
catch {file delete $foo}
catch {file delete $foo.itcl}
catch {file delete $bar}
catch {file delete $autofoo}
catch {file delete $autononame}

