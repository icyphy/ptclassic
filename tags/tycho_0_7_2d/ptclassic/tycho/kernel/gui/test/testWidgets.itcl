# Test suite for widgets in tycho.
#
# @Authors: Edward A. Lee, Christopher Hylands
#
# @Version: @(#)testWidgets.itcl	1.25 03/23/98
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the required packages are loaded
package require tycho.util.tytest
package require tycho.kernel.gui

#set VERBOSE 1

############################################################################
# Test DialogWindow
test DialogWindow-1.1 {Test DialogWindow} {
    global globalReturn
    ::tycho::Dialog .dialog -text "I am a very senstitive widget"
    .dialog addButton pushme -text "Push Me" -command "set globalReturn ouch"
    .dialog default pushme
    .dialog centerOnScreen
    .dialog freezeWindowSize
    .dialog invoke pushme
    after $duration removeobj .dialog
    list $globalReturn
} {ouch}

############################################################################
# Test Edit
test Edit-1.1 {Test Edit} {
    set view [::tycho::view Edit]
    set win [$view displayer windowName]
    wm deiconify $win
#    after $duration ::tycho::safeUpdate $win
    after $longDuration removeobj $win
    list {Done}
} {Done}

############################################################################
# Test ErrorMessage
test ErrorMessage-1.1 {Test ErrorMessage} {
    ::tycho::ErrorMessage .msg2 -text \
	    "This is not really an error, but just a test of the messenger"
    wm deiconify .msg2
    after $duration removeobj .msg2
#    ::tycho::safeUpdate .msg2
    list {Done}
} {Done}


############################################################################
# Test Query
test Query-1.1 {Test Query} {
    after $duration .entry invoke cancel
    ::tycho::Query .entry \
	    -queries {{line qline {Enter here:} {Default text}}}
    .entry centerOnScreen
#    ::tycho::safeUpdate .entry
    list {Done}
} {Done}

#
# addQuery was removed
#
#test Query-1.2 {Test Query: addQuery method} {
#    after $duration .entry2 invoke cancel
#    ::tycho::Query .entry2 \
#	    -queries {{lines qlines {Enter here:} {Default text} 3}}
#    .entry2 addQuery body {My Entry} {
#	Here we have some default text
#	line 2
#	line 3
#	line 4
#	line 5
#    } 4
#    .entry2 centerOnScreen
##    ::tycho::safeUpdate .entry
#    list {Done}
#} {Done}


############################################################################
# File is tested in testFile.itcl

###########################################################################
# Test FileBrowser
test FileBrowser-1.1 {Test FileBrowser} {
    after $duration .file invoke cancel
    ::tycho::FileBrowser .file
    .file centerOnScreen
#    ::tycho::safeUpdate .file
    list {Done}
} {Done}


############################################################################
# Test ListBrowser
test ListBrowser-1.1 {Test ListBrowser} {
    global globalReturn 
    set win [::tycho::ListBrowser [::tycho::autoName .lb] \
	    -command "set globalReturn"]
    $win appendItems {{1st Item} {2nd Item} {3rd Item}}
    # after $duration ::tycho::safeUpdate $win
    after $longDuration removeobj $win
    # Get item #1, which is actually the second item in the list
    $win clearSelection
    $win goto 1
    $win ok
    set globalReturn
} {2nd Item}

############################################################################
# Test IndexBrowser
test IndexBrowser-1.1 {Test IndexBrowser} {
    global tycho
    set win [::tycho::IndexBrowser [::tycho::autoName .ib] \
	    -file [file join $tycho lib idx tycho.idx]]
    wm deiconify $win
#    after $duration ::tycho::safeUpdate $win
    after $longDuration removeobj $win
    list {Done}
} {Done}


############################################################################
# Test Message
test Message-1.1 {Test Message} {
    ::tycho::Message .msg1 -text \
	    "This is a plain message"
    .msg1 centerOnScreen
    after $duration removeobj .msg1
#    ::tycho::safeUpdate .msg1
    list {Done}
} {Done}


############################################################################
# Test TopLevel
test TopLevel-1.1 {Test TopLevel} { 
    set win [::tycho::autoName .t]
    ::tycho::TopLevel $win -geometry 300x300+0+0
    wm deiconify $win
    $win centerOnScreen
    $win freezeWindowSize
    $win configure -geometry 100x100-0+0
    $win focusin
    $win nextWindow
    $win raiseWindow
    $win windowName
#    after $duration ::tycho::safeUpdate $win
    after $longDuration removeobj $win
    list {Done}
} {Done}

############################################################################
# Test YesNoCancel
test YesNoCancel-1.1 {Test YesNoCancel} {
    global globalReturn
    after $longDuration .yesnocancel invoke cancel
    ::tycho::YesNoCancel .yesnocancel \
	    -text "Yes, No, or Cancel" \
	    -yescommand "set globalReturn yes" \
	    -nocommand "set globalreturn no" \
	    -cancelcommand "set globalReturn cancel"
    .yesnocancel centerOnScreen
    update
    tkwait window .yesnocancel
    list $globalReturn
} {cancel}

############################################################################
# Test YesNoQuery
test YesNoQuery-1.1 {Test YesNoQuery} {
    after $duration .yesno invoke yes
    after [expr 2*$duration] .another invoke yes
    ::tycho::YesNoQuery .yesno \
	    -text "Either button should bring up another dialog" \
	    -yescommand {
	::tycho::YesNoQuery .another -text {Another dialog}
	.another centerOnScreen
        } \
	-nocommand "askuser {Are you sure not?}"
    .yesno centerOnScreen
    list {Done}
} {Done}

# Here we test Dialog::wait, too.  See $TYCHO/doc/coding/testing.html
test YesNoQuery-2.1 {Test the modal ::tycho::askuser proc} {
    set TY_TEST_MODAL {
        {
	    %0 invoke yes
	}
    }
    ::tycho::askuser "Are you awake?"
} 1

test YesNoQuery-2.2 {Test the modal ::tycho::askuser proc} {
    set TY_TEST_MODAL {
	{
	    %0 invoke no
	}
    }
    ::tycho::askuser "Are you awake?"
} 0

