# A Resource for sending out mail using mail daemon on port 25
# 
# @Author: Kevin Chang
#
# @Version: @(#)ResourceMail.itcl	1.9 07/11/97
# 
# @Copyright (c) 1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceMail
#
# This is an abstraction of "write only" file system. The important
# interfaces include: open, puts, and close. Open will initialize
# variables. Puts will write entires into a temporary buffer. Close
# will attempt to send mail, using the content in the temporary buffer.
# Below is a mini-tutorial to send mail:
# <br>
# <ol>
# <li>First, setup the email destination and content.<br>
# <tcl><tt>catch {delete object .bb}
# catch {unset val}
# ::tycho::Query .bb
# .bb line email {Your e-mail address} {}
# .bb line sub {Your subject} {Testing...}
# .bb lines text {Your content} "" 4
# array set val [::tycho::Dialog::wait .bb]
# set val(sub)   "Subject: $val(sub)"
# set val(email) "mailto:$val(email)"</tt></tcl>
#
# <li>Create, initialize, and connect to e-mail host:<br>
# <tcl><tt>set mailobj [::tycho::ResourceMail::new $val(email)]
# $mailobj connect $val(email)
# $mailobj open</tt></tcl>
#
# <li>Write content into buffer:<br>
# <tcl><tt>$mailobj puts "$val(sub)"
# $mailobj puts ""
# foreach i [split $val(text) \n] {
#   $mailobj puts $i
# }
# list "Okay, wrote content..."</tt></tcl>
#
# <li>Mail buffer to host:<br>
# <tcl><tt>$mailobj close
# after 10000 "delete object $mailobj"
# list "Written..."</tt></tcl>
# </ol>
#
class ::tycho::ResourceMail {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Close the resource. Calls mailinitiate to send out the message.
    method close {}

    # Get the progress of sending mail
    method getprogress {} {return $progress}

    # Not open by default
    method isopen {} {return 0}

    # if there's timeout on protocol, we can't connect to the mail server.
    method mailtimeout {oldstate}

    # Open the resource. Enable puts.
    method open {{path {}}}

    # Write a string to a streamable resource.
    # Can't write into HTTP file! Read permission of off
    method puts {string}

    ###################################################################
    ####                           public procs                    ####

    # See if the server or hostname exists
    proc exists {path}

    # Create a new resource object
    proc new {path args}

    # Split up URL
    proc splitURL {path}

    ###################################################################
    ####                         protected methods                 ####

    # Puts a string to console of the debug option is set
    protected method debugputs {string}

    # Initiate a connection on the mail server. Called by close.
    protected method mailinitiate {{url {}}}

    # File event handler for mail server. Called by mailinitiate.
    protected method mailhandler {}

    # File event handler for mail server. Called by mailinitiate.
    protected method mailabort {message}


    ###################################################################
    ####                        protected commons                  ####

    ###################################################################
    ####                        protected variables                ####

    # The progress, can be used with the statusbar
    protected variable progress 0.0

    # The url this object is accessing
    protected variable currentURL {}

    # The socket id used to open the mail port
    protected variable socketid {}

    # The state of transfer during the upload connection on port 25.
    # The variable could be any of the following:
    # <tt>DISCONNECTED, HELO, MAILFROM, RCPTTO, DATA1, DATA2 and QUIT.</tt>
    #
    # The names are derived from mail daemon (ESMTP Sendmail 8.8.5)
    protected variable state {DISCONNECTED}

    # The content of mail to be sent.
    protected variable mailbuffer {}

    # Attribute of the recipient
    protected variable username
    protected variable hostname
    protected variable port

    # FIXME: Attribute of the user. This is set inside the constructor,
    # but should be moved to toplevel Tycho!
    protected variable myname {}
    protected variable myhost {}

    ###################################################################
    ####                         private variables               ####
    
    # Debug status. Print if 1
    private variable debug 0

    # True if the file is open
    private variable fileIsOpen 0

    # Timeout for sending/receiving protocol message. Default 2 seconds
    private variable timeout 2000
}


#######################################################################
#### constructor
#
# For each HTTP GET, an object is created and destroyed.
#
body ::tycho::ResourceMail::constructor {args} {
    eval configure $args

    # FIXME: This is very system dependent!
    # FIXME: Following is for UNIX
    if [info exists env(USER)] {set myname $env(USER)}
    if [info exists env(HOST)] {set myhost $env(HOST)}
    catch {set myname [exec whoami]}
    catch {set myhost [lindex [exec uname -a] 1]}

    # FIXME: Following is for NT
    if [info exists env(USERNAME)] {set myname $env(USERNAME)}
    if [info exists env(USERDOMAIN)] {set myhost $env(USERDOMAIN)}

    if {$myname=={} || $myhost=={}} {
        error "Sorry, I cannot detect your username or hostname. \
                Mail will not run on this platform."
    }
}

#######################################################################
#### destructor
#
body ::tycho::ResourceMail::destructor {} {
    # If we're still loading, forget it
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::ResourceMail::close {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open."
    }

    # Initiate sending to the server
    mailinitiate

    # FIXME: This should return a status of sending mail!
    # Do a tkwait on a global variable.
    return 0
}

#####################################################################
#### open
# Open a connection for mail on port 25.
#
body ::tycho::ResourceMail::open {{path {}}} {
    if {$path=={}} {
        set currentURL [path]
    }

    if { ! [exists $currentURL] } {
	error "File $url does not exist"
    }

    if { $fileIsOpen} {error "File is already open!"}

    set fileIsOpen 1
    set mailbuffer {}
    set progress 0.0
    return 1
}

#####################################################################
#### puts
body ::tycho::ResourceMail::puts {string} {
    if {!$fileIsOpen} {error "File is not open."}
    lappend mailbuffer $string
}

#########################################################################
#########################################################################
####                          public procedures                      ####

#####################################################################
#### exists
# Check if the given URL exists. If the URL has already been
# accessed before, use the data obtained from the earlier
# load. Otherwise open the URL and download just the header.
# Returns 0 if the server cannot be accessed or if the file
# does not exist on the server.
#
body ::tycho::ResourceMail::exists {url} {
    # Do we already know if it exists?
    return 1
}

#####################################################################
#### new
# Create a new HTTP object.
#
body ::tycho::ResourceMail::new {path args} {
    #::puts "::tycho::ResourceMail::new $path $args"
    uplevel #0 ::tycho::ResourceMail [::tycho::autoName ResourceMail] \
	    $args
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#########################################################################
#### debugputs
# Puts a string to the console if the *-debug* option is set.
#
body ::tycho::ResourceMail::debugputs {string} {
    if $debug {
	::puts $string
    }
}

#########################################################################
#### mailinitiate
# Opening a mail connection, and set the fileevent.
#
body ::tycho::ResourceMail::mailinitiate {{url {}}} {
    # Parse URL into hostname, port, and path
    if {$url!={}} {set currentURL $url}

    ::tycho::assign username hostname port [splitURL $currentURL]

    if {[catch {socket -async $hostname $port} socketid]} {
	catch {unset $socketid}
	error "Can't open $hostname, $port"
    }

    # <tt>DISCONNECTED, HELO, MAILFROM, RCPTTO, DATA1, DATA2 and QUIT.</tt>
    set state CONNECT

    # Set up the file events for incoming data
    ::fileevent $socketid w {}
    ::fileevent $socketid readable \
	    "@scope ::tycho::ResourceMail [list $this mailhandler]"

    ::fconfigure $socketid -blocking no    ;#-translation crlf
    ::fconfigure $socketid -translation auto
}



#########################################################################
#### mailhandler
# The following is the handshake protocol between the client and
# the server. When the mailhandler gets the expected state from
# the server, it'll send out the right data.
# <pre>
# State          Expect from Server      "Action"
# -----          ------------------      -----------
# DISCONNECTED   "nothing!"              "mailabort"
# CONNECT        22[0-9]                 HELO $myhost
# HELO           25[0-9] Hello           MAIL FROM $myname@$myhost
# MAILFROM       25[0-9] Sender ok       RCPT TO: $username
# RCPTTO         25[0-9] Recipient ok    DATA
# DATA1          35[0-9] Enter mail      "send the mail"
# DATA2          25[0-9] Message accept  QUIT
# QUIT           "nothing!"              "quit now, disconnect sock"
# </pre>
body ::tycho::ResourceMail::mailhandler {} {
    if {[::eof $socketid] && $state!="DISCONNECTED"} {
        error "Handshaking failed"
	return
    }
    # Line will contain the status
    ::gets $socketid line

    # This returns the status number. 200-299 is okay (just like HTTP)
    set status [lindex $line 0]

    if {$status>=400} {
        error "Error on mailto:$username@$hostname, $line, socket($socketid)"
    }

    debugputs "$state $line"

    # The following is a state machine
    switch -- $state {
        DISCONNECTED {
            mailabort "DISCONNECTED: Error, should not expect incoming message"
            set progress -1
        }

        CONNECT {
            # 220 = "okay to transmit, protocol good"
            #
            #Sample: 
            #220-hofmann.CS.Berkeley.EDU Sendmail 8.6.11/8.6.6.Beta11 
            #                 ready at Tue, 3 Jun 1997 10:10:17 -0700
            if [regexp -nocase {^22[0-9] .*} $line] {
                ::puts $socketid "HELO $myhost"
                set state HELO
                after $timeout "eval $this mailtimeout $state"
            } elseif {$status<200 || $status>=300} {
                mailabort "CONNECT: Protocol failed"
            }
            set progress 0.1
        }

        HELO {
            #250 hofmann.CS.Berkeley.EDU Hello tycho.EECS.Berkeley.EDU 
            #                    [128.32.240.250], pleased to meet you
            if [regexp -nocase {^25[0-9] .*Hello ([^\ ^\,]+).*} \
                    $line _ myhost] {
                # FIXME need to check for myhost!!!
                ::puts $socketid "MAIL FROM: $myname@$myhost"
                set state MAILFROM
                after $timeout "eval $this mailtimeout $state"
            } elseif {$status<200 || $status>=300} {
                mailabort "HELO"
            }
            set progress 0.2
        }
        
        MAILFROM {
            #250 kchang@tycho.EECS.Berkeley.EDU... Sender ok
            if [regexp {^25[0-9] .+Sender ok} $line] {
                ::puts $socketid "RCPT TO: $username"
                set state RCPTTO
                after $timeout "eval $this mailtimeout $state"
            } elseif {$status<200 || $status>=300} {
                mailabort "MAILFROM:"
            }
            set progress 0.3
        }

        RCPTTO {
            #250 <user>... Recipient ok
            if [regexp -nocase {^25[0-9] .+Recipient ok} $line] {
                ::puts $socketid "DATA"
                set state DATA1
                # FIXME: This will give an error because sending the entire
                # text takes a while on a slow network
                #after $timeout "eval $this mailtimeout $state"
            } elseif {$status<200 || $status>=300} {
                mailabort "RCPTTO"
            }
            set progress 0.4
        }

        DATA1 {
            #354 Enter mail, end with "." on a line by itself
            if [regexp -nocase {^35[0-9] Enter mail} $line] {
                set bufferlines [llength $mailbuffer]
                set line 0
                # Dump the mail buffer to data
                foreach i $mailbuffer {
                    incr line
                    ::puts $socketid $i
                    set progress [expr 0.4 + (($line/$bufferlines)/2.5)]
                }
                ::puts $socketid "."
                set state DATA2
                after $timeout "eval $this mailtimeout $state"
            } else {
                mailabort "DATA1"
            }
        }

        DATA2 {
            #250 LAA14447 Message accepted for delivery
            if [regexp -nocase {^25[0-9] .+Message accept} $line] {
                ::puts $socketid "QUIT"
                set state QUIT
                after $timeout "eval $this mailtimeout $state"
            } else {
                mailabort "DATA2"
            }
            set progress 0.9
        }

        QUIT {
            set fileIsOpen 0
            set state DISCONNECTED
            ::fileevent $socketid readable {}
            ::close $socketid
            set progress 1.0
            return
        }
    }
    # The following is required because Tcl will buffer all output
    ::flush $socketid
}

#########################################################################
#### mailtimeout
# After certain amount of time, we hope that the state has transitioned.
# Otherwise, there's a timeout on the network or on the server, and
# we have to stop the transaction. This method will compare the oldstate
# with the current state.
#
body ::tycho::ResourceMail::mailtimeout {oldstate} {
    if {$oldstate==$state} {
        error "Timeout on mailto:$username@$hostname"
    }
}

#########################################################################
#### mailabort
# When the protocol fails, output an error message, and close socket
#
body ::tycho::ResourceMail::mailabort {message} {
    catch {::close $socketid}
    set state DISCONNECTED
    set fileIsOpen 0
    error $message
}

#########################################################################
#### splitURL
# Parse a url into the hostname, port, and return them
# as a three-element list.
#
body ::tycho::ResourceMail::splitURL {url} {
    set _username {}
    set _hostname {}
    set _port 25

    # The following parses the url into hostname, port, and username
    # The following is verbatim from Surfit: vvvvvvvvvvvvvvvvvvvvvvvvvvvv
    if {[regexp -nocase \
            {^mailto:(/+)?([0-9a-z\-_]+)@([a-z0-9\.\-_]+)(:([0-9]+))?} \
            $url _ _ \
	    usertmp hosttmp _ porttmp]} {
	if {$hosttmp!={}} {set _hostname $hosttmp}
	if {$porttmp!={}} {set _port $porttmp}
	if {$usertmp!={}} {set _username $usertmp}
    }
    return [list $_username $_hostname $_port]
}





