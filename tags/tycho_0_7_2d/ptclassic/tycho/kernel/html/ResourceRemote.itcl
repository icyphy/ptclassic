# A Resource for accessing files on FTP and HTTP servers
# 
# @Author: Kevin Chang
#
# @Version: @(#)ResourceRemote.itcl	1.8 07/21/98
# 
# @Copyright (c) 1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME: Currently use one single global status flag
# for the non-blocking download. Need to make one per URL
# (and non-global?)
#
# The current status of an http get. This is a common array
# so that tkwait can access it. Can be "header," "body,"
# "abort," or "done".
## DO NOT USE THIS VARIABLE DIRECTLY! Use method remotestatus instead.
set _remotestatus(127.0.0.1) done

######################################################################
#### ResourceRemote
#
# This class provides an abstraction of remote files through FTP/HTTP/etc. 
# Common methods that these protocols share include: cache file access, 
# finding the name of the cache, close cache file, forward location,
# debug variable, debugputs (FIXME), read cache file, and others.
#
class ::tycho::ResourceRemote {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    # Debugging flag
    public variable debug 0

    ###################################################################
    ####                         public methods                    ####

    # Get a local cached copy of the data.
    method cachefile {}

    # Close the resource. Here, close the local cache file.
    method close {}

    # Return the end of file status. Here, return eof status of local cache.
    method eof {}

    # Read a string from a streamable resource. Get from a local cache file.
    method gets {{varName {}}}

    # Test if the local cache file is currently open.
    method isopen {}

    # Return a string containing the data in a streamable resource.
    # In this case, read from a local cache file.
    method read {}

    # Return 1 if this resource is streamable
    method streamable {} {return 1}

    ###################################################################
    ####                      public procedures                    ####

    # Return the content type of the current file
    proc contenttype {path} {::tycho::abstractMethod contenttype}

    # Get a file name, and forward automatically. NOTE: Only in this class.
    proc forward {url}

    # reset all the internal variable such as _exists
    # and _forward. NOTE: This exists ONLY in this class.
    proc initialize {}

    # Return yes, we are remote
    proc isremote {path} {return 1}

    ###################################################################
    ####                         protected methods                 ####

    # Puts a string to console of the debug option is set
    protected method debugputs {string}

    # Set or read the http status. If newvalue is {}, then just return
    protected method remotestatus {{value {}}}

    # Wait until an HTTP GET completes.
    protected method remotewait {}

    ###################################################################
    ####                        protected commons                  ####

    # A flag tagging whether a given URL exists in this current session
    # of Tycho. Used with method "exists" to check whether this session's
    # file date, size, and contenttype are the same or not.
    protected common _exists

    # A forwarding address associated with some URLs
    protected common _forward

    ###################################################################
    ####                        protected variables                ####

    # The url this object is accessing
    protected variable currentURL {}

    # True if the file is open
    protected variable fileIsOpen 0

    # The name of the cache file associated with this HTTP
    protected variable cachefilename {}

    # This is the cache file id, used for [$this gets] and [$this eof]
    protected variable cachefileid -1

    ###################################################################
    ####                         private variables               ####
}


#######################################################################
#### constructor
#
# For each HTTP GET, an object is created and destroyed.
#
body ::tycho::ResourceRemote::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::ResourceRemote::destructor {args} {
    # Do nothing, just go bye bye
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### cachefile
# Get a cached copy of the contents of the file. This is provided
# to work around Tcl's lack of binary data handling.
#
body ::tycho::ResourceRemote::cachefile {} {
    set url [forward [path]]
    debugputs "Cachefile, seeking at $url"

    #if ![::info exists _cachefile($url)] {}
    if ![::tycho::cache exists $url] {
        # If cache doesn't exist, go fetch the information
	if ![isopen] {
	    open "r"
	    read
	    close
	} else {
	    read
            close
	}
    }

    return [::tycho::cache getcachefile $url]
}

#####################################################################
#### close
body ::tycho::ResourceRemote::close {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open (close)"
    }
    set fileIsOpen 0
    if { $cachefileid > 0 } {
        ::close $cachefileid
        set cachefileid -1
    }
}

#####################################################################
#### eof
body ::tycho::ResourceRemote::eof {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open (eof)"
    }
    ::eof $cachefileid
}

#####################################################################
#### forward
# Get a file name, and forward it automatically.
# Used with _forward to forward the right location. For example,<br>
# <tt>http://ptolemy/~eal   -->   http://ptolemy/~eal/</tt>
#
body ::tycho::ResourceRemote::forward {url} {
    while {[::info exists _forward($url)] && $_forward($url)!=$url} {
	set url $_forward($url)
    }
    return $url
}

#####################################################################
#### initialize
# Reset all the internal variables such as _forward
# and _exists. Called during the initial setup, or during debugging.
#
body ::tycho::ResourceRemote::initialize {} {
    catch {unset _exists}
    catch {unset _forward}
}

#####################################################################
#### gets
# If the HTTP file is a text file, then perform the exact
# same task that the base method gets does.
#
body ::tycho::ResourceRemote::gets {{varName {}}} {
    if !$fileIsOpen {
	error "File \"$this\" is not open (gets)"
    }
    if { $varName == "" } {
	::gets $cachefileid
    } else {
	upvar $varName v
	uplevel ::gets $cachefileid v
    }
}

#####################################################################
#### isopen
body ::tycho::ResourceRemote::isopen {} {
    return $fileIsOpen
}

#####################################################################
#### read
body ::tycho::ResourceRemote::read {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open (read)"
    }
    ::read $cachefileid
}

#########################################################################
#########################################################################
####                          public procedures                      ####



#########################################################################
#########################################################################
####                     protected methods                           ####

#########################################################################
#### debugputs
# Puts a string to the console if the *-debug* option is set.
#
body ::tycho::ResourceRemote::debugputs {string} {
    if $debug {
	::puts $string
    }
}

#########################################################################
#### remotestatus
# A procedure that handles set and read of the status.
#
body ::tycho::ResourceRemote::remotestatus {{value {}}} {
    if {$value!={}} {
        uplevel #0 "set _remotestatus($currentURL) $value"
    }

    if ![uplevel #0 "::info exists _remotestatus($currentURL)"] {
        error "ASSERTION FAILED: _remotestatus($currentURL) does not exist!"
    }

    # Return the value
    uplevel #0 "set _remotestatus($currentURL)"
}

#########################################################################
#### remotewait
# Wait until the current GET completes
body ::tycho::ResourceRemote::remotewait {} {
    #debugputs "Waiting for $currentURL ([remotestatus])"
    # Wait until the status becomes "done"
    #::puts -nonewline ">Waiting (($socketid) $currentURL?" ; flush stdout
    while { [remotestatus] != "done" } {
        uplevel #0 "tkwait variable _remotestatus($currentURL)"
    }
    #debugputs "Waiting for $currentURL DONE!!! ([remotestatus])"
    return
}

::tycho::ResourceRemote::initialize


