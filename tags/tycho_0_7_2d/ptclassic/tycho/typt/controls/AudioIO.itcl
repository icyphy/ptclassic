# A control sub-panel for audio I/O.
#
# @Author: John Reekie and Sunil Bhave
#
# @Version: @(#)AudioIO.itcl	1.4	04/29/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### AudioIO
# A small panel that contain the basic audio controls:
# input selection buttons, output selection buttons, and
# sliders for input record gain, output play gain, and balance.
#
class ::tycho::AudioIO {
    inherit ::tycho::ControlSubpanel

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Request the widget to connect its controls
    method requestConnect {}

    ###################################################################
    ####                   private variables                       ####

    ## sourceVar, destVar
    #
    # The arrays of variables for the source and destination
    # selection variables.
    #
    private common sourceVar
    private common destVar
}

#######################################################################
#### constructor
#
body ::tycho::AudioIO::constructor {args} {
    # Create the frame and buttons for source/dest selection
    itk_component add select {
        frame $itk_interior.select
    } {}
    # FIXME: For now, these are not packed because the
    # Tycho-CGC interface does not yet support controls
    # other than simple scales.
    # pack $itk_component(select) -side left -anchor nw
    
    itk_component add source {
        label $itk_component(select).source \
                -text "Source:"
    } {}
    itk_component add linein {
        radiobutton $itk_component(select).linein \
                -variable sourceVar($this) \
                -value "linein" -text "Line In"
    } {}
    itk_component add microphone {
        radiobutton $itk_component(select).microphone \
                -variable sourceVar($this) \
                -value "microphone" -text "Microphone"
    } {}
    itk_component add cd {
        radiobutton $itk_component(select).cd \
                -variable sourceVar($this) \
                -value "cd" -text "CD"
    } {}
    
    itk_component add destination {
        label $itk_component(select).destination \
                -text "Destination:"
    } {}
    itk_component add lineout {
        radiobutton $itk_component(select).lineout \
                -variable destVar($this) \
                -value "lineout" -text "Line Out"
    } {}
    itk_component add speaker {
        radiobutton $itk_component(select).speaker \
                -variable destVar($this) \
                -value "speaker" -text "Speaker"
    } {}
    
    pack $itk_component(source) -side top -anchor w
    pack $itk_component(linein) -side top -anchor w
    pack $itk_component(microphone) -side top -anchor w
    pack $itk_component(cd) -side top -anchor w
    pack $itk_component(destination) -side top -anchor w
    pack $itk_component(lineout) -side top -anchor w
    pack $itk_component(speaker) -side top -anchor w
    
    # Select the default radiobuttons
    $itk_component(linein) select
    $itk_component(lineout) select
    
    # Create a frame so we can have nice reliefs
    itk_component add frame {
        frame $itk_interior.frame \
                -borderwidth 2 \
                -relief sunken
    }
    pack $itk_component(frame)
    
    # Create the bank of sliders for input gain, balance, and
    # output gain
    itk_component add attenuate {
        ::tycho::Slider $itk_interior.attenuate \
                -label "Rec" \
                -from 0 -to 10 \
                -resolution 0.1
    } {
        keep -cursor -background
    }
    pack $itk_component(attenuate) -side left -in $itk_component(frame)
    
    itk_component add balance {
        ::tycho::Slider $itk_interior.balance \
                -label "Bal" \
                -from -10 -to 10 \
                -resolution 0.5
    } {
        keep -cursor -background
    }
    pack $itk_component(balance) -side left -in $itk_component(frame)
    
    itk_component add gain {
        ::tycho::Slider $itk_interior.gain \
                -label "Play" \
                -from 0 -to 10 \
                -resolution 0.1
    } {
        keep -cursor -background
    }
    pack $itk_component(gain) -side left -in $itk_component(frame)
    
    # Set sliders to sensible defaults
    $itk_component(attenuate) set 5
    $itk_component(balance) set 0
    $itk_component(gain) set 5
    
    # Initialise options.
    eval itk_initialize $args
}

######################################################################
#### requestConnect
#
# Connect all controls to the main control panel.
#
body ::tycho::AudioIO::requestConnect {} {
    # Register the controls so stars can access them
    connect attenuate input.volume   10.0
    connect gain      output.volume  10.0
    connect balance   output.balance 5.0 50
}
