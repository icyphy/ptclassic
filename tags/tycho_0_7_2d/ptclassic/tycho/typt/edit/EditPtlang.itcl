# Definition of a Ptlang context-sensitive editor.
#
# @Author: Edward A. Lee
#
# @Version: @(#)EditPtlang.itcl	1.37 01/27/99
#
# @Copyright (c) 1995-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### EditPtlang
# This class defines a widget that provides an emacs-like editor
# specialized for editing ptlang files. Ptlang is the preprocessor
# language used to define stars in Ptolemy. This class colorizes the
# code, identifying comments and ptlang keywords, automatically indents
# the code, and fills blocks of comments.  It is derived from the C++
# editor, and hence inherits all its features.
#
class ::tycho::EditPtlang {
    inherit ::tycho::EditCpp

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    itk_option define -star star Star {}

    ##########################################################################
    ####                         public methods                           ####

    # Generate and display a doc file from the current buffer.
    method gendocBuffer {}

    # Open a help window.
    method help {}

    # Tag and color the code in a region.
    method parseNow {start stop}

    ##########################################################################
    ####                         public procedures                        ####

    # Run ptlang on filename, generate html documentation and display it.
    proc gendoc {filename}

    # Search ptlang file.
    proc getPtlangFile {domain star}

    ###################################################################
    ####                         protected methods                 ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ###################################################################
    ####                          private methods                  ####

    # Initialize the menu bar.
    private method _initializeMenubar {menubar}
}

#######################################################################
#### -star configuration
# The argument to -star should be a two element list that consists
# of a domain name and a star name.  The domain name should be capitalized.
# for example, the following code will open up the SDF Cosine .pl file 
# <tcl><pre>
#  ::tycho::view EditPtlang -star {SDF Cos}
# </pre></tcl>
# If you configure this option after construction, you must invoke
# <code>reload</code> to view the new star.
#
configbody ::tycho::EditPtlang::star {
    global PTOLEMY
    set domainStarList $itk_option(-star)
    if {$domainStarList != {} } {
        set domain [lindex $domainStarList 0]
        set star [lindex $domainStarList 1]
        set file [file join $PTOLEMY src domains [string tolower $domain] \
                stars $domain$star.pl]
        if [file exists $file] {
            configure -file $file
        } else {
            # Ok, the star was not in domain/stars, so look elsewhere
            set file [ glob -nocomplain \
                    [file join $PTOLEMY src domains [string tolower $domain] \
                    * stars $domain$star.pl ]]
            switch [llength $file] {
                0 {error "Could not find a source file for $star in $domain"}
                1 {configure -file $file} 
                default {error "More than one possibility for $star in $domain\n
                $possibleFile"}
            }
        }
    }
}

###################################################################
#
body ::tycho::EditPtlang::constructor {args} {
    eval itk_initialize $args
}

###################################################################
###################################################################
####                     public methods                        ####

###################################################################
#### gendocBuffer
# Generate and display a doc file.
# If the doc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
# NOTE: This is a Unix-specific implementation, since "exec" is used
# to invoke "ptlang".
#
body ::tycho::EditPtlang::gendocBuffer {} {
    return [::tycho::EditProgram::gendocBufferInternal {set docfile $root.htm} \
            {file delete -force "$root.h" "$root.cc" "$root.htm" "$root.t"; \
            exec ptlang $tail}] 

}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditPtlang::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
        [file join $TYCHO typt edit doc usersGuides EditPtlangHelp.html] html
}

#####################################################################
#### parseNow
# Tag and color the Ptlang keywords and then invoke the C++ parser.
#
body ::tycho::EditPtlang::parseNow {start stop} {

    set text $itk_component(text)

    $text tag remove ptkeyword $start $stop

    # Added features: ptlang keyword search.
    # NOTE: This should really just tag the text and then use the
    # EditProgram keyword search mechanism.
    set keywords {ACCESS|ACKNOWLEDGE|ALIAS|ARGLIST|ATTRIB|AUTHOR|BEGIN|BODY|CCINCLUDE|CLASS|CODE|CODEBLOCK|CONNECT|CONSCALLS|CONSTRUCTOR|COPYRIGHT|DEFAULT|DEFSTAR|DEFSTATE|DERIVED|DERIVEDFROM|DESC|DESTRUCTOR|DOMAIN|EXECTIME|EXPLANATION|GALAXY|GO|HEADER|HINCLUDE|HTMLDOC|ID|IDENTIFIER|INHERIT|INITCODE|INLINE|INMULTI|INOUT|INOUTMULTI|INPUT|LINE|LOCATION|METHOD|NAME|NUM|NUMPORTS|OUTMULTI|OUTPUT|PRIVATE|PROTECTED|PUBLIC|PURE|SEEALSO|SETUP|STAR|START|STATIC|STRING|TYPE|VERSION|VIRTUAL|WRAPUP}
    set next 1.0
    while {[set next [$text search -nocase -count cnt\
	    -regexp "($keywords)\[ \t\]*\{" $next $stop]] \
	    != {}} {

	$text tag add ptkeyword $next \
		"$next + $cnt chars -1 chars"

	set next [$text index "$next + $cnt char"]
	# The following appears to be needed to prevent infinite loops.
	if [$text compare $next >= end] {break}
    }

    $text tag configure ptkeyword -foreground \
	    [stylesheet get editcolors ptlangKeywordColor]

    # To get C++ parsing
    EditCpp::parseNow $start $stop
}
###################################################################
###################################################################
####                     public procedures                     ####

###################################################################
#### gendoc
# Generate and display a doc file.
# If the doc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
# NOTE: This is a Unix-specific implementation, since "exec" is used
# to invoke "ptlang".
#
body ::tycho::EditPtlang::gendoc {filename} {
    return [::tycho::EditProgram::gendocFileInternal $filename \
            {set docfile $root.htm} \
            { file delete -force "$root.h" "$root.cc" "$root.htm" "$root.t"; \
            exec ptlang $tail}] 
            
}

#####################################################################
#### getPtlangFile
# Search the absolute path of the ptlang file(s) for given domain and star
# name. "star" can be specified using the pattern syntax of the glob 
# command.
#
body ::tycho::EditPtlang::getPtlangFile {domain star} {
    global PTOLEMY
    global ::env
    return [glob -nocomplain \
            [file join $PTOLEMY src domains [string tolower $domain] \
            stars $domain$star.pl] \
            [file join $PTOLEMY src domains [string tolower $domain] \
            * stars $domain$star.pl] \
            $env(PWD)/$domain$star.pl]
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::EditPtlang::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::EditPtlang::_initializeMenubar $menubar
    }
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### _initializeMenubar
# Initialize the menu bar.  Adds entries specific to this class.
#
body ::tycho::EditPtlang::_initializeMenubar {menubar} {
    global PTOLEMY

    # Delete menus from the parent classes, they don't make sense
    $menubar delete tclinit
    $menubar delete specialsep1
    $menubar delete bodytemplate
    $menubar delete cctemplate
    $menubar delete htemplate
    $menubar delete specialsep3

    # Stuff for the special menu
    $menubar command generatedoc special \
	    -label "Generate doc" -underline 0 \
            -command "$this gendocBuffer"

    # Stuff for the help menu
    # Moved to the special menu -- johnr
    $menubar separator specialsep5 special
    $menubar command ptuniverses special \
	    -label "Ptolemy Universes" -underline 0 \
            -command "::tycho::File::openContext \
	    [file join $PTOLEMY tycho typt lib PtolemyFacets.fst]"

    $menubar command starxref special \
	    -label "Star/Demo Xref" -underline 10 \
            -command "::tycho::File::openContext \
            [file join $PTOLEMY doc star-demo-index index.html]"

    $menubar command ptstars special \
	    -label "Ptolemy stars" -underline 6 \
            -command "::tycho::File::openContext \
            [file join $PTOLEMY src domains starHTML.idx.fst]"
}
