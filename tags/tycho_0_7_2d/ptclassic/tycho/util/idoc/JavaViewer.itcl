##########################################################################
# @Version: @(#)JavaViewer.itcl	1.8 05/22/98
# @Author: Cliff Cordeiro, John Reekie
#
# @Copyright (c) 1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### JavaViewer
#
# The _JavaViewer_ class extends its _ClassViewer_ superclass
# to generate an display Java-specific class viewer.
#
class ::tycho::JavaViewer {
    inherit ::tycho::ClassViewer

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####
    
    #################################################################
    ####                     public methods                      ####

    # Return the filename of the documentation of the given class.
    public method docFile {classname}
    
    ###################################################################
    ####                     protected methods                     ####

    # Display the constructor(s) in the contents widget.
    protected method _displayConstructors {}
    
    # Displayer the destructor(s) in the contents widget.
    protected method _displayDestructors {}

    # Display the proper methods/procedures in the contents widget.
    protected method _displayMethods {protection}

    # Display the related procs in the contents widget.
    protected method _displayExternal {}

    # Display the proper variables in the contents widget.
    protected method _displayVariables {protection}
    
    # Format the explanation of the given item in HTML.
    protected method _formatExpl {class item type {extern 0}}

    # Create the body of an HTML document describing the current class.
    protected method _generateHtmlBody {}

    # Create the internal links for an HTML output of the class model. 
    protected method _generateHtmlContents {}

    # Format the given item as an HTML link
    protected method _hyperLink {class item type {text {}} {itemtype {}}}

    ###################################################################
    ####                      private methods                      ####

    # Remove the argument list from a unique name
    private method _fixName {name {short 1}}

    # Perform an info namespace qualifiers, Java style.
    private method _javaNamespaceQual {className}

    # Perform an info namespace tail, Java style.
    private method _javaNamespaceTail {className}
}

########################################################################
#### constructor
#
body ::tycho::JavaViewer::constructor {args} {
    # Evaluate options
    eval itk_initialize $args
}

#####################################################################
#### docFile
#
# Return the documentation file for a given classname. This method will
# attempt to find the file using a language specific algorithm
# and will return the filename or {} if one isn't found. Java uses
# the CLASSPATH, which may or may not point to the needed file.
#
body ::tycho::JavaViewer::docFile {classname} {
    if {$classname == $_currentclass} {
        return [$this cget -file]
    }
    
    # Shorten the full classname
    set docname [javaNamespaceTail $classname]
    
    # Add the idoc extension
    set docname "$docname.javaclass"

    # Get the CLASSPATH, turn into a list
    set classPath [::tycho::expandPathSplit \
	    [stylesheet get java classPath]]
    set classPathList [split $classPath [::tycho::pathSeparator]]

    # Can't read .zip files (Assume at most one.)
    set zipfile [lsearch -glob $classPathList *.zip]
    if {$zipfile != -1} {
	lreplace $classPathList $zipfile $zipfile                
    }

    # Add tycho java directories, which may not be in the classPath
    # NOTE: let's not do this...

    foreach dir $classPathList {
	set findfile [::tycho::expandPath \
		[file join $dir doc codeDoc $docname]]
	set docfile [glob -nocomplain $findfile]
	if {$docfile != {}} {
	    break
	}
    }
    
    # Last, check java source docs. FIXME: Where will they go?

    return "$docfile"
}

    ###################################################################
    ###################################################################
    ####                     protected methods                     ####

#####################################################################
#### _displayConstructors
# Display the constructor(s) in the contents widget.
#
body ::tycho::JavaViewer::_displayConstructors {} {
    set classModel $_classmodels($_currentclass)

    set subnames {}
    foreach constructor [$classModel match constructor] {
	# put label into contents widget
	$itk_component(contents) appendlabel $constructor\c \
		-text [_fixName $constructor 0] \
		-font [$this cget -bodyfont] \
		-fg [$this cget -publiccolor]
	# setup bindings on <Enter> and <B1-Click>
	_bindDesc $_currentclass constructor $constructor $constructor\c
	_bindExpl $_currentclass constructor $constructor $constructor\c
	lappend subnames $constructor\c
    }
    
    # No inherited (overloading) constructors
    
    # insert panel if a constructor found
    if {$subnames != {}} {
	set subnames [lsort $subnames]
	$itk_component(contents) append constructor\c "$subnames" \
		-text "Constructors" \
		-font [$this cget -headfont] \
		-foreground [$this cget -publiccolor]
    }
}

#####################################################################
#### _displayDestructors
# Display the destructor(s) in the contents widget.
#
body ::tycho::JavaViewer::_displayDestructors {} {
    set classModel $_classmodels($_currentclass)

    set subnames {}
    foreach Destructor [$classModel match destructor] {
	# put label into contents widget
	$itk_component(contents) appendlabel $destructor\d \
		-text [_fixName $destructor 0] \
		-font [$this cget -bodyfont] \
		-fg [$this cget -publiccolor]
	# setup bindings on <Enter> and <B1-Click>
	_bindDesc $_currentclass destructor $destructor $destructor\d
	_bindExpl $_currentclass destructor $destructor $destructor\d
	lappend subnames $destructor\d
    }
    
    # No inherited (overloading) destructors
    
    # insert panel if a Destructor (finalizer) found
    if {$subnames != {}} {
	set subnames [lsort $subnames]
	$itk_component(contents) append destructor\d "$subnames" \
		-text "Finalizers" \
		-font [$this cget -headfont] \
		-foreground [$this cget -publiccolor]
    }
}

#####################################################################
#### _displayMethods
# Display the methods/procedures of the given protection in the
# contents widget.
#
body ::tycho::JavaViewer::_displayMethods {protection} {
    set classModel $_classmodels($_currentclass)

    # It's convenient to separate static methods from others.
    
    # Instance methods
    set subnames {}
    foreach method [$classModel match method \
	    -protection $protection -scope instance] {
	# put label into contents widget
        regexp {^m:(.*)$} $method _ label
	$itk_component(contents) appendlabel $method\m \
		-text [_fixName $label 0] \
		-font [$this cget -bodyfont] \
		-fg [$this cget -$protection\color]
	# setup bindings on <Enter> and <B1-Click>
	_bindDesc $_currentclass method $method $method\m
	_bindExpl $_currentclass method $method $method\m
	lappend subnames $method\m
    }

    # check for inherited methods
    # FIXME: account for package as well
    if {$protection == "public" || $protection == "protected"} {
	foreach class $_heritage {
	    set currLabels [$itk_component(contents) labels]
	    set currentModel $_classmodels($class)
	    foreach method [$currentModel match method \
		    -protection $protection -scope instance] {
		# put label into contents widget if not there
		regexp {^m:(.*)$} $method _ label
		if {[lsearch -exact $currLabels "$method\m"] == -1} {
		    $itk_component(contents) appendlabel $method\m \
			    -text [_fixName $label 0] \
			    -font [$this cget -bodyfont] \
			    -fg [$this cget -inheritcolor]
		    # setup bindings on <Enter> and <B1-Click>
		    _bindDesc $class method $method $method\m
		    _bindExpl $class method $method $method\m
		    lappend subnames $method\m
		}
	    }
	}
    }

    # insert panel if any methods found
    if {$subnames != {}} {
	set temp [::tycho::capitalize $protection]
	set subnames [lsort $subnames]
	$itk_component(contents) append $protection\m "$subnames" \
		-text "$temp Methods" \
		-font [$this cget -headfont] \
		-foreground [$this cget -$protection\color]
    }

    # Static Methods
    set subnames {}
    foreach method [$classModel match method \
	    -protection $protection -scope class] {
	# put label into contents widget
	regexp {^m:(.*)$} $method _ label
	$itk_component(contents) appendlabel $method\p \
		-text [_fixName $label 0] \
		-font [$this cget -bodyfont] \
		-fg [$this cget -$protection\color]
	# setup bindings on <Enter> and <B1-Click>
	_bindDesc $_currentclass method $method $method\p
	_bindExpl $_currentclass method $method $method\p
	lappend subnames $method\p
    }

    # check for inherited procs
    # FIXME: package vis?
    if {$protection == "public" || $protection == "protected"} {
	foreach class $_heritage {
	    set currLabels [$itk_component(contents) labels]
	    set currentModel $_classmodels($class)
	    foreach method [$currentModel match method \
		    -protection $protection -scope class] {
		# put label into contents widget if not there
		regexp {^m:(.*)$} $method _ label
		if {[lsearch -exact $currLabels "$method\p"] == -1} {
		    $itk_component(contents) appendlabel $method\p \
			    -text [_fixName $label 0] \
			    -font [$this cget -bodyfont] \
			    -fg [$this cget -inheritcolor]
		    # setup bindings on <Enter> and <B1-Click>
		    _bindDesc $class method:$method $method\p
		    _bindExpl $class method:$method $method\p
		    lappend subnames $method\p
		}
	    }
	}
    }

    # insert panel if any procs found
    if {$subnames != {}} {
	set temp [::tycho::capitalize $protection]
	set subnames [lsort $subnames]
	$itk_component(contents) append $protection\p "$subnames" \
		-text "$temp Static Methods" \
		-font [$this cget -headfont] \
		-foreground [$this cget -$protection\color]
    }   
}

#####################################################################
#### _displayVariables
# Display the variables of the given protection in the contents
# widget.
#
body ::tycho::JavaViewer::_displayVariables {protection} {
    set classModel $_classmodels($_currentclass)

    # It's convenient to separate static variables from others
    
    # Instance variables
    set subnames {}
    foreach variable [$classModel match variable \
	    -protection $protection -scope instance] {
	# put label into contents widget   
        regexp {^v:(.*)$} $variable _ label
	$itk_component(contents) appendlabel $variable\v \
		-text $label \
		-font [$this cget -bodyfont] \
		-fg [$this cget -$protection\color]
	# setup bindings on <Enter> and <B1-Click>
	_bindDesc $_currentclass variable $variable $variable\v
	_bindExpl $_currentclass variable $variable $variable\v
	lappend subnames $variable\v
    }

    # check for inherited instance variables
    # FIXME: need to check for inherited package variables as well
    if {$protection == "public" || $protection == "protected"} {
	foreach class $_heritage {
	    set currLabels [$itk_component(contents) labels]
	    set currentModel $_classmodels($class)
	    foreach variable [$currentModel variables \
		    -protection $protection -scope instance] {
		# put label into contents widget if not there
		regexp {^v:(.*)$} $variable _ label
		if {[lsearch -exact $currLabels "$variable\v"] == -1} {
		    $itk_component(contents) appendlabel $variable\v \
			    -text $label \
			    -font [$this cget -bodyfont] \
			    -fg [$this cget -inheritcolor]
		    # setup bindings on <Enter> and <B1-Click>
		    _bindDesc $class variable $variable $variable\v
		    _bindExpl $class variable $variable $variable\v
		    lappend subnames $variable\v
		}
	    }
	}
    }

    # insert panel if any instance variables found
    if {$subnames != {}} {
	set subnames [lsort $subnames]
	set temp [::tycho::capitalize $protection]
	$itk_component(contents) append $protection\v "$subnames" \
		-text "$temp Variables" \
		-font [$this cget -headfont] \
		-foreground [$this cget -$protection\color]
    }

    # Static variables
    set subnames {}
    foreach variable [$classModel match variable \
	    -protection $protection -scope class] {
	# put label into contents widget
	regexp {^v:(.*)$} $variable _ label
	$itk_component(contents) appendlabel $variable\v \
		-text $label \
		-font [$this cget -bodyfont] \
		-fg [$this cget -optioncolor]
	# setup bindings on <Enter> and <B1-Click>
	_bindDesc $_currentclass variable $variable $variable\v
	_bindExpl $_currentclass variable $variable $variable\v
	lappend subnames $variable\v
    }
    
    # Check for inherited static variables
    # FIXME: need to check for inherited package variables as well
    if {$protection == "public" || $protection == "protected"} {
	foreach class $_heritage {
	    set currLabels [$itk_component(contents) labels]
	    set currentModel $_classmodels($class)
	    foreach variable [$currentModel match variable \
		    -protection $protection -scope class] {
		# put label into contents widget if not there
		regexp {^v:(.*)$} $variable _ label
		if {[lsearch -exact $currLabels "$variable\v"] == -1} {
		    $itk_component(contents) appendlabel $variable\v \
			    -text $label \
			    -font [$this cget -bodyfont] \
			    -fg [$this cget -inheritcolor]
		    # setup bindings on <Enter> and <B1-Click>
		    _bindDesc $class variable $variable $variable\v
		    _bindExpl $class variable $variable $variable\v
		    lappend subnames $variable\v
		}
	    }
	}
    }
    
    # insert panel if any static variables found
    if {$subnames != {}} {
	set subnames [lsort $subnames]
	set temp [::tycho::capitalize $protection] 
	$itk_component(contents) append $protection\i "$subnames" \
		-text "Static $temp Variables" \
		-font [$this cget -headfont] \
		-foreground [$this cget -optioncolor]
    }            
}

#####################################################################
#### _formatExpl
# Format the explanation of the given item in HTML. This is usually
# bound to a button 1 click on an item in the contents widget.
# An item may not have an explanation, but _must_ have a description.
# 
# If extern is set (it's to be externally viewed), follow the Tydoc
# style of formatting. If unset, follow the JavaViewer style.
#
body ::tycho::JavaViewer::_formatExpl {class item type {extern 0}} {
    set classModel $_classmodels($class)

    set expl [$classModel attrget $item -explanation]
    if { $expl == "" } {
        set expl [$classModel attrget $item -description]
    }
    
    set other {}
    set exceptions {}

    set label $item
    if {$type == "method" || $type == "constructor" \
	    || $type == "destructor"} {

        if {$type == "method" } {
            regexp {^m:(.*)$} $item _ label
        }
	# Get method parameters and their types
	set arglist "("
	foreach arg [$classModel match argument $item] {
	    set argtype [$classModel attrget [concat $item $arg] -type]
	    append arglist $argtype " " $arg ", "
	}
	# Remove extra comma
	set other [string trimright $arglist " ,"])
	
	# Get exceptions
	set exceptions [$classModel attrget $item -exceptions]
	
	# Format exceptions
	if {$exceptions != {}} {
	    set temp ""
	    append temp "throws "
	    foreach exception $exceptions {
		append temp "$exception, "
	    }
	    set exceptions [string trimright $temp ", "]
	}
    } elseif {$type == "variable"} {
        regexp {^v:(.*)$} $item _ label
	
	# Get the default value
	set default [$classModel attrget $item -default]
	if {$default != {}} {
	    set other "= $default"
	}
    }
    
    set shortname [_fixName $item]
    set modifiers [$classModel attrget $item -modifiers]
    # Constructors don't have an explicit type
    if {$type != "constructor"} {
        # Remove tag to make item names unique
        if {$type == "method"} {
            regexp {^m:(.*)$} $item _ shortname
        } elseif {$type == "variable"} {
            regexp {^v:(.*)$} $item _ shortname
        } else {
            set shortname $item
        }
	# Remove signature portion of item name
	set shortname [_fixName $shortname]
	set itemtype [$classModel attrget $item -type]
    } {
	set shortname "$_currentclass"
	set itemtype ""
    }

    # Create hyperlink to source
    set shortname [_hyperLink $class $item $type $shortname $itemtype]
    
    # Format HTML
    if {$modifiers != {} || $itemtype != {}} {
	if {$extern} {
	    set html "<dt><code>$modifiers $itemtype $shortname"
	} else {
	    set html "$modifiers $itemtype <b>$shortname</b> "
	}
    } {
	if {$extern} {
	    set html "<dt><code>$shortname"
	} else {
	    set html "<b>$shortname</b> "
	}
    }
    
    if {$extern} {
	append html "$other $exceptions</code>\
		\n<dd>$expl"
    } else {
	append html "<i>$other</i> $exceptions<p> $expl"            
    }

    # Add footer for inherited items
    if {$class != $_currentclass && $class != "related"} {
	append html "<br><br><br><hr>\
		<a href=\"[docFile $class]\">$class</a>"
    }

    return $html
}

#####################################################################
#### _generateHtmlContents
# Create the internal links for an HTML output of the class model. 
# If verbose is unset, only output constructors and destructors if 
# they have a non-blank description, and only do not output private
# entities. Verbose outputs everything.
#
body ::tycho::JavaViewer::_generateHtmlContents {} {
    set classModel $_classmodels($_currentclass)
    set verbose $itk_option(-verbose)
    
    # Remove "private" from the protection list if non-verbose
    if {$verbose} {
        set tempprotect $_protections
    } else {
        set tempprotect [lreplace $_protections end end]
    }
        
    set html "<HR>"
    set extends [$classModel cget -inherits]
    if {$extends != {}} {
	append html "Extends: "
	append html "<a href=\"[::tycho::relativePath\
		[file dirname [docFile $_currentclass]]\
		[docFile $extends]]\">"
	append html "<code>$extends</code></a> -\n"
    }
    
    set implements [$classModel cget -implements]
    if {$implements != {}} {
	append html "Implements: "
	foreach parent $implements {
	    append html "<a href=\"[::tycho::relativePath\
		    [file dirname [docFile $_currentclass]]\
		    [docFile $parent]]\">"
	    append html "<code>$parent</code></a> -\n"
	}
    }
    append html "<a href=\"[$classModel cget -sourcefile]\">Source\
	    File</a> -\n"
    append html "Contents: "
    
    set of_class "of $_currentclass class"
    
    # Check for constructors
    if {[$classModel match constructor] != {}} {
	append html "<a href=\"#constructor $of_class\">constructor</a>\
		-\n"
    }
    
    # Check for destructor
    set destructor [$classModel match destructor]
    if {$destructor != {}} {
	if {$verbose || [$classModel attrget \
		destructor:$destructor -description] != { }} {
	    append html "<a href=\"#finalizer $of_class\"\
		    >finalizer</a> -\n"
	}
    }
    
    # Check for methods/procs/variables/commons by protection
    foreach protection $tempprotect {
	# Check for methods
	if {[$classModel match method -protection $protection \
		-scope instance] != {}} {
	    append html "<a href=\"#$protection methods\
		    $of_class\">$protection methods</a> -\n"
	}
	# Check for static methods
	if {[$classModel match method -protection $protection \
		-scope class] != {}} {
	    append html "<a href=\"#$protection static methods\
		    $of_class\">$protection static methods</a> -\n"
	}
	# Check for variables
	if {[$classModel match variable -protection $protection \
		-scope instance] != {}} {
	    append html "<a href=\"#$protection variables\
		    $of_class\">$protection variables</a> -\n"
	}
	# Check for static variables
	if {[$classModel match variable -protection $protection \
		-scope class] != {}} {
	    append html "<a href=\"#$protection static variables\
		    $of_class\">$protection static variables</a> -\n"
	}
    }
    set html "[string trimright $html "- \n"]\n<HR>\n"      
    
    return $html
}

#####################################################################
#### _generateHtmlBody
# Create the body of an HTML document describing the current class.
# Similar to _display{} >
#
# If verbose is unset, only output Constructors and Destructors if 
# they have a non-blank description, and only do not output private
# entities. Verbose outputs everything.
#
# We could pull this information from the contents
# widget, however, we might have to reload if it contains inherited data,
# which we do not document in the HTML (yet). 
#
# It may be desirable to generate "flattened" documentation, listing all
# methods/variables available to a class. This is a FIXME for future versions.
#
body ::tycho::JavaViewer::_generateHtmlBody {} {
    set classModel $_classmodels($_currentclass)
    set verbose $itk_option(-verbose)

    # Remove "private" from the protection list if non-verbose
    if {$verbose} {
        set tempprotect $_protections
    } else {
        set tempprotect [lreplace $_protections end end]
    }
    
    set html [$classModel cget -explanation]
    # Remove footer
    regexp {^(.*<hr>)(<br>[^:]+:.*)$} $html dmy html footer
    
    # For anchors i.e: constructor of String class
    set of_class "of $_currentclass class"
    # For anchors i.e.: clear method of java.lang.String class
    set of_lclass "of\
	    [$classModel cget -package].[$classModel\
	    cget -classname] class"

    # Check for constructors
    set constructors [$classModel match constructor]
    if {$constructors != {}} {
	append html "<h2><a name=\"constructor $of_class\"\
		>Constructor</a></h2>\n<dl>"
	foreach constructor $constructors {
	    append html "<a name = \"[_fixName $constructor 0]\
		    $of_lclass\"></a>\n"
	    append html "[_formatExpl $_currentclass\
		    $constructor constructor 1]\n"
	}
	append html "</dl>\n"
    }
    
    # Check for destructors
    set destructors [$classModel match destructor]
    if {$destructor != {}} {
	if {$verbose || [$classModel attrget \
		destructor:$destructor -description] != { }} {
	    append html "<h2><a name=\"finalizer $of_class\"\
		    >Finalizer</a></h2><dl>"
	    append html "<a name = \"finalizer $of_lclass\"></a>\n"
	    append html "[_formatExpl $_currentclass\
		    $destructor destructor 1]\n"
	    append html "</dl>\n"
	}
    }
    
    # Check for methods/variables by protection
    foreach protection $tempprotect {
	set Protection [::tycho::capitalize $protection]
	set temp {}
	
	# Check for methods
	set methods [$classModel match method -protection $protection \
		-scope instance] 
	if {$methods != {}} {
	    append temp "<h3><a name=\"$protection methods\
		    $of_class\">$Protection Methods</a></h3><dl>"
	    foreach method $methods {
		append temp "<a name = \"[_fixName $method 0]\
			method $of_lclass\"></a>\n"
		append temp "[_formatExpl $_currentclass $method method 1]\n"
	    }
	    append temp "</dl>\n"
	}

	# Check for static methods
	set smethods [$classModel match method -protection $protection \
		-scope class]
	if {$smethods != {}} {
	    append temp "<h3><a name=\"$protection static methods\
		    $of_class\">$Protection Static Methods</a></h3><dl>"
	    foreach smethod $smethods {
		append temp "<a name = \"[_fixName $smethod 0]\
			static method $of_lclass\"></a>\n"
		append temp "[_formatExpl $_currentclass \
			$smethod method 1]\n"
	    }
	    append temp "</dl>\n"
	}

	# Check for variables
	set variables [$classModel match variable -protection $protection \
		-scope instance]
	if {$variables != {}} {
	    append temp "<h3><a name=\"$protection variables\
		    $of_class\">$Protection Variables</a></h3><dl>"
	    foreach variable $variables {
		append temp "<a name = \"[_fixName $variable 0]\
			variable $of_lclass\"></a>\n"
		append temp "[_formatExpl $_currentclass $variable\
			variable 1]\n"
	    }
	    append temp "</dl>\n"
	}

	# Check for static variables
	set svariables [$classModel match variable -protection $protection \
		-scope class]
	if {$svariables != {}} {
	    append temp "<h3><a name=\"$protection static variables\
		    $of_class\">$Protection Static Variables</a>\
		    </h3><dl>"
	    foreach svariable $svariables {
		append temp "<a name = \"[_fixName $svariable 0]\
			static variable $of_lclass\"></a>\n"
		append temp "[_formatExpl $_currentclass $svariable\
			variable 1]\n"
	    }
	    append temp "</dl>\n"
	}
	
	if {$temp != {}} {
	    append html "<h2>$Protection constructs</h2>"
	    append html "$temp\n<HR>"
	}
    }                

    append html $footer
    return $html
}

#####################################################################
#### _hyperLink
# Generates a reasonable hyperLink tag to the given item, using the text
# field as the link text, if it's given (otherwise use item). This will
# not work if the source is formatted differently.
#
body ::tycho::JavaViewer::_hyperLink \
	{class item type {text {}} {itemtype {}}} {
    set classModel $_classmodels($class)

    if {$text == {}} {
        set text $item
    }

    # Assume text is the fixed name and item is the full name
    set protection [$classModel attrget $item -protection]
    if {$protection == "package"} {
	set protection {}
    } else {
	set protection "$protection "
    }
    set modifiers [$classModel attrget $item -modifiers]
    if {$modifiers != {}} {
	set modifiers "$modifiers "
    }
    if {$itemtype != {}} {
	set itemtype "$itemtype "
    }

    if {$type != "method" && $type != "constructor"} {
	set text "<a href = \
		\"[$classModel cget \
		-sourcefile]#$protection$modifiers$itemtype$text\"\
		>$text</a>"
    } else {
	# FIXME: Need the arguments to distinguish methods, constructors
	set text "<a href = \
		\"[$classModel cget \
		-sourcefile]#$protection$modifiers$itemtype$text\"\
		>$text</a>"
    }
    return $text
}

    ###################################################################
    ###################################################################
    ####                      private methods                      ####

#####################################################################
#### _fixName
# A ::tycho::Class model requires unique names for its entities (including
# methods). Because some languages support method overloading, their
# method names are stored as their signatures: i.e. name(argtype1, argtype2...).
# 
# When short is set, this method (proc?) removes the trailing portion of 
# the unique name.
#
# If short is unset, it just beautifies the name, changing char<> to char[], 
# (Itcl has problems with string matching brackets.) and foo(int,int) to 
# foo (int, int)
#
body ::tycho::JavaViewer::_fixName {name {short 1}} {
    if {$short} {
        regexp {^(.*)[(]} $name dmy name
        return $name
    } {
        set retval ""
        set index 0
        set length [string length $name]
        for {} {$index < $length} {incr index} {
            set letter [string index $name $index]
            if {$letter == "\<"} {
                append retval \[
            } elseif {$letter == "\>"} {
                append retval \]
            } elseif {$letter == "\("} {
                append retval " ("
            } elseif {$letter == ","} {
                append retval ", "
            } {
                append retval $letter
            }
        }
        return $retval
    }
}

#####################################################################
#### _javaNamespaceQual
# Perform an info namespace qualifiers, Java style
#
body ::tycho::JavaViewer::_javaNamespaceQual {classname} {
    if [regexp {^(.+)[.][^.]+$} $classname dmy classname] {
        return $classname
    } else {
        return {}
    }
}

#####################################################################
#### _javaNamespaceTail
# Perform an info namespace tail, Java style
#
body ::tycho::JavaViewer::_javaNamespaceTail {classname} {
    regexp {[.]([^.]+)$} $classname dmy classname
    return $classname
}

