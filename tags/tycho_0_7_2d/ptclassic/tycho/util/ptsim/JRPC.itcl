# Remote Procedure calls to a remote Tcl Blend process
#
# @Author:
#
# @Version: @(#)JRPC.itcl	1.11 05/29/98
#
# @Copyright (c) 1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################



#######################################################################
#### JRPC
# The procs in this file implement a simple interface between two
# Tcl interpreters running as separate processes on the same machine.
# We use this to communicate between Itcl2.2 and Tcl Blend.  We
# cannot run these in the same process, they require different versions
# of Tcl.
#
# The Tcl Blend child process sources $TYCHO/kernel/JRPCServer.tcl
#
# <p>FIXME: This client/server setup is very insecure.  If the server is
# running on a machine, then anyone on the local machine can connect
# to the server and run arbitrary commands as the user that is running
# the server.
#
# <p>
# Here is an example of how to use the JRPC:
# <tcl><pre>
#     ::tycho::JRPC .jrpc
#     # See what packages are loaded.  java should be one of them. 
#     .jrpc send {package names}
#     # Create a Ptolemy II NamedObj.
#     .jrpc send {set n [java::new pt.kernel.NamedObj "My NamedObj"]}
#     # Get the name of the object we just created.
#     .jrpc send {$n getName}
# </pre></tcl>
#
class ::tycho::JRPC {
    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                       public variables                    ####

    # The port number to use
    public variable portnum 19876

    # Debug flag
    public variable debug 0

    ###################################################################
    ####                         public methods                    ####

    # Send a tcl command to the remote process
    method send {script}

    ###################################################################
    ####                     protected  methods                    ####

    # Print a debug message
    protected method debug {msg} {
        if $debug {
            puts "DEBUG: $msg"
            update
        }
    }
    
    ###################################################################
    ####                   private variables                       ####

    # Socket used to communicate with the Tcl Blend sub process
    private variable _clientSocket

    # Log file that contains the output of the tyjtclsh command
    private variable _logFile

    # Process ID of the Tcl Blend process
    private variable _subprocpid
}

#######################################################################
#### constructor
# Start up a Tcl Blend subprocess
#
body ::tycho::JRPC::constructor {args} {
    global tycho

    debug "Creating JRPC object with $args"
    eval configure $args

    # FIXME: this will probably only work under Unix right now.
    # FIXME: we need to save the output
    set _logFile [::tycho::tmpFileName JRPClog .txt]
    set FIXME___this_disables_debug_output {
        if [catch {set _subprocpid [exec tyjtclsh \
                [file join $tycho util ptsim JRPCServer.tcl] \
                $portnum $debug >& $_logFile &]} err]
    }

    if [catch {set _subprocpid [exec tyjtclsh \
            [file join $tycho util ptsim JRPCServer.tcl] \
            $portnum $debug &]} err] {
        puts "Failed to start up tyjtclsh:\n$err\nLogfile:\n"
	if [file exists $_logFile] {
	    set fd [open $_logFile]
	    while [gets $fd lineIn] {
		puts "$lineIn"
		if [eof $fd] {
		    break
		}
	    }
	    close $fd
	}
        error "Failed to start up tyjtclsh:\n$err"
    }
    debug "Created sub-process $_subprocpid"


    set startupDelay 5
    debug "Waiting $startupDelay seconds for the backend to start..."
    set endTime [expr [clock seconds] + $startupDelay]
    # FIXME: Busy loop.  We don't have a 'sleep' binary under Windoze
    # We could use after, but what we want to do is delay the
    # use of the JRPC send method until after we set _clientSocket
    while {[clock seconds] < $endTime} {}

    debug "About to get socket at port $portnum"    
    if [catch {set _clientSocket [socket localhost $portnum]} err] {
	# Print out the log file FIXME: is this a good idea?
	if [file exists $_logFile] {
	    set fd [open $_logFile]
	    while [puts [gets $fd]] {}
	    close $fd
	}
	error "JRPC: failed to connected to port $portnum, try again.\n\
		error was:\n\
		$err"  
    }
    debug "Got socket $_clientSocket"
    fconfigure $_clientSocket -blocking 0

    debug "Sending \"set env(TCL_CLASSPATH) $tycho/java\""
    send "set env(TCL_CLASSPATH) $tycho/java"
}

#######################################################################
#### destructor
# Close the Tcl Blend subprocess
#
body ::tycho::JRPC::destructor {} {
    catch {send exit}
    catch {close $_clientSocket}
    catch {exec kill $_subprocpid}
    catch {file delete -force $_logFile}
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### send
# Run a remote command on channel.  Wait for the results
#
body ::tycho::JRPC::send {script} {
    if ![info exists _clientSocket] {
	global errorInfo
	error "Can't send commands to sub process, _clientSocket is not set\n\
		$errorInfo"
    }

    puts $_clientSocket $script
    puts $_clientSocket _JRPC_EndCommand_Cookie_
    flush $_clientSocket


    # FIXME: this is a busy loop, and it sucks.
    set rl {}
    while {[llength $rl] < 2} {
	# puts "JRPC send: $rl"
	append rl [read $_clientSocket]
    }
    if {[lindex $rl 0]} {
	global errorInfo
	set errorInfo [lindex $rl 0]
	error [lindex $rl 1]
    } else {
	return [lindex $rl 1]
    }
}
