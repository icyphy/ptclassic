# Base class for dialog boxes in Tycho.
#
# $Id$
# Author: Edward A. Lee
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

#### FIXME - known bugs
#
# - This uses the buttonbox widget by Mark Ulferts.  This widget defers
# mapping the buttons, and thus the size of the window is not known
# until the window has been mapped.  This results in two artifacts:
# the window is not properly centered on the screen by the centerOnScreen
# method, and when using interactive placement, the initial window outline
# is smaller than the window will finally end up being.  We need to
# rewrite this buttonbox megawidget.

##########################################################################
#### DialogWindow class.
# This is a top-level dialog window to which buttons and other widgets
# are added in the derived classes. The message window contains an
# optional bitmap, a message, and a separator. In the derived classes,
# buttons are added below the separator using the addButton method.
# For example,
# <tcl><pre>
# ::tycho::DialogWindow .m -text {A dialog with a single customized pushbutton}
# .m addButton pushme -text {Push Me} -command &#92
#      {::tycho::post thanks; delete object .m}
# wm deiconify .m
# </pre></tcl>
# A childsite is provided for additional widgets below the label and
# above the separator.  It is a frame with name $itk_component(childsite).
# <p>
# Two procedures are provided for conveniently creating both modal and
# non-modal dialogs.  The "newModal" procedure will create the named widget
# and return only after that widget has been destroyed.  It centers the
# widget on the screen and freezes its size.  If the widget sets
# a result in the common variable commandResult, then that result
# will be returned.  Otherwise, an empty string will be returned.
# <p>
# This design is fashioned somewhat after the DialogShell widget by
# by Mark L. Ulferts. A major difference is that instead of mapping
# and unmapping this window, the window is destroyed when it is dismissed.
# <p>
# This window starts out in the withdrawn state. To be visible, it must
# be mapped using the "wm deiconify" command or the "centerOnScreen"
# method. The reason for deferring the mapping is to avoid the visually
# distracting effect of mapping a partial window and then filling it
# in.
#
class ::tycho::DialogWindow {
    inherit ::tycho::TopLevel
    constructor {args} {}

    #####################################################################
    ####                          options                            ####

    #### -bitmap option
    # The bitmap to display to the left of the message.
    # Typical values are "error", "warning", "info", "hourglass", or
    # "questhead".  The default is a null string, which means no bitmap.
    itk_option define -bitmap bitmap Bitmap ""

    #### -height option
    # The height of the embedded HTML in characters.
    itk_option define -height height Height 15

    #### -html option
    # Embedded HTML can be used for the message.
    itk_option define -html html HTML ""

    #### -image option
    # An image to display to the left of the message.
    itk_option define -image image Image ""

    #### -text option
    # The message to display at the top of the widget.
    itk_option define -text text Text ""

    #### -width option
    # The width of the embedded HTML in characters.
    itk_option define -width width Width 50

    #####################################################################
    ####                        public methods                       ####

    #### addButton
    # Add a button to the set of buttons at the bottom.
    method addButton {args}

    #### default
    # Specify the default button.
    method default {id}

    # Execute a command given by an option and set commandResult.
    method execCommand {option args}

    #### invoke
    # Invoke a button.
    method invoke {args}

    #####################################################################
    ####                        public procedures                    ####

    # This procedure simply returns its argument.  Used for default commands.
    proc answer {value} {return $value}

    # Create an object instance and return the name.
    proc new {class instance args} {}

    # Create an object instance and return its result when it is destroyed.
    proc newModal {class instance args} {}

    #####################################################################
    ####                       protected variables                   ####

    # Instances created by newModal should put their return value in this
    # array, with the array index being the name of the instance.
    protected common commandResult
}

#########################################################################
#### -bitmap option configuration
# If a non-null bitmap option is given, insert the bitmap left of the text.
# 
configbody ::tycho::DialogWindow::bitmap {
    if {$itk_option(-bitmap) != ""} {
	if [info exists itk_component(bitmap)] {
	    # Component already exists, so we just configure it.
	    $itk_component(bitmap) configure -bitmap $itk_option(-bitmap)
	} {
	    # Component does not exist, so we create it.
	    itk_component add bitmap {
		label $itk_component(top).bitmap -bitmap $itk_option(-bitmap)
	    } {
		keep -background -cursor -foreground
	    }
	    pack $itk_component(bitmap) -side left
	}
    }
}

#########################################################################
#### -height option configuration
# The desired height of the embedded HTMLText widget in characters
# (note that these are average-sized characters for the text widget,
# which may differ considerably from the size of the characters in
# the HTMLText widget).
# 
configbody ::tycho::DialogWindow::height {
    if {[info exists itk_component(html)] && $itk_option(-height) != {}} {
	$itk_component(html) configure -height $itk_option(-height)
    }
}

#########################################################################
#### -html option configuration
# If a non-null html option is given, take it to be
# HTML source to insert in the message window.
# The -width and -height option of the parent DialogWindow
# specify the size of the resulting HTML window in characters.
# 
configbody ::tycho::DialogWindow::html {
    if {$itk_option(-html) != ""} {
	if [info exists itk_component(html)] {
	    # Component already exists, so we just configure it.
	    $itk_component(html) configure -text $itk_option(-text)
	} {
	    # Create the message window.
	    itk_component add html {
		::tycho::HTMLText $itk_component(top).html \
			-scrollbar 0 \
			-html $itk_option(-html)
	    } {
		keep -background -cursor -textforeground \
			-width -height
	    }
	    pack $itk_component(html) -side right -fill both
	}
	# Since <Return> exits the window, remove it as a binding
	# for the HTMLText widget.
	bind $itk_component(html) <Return> {}
    }
}
    
#########################################################################
#### -image option configuration
# If a non-null image option is given, insert the image left of the text.
# The value of the option is assumed to be the name of an image that has
# been created with the Tk "image create" command.
# 
configbody ::tycho::DialogWindow::image {
    if {$itk_option(-image) != ""} {
	if [info exists itk_component(image)] {
	    # Component already exists, so we just configure it.
	    $itk_component(image) configure -image $itk_option(-image)
	} {
	    # Component does not exist, so we create it.
	    itk_component add image {
		label $itk_component(top).image -image $itk_option(-image)
	    } {
		keep -background -cursor -foreground -background
	    }
	    pack $itk_component(image) -side left
	}
    }
}

#########################################################################
#### -text option configuration
# If a non-null text option is given, insert the text.
# 
configbody ::tycho::DialogWindow::text {
    if {$itk_option(-text) != ""} {
	if [info exists itk_component(message)] {
	    # Component already exists, so we just configure it.
	    $itk_component(message) configure -text $itk_option(-text)
	} {
	    # Create the message window.
	    itk_component add message {
		message $itk_component(top).message \
			-width 15c \
			-justify left \
			-text $itk_option(-text)
	    } {
		keep -background -cursor -foreground -font
	    }
	    pack $itk_component(message) -side right -fill both
	}
    }
}

#########################################################################
#### -width option configuration
# The desired width of the embedded HTMLText widget in characters
# (note that these are average-sized characters for the text widget,
# which may differ considerably from the size of the characters in
# the HTMLText widget).
# 
configbody ::tycho::DialogWindow::width {
    if {[info exists itk_component(html)] && $itk_option(-width) != {}} {
	$itk_component(html) configure -width $itk_option(-width)
    }
}

#####################################################################
#
body ::tycho::DialogWindow::constructor {args} {

    # Create a frame to contain the text of the dialog, but also to
    # have room for a bitmap, inserted in derived classes.
    itk_component add top {
	frame $itk_component(childsite).top -border 10
    } {
	keep -background -cursor
    }
    pack $itk_component(top) -side top
    
    # Create a separator
    itk_component add separator {
	frame $itk_component(childsite).separator \
		-relief sunken \
		-width 3 \
		-height 3 \
		-borderwidth 1.5
    } {
	keep -background
    }
    pack $itk_component(separator) -expand no -fill x \
	    -after $itk_component(top)
    
    # Create a button box.
    # FIXME: We should replace this with a Tycho buttonbox, since the iwidgets
    # button box uses a different policy for mapping to the screen.  The
    # iwidgets policy makes it impossible to center a window on the screen
    # because the size of the window will not actually be known until after
    # the window is mapped.
    itk_component add bbox {
	buttonbox $itk_component(childsite).bbox
    } {
	keep -background -cursor
    }
    pack $itk_component(bbox) -expand no \
	    -after $itk_component(separator)
    
    # FIXME: In itcl2.0-beta, the following silliness appears to be
    # necessary to enable commandResult to be an array.
    set commandResult(junk) ""

    # Process any unevaluated arguments.
    eval itk_initialize $args

    # Most dialog windows don't want the user resizing. Those that
    # do should reverse this.
    freezeWindowSize
}

######################################################################
######################################################################
####                         public methods                       ####

#########################################################################
#### addButton
# Add a button to the button box at the bottom. The arguments are
# options understood by the Tk button command. The most useful options
# are -command, which specified the command to execute, -text, which
# specifies the label in the button, and -width, which specifies the
# desired width of the button.
#
body ::tycho::DialogWindow::addButton {args} {
    eval [concat $itk_component(bbox) add $args]
}

#########################################################################
#### default
# Specify the default button (the one invoked by the Return key).
# This button will have an extra frame around it.  It can be specified
# either by the path name or a unique text(its label) or bitmap name.
#
body ::tycho::DialogWindow::default {id} {
    eval [list $itk_component(bbox) default $id]
    bind $itk_component(hull) <Return> "$this invoke $id; break"
}

######################################################################
#### execCommand
# Execute the command given by an option, if it has been
# defined. The first argument gives the name of the option, including
# the leading minus sign.  For example, several of the derived classes
# have a -okcommand option, which specifies the command to invoke in
# response to pressing the "OK" button.  This command is invoked
# as follows, where $obj is the name of the object:
# <pre>
#    $obj execCommand -okcommand
# </pre>
# The execCommand method sets the commandResult to the value returned
# by the command executed. Any arguments beyond the option name to use
# are passed to the command as arguments. Notice that the option name
# argument begins with a dash "-". The command is executed in the
# global scope. If you need to access a method in a class derived from
# DialogWindow, the following sequence in the constructor will work,
# for example:
# <pre>
#     $obj configure -okcommand "$this mymethod"
#     addButton b -text "Push Me" \
#             -command "$this execCommand -okcommand"
# </pre>
# The "this" variable returns a fully qualified name for the object
# that includes the namespace context.
#
body ::tycho::DialogWindow::execCommand {option args} {
    set retval ""
    global ::errorInfo
    set errorInfo ""
    if {[info exists itk_option($option)] && $itk_option($option) != ""} {

	# Intercept any errors in the command and issue a message.
	if {[catch {set retval \
		[uplevel #0 $itk_option($option) $args]} errcode] != 0} {
	    error "Failed to execute command in the $option option:\n$errcode" \
		    $errorInfo
	}
    }
    set commandResult($prefix) $retval
}

#########################################################################
#### invoke
# Invoke the command associated with a button. If no argument is
# specified, then the current default button is invoked. Otherwise,
# the argument is expected to be a list of buttons to invoke. Each
# button can be specified either by the path name or a unique text
# (its label) or bitmap name.
#
body ::tycho::DialogWindow::invoke {args} {
    eval [list $itk_component(bbox) invoke $args]
}

######################################################################
######################################################################
####                         public procedures                    ####

######################################################################
#### new
# This procedure creates an instance of the named class at the global
# scope with the given instance name. The class must be derived from
# this one (DialogWindow). The window is centered on the screen and its
# size is frozen. The procedure returns immediately, returning the
# instance name. A typical call would be:
# <pre>
#    ::tycho::DialogWindow::new YesNoQuery .y -text "Are you sure"
# </pre>
# The arguments after the class and instance names are just passed
# directly to the constructor of the class.
# The class is assumed to be defined in namespace ::tycho, so the
# string "::tycho::" is prepended to the class name.
# If the option -geometry is given, then it specifies the placement
# of the window.  Otherwise, the window is centered on the screen.
#
body ::tycho::DialogWindow::new {class instance args} {
    # FIXME: Should check to make sure the class is derived from this.
    uplevel #0 ::tycho::$class $instance $args

    # If -geometry option is given, use deiconify.  Otherwise, center.
    if {[lsearch -exact $args {-geometry}] >= 0} {
	update idletasks
	wm deiconify $instance
    } {
	$instance centerOnScreen
    }
    update
    if [info exists commandResult($instance)] {
	unset commandResult($instance)
    }
    return $instance
}

######################################################################
#### newModal
# This procedure creates an instance of the named class at the global
# scope with the given instance name. The class must be derived from
# this one (DialogWindow). The window is centered on the screen and its
# size is frozen. The procedure returns only after the object has been
# destroyed. If the object sets a value in $commandResult($name), then
# that value is returned. Otherwise, a null string is returned. A
# typical call would be:
# <pre>
#    ::tycho::DialogWindow::newModal YesNoQuery .y -text "Are you sure"
# </pre>
# This will return 0 or 1.  The arguments after the class and instance
# names are just passed directly to the constructor of the class.
# The class is assumed to be defined in namespace ::tycho, so the
# string "::tycho::" is prepended to the class name.
# If the option -geometry is given, then it specifies the placement
# of the window.  Otherwise, the window is centered on the screen.
#
body ::tycho::DialogWindow::newModal {class instance args} {
    # FIXME: Should check to make sure the class is derived from this.
    set commandResult($instance) ""
    # If some window has the focus, put the modal dialog in the
    # list of windows before the one with the focus.
    set fc [focus]
    set before {}
    if {$fc != {}} {
	set tl [winfo toplevel $fc]
	if {$tl != {} && \
		[uplevel #0 info objects $tl] != {} && \
		[$tl isa ::tycho::TopLevel]} {
	    set before $tl
	}
    }
    if {$before != {}} {
	uplevel #0 ::tycho::$class $instance -before $before $args
    } {
	uplevel #0 ::tycho::$class $instance $args
    }
    if {[lsearch -exact $args {-geometry}] >= 0} {
	update idletasks
	if [winfo exists $instance] {
	    wm deiconify $instance
	}
    } {
	$instance centerOnScreen
    }
    # The update here must be "update idletask".  Otherwise, it is not
    # safe to invoke a modal dialog from within a method.  A plain "update"
    # would allow the calling object to be destroyed.
    update idletasks
    # Do not continue in this thread until the window is dismissed.
    if [winfo exists $instance] {
	grab set $instance
	# We wait here for the window to be deleted.
	tkwait window $instance

	# Because of the above grab, it is not safe to return before
	# the window actually disappears.  The grab may never be released
	# if an I/O operation is done before the window is released.
	update idletasks
    }
    set returnVal $commandResult($instance)
    unset commandResult($instance)
    return $returnVal
}

