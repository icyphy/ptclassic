# Base class for dialog boxes in Tycho.
#
# $Id$
# Author: Edward A. Lee
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### DialogWindow class.
# This is a top-level dialog window to which buttons and other widgets
# are added in the derived classes. The message window contains an
# optional bitmap, a message, and a separator. In the derived classes,
# buttons are added below the separator using the syntax:
# <pre>
#        addButton name -text "label" -command "command to execute"
# </pre>
# A childsite is provided for additional widgets below the label and
# above the separator.  It is a frame with name $itk_component(childsite).
#
# Two procedures are provided for conveniently creating both modal and
# non-modal dialogs.  The "newModal" procedure will create the named widget
# and return only after that widget has been destroyed.  It centers the
# widget on the screen and freezes its size.  If the widget sets
# a result in the common variable commandResult, then that result
# will be returned.  Otherwise, an empty string will be returned.
#
# This design is fashioned somewhat after the DialogShell widget by
# by Mark L. Ulferts. A major difference is that instead of mapping
# and unmapping this window, the window is destroyed when it is dismissed.
#
# This window starts out in the withdrawn state. To be visible, it must
# be mapped using the "wm deiconify" command or the "centerOnScreen"
# method. The reason for deferring the mapping is to avoid the visually
# distracting effect of mapping a partial window and then filling it
# in.
#
class tycho::DialogWindow {
    inherit TopLevel
    constructor {args} {}

    #### bitmap option
    # The bitmap to display to the left of the message.
    # Typical values are "error", "warning", "info", "hourglass", or
    # "questhead".  The default is a null string, which means no bitmap.
    itk_option define -bitmap bitmap Bitmap ""

    #### title option
    # The title for the window.
    itk_option define -title title Title "Tycho"

    #### addButton
    # Add a button to the set of buttons at the bottom.
    method addButton {args} {}

    #### default
    # Specify the default button.
    method default {id} {}

    #### invoke
    # Invoke a button.
    method invoke {args} {}

    # Create an object instance and return the name.
    proc new {class instance args} {}

    # Create an object instance and return its result when it is destroyed.
    proc newModal {class instance args} {}

    # Execute a command given by an option and set commandResult.
    protected method execCommand {option args} {}

    # This procedure simply returns its argument.  Used for default commands.
    proc answer {value} {return $value}

    # Instances created by newModal should put their return value in this
    # array, with the array index being the name of the instance.
    protected common commandResult
}

#####################################################################
#
body tycho::DialogWindow::constructor {args} {
    #
    # Create a frame to contain the text of the dialog, but also to
    # have room for a bitmap, inserted in derived classes.
    #
    itk_component add top {
	frame $itk_interior.top -bd 10
    } {
	keep -background -cursor
    }
    pack $itk_component(top) -fill both -expand yes
    
    #
    # Create a frame to serve as a childsite.
    #
    itk_component add childsite {
	frame $itk_interior.childsite
    } {
	keep -background -cursor
    }
    pack $itk_component(childsite) -fill both -expand yes

    #
    # Create the message window.
    #
    itk_component add message {
	message $itk_interior.top.message \
		-width 15c \
		-justify left
    } {
	keep -background -cursor -foreground -font -text
    }
    pack $itk_component(message) -side left -fill both
    
    #
    # Create a separator
    #
    itk_component add separator {
	frame $itk_interior.separator \
		-relief sunken \
		-width 3 \
		-height 3 \
		-borderwidth 1.5
    } {
	keep -background
    }
    pack $itk_component(separator) -expand no -fill x
    
    #
    # Create a button box.
    #
    itk_component add bbox {
	buttonbox $itk_interior.bbox
    } {
	keep -background -cursor
    }
    pack $itk_component(bbox) -expand no
    
    # FIXME:  The following does not work, and the current
    # itk documentation is far too cryptic to figure out why.
    # Add certain options to the option list so that setting
    # them will affect the child widgets.
    # itk_option add bbox.font bbox.background bbox.foreground
    
    # The following silliness appears to be necessary to be sure
    # that the commandResult array exists.
    set commandResult(junk) ""

    # Process any unevaluated arguments.
    eval itk_initialize $args
    eval configure $args
}

#########################################################################
#### title configuration
# Set the window manager title and icon name.
#
configbody tycho::DialogWindow::title {
    wm title $prefix $itk_option(-title)
    wm iconname $prefix $itk_option(-title)
}

#########################################################################
#### bitmap configuration
# If a non-null bitmap option is given, insert the bitmap left of the text.
# 
configbody tycho::DialogWindow::bitmap {
    if {$itk_option(-bitmap) != "" && ![info exists itk_component(bitmap)]} {
	if [info exists itk_component(bitmap)] {
	    # Component already exists, so we just configure it.
	    $itk_component(bitmap) configure -bitmap $itk_option(-bitmap)
	} {
	    # Component does not exist, so we create it.
	    itk_component add bitmap {
		label $itk_component(top).bitmap -bitmap $itk_option(-bitmap)
	    } {
		keep -background -cursor -foreground
	    }
	    pack $itk_component(bitmap) \
		    -side left -before $itk_component(message)
	}
    }
}

#########################################################################
#### title configuration
# 
configbody tycho::DialogWindow::title {
    wm title $prefix $itk_option(-title)
}

#########################################################################
#### addButton
# Add a button to the button box at the bottom. The options are
# -command, which specified the command to execute, and -width,
# which specifies the desired width of the button.
#
body tycho::DialogWindow::addButton {args} {
    eval [concat $itk_component(bbox) add $args]
}

#########################################################################
#### default
# Specify the default button (the one invoked by the Return key).
# This button will have an extra frame around it.  It can be specified
# either by the path name or a unique text or bitmap name.
#
body tycho::DialogWindow::default {id} {
    eval [list $itk_component(bbox) default $id]
    bind $itk_component(hull) <Return> "$prefix invoke $id"
}

#########################################################################
#### invoke
# Invoke the command associated with a button. If no argument is
# specified, then the current default button is invoked. Otherwise,
# the argument is expected to be a list of buttons to invoke. Each
# button can be specified either by the path name or a unique text
# or bitmap name.
#
body tycho::DialogWindow::invoke {args} {
    eval [list $itk_component(bbox) invoke $args]
}

######################################################################
#### execCommand
# Execute the command given by the $option option, if it has been
# defined, and set the commandResult to the value returned by that
# command. Any arguments beyond the option name to use are passed to
# the command as arguments. Notice that normally, the option argument
# begins with a dash "-".  The command is executed in the ::tycho scope.
# If you need to access a method in a class derived from DialogWindow,
# the following sequence in the constructor will work, for example:
# <pre>
#     $this configure -okcommand "[scope $this] mymethod"
#     addButton b -text "Push Me" -command "$this execCommand -okcommand"
# </pre>
# The "scope" command forces "mymethod" to be invoked in the scope
# of class that defining the button.
#
body tycho::DialogWindow::execCommand {option args} {
    set retval ""
    global errorInfo
    set errorInfo ""
    if {[info exists itk_option($option)] && $itk_option($option) != ""} {

	# Intercept any errors in the command and issue a message.
	if {[catch {set retval \
		[namespace tycho \
		[concat $itk_option($option) $args]]} errcode] != 0} {
	    error "Failed to execute command in the $option option:\n$errcode" \
		    $errorInfo
	}
    }
    set commandResult($prefix) $retval
}

######################################################################
#### newModal
# This procedure creates an instance of the named class with the given
# instance name. The class must be derived from this one
# (DialogWindow). The window is centered on the screen and its size
# is frozen. The procedure returns only after the object has been
# destroyed. If the object sets a value in $commandResult($name), then
# that value is returned. Otherwise, a null string is returned. A
# typical call would be:
# <pre>
#    DialogWindow::newModal YesNoQuery .y -text "Are you sure"
# </pre>
# This will return 0 or 1.  The arguments after the class and instance
# names are just passed directly to the constructor of the class.
#
body tycho::DialogWindow::newModal {class instance args} {
    # FIXME: Should check to make sure the class is derived from this.
    set commandResult($instance) ""
    eval $class $instance $args
    $instance centerOnScreen
    $instance freezeWindowSize
    # Do not continue in this thread until the window is dismissed.
    grab set $instance
    tkwait window $instance
    set returnVal $commandResult($instance)
    unset commandResult($instance)
    return $returnVal
}

######################################################################
#### new
# This procedure creates an instance of the named class with the given
# instance name. The class must be derived from this one
# (DialogWindow). The window is centered on the screen and its size
# is frozen. The procedure returns immediately, returning the
# instance name. A typical call would be:
# <pre>
#    DialogWindow::new YesNoQuery .y -text "Are you sure"
# </pre>
# The arguments after the class and instance names are just passed
# directly to the constructor of the class.
#
body tycho::DialogWindow::new {class instance args} {
    # FIXME: Should check to make sure the class is derived from this.
    eval $class $instance $args
    $instance centerOnScreen
    $instance freezeWindowSize
    if [info exists commandResult($instance)] {
	unset commandResult($instance)
    }
    return $instance
}
