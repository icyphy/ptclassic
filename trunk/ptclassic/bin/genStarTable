#! /bin/sh
# Version: @(#)genStarTable	1.10 1/13/96
# Copyright (c) 1990-1996 The Regents of the University of California.
# 	All Rights Reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY

# Author: Christopher Hylands

# This script generates a file that references every star referenced
# in a makefile (normally by the PL_SRCS makefile variable).
#
# usage: genStarTable [-vars makefilevars] [domain1 [domain2]]
# If not specified, makefilevars defaults to "PL_SRCS".  It may specify
# more than one makefile variable.
# thor/stars/make.template uses -vars option
#
# Note that this implementation ignores the optional domain1 domain2 args
#
# If you modify this file, make sure you test it by rebuilding all the
# *stars.c files:
# cd $PTOLEMY/src/domains; rm */stars/*.c */*/stars/*.c
# cd $PTOLEMY; make install

# We need to pass the name of the make program to run to this script
# in case the user is using 'gmake' instead of 'make'
MAKE=$1
shift

# Temporary File to hold the header and parts 1 and 2
hdr=/tmp/genStarTable$$.hdr
out1=/tmp/genStarTable.$$p1
out2=/tmp/genStarTable.$$p2

# Temporary makefile
mymkfile=/tmp/genStarTable.$$.mk

if [ ! -f make.template ]; then
	echo "`basename $0`: ./make.template not present"
	exit 3

fi

# Create the header
cat > $hdr << EOF
/* This file contains a table of the official $1 stars.  Its purpose is
 * to force the linker to retrieve the corresponding stars from their
 * library.
 *
 * DO NOT EDIT THIS FILE!  It is generated automatically from the
 * make.template file's definition of PL_SRCS.
 */

#define STR extern char *

EOF

# Process the -vars option
makevarlist='PL_SRCS'
if [ "$1" = "-vars" ] ; then
    shift; makevarlist=$1; shift
fi

# Create a dummy makefile so we can grab the makefile variables we want
# We could add an echo_pl_srcs rule to common.mk, but then if the user
# wanted to use -vars "FOO", they would have to edit common.mk
# Under DEC alpha OSF1/3.2 awk can't handle more than 99 fields in input,
# so we place each filename on its own line.
echo $makevarlist |
	awk 'BEGIN  { print "include make.template"
				  print "echo_pl_srcs:"
				  # Print a leading tab
				  printf("\t@for file in ");
				}
				{ for(i=1;i<=NF;i++)
					printf("$(%s) ",$i) }
         END    { printf("; \\\n")					
				  printf("\tdo \\\n")
				  printf("\t\techo $$file; \\\n")
				  printf("\tdone\n")
				}' > $mymkfile

# Run make, convert the output into C code
# --no-print-directory is a gnu make specific argument
$MAKE -f $mymkfile --no-print-directory echo_pl_srcs | 
awk ' { nfiles=split($0,files," ")
		for(i=1;i<=nfiles;i++) {

			# Get rid of the trailing .pl or what ever.
			nf=split(files[i],f,".")
			starname=f[1]

			# If the file has multiple . in the name, try reassembly
			for(j=1;j<nf-1;j++)
				starname=starname "." f[i]

			# Print the output to two separate files
			print " STR star_nm_" starname ";" >out1
			print " &star_nm_" starname "," >out2
		}
	  }
	  
END   { # Print out leading and trailing lines
		print "static char** nm_table[] = {" >out1
		print "};" >out2 
	  }' out1=${out1} out2=${out2} -

cat $hdr $out1 $out2

# Really we should use catch here to remove these files on interrupt
rm -f $hdr $out1 $out2 $mymkfile

