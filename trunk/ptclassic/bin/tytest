#! /bin/sh
# Command-line program for the tycho.util.tytest utility \
    exec itkwish "$0" "$@"

# @(#)tytest	1.8 07/21/98
# Author: Christopher Hylands

# Don't show the default top-level
wm iconify .

# Create the tycho namespace
namespace eval ::tycho {}

if [info exist env(PTOLEMY)] {
    set TYCHO $env(PTOLEMY)/tycho
}
 
if [info exist env(TYCHO)] {
    set TYCHO $env(TYCHO)
}

# Set up the auto_path. WHat we do here is simply append
# paths to the auto_path in the order that is likely to
# be most rapid for finding the needed packages. Note that
# it is important to append all possible paths before doing
# a package require, in case this package requires other
# packages.

# Try TYTEST_LIBRARY
if [info exists env(TYTEST_LIBRARY)] {
    if { [lsearch -exact $auto_path $env(TYTEST_LIBRARY)] }  {
	lappend auto_path $env(TYTEST_LIBRARY)
    }
}

# Try TCL_PACKAGES
if [info exists env(TCL_PACKAGES)] {
    if { [lsearch -exact $auto_path $env(TCL_PACKAGES)] == -1 }  {
	lappend auto_path $env(TCL_PACKAGES)
    }
}

# Try TYCHO, or PTOLEMY if there is not TYCHO
if ![info exists env(TYCHO)] {
    if [info exists env(PTOLEMY)] {
	# TYCHO is not set, but PTOLEMY is.
	if [file exists [file join $env(PTOLEMY) tycho]] {
	    set env(TYCHO) [file join $env(PTOLEMY) tycho]
	}
    } 
}
if [info exists env(TYCHO)] {
    if { [lsearch -exact $auto_path $env(TYCHO)] == -1 }  {
	lappend auto_path $env(TYCHO)
    }
}

# Try loading the package. If it doesn't work, print a helpful
# error message and exit
if [catch {package require tycho.util.tytest} err ] {
    puts "Cannot find \"tycho.util.tytest\". You can\n\
	    1. Install tycho.util.tytest in a subdirectory of your \
	    Tcl library\n\
	    2. Install tycho.util.tytest in the directory given by the \
	    TCL_PACKAGES variable.\n\
	    3. Set the TYTEST_LIBRARY variable to point to the \
	    tytest directory\n\
	    4. Set the TYCHO variable to point to your \
	    Tycho installation\n\
	    5. Set the PTOLEMY variable to point to your \
	    Ptolemy installation\n"
    exit
}


# Helpfully, tycho does some really weird things like shutting
# up shop and going home when there are no more top-level
# windows. To prevent this, just load the gui package (on the
# assumption that we are going to require it anyway) and then
# utter the following magic incantation:
package require tycho.kernel.gui
::tycho::TopLevel::exitWhenNoMoreWindows 0

# Source each of the files passed on the command line
# FIXME: Need options?
if { $argv == "" } {
    puts "Usage: tytest <file> <file>..."
    exit
}

set cwd [pwd]
foreach file $argv {
    # Reset the directory in case anyone messes with it
    cd $cwd
	
    # Source the file
    uplevel #0 "source $file"
}

# Done
catch {doneTests}

# Do this, again because Tycho does weird stuff with Tcl
# built-ins
catch {::tclexit}
exit

