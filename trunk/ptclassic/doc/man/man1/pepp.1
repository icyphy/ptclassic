.\" $Id$
.TH pepp 1 "Nov 7 1990" 
.SH NAME
pepp - THOR model to pThor (C++) star converter.

.SH SYNOPSIS
\fB pepp [-vcmr] [-d[#]] [-l[name]] [-model|-monitor|-generator] [-o file|-s] [file]\fR

.SH DESCRIPTION
Pepp is the THOR model to pThor star converter, generating C++ code.
It behaves similar to its predecessor epp (see mkmod(1)). The code it
generates is supposed to be compiled with a C++ compiler (e.g. g++)
and linked in the ptolemy environment as a part of a Thor domain.
.br

This raises certain restrictions about the THOR model C-code. The
C-code has to be written in a way that it can be compiled with an ANSI
C-compiler or a C++-compiler. The problems related to this can mostly
be overcome by rearranging code and/or using conditional compiling
controlled by the macro variable `__cplusplus' which is always defined
by a C++-compiler.

.SH USAGE
Pepp will take the first argument not interpreted as a part of an
option as file name to be read. If there is no file name, pepp will
read from standar in. Pepp will write the result to a file with the
same name as the input file but with suffix .cc.
.br

Pepp is not sensitive to the file suffix of the infile, but if the
infile name has the suffix .c, that part of the name will be ignored
at output file name generation.
.br

If pepp is reading from standard in, the output file will be named
after the model (with suffix .cc). To change the output file name or
prevent file generation, use option `-o' or `-s' (see Options below).
.br

Implicit group usage is supported like for instance:
.nf

	a[] = b[];

will translate to:

	funpack(a, 0, n, fpack(b, 0, n));
.fi

Unlike some epp versions, use of symbols or variables for the indices
and vector lengths are allowed as long as compiler/linker is able to
evaluate the value.

.SH OPTIONS
The following options are supported to modify the normal behaviour of
pepp:
.TP
.B -v:
turn on the verbose mode. Prints information about what's going on
during execution.
.TP
.B -c:
run the input thru the cpp first. Cpp used is `/usr/gnu/lib/gcc-cpp
-CP'.
.TP
.B -m:
don't translate implicit groups to function calls.
.TP
.B -r:
insert line/file references into C++ file from the model file.
.TP
.B -d[#]:
turn on the debug mode. # is an optional integer in range 0-9. Default
is no debug (=-d0). -d (=-d1) gives very verbose information. (It also
turns on options `-vl'). -d2 does the same plus it prevents automaic
removing of files created by the program. -d3 will add messages from
the vector macro translator.
.TP
.B -l[name]:
write messages to a log file. If name is specifyed, write to that
file, otherwise write to `pepp.log'. No whitespace is allowed between
.B `-l'
and the name.
.TP
.B -model|-monitor|-generator
the code generated shall represent a model, monitor or generator
respectively. This option should be used only when pepp can't chose
the right kind of star type, which should be very rare. If used, only
one of the three options above can be used at the same time.
.TP
.B -o file:
write final code to file `file'.
.TP
.B -s:
write final code to standard out. \fB-s\fR overrides \fB-o\fR.
.TP
.B file:
read THOR model definition from
.B file.
If not specifyed, read from standard in.

.SH DIAGNOSTICS
On normal execution a 0 (zero) is returned. On error a nonzero value
is returned and the log file will contain the error messages also sent
to the terminal. Beware to use the debug options since they might
prevent removing temporary files before exiting. Most of the normal
kill signals are cought by pepp so pepp would be able to remove
temporary files used during preprocessing.

.SH BUGS
Most of the bugs are related to the code that is to be converted.
Pepp is a little more pedantic about the model syntax in THOR models
like missing semicolon in signal/group declarations.

.SH "SEE ALSO"
mkmod(1), THOR(1), Ptolemy -- Various papers from Universtiy of
California at Berkeley.

.SH AUTHOR
Pepp was written by Anders Wass, University of California at Berkeley
and Lund University with epp (originally from University of Colorado,
Boulder) as a template.
