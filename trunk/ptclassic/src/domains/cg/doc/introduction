.H1 "Introduction"
.pp
.Id "CG, domain"
The \fBCG\fR domain and derivative domains are used to generate code rather 
than to run simulations. Only the derivative domains are of practical use 
for generating code. The stars in the \fBCG\fR domain itself can be thought 
of as ``comment generators''; they are useful for testing and debugging 
schedulers and for little else. The \fBCG\fR domain is intended as a model 
and a collection of base classes for derivative domains. This section, 
documents the common features and general structure of all code 
generation domains. 
.pp
The design goal of the class hierachy is to save work and to make the 
system more maintainable. The vast majority of the problem of allocating 
memory for buffers, constants, tables, etc that are required in code are 
completely processor-independent; thus these facilities are provided the 
generic classes found in the $PTOLEMY/src/domains/cg/kernel directory.
.pp
.Ir "CG-DDF (Dynamic Dataflow Code Generation)"
.Ir "BDF (Boolean Dataflow, token-flow)"
All the code generation domains that are derived from the \fBCG\fR in this 
release obey \fBSDF\fR semantics and can thus be scheduled at compile time. 
Internally, however, the \fBCG\fR only assumes that stars obey data flow 
semantics. In the future, we will eventually implement two approaches for 
data-dependent execution, \fBCG-DDF\fR, which recognizes and implements certain 
commonly used programming constructs, and BDF ("boolean dataflow" or the 
token-flow model). Even when these are implemented, the vast majority of 
stars in any given application should obey the SDF rules to permit 
efficient multiprocessor code generation.
.pp
.Ir "target, code generation"
A key feature of code generation domains is the notion of a target 
architecture. Every application must have a user-specified target 
architecture, selected from a set of targets supported by the user-selected 
domain. Every target architecture is derived from the base class 
\fBTarget\fR, and controls such operations as scheduling, compiling, 
assembling, and downloading code. Since it controls scheduling, 
multiprocessor architectures can be supported with automated task 
partitioning and synchronization. 
.pp
.Ir "CGStar, class"
.Ir "codeblock"
\fBCGStars\fR, define \fBcodeblocks\fR which are used to specify blocks of 
code in the target language. The codeblocks are pieced together 
\fBCGStar\fR methods thus allowing for conditional code generation. The 
codeblocks are processed and written to \fBtarget code streams\fR, which 
can then be compiled or assembled. 
