defstar {
	name { VarTime }
	domain { CG }
	desc { An abstract baseclass }
	version { @(#)CGVarTime.pl	1.11 10/01/96 }
	author { J. T. Buck }
	copyright {
Copyright (c) 1990-1997 The Regents of the University of California.
All rights reserved.
See the file $PTOLEMY/copyright for copyright notice,
limitation of liability, and disclaimer of warranty provisions.
	}
	location { CG demo library }
	htmldoc {
An abstract baseclass for stars whose execution times can be set, for use in
scheduling experiments.  You cannot create a CGVartime star, only inherit
from it.
	}
	defstate {
		name { runTime }
		type { int }
		default { 1 }
		desc { runtime for this star }
	}
	// make this a pure virtual base class
	constructor {
		noInternalState();
	}
	pure method { name { go }}
	// redefine run to add star full name
	method {
		name { run }
		type { int }
		arglist { "()" }
		code {
			StringList msg = "/* code generated by ";
			msg << fullName() << " */\n";
			addCode(msg);
			return CGStar::run();
		}
	}
	method {
		name { beginLoop }
		type { void }
		arglist { "(int reps)" }
		code {
			StringList msg = "/* beginLoop code for ";
			msg << fullName() << ": " << reps
			    << " iterations */\n";
			addCode(msg);
		}
	}
	method {
		name { endLoop }
		type { void }
		arglist { "()" }
		code {
			StringList msg = "/* endLoop code for ";
			msg << fullName() << " */\n";
			addCode(msg);
		}
	}
		
	execTime {
		return int(runTime);
	}
}
