# Test suite for state commands.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source $TYCHO/kernel/test/testDefs.tcl
} {}

# Uncomment this to get a full report, or set in your Tcl shell window.
# set VERBOSE 1

# Set the following to avoid endless calls to exit.
set reallyExit 0

######################################################################
#### states

test states.1 {check states of a master star} {
    ::pitcl::addUniverse .x SDF
    ::pitcl::states Ramp
} {Ramp.step Ramp.value}

test states.2 {check states of a star instance} {
    ::pitcl::addUniverse .x SDF
    ::pitcl::addBlock .x.f Ramp
    ::pitcl::states .x.f
} {.x.f.step .x.f.value}

test states.3 {check initial state value of a star instance} {
    ::pitcl::stateValue -initial .x.f.value
} {0.0}

test states.4 {check current state value of an uninitialized star instance} {
    ::pitcl::stateValue .x.f.value
} {0.0}

test states.5 {check initial state value of a star master} {
    ::pitcl::stateValue -initial Ramp.value
} {0.0}

test states.6 {check current state value of an uninitialized star master} {
    ::pitcl::stateValue Ramp.value
} {0.0}

test states.7 {change the initial value of a star instance} {
    ::pitcl::setState .x.f.value 2.0
    list [::pitcl::stateValue -initial .x.f.value]
} {2.0}

test states.8 {check that the current value is unchanged} {
    ::pitcl::stateValue .x.f.value
} {0.0}

test states.9 {initialize and check the current value} {
    ::pitcl::initState .x.f.value
    ::pitcl::stateValue .x.f.value
} {2.0}

test states.10 {initialize the block to change the current value} {
    ::pitcl::setState .x.f.value 4.0
    ::pitcl::initBlock .x.f
    ::pitcl::stateValue .x.f.value
} {4.0}

test states.11 {attempt to change the initial value of a star instance} {
    catch {::pitcl::setState Ramp.value 2.0} msg
    list $msg
} [list {The parent block of state Ramp.value is not in an InterpGalaxy.}]

test states.12 {create a new universe state} {
    ::pitcl::addState .x.s FLOAT 1.5
    ::pitcl::stateValue -initial .x.s
} {1.5}

test states.13 {list universe states} {
    ::pitcl::states .x
} {.x.s}

test states.14 {initialize the universe to change the current value} {
    ::pitcl::initBlock .x
    ::pitcl::stateValue .x.s
} {1.5}

doneTests
