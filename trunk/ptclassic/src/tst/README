-*-Mode: text;-*- -[Sun Mar 24 18:43:49 1996 by cxh]-
Version: $Id$

$PTOLEMY/src/tst/README

Overview of the Ptolemy test bed
--------------------------------

There are several different levels of testing that can be done:
1. Run the octtools tests
2. Run all the demos from the graphical interface.
	a) Do we dump core?
	b) Does purify report anything grim?
3. Run most of the demos with out windows.
	a) Do we dump core?
	b) Does purify report anything grim?
4. Compare the output of the demos with the master output.
5. Compare the output with the architecture dependent output.


1. Run the octtools tests
-------------------------
	Some of the octtools subdirectories have tests.  The tests are
	not very well documented, but if you are doing a port to a new
	architecture, it is worth running them.

	Here's how:
	1. Build the octtools libraries:
		cd $PTOLEMY; make install_octtools
	2. Run the tests
		cd $PTOLEMY/obj.$PTARCH/octtools; make tests

2. Run all the demos from the graphical interface.
--------------------------------------------------
	This test is run by hand, and is not directly part of the
	Ptolemy test bed.  One trick is to run a script that kills any
	windows that are brought up.  $PTOLEMY/src/tst/killpxgraph
	will run ps and kill pxgraph, xedit and xv processes that
	start up.

	Here's the general idea:
	1. Start up killpxgraph:
		$PTOLEMY/src/tst/kill pxgraph &
	2. Start up pigi, and when then bring up the Ptolemy menu by
	depressing shift and the middle-mouse button.  The select the
	'Exec' sub-menu and the 'Run All Demos' choice.

	All the demos will run.  You will need to kill tk boxes that
	come up.

	a) Do we dump core?
	-------------------
	If you use the default pigiRpc, about the only thing this test
	checks for is whether or not we dump core, or otherwise
	ungraciously exit.

	b) Does purify report anything grim?
	------------------------------------
	If you build a pigiRpc that has purify in it, you can check
	for memory leaks etc:
		cd $PTOLEMY/obj.$PTARCH/pigiRpc; make pigiRpc.debug.purify
		cd $PTOLEMY; pigi

	
3. Run most of the demos with out windows.
------------------------------------------
	a) Limitations
	This is similar to doing a run-all-demos as above, but you
	don't need the window system running.  However, not all demos
	are run.  We use Kennard White's oct2ptcl program to translate
	oct facets to ptcl scripts.

	i. We can use the oct2ptcl -t option to skip producing ptcl code
	for any facets that use Tk widgets because to test these, the
	window system must be running, and the user must mouse on the
	tk windows.  Or, we can define TclTk stars that take the same
	parameters that dump their output to files or to stdout.  See
	mdsdf/stars for example code

	ii. oct2ptcl more precisely follows the oct standard than other
	parts of Ptolemy, so oct2ptcl will reject some facets that
	work fine under Ptolemy.  Currently, we run oct2ptcl on
	demo/*.pal palette files.  If a *.pal file has a facet in it
	that oct2ptcl can't handle, then we do not test the entire
	*.pal file.  This should be changed in the future.

	iii. oct2ptcl cannot deal with initializable delays, you
	must compile the universe under Ptolemy and check the output
	in ~/pigiLog.pt

	b) pxgraph
	$PTOLEMY/src/tst/makefile contains rules to run all the tests.
	The basic idea is that we use oct2ptcl to generate ptcl code
	which we run on ptcl.  To graph the output we use a pxgraph
	script rather than the pxgraph binary which brings up windows.
	There are a couple of tricks here:

	i. Don't use $PTOLEMY/bin/ptcl, as it places
	$PTOLEMY/bin.$PTARCH and $PTOLEMY in your path first, thus you
	get the regular pxgraph instead of our pxgraph.  You should
	run $PTOLEMY/bin.$PTARCH/ptcl or
	$PTOLEMY/obj.$PTARCH/ptcl/ptcl.debug.purify 
	
	ii. Set your patch so that you get the right pxgraph:
	set path = ($PTOLEMY/src/tst $path)

	c) Output filenames
	Our script version of pxgraph tries to generate a reasonable
	filename for the data.  If a file names 'pxfilename' is
	present in the current directory, then we read pxfilename in
	and use the contents as part of the output file name.

	We try to grab the title of the graph from the -t option.  We
	substitute in underbars for spaces, so -t "a big graph" would
	become a_big_graph.  Note that other special characters are
	not at this time checked for.

	If a graph consists of multiple data sets spread over multiple
	files, then each file will have a number after it.

	Note that there could be a race condition if two pxgraphs are
	trying to write files at once.  Currently, we test to see if
	the file we want to write exists, and if it does, we don't
	write it.  However, this will not always solve the race
	problem.  One solution would be to use part of the temporary
	filename that pxgraph is called with.  Another would be to
	introduce a 2 second delay between each universe run (oct2ptcl
	would need to be modified).

