
proc trysetstate {star state value} {
    if [catch {statevalue $star $state initial} err] then {
	    puts stdout "Warning: $err"
    } else {
	    setstate $star $state $value
    }
}
proc trytargetparam {param value} {
    if [catch {targetparam $param $value} err] then {
        puts stdout "Warning: $err"
    } else {
        targetparam $param $value
    }
}


if [catch {
if [catch {
if [catch {
reset
newuniverse Kahn74fig2
    domain PN
    target default-PN
    star DelayInt1 DelayInt
	trysetstate DelayInt1 init 0
    star DelayInt2 DelayInt
	trysetstate DelayInt2 init 1
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {A stream of 0's and 1's.}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    star Commutator.input=21 Commutator
	numports Commutator.input=21 input 2
	trysetstate Commutator.input=21 blockSize 1
    star Distributor.output=21 Distributor
	numports Distributor.output=21 output 2
	trysetstate Distributor.output=21 blockSize 1
    node node0
	nodeconnect Commutator.input=21 output node0
	nodeconnect Distributor.output=21 input node0
	nodeconnect TkText.input=11 input#1 node0
    connect DelayInt1 output Commutator.input=21 input#1
    connect DelayInt2 output Commutator.input=21 input#2
    connect Distributor.output=21 output#1 DelayInt1 input
    connect Distributor.output=21 output#2 DelayInt2 input
if [catch {
run 10
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
if [catch {
if [catch {
reset
domain DDF
defgalaxy filter {
    domain DDF
    star Const1 Const
	trysetstate Const1 level 1.0
    star Fork.output=21 Fork
	numports Fork.output=21 output 2
    star BlackHole1 BlackHole
    star Multiple1 Multiple
    star Case.output=21 Case
	numports Case.output=21 output 2
    star Case.output=22 Case
	numports Case.output=22 output 2
    star EndCase.input=21 EndCase
	numports EndCase.input=21 input 2
    connect Fork.output=21 output#1 Case.output=22 control
    connect Case.output=21 output#2 BlackHole1 input
    alias in Case.output=22 input
    alias out Case.output=21 output#1
    connect Case.output=22 output#1 EndCase.input=21 input#1
    connect Fork.output=21 output#2 EndCase.input=21 control
    connect Const1 output Fork.output=21 input *1
    node node7
	nodeconnect Case.output=22 output#2 node7
	nodeconnect Multiple1 top node7
	nodeconnect Case.output=21 input node7
    node node8
	nodeconnect EndCase.input=21 output node8
	nodeconnect Multiple1 bottom node8
	nodeconnect EndCase.input=21 input#2 node8
    connect Multiple1 mult Case.output=21 control
}
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
reset
domain DDF
defgalaxy sift {
    domain DDF
	trytargetparam maxBufferSize 1024
	trytargetparam numOverlapped 1
	trytargetparam schedulePeriod 10000.0
    star Const1 Const
	trysetstate Const1 level 1.0
    star Fork.output=21 Fork
	numports Fork.output=21 output 2
    star Fork.output=22 Fork
	numports Fork.output=22 output 2
    star BlackHole1 BlackHole
    star EndCase.input=21 EndCase
	numports EndCase.input=21 input 2
    star Self1 Self
	trysetstate Self1 recurGal sift
	trysetstate Self1 reinitialize NO
    star Case.output=21 Case
	numports Case.output=21 output 2
    star filter1 filter
    connect Self1 output EndCase.input=21 input#2
    alias output#1 EndCase.input=21 output
    connect Fork.output=21 output#2 EndCase.input=21 control
    connect filter1 out Self1 input
    connect Const1 output Fork.output=21 input *1
    alias input#1 Fork.output=22 input
    connect Case.output=21 output#2 BlackHole1 input
    connect Fork.output=22 output#1 Case.output=21 input
    connect Case.output=21 output#1 EndCase.input=21 input#1
    connect Fork.output=22 output#2 filter1 in
    connect Fork.output=21 output#1 Case.output=21 control
}
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
reset
newuniverse eratosthenes
    domain DDF
    target default-DDF
	trytargetparam maxBufferSize 1024
	trytargetparam schedulePeriod 0.0
	trytargetparam runUntilDeadlock NO
	trytargetparam restructure NO
	trytargetparam useOldScheduler NO
	trytargetparam numOverlapped 1
	trytargetparam logFile {}
    star RampInt1 RampInt
	trysetstate RampInt1 step 1
	trysetstate RampInt1 value 2.0
	pragma eratosthenes RampInt1 firingsPerIteration 0
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {Prime numbers}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
	pragma eratosthenes TkText.input=11 firingsPerIteration 1
    star sift1 sift
    connect RampInt1 output sift1 input#1
    connect sift1 output#1 TkText.input=11 input#1
if [catch {
run 30
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
reset
newuniverse Kahn77fig3-opt
    domain PN
    star RampInt1 RampInt
	trysetstate RampInt1 step 1
	trysetstate RampInt1 value 2
    star Sift1 Sift
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {Prime Numbers}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    connect RampInt1 output Sift1 input
    connect Sift1 output TkText.input=11 input#1
puts "Not running Kahn77fig3-opt, it hangs the sol2 pigi"
#if [catch {
#run 160
#} errMsg] then {
#   puts stderr "Error while running: $errMsg"
#}
#wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
reset
newuniverse Kahn77fig4
    domain PN
    star DelayInt1 DelayInt
	trysetstate DelayInt1 init 1
    star Merge1 Merge
    star GainInt1 GainInt
	trysetstate GainInt1 gain 2
    star Merge2 Merge
    star GainInt2 GainInt
	trysetstate GainInt2 gain 3
    star GainInt3 GainInt
	trysetstate GainInt3 gain 5
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {2^a 3^b 5^c}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    connect Merge1 output DelayInt1 input
    connect Merge2 output Merge1 a
    connect GainInt2 output Merge2 b
    connect GainInt3 output Merge2 a
    connect GainInt1 output Merge1 b
    node node5
	nodeconnect DelayInt1 output node5
	nodeconnect GainInt3 input node5
	nodeconnect GainInt2 input node5
	nodeconnect GainInt1 input node5
	nodeconnect TkText.input=11 input#1 node5
if [catch {
run 20
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
reset
newuniverse Kahn77fig4-opt
    domain PN
    star GainInt1 GainInt
	trysetstate GainInt1 gain 5
    star DelayInt1 DelayInt
	trysetstate DelayInt1 init 5
    star DelayInt2 DelayInt
	trysetstate DelayInt2 init 3
    star GainInt2 GainInt
	trysetstate GainInt2 gain 3
    star DelayInt3 DelayInt
	trysetstate DelayInt3 init 1
    star GainInt3 GainInt
	trysetstate GainInt3 gain 2
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {2^a 3^b 5^c}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    star Merge1 Merge
    star Merge2 Merge
    connect GainInt1 output DelayInt1 input
    connect GainInt2 output Merge1 a
    connect Merge1 output DelayInt2 input
    node node3
	nodeconnect DelayInt1 output node3
	nodeconnect GainInt1 input node3
	nodeconnect Merge1 b node3
    node node4
	nodeconnect DelayInt2 output node4
	nodeconnect GainInt2 input node4
	nodeconnect Merge2 a node4
    connect GainInt3 output Merge2 b
    connect Merge2 output DelayInt3 input
    node node7
	nodeconnect DelayInt3 output node7
	nodeconnect GainInt3 input node7
	nodeconnect TkText.input=11 input#1 node7
if [catch {
run 20
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
if [catch {
reset
newuniverse Parks95fig3.5
    domain PN
    target default-PN
    star Merge1 Merge
    star Fork.output=21 Fork
	numports Fork.output=21 output 2
    star Fork.output=22 Fork
	numports Fork.output=22 output 2
    star DelayInt1 DelayInt
	trysetstate DelayInt1 init 0
    star DelayInt2 DelayInt
	trysetstate DelayInt2 init 0
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {Multiples of 2 and 3}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    star IncrementInt1 IncrementInt
	trysetstate IncrementInt1 increment 2
    star IncrementInt2 IncrementInt
	trysetstate IncrementInt2 increment 3
    connect DelayInt2 output Fork.output=22 input
    connect Fork.output=22 output#2 IncrementInt2 input
    connect IncrementInt2 output DelayInt2 input
    connect DelayInt1 output Fork.output=21 input
    connect Fork.output=21 output#2 IncrementInt1 input
    connect IncrementInt1 output DelayInt1 input
    connect Fork.output=21 output#1 Merge1 a
    connect Fork.output=22 output#1 Merge1 b
    connect Merge1 output TkText.input=11 input#1
if [catch {
run 10
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
reset
newuniverse Parks95fig3.11
    domain PN
    star ModuloInt1 ModuloInt
	trysetstate ModuloInt1 divisor 3
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label {Divisible by 3}
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    star TkText.input=12 TkText
	numports TkText.input=12 input 1
	trysetstate TkText.input=12 label {Not Divisible by 3}
	trysetstate TkText.input=12 wait_between_outputs NO
	trysetstate TkText.input=12 number_of_past_values 100
    star DelayInt1 DelayInt
	trysetstate DelayInt1 init 0
    star Fork.output=21 Fork
	numports Fork.output=21 output 2
    star IncrementInt1 IncrementInt
	trysetstate IncrementInt1 increment 1
    connect Fork.output=21 output#2 IncrementInt1 input
    connect DelayInt1 output Fork.output=21 input
    connect IncrementInt1 output DelayInt1 input
    connect Fork.output=21 output#1 ModuloInt1 input
    connect ModuloInt1 divisible TkText.input=11 input#1
    connect ModuloInt1 notDivisible TkText.input=12 input#1
if [catch {
run 100
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
if [catch {
reset
newuniverse Parks95fig4.1
    domain PN
    star ModuloInt1 ModuloInt
	trysetstate ModuloInt1 divisor 5
    star IncrementInt1 IncrementInt
	trysetstate IncrementInt1 increment 1
    star DelayInt1 DelayInt
	trysetstate DelayInt1 init 0
    star Fork.output=21 Fork
	numports Fork.output=21 output 2
    star Merge1 Merge
    star TkText.input=11 TkText
	numports TkText.input=11 input 1
	trysetstate TkText.input=11 label Merged
	trysetstate TkText.input=11 wait_between_outputs NO
	trysetstate TkText.input=11 number_of_past_values 100
    star TkText.input=12 TkText
	numports TkText.input=12 input 1
	trysetstate TkText.input=12 label {Divisibly by 5}
	trysetstate TkText.input=12 wait_between_outputs NO
	trysetstate TkText.input=12 number_of_past_values 100
    star TkText.input=13 TkText
	numports TkText.input=13 input 1
	trysetstate TkText.input=13 label {Not Divisible by 5}
	trysetstate TkText.input=13 wait_between_outputs NO
	trysetstate TkText.input=13 number_of_past_values 100
    connect IncrementInt1 output DelayInt1 input
    connect Fork.output=21 output#2 IncrementInt1 input
    connect DelayInt1 output Fork.output=21 input
    connect Fork.output=21 output#1 ModuloInt1 input
    connect Merge1 output TkText.input=11 input#1
    node node5
	nodeconnect ModuloInt1 notDivisible node5
	nodeconnect TkText.input=13 input#1 node5
	nodeconnect Merge1 b node5
    node node6
	nodeconnect ModuloInt1 divisible node6
	nodeconnect TkText.input=12 input#1 node6
	nodeconnect Merge1 a node6
if [catch {
run 20
} errMsg] then {
   puts stderr "Error while running: $errMsg"
}
wrapup; flush stdout
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}
} errMsg] then {
     puts stderr "Error while defining: $errMsg"
}

