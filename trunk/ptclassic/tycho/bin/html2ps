#!/bin/sh
# the next line restarts using tclsh \
exec tclsh "$0" "$@"

# Convert html files to PostScript by using netscape
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#
# html2ps uses netscape to convert a tree of html files to one PostScript
# file.  Usage:
# 	html2ps htmlfile PostScriptfile
# For example, the following will read in index.html and produce a
# PostScript file that contains index.html and all the local html files
# referred to by index.html.
# 	html2ps index.html index.ps


# This file can be used as a standalone script, without all of tycho,
# so it includes ::tycho::expandPath and ::tycho::rm

#####################################################################
#### psConcat
# Concatenate a bunch of PostScript files into one file.
# This probably only works with PostScript produced by netscape.
# Typical usage is:
# psConcat out.ps [glob *.html]
#
proc psConcat { outfile files} {
    # Flag that is set to true if we have the header
    set haveHeader 0
    # Page count
    set pageNum 1

    # The idea is that we read in the header of the first file and copy
    # it to the output.  Then we copy the body of the first file,
    # but skip the %%EOF
    # Then, for each successive file, we copy the body of the file
    # and increment the page count
    
    set outfd [open $outfile w]
    foreach infile $files {
        set sawEndProlog 0
        set infd [open $infile r]
        while {![eof $infd]} {
            set line [gets $infd]
            if !$haveHeader {
		# Print out the header
                puts $outfd $line
                if [regexp {%%EndProlog} $line] {
                    set haveHeader 1
                    set sawEndProlog 1
                }
            } elseif [regexp {%%EndProlog} $line] {
                set sawEndProlog 1
            } elseif $sawEndProlog {
                if {[regexp {%%Page} $line ]} {
                    puts $outfd "%%Page: $pageNum $pageNum"
                    incr pageNum
                } elseif {![regexp {%%EOF} $line ]} {
                    puts $outfd $line
                }
            }
        }
        close $infd
    }
    puts $outfd "%%EOF"
    close $outfd
}

########################################################################
#### expandPath
# Expand a filename, returning an absolute filename with the complete path.
# The argument might begin with an environment variable, a
# global Tcl variable, or a reference to a user's home directory. If
# the argument begins with a dollar sign ($), then everything up to
# the first slash is taken to be a variable name.  If an environment
# variable exists with that name, then the dollar sign and the variable
# name are replaced with the value of the environment variable. For
# example, if the value of of the environment variable TYCHO is
# /usr/tools/tycho, then
# <pre>
#     ::tycho::expandPath \$TYCHO/tmp
# </pre>
# returns /usr/tools/tycho/tmp. If there is no such environment
# variable, but a global Tcl variable with the given name exists, then
# the value of that variable is substituted. If no such variable is
# defined as well, then an error is reported. Similarly, "~user/foo"
# will be expanded (on Unix systems) to "/users/user/foo", assuming
# that "user" has his or her home directory at "/users/user". If there
# is no user named "user", or we are not on a Unix system, then an
# error is reported. In all cases, any extra spaces at the beginning or
# the end of the given path are removed. Moreover, filenames are
# normalized before being returned. Symbolic links are followed, as are
# fields in the path like "/../". Thus, any two references to the same
# path should return the same string.
#
# Formerly, this procedure was in File.itcl, but it was moved so that it
# could be used in scripts that use itclsh, which does not have windows.#
#
proc ::tycho::expandPath { path } {
    set path [string trim $path]
    if {[string first \$ $path] == 0} {
        global ::env
        set slash [string first / $path]
        if {$slash > 0} {
            set envvar [string range $path 1 [expr {$slash-1}]]
        } {
            set envvar [string range $path 1 end]
        }
        if [info exists env($envvar)] {
            set envval $env($envvar)
        } elseif [uplevel #0 info exists $envvar] {
            global $envvar
            set envval [set $envvar]
        } else {
            # No such variable.
            error "No such variable: $envvar"
        }
        if {$slash > 0} {
            set path [format "%s%s" $envval [string range $path $slash end]]
        } {
            set path $envval
        }
    } elseif {[string first ~ $path] == 0} {
        if [catch {set path [glob $path]}] {
            # glob failed. Possibly the file does not exist.
            set dir [file dirname $path]
            if [catch {set dir [glob $dir]}] {
                error "Directory does not exist: $dir"
            }
            set tail [file tail $path]
            set path "$dir/$tail"
        }
    }
    # Get a consistent filename using "cd".  Note that this may not work
    # on non-Unix machines.  The catch is in case the directory does not
    # exist.
    catch {
        set savedir [pwd]
        # If the filename itself is a directory, normalize it
        if [file isdirectory $path] {
            cd $path
            set path [pwd]
        } {
            cd [file dirname $path]
            set path [format "%s/%s" [pwd] [file tail $path]]
        }
        cd $savedir
    }
    return $path
}

##############################################################################
#### rm
# Remove a file
# FIXME: In tcl7.6, this should go away
#
proc ::tycho::rm { args } {
    global tcl_platform
    if { $tcl_platform(platform) != "windows" } { 
	# Unix-ism
	eval exec rm $args
    }
}

#####################################################################
#### html2ps
# Use netscape to convert html to PostScript
# Typical Usage: 
# <tcl><pre>
# html2ps [glob $TYCHO/doc/*html]
# </pre></tcl>
#
proc html2ps {filelist} {
    set numfiles [llength $filelist]	
    foreach file $filelist {
	# count down to 0 to give the user something to look at
	puts -nonewline " $numfiles" 
	incr $numfiles -1
	flush stdout

	# If the file starts with 'http', then just open it
	# If the file starts with a slash '/', then prepend file://
	# If the file starts with anything else, then prepend file:///$PWD/
	switch -regexp -- $file \
		^http {set urlfile $file} \
		^/ {set urlfile "file://$file"} \
		default {set urlfile "file://[pwd]/$file"}
	
	# File to save as.  If we don't specify a absolute path,
        # then the ps file will end up in either the the directory where
        # netscape started, or the home directory
        switch -regexp -- $file \
                ^http {set printfile "[file tail $file].ps"} \
                ^/ {set printfile "$file.ps"} \
		default {set printfile "[pwd]/$file.ps"}

        #puts "$urlfile $printfile"
	if [catch {exec netscape -remote "openURL($urlfile)"} errMsg ] {
		puts "\nCall to netscape failed to \nopen `$urlfile',\n\
			 perhaps netscape is not running?:\n $errMsg"
		exit
	}
	if [catch {exec netscape -remote "saveas($printfile,PostScript)"} \
		errMsg] {
		puts "Call to netscape to saveas `$printfile' failed:\n$errMsg"
	}
    }
}

#####################################################################
#### htmlLinks
# Given a html file, return a list of the links
#
proc htmlLinks {htmlfile {depth 0}} { 
    global filesSeen
    
    if {$depth > 100} {
        error "htmlLinks reached a maximum depth of $depth\n\
                filesSeen was: $filesSeen"
    }

    set taglist {}
    # Read in the index file, generate list of links
    set fd [open $htmlfile r]
    while {![eof $fd]} {
        set line [gets $fd]
        # FIXME: this could be fooled if the <A is not on the same line
        # as the HREF.
        if [regexp {<[Aa] [Hh][Rr][Ee][Ff]="([^\"]*)"} $line dummy tag ] {
            switch -regexp -- $tag \
                    {^/} {lappend taglist [::tycho::expandPath $tag]} \
                    {^..} {lappend taglist [::tycho::expandPath [file dirname $htmlfile]/$tag]} \
                    default {lappend taglist [::tycho::expandPath $tag]}
        }
    }
    close $fd
    #puts "$htmlfile: $taglist"
    foreach tag $taglist {
        # Only search tags that we have not seen, are .html files
        # and are not codeDoc files
        if { [lsearch $filesSeen $tag] == -1 && \
                [file extension $tag] == ".html" && \
                [file readable $tag] && \
                ![regexp {/codeDoc/} $tag] \
            } {
            #puts "About to call htmlLinks $tag"
            lappend filesSeen $tag
            incr depth
            htmlLinks $tag $depth
            incr depth -1
        }
    }
    return $taglist
}

#####################################################################
#### htmlDir2ps
# This command is useful for generating PostScript from an html index file.
# Given a .html index file, produce a PostScript file that contains
# PostScript of all of the html files that the index file has links to.
#
# Typical Usage: 
# <tcl><pre>
# htmlDir2ps $TYCHO/doc/index.html index.ps
# </pre></tcl>
#
proc htmlDir2ps {indexfile psfile} {
    global filesSeen
    set filesSeen {}

    puts "About to traverse all local files linked from\n $indexfile"
    puts " and generate $psfile"	
    flush stdout
    update

    cd [file dirname $indexfile]
    htmlLinks $indexfile

    #set filesSeen [linsert $filesSeen 0 $indexfile]
    puts "  Done ([llength $filesSeen] files seen)"
    flush stdout
    update

    set pslist {}
    foreach tag $filesSeen {
        lappend pslist "$tag.ps"
    }

    puts "About to remove old PostScript"
    flush stdout
    update

    eval ::tycho::rm -f $pslist
    
    puts "About to generate PostScript"
    flush stdout
    update
    html2ps $filesSeen

    puts "\nAbout to generate concat PostScript into one file"
    flush stdout
    update
    psConcat $psfile $pslist

    eval ::tycho::rm -f $pslist
}

#####################################################################
#### html2psProcessArgs
# Process argv
#
proc html2psProcessArgs {} {
    global argc argv env
    set error 0
    if {$argc != 2} {
	puts "html2ps: wrong number of arguments"
	set error 1
    } elseif {! ([file readable [lindex $argv 0]] && \
	    ("file" == [file type [lindex $argv 0]]))} {
	puts "mkPtolemyTree: [lindex $argv 0] unreadable"
	set error 1
    }    
    if {$error} {
	puts "Usage: html2ps <html file> <PostScript File to be generated>"
	puts " This script uses netscape to convert an html tree to PostScript"
	puts " All of the local links in the html file are followed,"
	puts " and added to the PostScript file."
	puts " This script is useful for printing of directories that contain"
	puts " multiple html files"
	exit
    }
    htmlDir2ps [lindex $argv 0] [lindex $argv 1]
}

# If we are not in an interactive tclsh, then call processArgs
# By doing this, we make it possible to source this file and then
# call htmlDir2ps by hand for testing
if {$tcl_interactive != 1 } {
	html2psProcessArgs
}



