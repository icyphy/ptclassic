#! /bin/csh -f
# tycho - Ptolemy Tycho Brahe Graphical Interface
#
# Authors: Edward Lee, Christopher Hylands
# Version: $Id$
#
# Copyright (c) 1994-%Q% The Regents of the University of California.
# All rights reserved.
# See the file $PTOLEMY/copyright for copyright notice,
# limitation of liability, and disclaimer of warranty provisions.

set usagestring = "usage: tycho [-debug] [-ptiny] [-tyed] [-bin tychobin] [-bak] [scriptfile]"

if ( ! $?PTOLEMY ) setenv PTOLEMY ~ptolemy

# Set the commonly used environment variables
source $PTOLEMY/bin/ptsetup.csh

set tyed = ($PTOLEMY/tcltk/itcl.$PTARCH/bin/itkwish -f $PTOLEMY/tycho/kernel/Tycho)

switch ($progname) 
	case tycho.ptiny:
		# If 'tycho.ptiny' is a link to this script,
		# then we just use tysh.ptiny
		set progname = tysh.ptiny
		breaksw
	case tyed:
		set prog = ($tyed)
		breaksw
endsw	

if ( ! $?DISPLAY ) then
    echo "${0}: Your DISPLAY environment variable must be set"
    exit 1
endif


# FIXME: Hardwired in tk4.0
# See also $PTOLEMY/src/tycho/kernel/make.template
#	   $PTOLEMY/tycho/kernel/Lib.tcl
setenv TCL_LIBRARY $PTOLEMY/tcltk/tcl/lib/tcl
setenv TK_LIBRARY $PTOLEMY/tcltk/tk/lib/tk


# To get tcl/tk man pages before corresponding unix man pages,
# and to guess about a reasonable manpath if none is set.
if (! $?MANPATH ) then
    setenv MANPATH $PTOLEMY/tcltk/tk/man:$PTOLEMY/tcltk/tcl/man:$PTOLEMY/doc/man:/usr/local/man:/usr/man
else
    setenv MANPATH $PTOLEMY/tcltk/tk/man:$PTOLEMY/tcltk/tcl/man:$PTOLEMY/doc/man:$MANPATH
endif

while ($#argv)
	switch ($argv[1])
		case -help:
			echo "$usagestring"
			echo " -debug         Bring up in debug mode"
			echo " -ptiny         Smaller version, fewer domains"
			echo " -tyed	      Run w/o ptolemy, as an editor"
			echo " -bin tychobin  Run the binary 'tychobin'"
			echo " -bak           Run a .bak binary"
			echo " scriptfile     Exec itcl(?) script"
			exit 0
		case -debug:
			set tychodebug
			breaksw
		case -ptiny:
			set tychoptiny
			breaksw
		case -tyed:
			set prog = ($tyed)
			breaksw
		case -bin:
			set prog = $argv[2]
			shift
			breaksw
		case -bak:
			set tychobak
			breaksw
		case -*:
			echo Bad option: $argv[1]
			echo "$usagestring"
			exit 1
			breaksw
		case *:
			set script=$1
			breaksw
	endsw
	shift
end

# For now, look for the executable in obj.$PTARCH, rather than bin.$ARCH.
set bindir = $PTOLEMY/obj.$PTARCH

if ( ! $?prog ) then
	if ( "$progname" == "tysh.ptiny" || $?tychoptiny ) then
	    set prog = $PTOLEMY/obj.$PTARCH/tycho/kernel/tysh.ptiny
	else
	    set prog = $PTOLEMY/obj.$PTARCH/tycho/kernel/tysh
	endif
	if ( $?tychodebug ) then
	    set prog = $prog.debug
	endif
	if ( $?tychobak ) then
		if ( -d ${PTOLEMY}/lib.${PTARCH}.bak ) then
			if ( $?S_LD_LIB_PATH ) then
				# S_LD_LIB_PATH is set by ptsetup.csh
				# if this script was called and LD_LIBRARY_PATH
				# was not set.  If this was the case, then we
				# setup user to use the backup libraries, if
				# they exist.
				setenv LD_LIBRARY_PATH ${PTOLEMY}/lib.${PTARCH}.bak:/usr/lib:${PTX11DIR}/lib
			else
				# The user set LD_LIBRARY_PATH, so we stick
				# lib.$PTARCH.bak in front anyway, just
				# to be sure that we get good libraries.
				# This might be a mistake, since if
				# LD_LIBRARY_PATH is set, we should assume
				# the user knows what they want to do
				setenv LD_LIBRARY_PATH ${PTOLEMY}/lib.${PTARCH}.bak:${LD_LIBRARY_PATH}
			endif
		else
			echo "Warning: Can't find ${PTOLEMY}/lib.${PTARCH}.bak"
		endif
	    set prog = $prog.bak
	endif
endif

if ( "$1" =~ "-*" ) then
    echo "${0}: Bad option: $1"
    exit 1
endif

# FIXME: Should check starting palette/facet for validity.
# FIXME: Should make the starting facet if needed.

if (! -x $prog[1] ) then
    echo "Program does not exist: $prog"
else
    $prog
endif
