# Definition of a Gantt View
# 
# @Author: Farhana Sheikh
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
# options
#
option add *GanttView.height 600 widgetDefault
option add *GanttView.width 480 widgetDefault

########################################################################
#### GanttView
# This class defines a class for displaying a Gantt View.
# This class is responsible for creating a graphical representation 
# of a schedule.  It uses the abstract data type, GanttVSM, to 
# query important information from the schedule file that has been
# interpreted by the GanttVSM.  The user must provide a .fst file
# if a modified schedule is to be verified, otherwise, the user is
# not allowed to modify the schedule as there is no way to verify
# if the modified schedule will be valid.
#
# FIXME: Fill in the documentation here
#
# A Help menu contains pointers to key Tycho documentation
# <p>
# Here is an example:
# <tcl><pre>
# 
# </pre></tcl>
#
class ::tycho::GanttView {
    inherit ::tycho::SlateView

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    # Specify the DAG file that contains the precedence constraints
    itk_option define -dag dag DAG ""

    # Specify the visualization state machine
    itk_option define -df df DF ""

    ###################################################################
    ####                         public methods                    ####

    # Add Gantt view menus to Displayer
    method addMyMenus {}

    # Draw labels
    method drawLabels {}

    # Draw marker on chart
    method drawMarker {}

    # Draw schedule for one processor
    method drawProcessor {proc}

    # Draw ruler
    method drawRuler {makespan}

    # Get help on using the Gantt Chart
    method help {}

    # Open a schedule file for display
    method open {}

    # Print the Gantt Chart
    method print {}
    
    # Redraw the Gantt Chart
    method redraw {}

    # Save the Gantt Chart to a file
    method save {}

    # Set the zoom factor
    method setZoomFactor {}

    # Update a chart
    method update {}

    # Update Gantt chart parameters
    method updateParams {}

    # Zoom the Gantt Chart
    method zoom {inOrOut}

    ###################################################################
    ####                         protected methods                 ####

    # Draw a box
    protected method drawBox {proc name start end clickable args}

    # Move a box
    protected method moveBox {proc name start end box}

    # Move the marker
    protected method moveMarker {xposition}

    # Our drawing surface
    protected variable slate

    ###################################################################
    ####                         protected variables               ####
    
    # Array for keeping current Gantt Chart data
    protected variable data

    # Array for keeping current Gantt Chart layout information
    protected variable layout

    # Hold the dag file required to verify a modified schedule
    protected variable dagFile ""

    # Handle to our ruler
    protected variable ruler ""

    # strips containing their schedules, indexed by processor number
    protected variable schedStrip

    private variable schedName "No Schedule Identifier"
}

#######################################################################
#### -dag configuration
# Set the name of the dag file that will be used to verify a modified 
# schedule.
#
configbody ::tycho::GanttView::dag {

    set dagFile $itk_option(-dag)

    # if the forest file is null then disable the Edit Menu
    if {$dagFile == ""} {
	# $myDisplayer disableMenu Edit
    }
}

#######################################################################
#### -df configuration
# Set the visualization state machine
#
configbody ::tycho::GanttView::df {

    set myDF $itk_option(-df)
    
    if {$myDF !=""} {
        set data(MKSPAN) [$myDF getMakespan]
        set data(NPROCS) [$myDF getNumProcs]
        set data(HIER) [$myDF create]
	set schedName [$myDF getSchedName]

	# If we happen to have nested schedules, we should find
	# out how many levels of nesting we have
	# FIXME: requires more efficiency
	if {$data(HIER) != {}} {
	    foreach item $data(HIER) {
		if {[regexp "cluster" $item]} {
		    if {[$item getID] == ""} {
			set data(NPROCS) [$item getNumProcs]
			set data(MKSPAN) [$item getMakespan]
		    }
		}
	    }
	}
    }
}

#######################################################################
#### constructor
#
body ::tycho::GanttView::constructor {args} {
 
    # Get a handle to our drawing surface
    set slate $itk_component(slateview)
    
    # Initialize the layout

    # Set the colours
    # FIXME: need a better way to do colours
    set layout(COLORS) \
	    {red darkgreen blue purple maroon gold navyblue violetred}
    
    # Set the padding in cm
    set layout(PADTOP) 2.0
    set layout(PADBOTTOM) 0.5
    set layout(PADLEFT) 2.0
    set layout(PADRIGHT) 1.5
    
    # Ruler layout parameters in cm
    set layout(RBASE) 1.75
    set layout(TICK) 0.35

    # set the font
    set layout(SMFONT) [.tychoFonts findFont {helvetica 10 medium r}]
    
    # Label parameters

    # set schedule id base in cm
    set layout(LBASE) 0.5
    set layout(LOFFSET) 0.25

    # set the x coord of the processor labels in cm
    # The y coord for each processor is calculated based on the size
    # of the drawing surface
    set layout(PLX) 1.0

    # set the maximum height of the processor schedule box in cm
    # if it is too big then it looks ugly
    # also set a minimum since we don't want it to disappear completely
    set layout(MAXHGHT) 2.0
    set layout(MINHGHT) 1.0

    # set the length of spacing between time intervals 
    # on the time line in cm
    set layout(TLENGTH) 0.35
 
    # Now initialize some important data needed to draw the chart

    # set current zoom factor
    set data(ZOOMF) 1

    # set current marker data; initially marker is at time 0
    set data(MTIME) 0

    # marker position is at the most left of the chart in cm
    set data(MPOSN) $layout(PADLEFT)

    # set the length of the schedule to the default value of 1
    set data(MKSPAN) 1

    # set default number of processors
    set data(NPROCS) 1
    
    # set the default list of nested schedules to null
    set data(HIER) {}

    # set display data to an empty list
    set data(DISPLAY) {}

    # Finally add some bindings

    # Redraw the chart upon resizing the window
    ::bind $slate <Configure> "$this redraw"

    # initialize any options 
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
body ::tycho::GanttView::destructor {} {
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### addMyMenus
# Add menus specific to a Gantt chart
#
body ::tycho::GanttView::addMyMenus {} {

    # Add File menu
    $myMenubar addMenu File left {} -underline 0

    # First add commands to the existing File menu which is standard on
    # the displayer
    $myMenubar addMenuItem {Open} File \
	    -command [code "$this open"] \
	    -state normal
 
    $myMenubar addMenuItem {Save} File \
	    -command [code "$this save"] \
	    -state normal 

    $myMenubar addMenuSeparator File

    $myMenubar addMenuItem {Print Chart...} File \
	    -command [code "$this print"] \
	    -state normal 

    $myMenubar addMenuSeparator File

    $myMenubar addMenuItem {Close} File \
	    -command "$this quit" \
	    -state normal 

    # Add the Edit menu
    $myMenubar addMenu {Edit} left {} -underline 0

    # Add Edit menu items
    # FIXME: add these later - see Graphics object
    
    # Add the Zoom menu
    $myMenubar addMenu {Zoom} left {} -underline 0
    
    # Add the Zoom menu items
    $myMenubar addMenuItem {In} Zoom \
	    -command [code "$this zoom in"] \
	    -state normal

    $myMenubar addMenuItem {Out} Zoom \
	    -command [code "$this zoom out"] \
	    -state normal

    $myMenubar addMenuSeparator Zoom

    $myMenubar addMenuItem {Set Zoom Factor...} Zoom \
	    -command [code "$this setZoomFactor"] \
	    -state normal

    # Add legend menu
    $myMenubar addMenu {Legend} left {} -underline 0

    # Add legend menu items
    # FIXME: add these items

    # Add Help menu
    $myMenubar addMenu {Help} right {} -underline 0

    $myMenubar addMenuItem {Gantt Chart Help} Help \
	    -command [code "$this help"] \
	    -state normal
}

#######################################################################
#### drawLabels
# Draw chart labels
#
body ::tycho::GanttView::drawLabels {} {

    # get the height of the slate
    set height [winfo height $slate]

    $slate create Text $layout(PADLEFT)c $layout(LBASE)c \
	    -text $schedName \
	    -anchor nw \
	    -tags label

    # convert top padding into pixels
    set padtop [winfo pixels $slate $layout(PADTOP)c]
    set padding [expr $padtop + [winfo pixels $slate $layout(PADBOTTOM)c]]
   
    # Calculate the y coordinates of the labels depending on 
    # the number of processors and the space available.
    set dheight [expr $height - $padding]
    set pheight [expr $dheight / $data(NPROCS)]

    # check processor height against max and min
    if {$pheight < [winfo pixels $slate $layout(MINHGHT)c]} {
	set pheight [winfo pixels $slate $layout(MINHGHT)c]
    } elseif {$pheight > [winfo pixels $slate $layout(MAXHGHT)c]} {
	set pheight [winfo pixels $slate $layout(MAXHGHT)c]
    }

    # for each processor draw the label
    for {set i 1} {$i <= $data(NPROCS)} {incr i 1} {
	set ypos [expr $padtop + (($i - 1) * $pheight)]
	$slate create Text $layout(PLX)c $ypos \
		-text "P$i" \
		-anchor nw \
		-font $layout(SMFONT) \
		-tags label
    }

}

#######################################################################
#### drawMarker
# Procedure to draw a marker on the chart
#
body ::tycho::GanttView::drawMarker {} {

    # Calculate coordinates for marker that sits on the ruler in cm
    set y(0) [expr $layout(RBASE) - $layout(TICK)]
    set y(1) $y(0)
    set y(2) $layout(RBASE)

    set d [expr ($y(2) - $y(0)) / 2]
    set x(2) $data(MPOSN)
    set x(0) [expr $x(2) - $d]
    set x(1) [expr $x(2) + $d]

    $slate create Polygon $x(0)c $y(0)c $x(1)c $y(1)c $x(2)c $y(2)c \
	    -fill cyan2 \
	    -outline cyan3 \
	    -tags marker

    # write the time on top of the marker
    # $slate create Text $x(2)c [expr $layout(RBASE) - $layout(TICK) \
	    - $layout(LOFFSET)]c \
	    -text [format {%.0f} $data(MTIME)] \
	    -font $layout(SMFONT) \
	    -tags marker

}

#######################################################################
#### drawProcessor
# Procedure to draw schedule for a single processor
#
body ::tycho::GanttView::drawProcessor {proc} {

    # get the width and height of our drawing surface
    set width [winfo width $slate]
    set height [winfo height $slate]
    
    # convert top padding into pixels
    set padtop [winfo pixels $slate $layout(PADTOP)c]
    set padding [expr $padtop + [winfo pixels $slate $layout(PADBOTTOM)c]]
   
    # Calculate the y coordinates of the labels depending on 
    # the number of processors and the space available.
    set dheight [expr $height - $padding]
    set pheight [expr $dheight / $data(NPROCS)]

    # check processor height against max and min
    if {$pheight < [winfo pixels $slate $layout(MINHGHT)c]} {
	set pheight [winfo pixels $slate $layout(MINHGHT)c]
    } elseif {$pheight > [winfo pixels $slate $layout(MAXHGHT)c]} {
	set pheight [winfo pixels $slate $layout(MAXHGHT)c]
    }
   
    # Translate padding, etc. into pixels
    set rpad [winfo pixels $slate $layout(PADRIGHT)c]
    set ledge [winfo pixels $slate $layout(PADLEFT)c]
    
    # Find the display width of the chart
    set dwidth [expr $width - $rpad - $ledge]

    # We don't want to display anything if our display width is
    # less than zero.
    if {$dwidth < 0} {
	return
    }

    # Find the virtual width of the display taking into account zoom factor
    set vwidth [expr $data(ZOOMF) * $dwidth]
    
    # Find the right edge
    set redge [expr $ledge + $vwidth]
    
    # Find label width
    set t [$slate create Text 0 0 -text [format {%.0f} $data(MKSPAN)]]
    set labelwidth [::rectWidth [$slate bbox $t]]
    $slate delete $t

    # Calculate axis increment locations
    set increment [::axisIncrement 0 $data(MKSPAN) $vwidth $labelwidth 10]
    if {$increment < 1} {
	set increment 1
    }
	
    set axisValues [::rangeValues 0 $data(MKSPAN) $increment]
    set axisLocations [::mapRange 0 $data(MKSPAN) $axisValues $ledge $redge]
    
    # Draw the schedule strip
    set schedStrip($proc) [$slate create Strip $ledge \
	    [expr $padtop + (($proc - 1) * $pheight)] \
	    $redge [expr $padtop + ($proc * $pheight)] \
	    -from 0 \
	    -to $data(MKSPAN) \
	    -tags procbox]
    
    # Draw the schedule
    
    if {[lindex $data(DISPLAY) 0] == "cluster"} {
	set name [lindex [lindex $data(DISPLAY) 2] 0]
	set start [lindex [lindex $data(DISPLAY) 2] 1]
	set end [lindex [lindex $data(DISPLAY) 2] 2]
    }
    
    set dlist {}
    set color 0
    if {[lindex $data(DISPLAY) 0] == "proc"} {
	for {set i 2} {$i < [llength $data(DISPLAY)]} {incr i 1} {
	    set name [lindex [lindex $data(DISPLAY) $i] 0]
	    set start [lindex [lindex $data(DISPLAY) $i] 1]
	    set end [lindex [lindex $data(DISPLAY) $i] 2]
	    if {$name == "idle"} {
		lappend dlist [list $name $start $end]
	    } elseif {$name == "send"} {
		lappend dlist [list $name $start $end -fill lightseagreen]
	    } elseif {$name == "receive"} {
		lappend dlist [list $name $start $end -fill lightblue]
	    } else {
		lappend dlist [list $name $start $end -fill \
                        [lindex $layout(COLORS) $color]]
	    }
	    incr color 
	    if {$color == [llength $layout(COLORS)]} {
		set color 0
	    }
	}
	eval $schedStrip($proc) addBoxes $dlist
    }
}

#######################################################################
#### drawRuler
# Procedure to draw ruler on the chart
#
body ::tycho::GanttView::drawRuler {makespan} {

    # Get slate width and height in pixels
    set width [winfo width $slate]
    
    # Translate padding, etc. into pixels
    set rpad [winfo pixels $slate $layout(PADRIGHT)c]
    set ledge [winfo pixels $slate $layout(PADLEFT)c]
    
    # Find the display width of the chart
    set dwidth [expr $width - $rpad - $ledge]

    # We don't want to display anything if our display width is
    # less than zero.
    if {$dwidth < 0} {
	return
    }

    # Find the virtual width of the display taking into account zoom factor
    set vwidth [expr $data(ZOOMF) * $dwidth]
    
    # Find the right edge
    set redge [expr $ledge + $vwidth]

    set ruler [$slate create Axis $ledge \
	    [winfo pixels $slate $layout(RBASE)c] \
	    -from 0.0 \
	    -to $data(MKSPAN) \
	    -length $vwidth \
	    -ticklength [winfo pixels $slate $layout(TLENGTH)c] \
	    -digits 1]
}

#######################################################################
#### help
# Get help on using the Gantt Chart
#
body ::tycho::GanttView::help {} {

    # FIXME: should bring up html window
    ::tycho::inform {
	Gantt Chart Help:
	- The zoom menu lets the you zoom the chart; it will scale the
	  the time axis according to the zoom factor.
	- Click and drag on the chart to  move the cursor
	- Left and right cursor keys move the cursor by one time unit.
	  Shift-Left and shift-right move by ten time units
	- To print, reset the zoom factor to 1 so the entire chart is 
	  displayed.  The processor labels are not printed.
	- Use control-d or Close from the file menu to close the Gantt
	  chart.  It will not be closed by the run control panel.
    }
}

#######################################################################
#### Open
# Open a scheduler file for display
#
body ::tycho::GanttView::open {} {

}

#######################################################################
#### print
# Print the Gantt Chart
#
body ::tycho::GanttView::print {} {

    # Environment variables are available through use of env
    global ::env

    # get printer setting if printer environment variable exists
    if {![info exists env(PRINTER)]} {
	set defaultPrinter "lp"
    } else {
	set defaultPrinter $env(PRINTER)
    }

    # Create a print dialog box
    # Should really be a print dialog box class that we can use 
    # directly; for now stick with this approach.
    set printer [::tycho::DialogWindow::newModal EntryQuery \
	    [::tycho::autoName .printer] \
	    -queries [list [list pr {Printer:} $defaultPrinter {}]] \
	    -entrywidth 10]

    # The above returns a list with the first element as the identifier;
    # so below we get rid of that and extract only the printer name.
    set printer [lindex [lindex $printer 0] 1]

    set OUTPUT [open "|lpr -P$printer" w]
    puts $OUTPUT [$slate postscript \
	    -colormode gray \
	    -pageheight 10i \
	    -pagewidth 8i \
	    -rotate 1]
    close $OUTPUT
}

#######################################################################
#### redraw
# Redraw a Gantt chart.
#
body ::tycho::GanttView::redraw {} {

    # delete objects on the slate
    catch {$slate delete label marker}
   
    # redraw the ruler
    if {$ruler == ""} {
	drawRuler $data(MKSPAN)
	if {$data(HIER) != {}} {
	    set i 1
	    foreach item $data(HIER) {
		if {[regexp "proc" $item]} {
		    set data(DISPLAY) [$item getDisplayData]
		    $this drawProcessor $i
		    incr i
		}
	    }
	}
    } else {
	# Get slate width and height in pixels
	set width [winfo width $slate]
	set height [winfo height $slate]
 
	# convert top padding into pixels
	set padtop [winfo pixels $slate $layout(PADTOP)c]
	set padding [expr $padtop + [winfo pixels $slate $layout(PADBOTTOM)c]]
	
	# Translate padding, etc. into pixels
	set rpad [winfo pixels $slate $layout(PADRIGHT)c]
	set ledge [winfo pixels $slate $layout(PADLEFT)c]
    
	# Calculate the y coordinates of the labels depending on 
	# the number of processors and the space available.
	set dheight [expr $height - $padding]
	set pheight [expr $dheight / $data(NPROCS)]
	
	# check processor height against max and min
	if {$pheight < [winfo pixels $slate $layout(MINHGHT)c]} {
	    set pheight [winfo pixels $slate $layout(MINHGHT)c]
	} elseif {$pheight > [winfo pixels $slate $layout(MAXHGHT)c]} {
	    set pheight [winfo pixels $slate $layout(MAXHGHT)c]
	}
   
 	# Find the display width of the chart
	set dwidth [expr $width - $rpad - $ledge]

	# We don't want to display anything if our display width is
	# less than zero.
	if {$dwidth < 0} {
	    return
	}

	# Find the virtual width of the display taking into account zoom factor
	set vwidth [expr $data(ZOOMF) * $dwidth]
	# Find the right edge
	set redge [expr $ledge + $vwidth]
	
	$ruler configure -length $vwidth

	for {set i 1} {$i <= $data(NPROCS)} {incr i} {
	    $schedStrip($i) coords $ledge \
		    [expr $padtop + (($i - 1) * $pheight)] \
		    $redge [expr $padtop + ($i * $pheight)]
	}
    }

    $this drawMarker
    $this drawLabels
}

#######################################################################
#### save
# Save a Gantt chart to a file.
#
body ::tycho::GanttView::save {} {

    # Create an instance of the file browser class
    set filename [::tycho::DialogWindow::newModal FileBrowser \
	    [::tycho::autoName .fileBrowser] \
	    -text "Save As File:"]

    # Filename cannot be NoName
    if {$filename == {NoName}} {
	error "Cannot use name NoName"
    }

    # If filename is not empty, then save
    if {$filename != {}} {
	
	# Check to see if file already exists
	if {[file exists $filename]} {
	    if [![::tycho::askuser "File \"$filename\" exists. Overwrite?"] {
		error "Did not save file."
	    }
	}

	# Use the GanttDF to interpret the graphical display of schedule
	# to write out the schedule file specified.
    }	
}

#######################################################################
#### setZoomFactor
# Update the zoom factor
#
body ::tycho::GanttView::setZoomFactor {} {

    # Create a dialog box to ask for the zoom factor
    set factor [::tycho::DialogWindow::newModal EntryQuery \
	    [::tycho::autoName .factor] \
	    -queries [list [list factor {Zoom Factor:} \
	    $data(ZOOMF) {}]] \
	    -entrywidth 10]

    set data(ZOOMF) [lindex [lindex $factor 0] 1]
}

#######################################################################
#### update
# Update a chart
#
body ::tycho::GanttView::update {} {

}

#######################################################################
#### zoom
# Zoom a Gantt chart either in or out.
#
body ::tycho::GanttView::zoom {inOrOut} {

    # FIXME: I have doubts about this so come back and check
    # Prevent zooming out if zoom factor is one or below
    if {$inOrOut == "out" && $ganttParams(ZOOMF) <= 1} {
	return
    }
    
    if {$inOrOut == "in"} {
	set scale 2.0
    } else {
	set scale 0.5
    }

    set zoomIndex [expr $scale * $ganttParams(ZOOMF)]
    
    if {$zoomIndex <= 1.0} {
	$myDisplayer disableMenuItem {Out} Zoom
    } else if {$zoomIndex >= 2.0} {
	$myDisplayer enableMenuItem {Out} Zoom
    }

    # Delete the ruler and the stars, update the layout, and 
    # redraw the chart
    $this redraw 

    # Force a redraw to prevent multiple zoom requests
    update idletasks
}

#######################################################################
#### updateParams
# Update Gantt chart parameters
#
body ::tycho::GanttView::updateParams {} {

}

#######################################################################
#### drawBox
# Procedure to draw a box
#
body ::tycho::GanttView::drawBox {proc name start end clickable args} {

}

#######################################################################
#### moveBox
# Procedure to move boxes
#
body ::tycho::GanttView::moveBox {proc name start end box} {

}

#######################################################################
#### moveMarker
# Move marker on the chart
#
body ::tycho::GanttView::moveMarker {xposition} {

}




