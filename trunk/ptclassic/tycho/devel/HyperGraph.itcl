##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### HyperGraph
#
# A _HyperGraph_ has hyper-edges -- edges that connect between
# more than two vertices. Because
# we may wish to use hypergraphs in dataflow and circuit-simulation,
# where edges are connected not just to a vertex but to a "port"
# on the vertex, this class uses the notion of a "key" as
# in <a href="KeyedDigraph.html">KeyedDigraph</a>.
#
# Unlike in the other graph classes, however, it is not
# possible (or, for that matter, terribly useful) to
# identify an edge by the vertices it connects to. The HyperGraph
# therefore has a "hyperedge" as an entity in its own right,
# and a link named "connect," which serves to add a vertex and key
# to the hyperedge. Connects are very simple, and cannot themselves
# have attributes. Various methods provide access to finding the
# vertices connected to a hyperedge and vice versa. 
#
# Note that the hypergraph _is_ directed: if a connection is created
# with <code>connect $vertex $key $edge</code>, then the
# direction is from the vertex into the edge, and if the
# connection is created with <code>connect $edge $vertex $key</code>,
# then the direction is from the edge into the vertex. If
# connections need to be considered to be bi-directional for
# the purposes of the graph traversal algorithms, use two
# "connect" statements.
#
# Here is the example from the <a href="KeyedDigraph.html">KeyedDigraph</a>
# using hyperedges instead of edges:
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::HyperGraph [::tycho::autoName graph]]
#     $graph keyconfigure -tokencount 1 -type input
# </tcl></pre>
#
# Load data into the graph:
# <pre>
#   a---->c--->
#         ^
#   b-----+--->d
# </pre>
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::KeyedDigraph [::tycho::autoName graph]]
#     $graph read string {
#         vertex a {
#             key out -tokencount 2 -type output
#         }
#         vertex b {
#             key out -type output
#         }
#         vertex c {
#             key in-0
#             key in-1
#             key out -type output
#         }
#         vertex d {
#             key in
#         }
#         hyperedge first
#         hyperedge second
#         hyperedge third
#         connect a out first
#         connect first c in-0
#         connect b out second
#         connect second c in-1
#         connect second d in
#         connect c out third
#     }
# </tcl></pre>
#
# Let's just make sure we have what we think we have:
# <pre><tcl>
#     $graph describe
# </tcl></pre>
#
# Get the keys of a vertex:
# <pre><tcl>
#     $graph keys c
# </tcl></pre>
#
# Get the edges coming _in_ to a given key:
# <pre><tcl>
#     $graph edges * c in-0
# </tcl></pre>
#
# Get the edges coming _out_ of a given key:
# <pre><tcl>
#     $graph edges b out *
# </tcl></pre>
#
# Get the vertices and keys connected to an edge:
# <pre><tcl>
#     $graph connected second
# </tcl></pre>
#
# Get the vertices and keys that output from an edge:
# <pre><tcl>
#     $graph connected second out
# </tcl></pre>
#
# Get the vertices and keys connected to a vertex and key:
# <pre><tcl>
#     $graph adjacent b out
# </tcl></pre>
#
# Get the vertices and keys connected to a vertex and key,
# in the "out" direction:
# <pre><tcl>
#     $graph adjacent b out out
# </tcl></pre>
#
class ::tycho::HyperGraph {
    inherit ::tycho::AbstractGraph

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Get the children of a vertex
    method children {vertex}

    # Add a connection
    method connect {vertex key hyperedge}

    # Remove a connect from the graph
    method connectdelete {vertex key hyperedge}

    # Get the hyperedges connected to a vertex and key
    method connectedEdges {vertex key {pattern *}}

    # Get the vertices and keys connected to a hyperedge
    method connectedVertices {hyperedge {vertex *} {key *}}

    # Add a hyperedge and attributes to the graph
    method hyperedge {name args}

    # Return all attributes of a hyperedge
    method hyperedgeattrs {name}

    # Get an attribute or attributes of a hyperedge
    method hyperedgecget {name attribute}

    # Configure the hyperedge with one or more attributes
    method hyperedgeconfigure {name args}

    # Remove a hyperedge from the graph
    method hyperedgedelete {name}

    # Return hyperedges matching a hyperedge name pattern
    method hyperedges {{name *}}

    # Return all attributes of a key
    method keyattrs {vertex key}

    # Get an attribute or attributes of a key
    method keycget {vertex key attribute}

    # Configure the key with one or more attributes
    method keyconfigure {vertex key args}

    # Remove a key from the graph
    method keydelete {vertex key}

    # Add a key and attributes to a vertex
    method keyin {vertex key args}

    # Return keys of a vertex that match a pattern
    method keys {vertex {key *}}

    # Get the "leaves" of the graph
    method leaves {}

    # Get the parents of a vertex
    method parents {vertex}

    # Get the roots of the graph
    method roots {}

    #################################################################
    ####                   protected methods                     ####

    # Connects cannot be nested
    protected method connectin {context vertex key edge args} {
    	_nesterror connect $context [list $vertex $key $edge]
    }

    # Edges cannot be nested
    method hyperedgein {context name args} {
    	_nesterror hyperedge $context $name
    }

    # Keys cannot be created at the top level
    method key {key args} {
    	_toplevelerror key $context [list $vertex $key]
	}
}

########################################################################
#### constructor
#
body ::tycho::HyperGraph::constructor {args} {
	# Key names are a list 
	configure -separator " "
	
    # Define the "hyperedge" entity: no value, no default attributes
    defineLink hyperedge \
    	-valued 0

    # Define the "key" entity: no value, no default attributes
    defineEntity key

    # Define the "connect" link: no name, link two entities,
    # no default attributes
    defineLink connect

    # Evaluate options
    eval configure $args
}

########################################################################
#### children
#
# Return the children of a vertex. An error will result
# if the vertex does not exist.
#
body ::tycho::Digraph::children {vertex} {
	return $_adjacency($vertex,children) 
}

########################################################################
#### connect
#
# Add a connection. The three arguments can either be in the
# order <i>vertex key hyperedge</i>, in which case this is an
# "in" connection, or in the order <i>hyperedge vertex key</i>,
# in which case this is an "out" connection. An error will result
# if the vertex does not exist.
#
body ::tycho::Digraph::connect {vertex key hyperedge} {
	_verify key [list $vertex $key]
	_verify hyperedge $hyperedge
	_verifynot connect [list $vertex $key $hyperedge]

	# Record the connection
	set inverse [_link connect [list $vertex $key $hyperedge] {}]

	# Add links to the adjacency matrix
	if { [_type $vertex] == "vertex" } {
		# An in connection
		foreach {v k} [connected $hyperedge out] {
			_adjacencyadd $vertex $v
		}
	} else {
		# An in connection
		foreach {v k} [connected $hyperedge in] {
			_adjacencyadd $v $vertex
		}
	}
    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}

########################################################################
#### connectdelete
#
# Delete a connection. The three arguments can either be in the
# order <i>vertex key hyperedge</i>, in which case this is an
# "in" connection, or in the order <i>hyperedge vertex key</i>,
# in which case this is an "out" connection. An error will result
# if the connection does not exist.
#
body ::tycho::Digraph::connectdelete {vertex key hyperedge} {
	_verify key [list $vertex $key]
	_verify hyperedge $hyperedge
	_verify connect [list $vertex $key $hyperedge]

   # FIXME
}

########################################################################
#### hyperedge
#
# Add a new hyperedge to the graph, and return the inverse command.
# By default, this method just adds a link between the
# two named hyperedges.  Flag an error if the hyperedge
# already exists, but not if any of the connected vertices do
# not exist. 
#
body ::tycho::Digraph::hyperedge {name args} {
	_verifynot hyperedge $name
	_entity hyperedge {} $name $args
}

########################################################################
#### hyperedgeattrs
#
# Return a list containing the attributes of the hyperedge as a flat
# attribute-value list. An error will result if the hyperedge does
# not exist.
#
body ::tycho::Digraph::hyperedgeattrs {name} {
	_verify hyperedge $name
    _attributes hyperedge $name
}

########################################################################
#### hyperedgecget
#
# Get an attribute of a hyperedge. An error will occur if the hyperedge does not
# exist or the attribute does not exist.
#
body ::tycho::Digraph::hyperedgecget {name attribute} {
	_verify hyperedge $name
    _cget hyperedge $name $attribute
}

########################################################################
#### hyperedgeconfigure
#
# Configure the hyperedge and return the inverse command. An error will
# occur if the hyperedge does not exist. The argument list
# is a flat list of attribute-value pairs.
#
body ::tycho::Digraph::hyperedgeconfigure {name args} {
	_verify hyperedge $name
    _configure hyperedge $name $args
}

########################################################################
#### hyperedgedelete
#
# Remove a hyperedge from the graph, and return the inverse command. This
# default method works for simple directed graphs.
#
body ::tycho::Digraph::deletehyperedge {name} {
	_verify hyperedge $name

	# Delete it from the adjacency list
	# FIXME
	# _adjacencydelete $vertex1 $vertex2

    # Clear any cached structural information
    catch {unset _cache}

	# Delete the data and return the inverse command
	# FIXME: delete connections too
	_delete hyperedge $name
}

########################################################################
#### edges
#
# Return a list containing the hyperedges of the graph with source and target
# vertex names that match the given patterns. The result is a flat list
# of source-target pairs. If no arguments are supplied, return all hyperedges.
# To test for the presence of a single hyperedge, provide its source and 
# target vertices as the arguments and compare the result with the empty
# list.
#
body ::tycho::Digraph::edges {{pattern1 *} {pattern2 *}} {
    set result {}
    foreach quad [array names _info \
    		[list hyperedge * * [list $pattern1 $pattern2]]] {
		eval lappend result [lindex $quad 3]
    }
    return $result
}

########################################################################
#### keyattrs
#
# Return a list containing the attributes of the key as a flat
# attribute-value list. An error will result if the key does
# not exist.
#
body ::tycho::KeyedDigraph::keyattrs {vertex key} {
	_verify     key [list $vertex $key]
    _attributes key [list $vertex $key]
}

########################################################################
#### keycget
#
# Get an attribute of a key. An error will occur if the key does not
# exist or the attribute does not exist.
#
body ::tycho::KeyedDigraph::keycget {vertex key attribute} {
	_verify key [list $vertex $key]
    _cget   key [list $vertex $key] $attribute
}

########################################################################
#### keyconfigure
#
# Configure the key and return the inverse command. The argument list
# is a flat list of attribute-value pairs.
#
body ::tycho::KeyedDigraph::keyconfigure {vertex key args} {
	_verify    key [list $vertex $key]
    _configure key [list $vertex $key] $args
}

########################################################################
#### keydelete
#
# Remove a key from the graph, and return the inverse command.
#
body ::tycho::KeyedDigraph::keydelete {vertex key} {
	_verify key [list $vertex $key]

	# Delete it from the adjacency list
	adjacencydelete $vertex1 $vertex2

    # Clear any cached structural information
    catch {unset _cache}

	# Delete the data and get the inverse command
	set inverse [_delete key [list $vertex $key]]
	
	# If there are still keys between the same vertices, add
	# back to the adjacency list
    if { [array names _info \
    		[list $type * * [list $vertex1 * $vertex2 *]]] != "" } {
    	adjacencyadd $vertex1 $vertex2
    }
    return $inverse
}

########################################################################
#### keyin
#
# Add a new key to a vertex, and return the inverse command.
#
body ::tycho::KeyedDigraph::keyin {vertex key args} {
	_verifynot key [list $vertex $key]
	
	# Record the key
	set inverse [_link key [list $vertex $key] $args]

	# Add links to the adjacency matrix
    adjacencyadd $vertex1 $vertex2

    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}

########################################################################
#### keys
#
# Return a list of keys of the given vertex. If the second argument
# is given, it is a glob-style pattern to be used to match against
# key names.
#
body ::tycho::KeyedDigraph::keys {vertex {key *}} {
    set result {}
    foreach quad [array names _info \
    		[list key $vertex $key *]] {
		eval lappend result [lindex $quad 2]
    }
    return $result
}

########################################################################
#### leaves
#
# Return the "leaves" of the graph.
#
body ::tycho::Digraph::leaves {} {
    _leaves
}

########################################################################
#### parents
#
# Return the parents of a vertex. An error will result
# if the vertex does not exist.
#
body ::tycho::Digraph::parents {vertex} {
	return $_adjacency($vertex,parents) 
}

########################################################################
#### roots
#
# Return the roots of the graph.
#
body ::tycho::Digraph::roots {} {
    _graphroots
}
