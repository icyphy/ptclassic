##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### HyperGraph
#
# A _HyperGraph_ has hyper-edges -- edges that connect between
# more than two vertices. Connections are made to welds (a vertex-key
# pair). Each weld has a _type_ which can be used to
# indicate what "kind" of connection the weld is; the weld notation is
# <i>vertex.key:type</i>. For example, in
# a circuit simulation graph, welds may have one of the types
# "input," "output," or "bidirectional." Obviously, weld types can
# be used to implement directional hypergraphs simply by having the
# two types "in" and "out," or "parent" and "child." The hypergraph
# supports construction of directed graphs by the options
# *-parentkeytype* and -*childkeytype*, which will be used to
# construct a directed graph topology that can be used by all of the
# directed graph algorithms.
#
# Note that each weld can have only one edge connected to it. Thus,
# _Multigraph_ can have more than one edge connected to each weld,
# but each edge is connected to exactly two welds (and each has its
# own set of options); _HyperGraph_, in contrast, can have only a single
# edge connected to each weld, but that single edge can connect to an
# arbitrary number of welds. _HyperGraph_ does not access vertices
# by a pair of vertex (or weld) names, but requires that each edge be
# given its own name when it is created.
#
class ::tycho::HyperGraph {
    inherit ::tycho::Digraph ::tycho::KeyedGraph

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    # The weld type of parent connections
    public variable parentkeytype {}

    # The weld type of child connections
    public variable childkeytype {}

    #################################################################
    ####                     public methods                      ####

    # Get edges adjacent to a vertex
    method adjacentedges {vertex {pattern1 *} {pattern2 *}}

    # Get vertices adjacent to a vertex
    method adjacentvertices {vertex {pattern1 *} {pattern2 *}}

    # Get welds adjacent to a ver tex
    method adjacentwelds {vertex {pattern1 *} {pattern2 *}}

    # Add an edge and options to the graph
    method connect {source target args}

    # Remove a vertex (but not adjacent edges) from the graph
    method delete {vertex}

    # Remove an edge from the graph
    method disconnect {source target}

    # Get an option or options of an edge
    method edgecget {edge option}

    # Configure the edge with one or more options
    method edgeconfigure {edge args}

    # Return all options of an edge
    method edgeoptions {edge}

    # Return edges matching a pattern
    method edges {pattern}

    # "Repair" a graph by deleting improperly-connected edges
    method repair {}
}

########################################################################
#### constructor
#
body ::tycho::HyperGraph::constructor {args} {
    # Evaluate options
    eval configure $args
}

########################################################################
#### adjacentedges
#
# Get the adjacent edges to all welds matching the given patterns.
# The patterns should take account of the weld type.
# Return the empty string if the weld does not exist or there is
# no connection to it. The pattern includes the weld type; for example,
# a pattern could be "*:out". Edges are returned by name.
#
body ::tycho::HyperGraph::adjacentedges {vertex {pattern1 *} {pattern2 *}} {
    set result {}
    # Try the first pattern
    foreach {_ e} [array get _welds $vertex.$pattern1] {
        # Try the second pattern
        if { [array get _edges *.$pattern2] != "" } {
            if { [lsearch $result $e] == -1 } {
                lappend result $e
            }
        }
    }
    return $result
}

########################################################################
#### adjacentvertices
#
# Get the adjacent vertices to all welds matching the given patterns.
# The patterns should take account of the weld type.
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::HyperGraph::adjacentvertices {vertex {pattern1 *} {pattern2 *}} {
    set result {}
    # Try the first pattern
    foreach {_ e} [array get _welds $vertex.$pattern1] {
    	# Try the second pattern
    	foreach {_ v} [array get _edges *.$pattern2] {
	    if { [lsearch $result $v] == -1 } {
		lappend result $v
	    }
    	}
    }
    return $result
}

########################################################################
#### adjacentwelds
#
# Get the adjacent welds to all welds matching the given patterns.
# The patterns should take account of the weld type.
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::HyperGraph::adjacentwelds {vertex {pattern1 *} {pattern2 *}} {
    set result {}
    # Try the first pattern
    foreach {_ e} [array get _welds $vertex.$pattern1] {
    	# Try the second pattern
    	foreach {n v} [array get _edges *.$pattern2] {
	    set weld $v.[lindex [split $n "."] 1]
	    if { [lsearch $result $weld] == -1 } {
		lappend result $weld
	    }
    	}
    }
    return $result
}

########################################################################
#### connect
#
# Add a new fred to the graph, and return the inverse command.
# The edge is specified by name followed by one or more welds
# (which cannot start with a dash), followed by an option-value
# list for the edge. Flag an error if the edge already exists,
# but not if the two vertices or their welds do not exist. 
#
# FIXME: If the edge already exists, we should be able to _add_
# connections.
#
# FIXME: If a vertex-edge connection already exists, we should
# flag an error. (?)
#
body ::tycho::HyperGraph::connect {edge args} {
    #
    # The internal arrays are used a little differently than in
    # the other graph classes:
    #
    #     _edges:       edge       |-> 1
    #                   edge.key   |-> vertex
    #     _edgeoptions: edge       |-> {option value ...}
    #     _welds:       vertex.key |-> edge
    #     _weldoptions: vertex.key |-> {option value ...}
    #
    
    if { [::info exists _edges($edge)] } {
	error "Edge $edge already exists in $dataname"
    }
    set modified 1

    # Separate out options
    set t [lsearch $args {-*}]
    if { $t != -1 } {
    	set welds [lreplace $args $t end]
    	set options [lrange $args $t $end]
    } else {
    	set welds $args
    	set options {}
    }
    
    set sources {}
    set targets {}
    set vertices {}

    # For each weld, add entries to the weld and edge arrays
    foreach weld $welds {
    	set splut [split $weld "."]
    	set vertex [lindex $splut 0]
    	set key    [lindex $splut 1]
    	set type   [lindex [split $key ":"]]
	
    	# Vertices and edges point to each other
    	set _welds($vertex.$key) $edge
    	set _edges($edge.$key) $vertex

	# Remember vertices for the adjacency list
	if { $type == $parentkeytype } {
	    lappend sources $vertex
	} elseif { $type == $childkeytype } {
	    lappend targets $vertex
	}
	lappend vertices $vertex
	
	# Set the weld options
	if { ! [::info exists _weldoptions($vertex.$key)] } {
	    set _weldoptions($vertex.$key) $weldoptions
	}
    }
    
    # Create the adjacency edges
    if { $parentkeytype == "" || $childkeytype == "" } {
    	# An undirected graph: make full connection
    	foreach v $vertices {
	    foreach w $vertices {
		if { $v != $w } {
		    adjacencyadd $source $target
		    adjacencyadd $target $source
		}
	    }
    	}
    } else {
    	# A directed graph: connect sources to targets
	foreach source $sources {
	    foreach target $targets {
		adjacencyadd $source $target
	    }
    	}
    }
    
    # Record the edge proper
    set _edges($edge) 1
    
    # Record options
    array set temp [concat $edgeoptions $args]
    set _edgeoptions($edge) [array get temp]

    # Clear any cached structural information
    unset _cache

    # Return the inverse command
    return [list disconnect $edge]   	
}

########################################################################
#### delete
#
# Delete a vertex from the graph, and return the inverse command.
#
body ::tycho::HyperGraph::delete {vertex} {
    #     _edges:       edge       |-> 1
    #                   edge.key   |-> vertex
    #     _edgeoptions: edge       |-> {option value ...}
    #     _welds:       vertex.key |-> edge
    #     _weldoptions: vertex.key |-> {option value ...}

    error "Not implemented yet"
}

########################################################################
#### disconnect
#
# Remove an edge from the graph, and return the inverse command. Flag an
# error if the edge does not exist.
#
body ::tycho::HyperGraph::disconnect {edge} {
    if { ! [::info exists _edges($edge)] } {
	error "Edge $edge unknown in $dataname"
    }
    set modified 1

    # Start the inverse
    set inverse [list connect $edge]

    # For each weld, remove entries from the vertex and edges arrays
    foreach {weld vertex} [array get _edges $edge.*] {
    	set key [lindex [split $weld "."] 1]

	# Append to the inverse command
	lappend inverse $weld

	# Delete edge from weld array
	unset _welds($vertex.$key)

	# Remember vertices for the adjacency list
	if { $key == $parentkeytype } {
	    lappend sources $vertex
	} elseif { $key == $childkeytype } {
	    lappend targets $vertex
	}
	# FIXME: Weld options are not cleared -- should they be???
    }

    # Delete the edge
    unset _edges($edge)
    foreach source $sources {
    	foreach target $targets {
	    adjacencydelete $source $target
    	}
    }
    
    # Delete the options(s)
    eval lappend inverse _edgeoptions($edge)
    unset _edgeoptions($source^$target)

    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}

########################################################################
#### edgecget
#
# Get an option of an edge. An error will occur if the edge does not
# exist or the option does not exist.
#
body ::tycho::AbstractGraph::edgecget {edge option} {
    array set temp $_edgeoptions($edge^_)
    return $temp($option)
}

########################################################################
#### edgeconfigure
#
# Configure the edge and return the inverse command. An error will
# occur if the edge does not exist. The argument list
# is a flat list of option-value pairs.
#
body ::tycho::AbstractGraph::edgeconfigure {edge args} {
    eval chain $edge _ $args
}

########################################################################
#### edgeoptions
#
# Return a list containing the options of the edge as a flat
# option-value list. An error will result of the edge does
# not exist.
#
body ::tycho::HyperGraph::edgeoptions {edge} {
    return $_edgeoptions($edge^_)
}

########################################################################
#### edges
#
# Return a list containing the edges of the graph with names matching
# the given pattern. If no arguments are supplied, return all edges.
#
body ::tycho::HyperGraph::edges {{pattern *}} {
    return [array names _edges $pattern]
}

########################################################################
#### repair
#
# "Repair" a graph by deleting improperly-connected edges.
#
# This method cannot be recorded or published.
#
body ::tycho::HyperGraph::repair {} {
    set modified 1

    error "Not implemented yet"
    
    # Return null so record{} or publish{} will complain.
    return ""
}

