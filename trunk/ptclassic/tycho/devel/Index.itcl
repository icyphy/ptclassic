##########################################################################
# Version: $Id$
# Author: John Reekie, Edward A. Lee
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Index
#
# The _Index_ class implements a hierarchical associative array.
# It inherits all the capabilities of its Model superclass:
# a set of files, changes to the array can be undone, redone, and
# published, and each entry in the 
# array can have options as well as a value. For example, you
# can add an entry to an array and give it some options with:
# <pre>
#     $dataarray add Foo "Hello" -bar 1
# </pre>
#
# To change an option, use the entryconfigure{} method:
# <pre>
#     $dataarray entryconfigure Foo -bar 0
# </pre>
#
# By default, an entry will accept any options. To limit
# the options that will be accepted and to set the default values,
# set the *-entryoptions* option (of the Index, not of an entry):
# <pre>
#     $dataarray configure -entryoptions {-bar 0 -tar 99}
# </pre>
#
# There are a number of methods to access the data. The 
# simplest is get{}, which returns the value of an entry. The
# names{} method returns the entry names that match a given 
# glob-style pattern or regular expression. The match{} method
# returns a list of names and patterns, and supports various
# options to select the format of the returned list.
#
#
class ::tycho::Index {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####


    #################################################################
    ####                     public methods                      ####

    # Assign new data to en existing entry
    method assign {name data}
    
    # Get the children of an entry
    method children {name {select all}}
    
    # Add an entry to the array
    method entry {name data args}
    
    # Get the attributes of an entry
    method entryattrs {name}

    # Get an option or options of an entry
    method entrycget {name option}

    # Configure the entry with one or more options
    method entryconfigure {name args}
    
    # Delete an entry
    method entrydelete {name}

    # Add a nested entry to the array
    method entryin {context name data args}
    
    # Test if an entry is present
    method exists {name}

    # Return an entry
    method get {name}

    # Return a list of entries and values based on a pattern
    method match {pattern args}

    # Return a list of names that match a pattern
    method names {{pattern *} {regexpflag {}}}

    # Get the parent of an entry
    method parent {name}
    
    # Get the root of an entry
    method root {name}
    
    # Get the root entries
    method roots {{select all}}
    
    #################################################################
    ####                   private methods                       ####
    
    # Evaluate code in this object's context
    private method evalInSpecificContext {args} {eval $args}
}

########################################################################
#### constructor
#
body ::tycho::Index::constructor {args} {
    # Evaluate options
    eval configure $args

    # I have only one entity type with a value and no default attributes
    entity entry 1
}

########################################################################
#### assign
#
# Assign new data to an existsing entry. Flag an error if the entry
# does not exist. Return the inverse command.
#
body ::tycho::Index::assign {name value} {
    _verify entry $name
    _assign entry $name $value
}

########################################################################
#### children
#
# Return the children of an entry.
#
body ::tycho::Index::children {name {select all}} {
    _children $name {} $select
}

########################################################################
#### entry
#
# Add a new entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry options. Return the inverse command.
#
body ::tycho::Index::entry {name value args} {
    _verifynot entry $name
    _entity entry {} $name [concat [list $value] $args]
}

########################################################################
#### entryattrs
#
# Return a list containing the attributes of the entry as a flat
# option-value list.
#
body ::tycho::Index::entryattrs {name} {
    _verify entry $name
    _attributes entry $name
}

########################################################################
#### entrycget
#
# Get an option of a data entry. Flag an error if the entry
# does not exist or the option does not.
#
body ::tycho::Index::entrycget {name option} {
    _verify entry $name
    _cget entry $name $option
}

########################################################################
#### entryconfigure
#
# Configure the given entry.  The argument list
# is a flat list of option-value pairs. If there are arbitrary
# options, the undo command will not delete options
# that have not already been set, although it will change
# back existing options that are changed.
#
# Flag an error if the entry does not exist, or if an
# option is invalid.
# 
body ::tycho::Index::entryconfigure {name args} {
    _verify entry $name
    _configure entry $name $args
}

########################################################################
#### entrydelete
#
# Delete an entry. Flag an error if the entry does not exist.
# Return the inverse command.
#
body ::tycho::Index::entrydelete {name} {
    _verify entry $name
    _delete entry $name
}

########################################################################
#### entryin
#
# Add a new nested entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry options. Return the inverse command.
#
body ::tycho::Index::entryin {context name value args} {
    _verifynotin entry $context $name
    _entity entry $context $name [concat [list $value] $args]
}

########################################################################
#### exists
#
# Returns true if the entry is in the model, else false.
#
# FIXME: Rename.
#
body ::tycho::Index::exists {name} {
    _exists entry $name
}

########################################################################
#### get
#
# Get the value of an entry. Flag an error if the entry does
# not exist.
#
body ::tycho::Index::get {name} {
    _verify entry $name
    _get entry $name
}

########################################################################
#### match
#
# Return a list of name-value pairs based on the given pattern. By
# default, the entries in the model are matched against _pattern_
# using glob-style matching and the returned list is a flat list of
# name-value pairs. For example, it might return
# <code>{first This second That}</code>. The
# following flags can follow the pattern argument:
# <ul>
# <li>*-regexp*: Use regular expression matching instead of glob-style
# matching.
# <li>*-options*: Return a list of lists, where each sub-list is the
# entry name, its value, and following elements are option-value
# pairs, where options are included in the list only if they differ
# from the defaults. If an entry has an options that has no
# default (possible if *-checkoptions* is zero) then include it in
# the result.
# <li>*-alloptions*: Return a list of lists, where each sub-list is the
# entry name, its value, and following elements are option-value
# pairs, where all options are included in the result.
# <li>*-withoptions* _option_ ... _option_: 
# Return a list of lists, where each sub-list is the
# entry name, its value, and following elements are option-value
# pairs, where only options in the argument list are included in
# the result. If *-alloptions* is specified, include all of the
# options in the argument list; if not, include only those that
# differ from the defaults. This must be the last option flag
# in the argument list.
# </ul>
#
# FIXME: Works with hierarchical indexes?
#
body ::tycho::Index::match {pattern args} {
    set regexp 0
    set options "none"

    # Get the option flags
    while { $args != "" } {
	set test [lindex $args 0]
	set args [lreplace $args 0 0]
	if { $test == "-regexp" } {
	    set regexp 1
	} elseif { $test == "-options" } {
	    set options "different"
	} elseif { $test == "-alloptions" } {
	    set options "all"
	} elseif { $test == "-withoptions" } {
	    if { $options == "all" } {
		set options "withalloptions"
	    } else {
		set options "withdifferentoptions"
	    }
            set requested $args
	    set args ""
	}
    }

    # Get the matching names
    if { $regexp } {
	set matching [names $pattern -regexp]
    } else {
	# Glob-style matching. Optimize for the default case
	if { $options == "none" } {
	    return [array get _value $pattern]
	} else {
	    set matching [array names _value $pattern]
	}
    }
    
    # Return the found entries with option values
    array set default [_defaults entry]
    set result {}
    switch -exact $options {
	"none" {
	    # Return names and values
	    foreach name $matching {
		lappend result $name $_value($name)
		append result "\n"
	    }
	}
	"all" {
	    # Return list of lists with all options
	    foreach name $matching {
		set partial [list $name $_value($name)]
		eval lappend partial $_attrs($name)
                lappend result $partial
		append result "\n"
	    }
	}
	"different" {
	    # Include options only if they differ from the default
	    foreach name $matching {
		set partial [list $name $_value($name)]
		foreach {opt val} $_attrs($name) {
		    if { ! [::info exists default($opt)] \
			    || $default($opt) != $val } {
			lappend partial $opt $val
		    }
		}
		lappend result $partial
                append result "\n"
	    }
	}
	"withalloptions" {
	    # Include options only if they are requested
	    foreach name $matching {
		lappend result $name $_value($name)
		array set temp $_attrs($name)
		foreach opt $requested {
		    lappend partial $opt $temp($opt)
		}
		lappend result $partial
		append result "\n"
	    }
	}
	"withdifferentoptions" {
	    # Include options only if they are requested and they
	    # are different from the default
	    foreach name $matching {
		set partial [list $name $_value($name)]
		array set temp $_attrs($name)
		foreach opt $requested {
		    if { ! [::info exists default($opt)] \
			    || $default($opt) != $temp($opt) } {
			lappend partial $opt $temp($opt)
		    }
		}
		lappend result $partial
		append result "\n"
	    }
	}
    }
    return $result
}

########################################################################
#### names
#
# Return a list of names based on the given pattern. The
# *-regexp* flag following the pattern selects regular expression
# matching instead of glob-style matching.
#
# FIXME: Works with hierarchical indexes?
#
body ::tycho::Index::names {{pattern *} {regexpflag {}}} {
    if { $regexpflag != "" } {
	# Get names using regular expression matching
	set result {}
	set testlist [array names _value]
	while { [set name [lsearch -regexp $testlist $pattern]] != -1 } {
	    lappend result [lindex $testlist $name]
	    set result [lreplace $testlist 0 $name]
	}
	return $result
    } else {
	# Glob-style matching
	return [array names _value $pattern]
    }
}

########################################################################
#### parent
#
# Return the parent of an entry.
#
body ::tycho::Index::parent {name} {
    _parent entry $name
}

########################################################################
#### root
#
# Return the root of an entry
#
body ::tycho::Index::root {name} {
    _root $name
}

########################################################################
#### roots
#
# Return the root entries.
#
body ::tycho::Index::roots {{select all}} {
    _roots {} $select
}

