##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Index
#
# The _Index_ model is a hierarchical associative array.
# Is has a single entity type, _entry_. The names of nested entries are
# constructed by joining with the character given by the
# *-separator* character -- if this is a space, then the
# names are proper Tcl lists.
# By default, entries have no attributes; however,
# these can be added with the *configureEntity* method; in addition,
# if *-strictoptions* is set to zero, any attributes at all can be
# given to entries.
#
# Here are some examples illustrating the use of _Index_.
# (For more general information on models, see <a 
# href="Model.html">Model</a>.) Create an index:
# <pre><tcl quiet>
#     catch {delete object $index}
#     set index [::tycho::Index [::tycho::autoName index]]
# </tcl></pre>
#
# Now load the index with some data. In
# this example, give it a string
# in TIM format -- usually, you would set the *-datafile* option and
# call load{} (see <a href="Model.html">Model</a>):
# <pre><tcl>
#     $index read string {
#         entry a foo
#         entry b bar
#         entry c {} {
#             entry x boo
#             entry y baz
#         }
#     }
#     $index describe
# </tcl></pre>
#
# Get the value of an entry:
# <pre><tcl>
#     $index get a
# </tcl></pre>
#
# Get a nested entry:
# <pre><tcl>
#     $index get c.x
# </tcl></pre>
#
# Change the value of an entry:
# <pre><tcl>
#     $index assign c.x moo
#     $index describe
# </tcl></pre>
#
# Find all entries with names between "b" and "x":
# <pre><tcl>
#     $index names {[b-x]} *
# </tcl></pre>
#
class ::tycho::Index {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####


    #################################################################
    ####                     public methods                      ####

    # Assign new data to en existing entry
    method assign {name data}
    
    # Get the children of an entry
    method children {name}
    
    # Add an entry to the array
    method entry {name data args}
    
    # Get the attributes of an entry
    method entryattrs {name}

    # Get an attribute or attributes of an entry
    method entrycget {name attribute}

    # Configure the entry with one or more attributes
    method entryconfigure {name args}
    
    # Delete an entry
    method entrydelete {name}

    # Add a nested entry to the array
    method entryin {context name data args}
    
    # Test if an entry is present
    method exists {name}

    # Return an entry
    method get {name}

    # Return a list of names that match a pattern
    method names {{pattern *} {context {}}}

    # Return a list of names that match a regular expression
    method namesregexp {{pattern *} {context {}}}

    # Get the parent of an entry
    method parent {name}
    
    # Get the root of an entry
    method root {name}
    
    # Get the root entries
    method roots {}
    
    #################################################################
    ####                   private methods                       ####
    
    # Evaluate code in this object's context
    private method evalInSpecificContext {args} {eval $args}
}

########################################################################
#### constructor
#
body ::tycho::Index::constructor {args} {	
	# By default, use a period as separator
	configure -separator "."

    # Evaluate options
    eval configure $args

    # I have only one entity type with a value and no default attributes
    defineEntity entry -valued 1
}

########################################################################
#### assign
#
# Assign new data to an existing entry. Flag an error if the entry
# does not exist. Return the inverse command.
#
body ::tycho::Index::assign {name value} {
    _verify entry $name
    _assign entry $name $value
}

########################################################################
#### children
#
# Return the children of an entry.
#
body ::tycho::Index::children {name} {
    _children entry $name
}

########################################################################
#### entry
#
# Add a new entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry attributes. Return the inverse command.
#
body ::tycho::Index::entry {name value args} {
    _verifynot entry $name
    _entity entry {} $name [concat [list $value] $args]
}

########################################################################
#### entryattrs
#
# Return a list containing the attributes of the entry as a flat
# attribute-value list.
#
body ::tycho::Index::entryattrs {name} {
    _verify entry $name
    _attributes entry $name
}

########################################################################
#### entrycget
#
# Get an attribute of a data entry. Flag an error if the entry
# does not exist or the attribute does not.
#
body ::tycho::Index::entrycget {name attribute} {
    _verify entry $name
    _cget entry $name $attribute
}

########################################################################
#### entryconfigure
#
# Configure the given entry and return the inverse command.  The
# argument list is a flat list of attribute-value pairs.
# Flag an error if the entry does not exist.
# 
body ::tycho::Index::entryconfigure {name args} {
    _verify entry $name
    _configure entry $name $args
}

########################################################################
#### entrydelete
#
# Delete an entry. Flag an error if the entry does not exist.
# Return the inverse command.
#
body ::tycho::Index::entrydelete {name} {
    _verify entry $name
    _delete entry $name
}

########################################################################
#### entryin
#
# Add a new nested entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry attributes. Return the inverse command.
#
body ::tycho::Index::entryin {context name value args} {
    _verifynotin entry $context $name
    _entity entry $context $name [concat [list $value] $args]
}

########################################################################
#### exists
#
# Returns true if the entry exists, else false.
#
body ::tycho::Index::exists {name} {
    _exists entry $name
}

########################################################################
#### get
#
# Get the value of an entry. Flag an error if the entry does
# not exist.
#
body ::tycho::Index::get {name} {
    _verify entry $name
    _get entry $name
}

########################################################################
#### names
#
# Return a list of names matching the given pattern. The
# _context_ argument, if present, gives the context in which
# the match is to take place -- by default, this is the root
# context. To match for entries in all context, supply
# the value *.
#
body ::tycho::Index::names {{pattern *} {context {}}} {
    set result {}
    # We have to flatten the pattern, because Tcl insists
    # on putting braces around it... I have no confidence that
    # this will work in all reasonable cases...
    # FIXME
    foreach quad [array names _info [concat [list entry $context] $pattern *]] {
        lappend result [lindex $quad 3]
    }
    return $result
}

########################################################################
#### namesregexp
#
# Return a list of names matching the given regular expression. The
# _context_ argument, if present, gives the context in which
# the match is to take place -- by default, this is the root
# context. To match for entries in all contexts, supply
# the value *.
#
body ::tycho::Index::namesregexp {{pattern *} {context {}}} {
    set result {}
    foreach quad [array names _info [list entry $context * *]] {
        if [regexp $pattern [lindex $quad 2]] {
            lappend result [lindex $quad 3]
        }
    }
    return $result
}

########################################################################
#### parent
#
# Return the parent of an entry or group.
#
body ::tycho::Index::parent {name} {
    _parent entry $name
}

########################################################################
#### root
#
# Return the root of an entry
#
body ::tycho::Index::root {name} {
    _root $name
}

########################################################################
#### roots
#
# Return the root entries.
#
body ::tycho::Index::roots {} {
    _roots entry
}

