##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Lattice
#
# The Lattice model is a model for arbitrary multi-dimensional lattices
# (latti?). It is intended to support applications such as
# Praveen Murthy's Generalized Multi-dimensional SDF (GMSSDF) and
# Thomson-CSFs Array-oriented Language (AOL). There is a corresponding
# view class for this model called EditLattice.
#
# The key attributes of this model are its dimensionality (default
# two) and its lattice-generating matrix. The format
# of this matrix is a list of lists -- for example, the
# default lattice generator, which creates a simple two-dimensional
# square lattice, has the value *{{1 0} {0 1}}*.
#
# To access the lattice, create a _projection_ entity that
# projects onto two dimensions of the lattice. This projection
# can then be used to get a view of the lattice in those
# two dimensions.
#
class ::tycho::Lattice {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The dimensionality of this lattice
    public variable dimensionality 2

    # The lattice generating matrix of this lattice
    public variable lattice {{1 0} {0 1}}

    #################################################################
    ####                     public methods                      ####

    # Get the raw display coordinates of a projection
    public method getCoordinates {proj}

    # Get the lattice of a projection
    public method getLattice {proj}

    # Get the coordinates of the lattice points
    public method getLatticePoints {proj}

    # Make a projection in two dimensions
    public method projection {name dimensions args}

    # Get an attribute of an projection
    method projectioncget {projection args}

    # Configure an projection
    method projectionconfigure {projection args}

    # Delete a projection
    public method projectiondelete {name}

    #################################################################
    ####                  protected methods                      ####
    
    #################################################################
    ####                 protected variables                     ####
    
    # The dimensions of each projection
    protected variable pdimensions

    # The pixel display size of each projection
    protected variable ppixels

    # The lattice extent of each projection
    protected variable pextent

    # The raw coordinates of each projection
    protected variable pcoordinates

    #################################################################
    ####                   private methods                       ####

    # Evaluate code in this object's context
    private method evalInSpecificContext {args} {eval $args}
}

########################################################################
#### constructor
#
body ::tycho::Lattice::constructor {args} {	
    # This model is not hierarchical
    configure -separator ""

    # Evaluate options
    eval configure $args

    # The projection entity has a value (its dimensionality) and some
    # default attributes
    defineEntityType projection \
	    -valued 1 \
	    -pixels {256 -256} \
	    -extent {2 2}
}

########################################################################
#### getCoordinates
#
# Get the coordinates of the points of a projection.
#
body ::tycho::Lattice::getCoordinates {proj} {
    set L [getLattice $proj]
    set E [projectioncget $proj -extent]

    set xmax [expr [lindex $E 0] * \
            ([lindex [lindex $L 0] 0] + [lindex [lindex $L 0] 1])]
    set ymax [expr [lindex $E 1] * \
            ([lindex [lindex $L 1] 0] + [lindex [lindex $L 1] 1])]
    set max [::tycho::max $xmax $ymax]

    set disp [projectioncget $proj -pixels]
    set xfactor [expr [lindex $disp 0] / $max]
    set yfactor [expr [lindex $disp 1] / $max]

    # FIXME: make attribute
    set xoffset 32
    set yoffset 288

    set result {}
    set points [getLatticePoints $proj]
    foreach {i j x y} $points {
        lappend result $i $j \
                [expr $xoffset + $x * $xfactor] \
                [expr $yoffset + $y * $yfactor]
    }
    return $result
}

########################################################################
#### getLattice
#
# Get the lattice generator of a projection. 
# For the projection P, each element of its lattice
# generator L is given by L(i,j) = V(P(i),P(j)).

body ::tycho::Lattice::getLattice {proj} {
    _verify projection $proj

    # For the projection P, each element of its lattice
    # generator L is given by L(i,j) = V(P(i),P(j)).
    set P [_get projection $proj]
    set L {}
    set indexes {0 1}
    foreach i $indexes {
	set row [lindex $lattice [lindex $P $i]]
	set l {}
    	foreach j $indexes {
	    lappend l [lindex $row [lindex $P $j]]
    	}
    	lappend L $l
    }
    return $L
}

########################################################################
#### getLatticePoints
#
# Get the points of a projection. The result list is a
# flat list of elements (_i_, _j_, _x_, _y_), where _i_
# and _j_ are the lattice coordinates and _x_ and _y_
# are the coordinates of the point relative to the base
# lattice.
#
body ::tycho::Lattice::getLatticePoints {proj} {
    _verify projection $proj

    set P [_get projection $proj]
    set L [getLattice $proj]
    set ext [projectioncget $proj -extent]

    set result {}

    # Here we go...
    set m [lindex $ext 0]
    set n [lindex $ext 1]
    set u0 [lindex [lindex $L 0] 0]
    set u1 [lindex [lindex $L 0] 1]
    set v0 [lindex [lindex $L 1] 0]
    set v1 [lindex [lindex $L 1] 1]
    set i 0
    set x0 0
    set y0 0
    while { $i <= $m } {
        set j 0
        set x $x0
        set y $y0
        while { $j <= $n } {
            lappend result $j $i $x $y
            incr j
            set x [expr $x + $u0]
            set y [expr $y + $v0]
        }
        incr i
        set x0 [expr $x0 + $u1]
        set y0 [expr $y0 + $v1]
    }
    return $result
}

########################################################################
#### projection
#
# Add a new projection to the model and return the inverse command. Its
# value is a two-list of the dimensions on which it projects. Neither
# value can be greater than the dimensionality of the lattice
# less one. Optional
# arguments are attributes of the projection, which can be any of:
# <ul>
# <li><b>-pixels</b>: The size of the display in pixels. This
# is a two-list. The default is a 256x256-pixel display.
#
# <li><b>-extent</b>: The extent of the lattice in this projection.
# This is the amount of the lattice that can be viewed, based on
# the underlying dimension implied by the lattice-generating
# matrix. The default is two unit lattice elements in each
# direction.
# </ul>
#
body ::tycho::Lattice::projection {name dimensions args} {
    _verifynot projection $name

    # Check dimensionality
    set ndim [llength $dimensions]
    if { $ndim != 2 } {
	error "Projection ($dimensions) does not have two elements"
    }
    foreach d $dimensions {
	if { $d >= $dimensionality } {
	    error "Dimension $d is too high"
	}
    }

    # Create the projection and remember the inverse command
    set inverse [_entity projection {} $name \
            [concat [list $dimensions] $args]]
}

########################################################################
#### projectioncget
#
# Get an attribute of an projection.
#
body ::tycho::Lattice::projectioncget {proj attribute} {
    _verify projection $proj
    _cget projection $proj $attribute
}

########################################################################
#### projectionconfigure
#
# Configure an projection and return the inverse command.
#
body ::tycho::Lattice::projectionconfigure {proj args} {
    _verify projection $proj
    _configure projection $proj $args
}

########################################################################
#### projectiondelete
#
# Delete a projection.
#
body ::tycho::Lattice::projectiondelete {name} {
    _verify projection $name
    _delete projection $name
}
