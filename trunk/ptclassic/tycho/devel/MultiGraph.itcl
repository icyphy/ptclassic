##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### MultiGraph
#
# The _MultiGraph_ model is a directed graph that associates
# a "key" with each edge connected to a vertex. This is needed for 
# applications such as dataflow, in which the order of edges
# is significant. Keys are completely arbitrary strings; the vertex-key
# combination to which an edge is connected is called a "weld"
# and is denoted _vertex_._key_. Each weld (as well each vertex and
# each edge) can have a set of arbitrary options. More than one
# edge can be connected to a weld. See the _HyperGraph_ class for
# a related structure.
#
# <b>Note</b>: Keys must be unique at each vertex.
#
class ::tycho::MultiGraph {
    inherit ::tycho::Digraph ::tycho::KeyedGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Get edges adjacent to a vertex
    method adjacentedges {vertex {pattern1 *} {pattern2 *}}

    # Get vertices adjacent to a vertex
    method adjacentvertices {vertex {pattern1 *} {pattern2 *}}

    # Get welds adjacent to a vertex
    method adjacentwelds {vertex {pattern1 *} {pattern2 *}}

    # Add an edge and options to the graph
    method connect {source target args}

    # Remove a vertex (but not adjacent edges) from the graph
    method delete {vertex}

    # Remove an edge from the graph
    method disconnect {source target}
}

########################################################################
#### constructor
#
body ::tycho::MultiGraph::constructor {args} {
    # Evaluate options
    eval configure $args
}

########################################################################
#### adjacentedges
#
# Get the adjacent edges to all welds matching the given patterns.
# Return the empty string if the weld does not exist or there is
# no connection to it. Edges are returned as a flat list of
# vertex.key vertex.key pairs.
#
body ::tycho::MultiGraph::adjacentedges {vertex {pattern1 *} {pattern2 *}} {
	set result {}
    # Try children
    foreach {_ e} [array get _edges $vertex.$pattern1^*.$pattern2] {
    	eval lappend result [split $e "^"]
    }
    # Try parents
    foreach {_ e} [array get _edges *.$pattern2^$vertex.$pattern1] {
		lappend result [split $e "^"]
    }
    return $result
}

########################################################################
#### adjacentvertices
#
# Get the adjacent vertices to all welds matching the given patterns.
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::MultiGraph::adjacentvertices {vertex {pattern1 *} {pattern2 *}} {
	set result {}
    # Try children
    foreach {_ e} [array get _edges $vertex.$pattern1^*.$pattern2] {
    	lappend result [lindex $e 2]
    }
    # Try parents
    foreach {_ e} [array get _edges *.$pattern2^$vertex.$pattern1] {
		lappend result [lindex $e 0]
    }
    return $result
}

########################################################################
#### adjacentwelds
#
# Get the adjacent welds to all welds matching the given patterns.
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::MultiGraph::adjacentwelds {vertex {pattern1 *} {pattern2 *}} {
	set result {}
    # Try children
    foreach e [array names _edges $vertex.$pattern1^*.$pattern2] {
		lappend result [lindex [split $e "^"] 1]
    }
    # Try parents
    foreach e [array names _edges *.$pattern2^$vertex.$pattern] {
		lappend result [lindex [split $e "^"] 0]
    }
    return $result
}

########################################################################
#### connect
#
# Add a new edge to the graph, and return the inverse command.
# The edge is specified by two welds; additional arguments are a
# flat option-value list for the edge. Flag an error if the edge
# already exists, but not if the two vertices or their welds do not exist. 
#
body ::tycho::MultiGraph::connect {source target args} {
	#
	# The edge matrices are stored as
	#
	#     _edges:       source.key^target.key |-> {source key target key}
	#     _edgeoptions: source.key^target.key |-> {option value ...}
	#
	
    if { [::info exists _edges($source^$target)] } {
	error "Edge ($source, $target) already exists in $dataname"
    }
    set modified 1

    # Figure vertex names
    set edgeinfo "[split $source .] [split $target .]"
    set src [lindex $edgeinfo 0]
    set tgt [lindex $edgeinfo 2]

    # Record the edge
    set _edges($source^$target) $edgeinfo
    adjacencyadd $src $tgt

    # Record its options
    array set temp [concat $edgeoptions $args]
    set _edgeoptions($source^$target) [array get temp]

    # Remember the welds
    if { ! [::info exists _weldoptions($source)] } {
	set _weldoptions($source) $weldoptions
    }
    if { ! [::info exists _weldoptions($target)] } {
	set _weldoptions($target) $weldoptions
    }

    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return [list disconnect $source $target]
}

########################################################################
#### delete
#
# Delete a vertex from the graph, and return the inverse command.
#
body ::tycho::Digraph::delete {vertex} {
    if { ! [::info exists _vertices($vertex)] } {
		error "Unknown vertex $vertex in $dataname"
    }
    set modified 1

    set inverse [list add $vertex $_vertices($vertex) $_vertexoptions($vertex)]
    unset _vertices($vertex)

    foreach weld [array names _weldoptions $vertex.*] {
		append inverse "; weldconfigure $weld $_weldoptions($weld)"
		unset _weldoptions($weld)
    }

    # Clear any cached structural information
    catch {unset _cache}

    return $inverse
}

########################################################################
#### disconnect
#
# Remove an edge from the graph, and return the inverse command. Flag an
# error if the edge does not exist.
#
body ::tycho::Digraph::disconnect {source target} {
    if { ! [::info exists _edges($source^$target)] } {
	error "Edge ($source, $target) unknown in $dataname"
    }
    set modified 1

    # Figure vertex names
    set src [lindex [split $source "."] 0]
    set tgt [lindex [split $target "."] 0]

    # Remember the inverse
    set inverse [list connect $edge $target $_edgeoptions($source^$target)]

    # Delete the edge
    unset _edges($source^$target)
    if { [array names _edges $src.*->$tgt.*] == "" } {
	adjacencydelete $src $tgt
    }

    # Delete the options(s)
    unset _edgeoptions($source^$target)

    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}
