# Defines the run control panel
#
# @Author: Farhana Sheikh
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME: this class still needs A LOT OF WORK!
#        A lot of functionality and features are still missing.

#######################################################################
# options
#

#######################################################################
#### RunControl
# This class defines a RunControl panel megawidget which allows a target 
# to add sliders, buttons, etc. to control a run.  
# FIXME: Fill in more documentation here.
#
# <p>
# Here is an example of how to use the RunControl:
# <tcl><pre>
# ::tycho::RunControl .rc -name "Universe"
# wm deiconify .rc
# </pre></tcl>
#
class ::tycho::RunControl { 
    inherit ::tycho::Dismiss

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # Name of the universe or possibly something else (don't know what
    # at this time) to run
    itk_option define -name name Name ""

    # This is the name of the octHandle of the facet.  If this option is
    # is not used, then a generic run control panel that does not have any
    # dependencies on Oct is created.  Once the Ptolemy interface no longer
    # depends on Oct, this option can be completely removed.  
    # FIXME: maybe this should not be an option at all; maybe we should 
    #        have a generic run control panel and have a run control panel
    #        that interfaces with oct inherit from the generic one.
    itk_option define -octHandle octHandle OctHandle ""
    
    ###################################################################
    ####                         public methods                    ####
    
    # method to abort a run
    method abort {}
    
    # method to add extra control subpanels to master control panel
    # FIXME: need to write this still
    method addSubpanel {}

    # method to clear the run flag to indicate that the run is over
    method clearRunFlag {}

    # method to start a run
    method go {}

    # method to select/deselect an infinite number of iterations
    method infiniteIter {}

    # method to pause a run
    public method pause {}

    # method to open or close the debug section of the control panel
    method setOrClearDebug {}

    # method to step through a run
    method step {}
    
    # method to stop a run
    method stop {}

    # method to enable/disable the executable tcl script
    method toggleScript {}

    # method to update the number of iterations completed count in 
    # debug mode
    method updateCount {}
    
    ###################################################################
    ####                   protected variables                     ####

    # The step action that is registered
    protected variable stepAction
    
    # The name of the textual animation window, if it is open
    protected variable txAnimationWindow

    ###################################################################
    ####                   private variables                       ####

    # Oct handle for universe, if not used, we create a standalone 
    # run control panel.
    private variable octhandle ""


    # In the ptolemy version of the run control panel, there is a 
    # global variable that is the name of the master control panel
    # which is available to stars that wish to insert frames into
    # the control panel.  In this version, a method to insert a
    # control subpanel is provided instead.
    # Just in case I discover I still need this, declare it below
    # but comment it out.  It is equal to .run_$octHandle
    # private common ptkControlPanel ""

    protected common ptkDebug

    protected common infSelected

    # The common ptkRunFlag($universeName), indexed by the name of the 
    # universe, has the following values:
    # undefined    no active run window, universe not created
    # IDLE         active run window, but no run yet
    # ACTIVE       active run
    # PAUSED       paused run
    # FINISHED     finished a run
    # ERROR        the last run terminated with an error
    # STOP_PENDING pending stop requested
    # ABORT        pending abort requested

    protected common ptkRunFlag

    # require a dummy value in ptkRunFlag(main) for startup
    set ptkRunFlag(main) IDLE

    # The following three variables are indexed by the universe name
    protected common ptkScriptOn

    protected common ptkTimeFlag 0

    private variable universeName ""
}
    
#########################################################################
#### -octHandle configuration
# Facet oct handle
#
configbody ::tycho::RunControl::octHandle {

    set octhandle $itk_option(-octHandle)

}

#########################################################################
#### -name configuration
# Name of the universe to run
#
configbody ::tycho::RunControl::name {

    set universeName $itk_option(-name)

}

#######################################################################
#### constructor
#
body ::tycho::RunControl::constructor {args} {

    # get initial options
    eval itk_initialize $args

    # Initialize run variables
    set ptkRunFlag($universeName) IDLE
    set ptkDebug($universeName) 0
    set ptkScriptOn($universeName) 0
    set infSelected($universeName) 0

    # Get the default number of iterations
    # FIXME: Need to still figure out how to do this from the Universe
    # parameters. For now, set to 10
    set defNumIter 10

    # reset the text of the dismiss button
    $itk_component(dismiss) configure -text "DISMISS"

    # Undo the binding in the base class, where Return dismisses
    # the window.
    bind $prefix <Return> {}

    # set the title of the run control panel window
    wm title $itk_component(hull) "Run $universeName"
    wm iconname $itk_component(hull) "Run $universeName"
   
    # create message
    itk_component add msg {
	message $itk_component(childsite).msg \
		-width 25c \
		-text "Control panel for $universeName" \
		-justify left
    } {
	keep -cursor -background -font
    }
    pack $itk_component(msg) -anchor nw

    # create the execution options widget
    itk_component add exeOptions {
	frame $itk_interior.exeOptions
    } {
    }
    
    # create the top half and the bottom half of the execution options frame
    # because we want to accomodate a tcl script if need be in the bottom
    # half where we don't want any columns.
    itk_component add exeTop {
	frame $itk_component(exeOptions).exeTop
    } {
    }
    pack $itk_component(exeTop) -side top -anchor nw -fill x -expand yes
    
    itk_component add exeBottom {
	frame $itk_component(exeOptions).exeBottom
    } {
    }
    pack $itk_component(exeBottom) -side top -anchor nw -fill x -expand yes

    
    # The left and right columns are required to layout the checkbuttons
    # nicely.
    # create left column
    itk_component add exeLeft {
	frame $itk_component(exeTop).exeLeft
    } {
    }
    pack $itk_component(exeLeft) -side left -anchor nw 

    # create right column
    itk_component add exeRight {
	frame $itk_component(exeTop).exeRight
    } {
    }
    pack $itk_component(exeRight) -side left -anchor nw

    # create checkbuttons
    itk_component add debug {
	checkbutton $itk_component(exeLeft).debug \
		-text "Debug Mode" \
		-relief flat \
		-variable [scope ptkDebug($universeName)] \
		-command "$this setOrClearDebug" 
		
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(debug) -side top -anchor nw

    itk_component add script {
	checkbutton $itk_component(exeRight).script \
		-text "Use Script" \
		-relief flat \
		-variable [scope ptkScriptOn($universeName)] \
		-command "$this toggleScript"
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(script) -side top -anchor nw

    # Define the entry that controls the number of iterations
    # Note: This may be replaced by the user with the script window
    # defined below.  We might want to make our own equivalent
    # type of spinner for this purpose
    itk_component add iter {
	spinint $itk_component(exeLeft).iter \
		-labeltext "Iterations:" \
		-range {0 100000} \
		-width 6
    } {
	keep -background -cursor
    }
    
    # set the default number of iterations in the entry box
    $itk_component(iter) configure -step $defNumIter
    $itk_component(iter) up
    $itk_component(iter) configure -step 1
    pack  $itk_component(iter) -side top -anchor nw -pady 5

    # add the infinity checkbutton to select infinite number of iterations
    itk_component add infinity {
	checkbutton $itk_component(exeRight).infinity \
		-text "infinity" \
		-relief flat 
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(infinity) -side top -anchor nw -pady 5
    
    # create the subpanel that contains execution options
    itk_component add execution {
	::tycho::Subpanel $itk_component(childsite).execution \
		-text "Execution Options" \
		-childwidget $itk_component(exeOptions) \
		-state open
    } {
    }
    pack $itk_component(execution) -side top -anchor nw

    # create a separator to delineate between the buttons and the
    # control subpanels
    itk_component add separator {
	frame $itk_component(childsite).separator \
		-relief sunken \
		-width 3 \
		-height 3 \
		-borderwidth 1.5
    } {
	keep -background
    }
    pack $itk_component(separator) -expand no -fill x -pady 5

    # create the go, pause, and stop buttons
    itk_component add runButtons {
	buttonbox $itk_component(childsite).runButtons 
    } {
	keep -background -cursor
    }
    
    $itk_component(runButtons) add go -text "Go <Return>"
    $itk_component(runButtons) add pause -text "Pause <Space>"
    $itk_component(runButtons) add stop -text "Stop <Escape>"
    $itk_component(runButtons) default go

    pack $itk_component(runButtons) -fill x

    # Now create the script window that will be used when scripting is
    # preferred.  The iterations entry field will no longer be enabled.
    # The approach taken here is a little different.  Create a frame
    # for the tcl script window and embed it in a subpanel which is
    # added to the execution options section in place of the iterations.
    itk_component add tclFrame {
	frame $itk_interior.tclFrame
    } {
    }
    itk_component add tclScript {
	scrolledtext $itk_component(tclFrame).tclScript \
		-vscrollmode static \
		-hscrollmode static \
		-relief sunken \
		-width 300 \
		-height 100 
    } {
	keep -background -foreground
    }

    pack $itk_component(tclScript) -expand yes -fill both 

    itk_component add exeTclScript {
	::tycho::Subpanel $itk_component(exeBottom).exeTclScript \
		-text "Executable Tcl Script" \
		-childwidget $itk_component(tclFrame) \
		-state open
    } {
    }


    # Create the debug mode subpanel to be enabled when debug mode is
    # turned on
    itk_component add debugMode {
	frame $itk_interior.debugMode
    } {
    }

    itk_component add debugLeft {
	frame $itk_component(debugMode).debugLeft
    } {
    }
    pack $itk_component(debugLeft) -side left -anchor nw 

    itk_component add debugRight {
	frame $itk_component(debugMode).debugRight
    } {
    }
    pack $itk_component(debugRight) -side left -anchor nw 

    # create checkbuttons
    itk_component add graphAnim {
	checkbutton $itk_component(debugLeft).graphAnim \
		-text "Graphical Animation" \
		-relief flat 
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(graphAnim) -side top -anchor nw

    itk_component add timeRun {
	checkbutton $itk_component(debugLeft).timeRun \
		-text "Time the Run" \
		-relief flat 
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(timeRun) -side top -anchor nw

    itk_component add textAnim {
	checkbutton $itk_component(debugRight).textAnim \
		-text "Textual Animation" \
		-relief flat 
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(textAnim) -side top -anchor nw

    # FIXME: need to add slider or indicator showing how many
    # iterations have been completed  For now we've added a 
    # a canvas widget as a start.  We might want to change it
    # it back to a plan old entry widget that we can update
    # the count in.
    
    itk_component add indicator {
	labeledwidget $itk_component(debugRight).indicator \
		-labeltext "Iter. Completed:" \
		-labelpos w 
    } {
    }
    set childsite [$itk_component(indicator) childsite]
    itk_component add indEntry {
	canvas $childsite.indEntry \
		-background gray \
		-relief raised \
		-height 20 \
		-width 100 
	       
    } {
    }
    pack $itk_component(indEntry)
    pack $itk_component(indicator) -side top -anchor nw
    
    # Create the buttons
    itk_component add step {
	button $itk_component(debugLeft).step \
		-text "Step" \
		-width 9
    } {
	keep -background -foreground -cursor
    }
    pack $itk_component(step) -side top -anchor nw

    itk_component add abort {
	button $itk_component(debugRight).abort \
		-text "Abort" \
		-width 9
    } {
	keep -background -foreground -cursor
    }
    pack $itk_component(abort) -side top -anchor nw

    # embed the debug mode options in a subpanel
    itk_component add debugModePanel {
	::tycho::Subpanel $itk_component(childsite).debugModePanel \
		-text "Debug Mode Options" \
		-childwidget $itk_component(debugMode) \
		-state open
    } {
    }

    # FIXME: Remember to insert the script file into the text window
    # need to figure out how to figure out what scriptFile should be
    # set to
    # $itk_component(tclScript) import $scriptFile

    # check if script is to be used, if so, then use it.
    # FIXME: Need to figure out how to get that info
    # if useScript == "1" 
    # set ptkScriptOn($universeName) 1
    # pack $itk_component(exeTclScript) -side top -anchor nw
    # disable the iterations entry box
    # endif
 
    # bind the return, space, escape and control-d keys appropriately
    # put the focus on the iterations widget
        
}

#######################################################################
#### destructor
#
body ::tycho::RunControl::destructor {} {

}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####


#######################################################################
#### abort
# Abort the current run.  This method is different from stop in that
# it stops a run without running a wrapup procedure
# 
body ::tycho::RunControl::abort {} {

}

#######################################################################
#### addSubpanel
# Add a subpanel to the run control panel
#
body ::tycho::RunControl::infiniteIter {} {

}

#######################################################################
#### clearRunFlag
# Clear the run flag to indicate that the run is over
#
body ::tycho::RunControl::clearRunFlag {} {

    # set the ptkRunFlag to FINISHED indicating that the run is over

}

#######################################################################
#### go
# Start the current run
#
body ::tycho::RunControl::go {} {

}

#######################################################################
#### infiniteIter
# Select or deselect infinite number of iterations
#
body ::tycho::RunControl::infiniteIter {} {
    
    # if infSelected($universeName)
    # then disable the iterations entry and save number of iterations
    # in the entry field and set the current number of iterations to 
    # infinity.
    # else enable the iterations entry and set the number of iterations
    # what it was before setting to infinity
}

#######################################################################
#### pause
# Pause the current run
#
body ::tycho::RunControl::pause {} {

}

#######################################################################
#### setOrClearDebug
# Enable or disable debug mode depending on current status.  Adds
# or removes the debug section of the control panel.
#
body ::tycho::RunControl::setOrClearDebug {} {
    
    if {$ptkDebug($universeName)} {
	
	# Turn debug mode on and enable verbose tcl messages
	# FIXME: At this time (5/7/96) don't know where 
	# ptkVerboseErrors is from so for now not using it.  
	# set ptkVerboseErrors 1

	# Enable the debug mode control panel
	pack $itk_component(debugModePanel) -side top -anchor nw \
		-after $itk_component(execution)
    } {
	pack forget $itk_component(debugModePanel)
    }
}

#######################################################################
#### step
# Step through the current run
#
body ::tycho::RunControl::step {} {

}

#######################################################################
#### stop
# Stop the current run
#
body ::tycho::RunControl::stop {} {

}

#######################################################################
#### toggleScript
# Enable or disable the tcl script window.  If the script window is
# enabled, we disable the iterations entry field.
#
body ::tycho::RunControl::toggleScript {} {

    if {$ptkScriptOn($universeName)} {
	# Disable the iterations field
	# FIXME: We still need to figure out how to disable the iterations
	# without doing a pack forget; 
	pack forget $itk_component(iter)
	pack forget $itk_component(infinity)
	pack $itk_component(exeTclScript) -side top -anchor nw
    } {
	pack forget $itk_component(exeTcl Script)
	pack $itk_component(iter) -side top -anchor nw -pady 5
	pack $itk_component(infinity) -side top -anchor nw -pady 5
    }
}


#######################################################################
#### updateCount
# Update the number of iterations completed count in when in debug
# mode
#
body ::tycho::RunControl::updateCount {} {

}





