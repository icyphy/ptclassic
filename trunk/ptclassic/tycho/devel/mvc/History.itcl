##########################################################################
# Version: $Id$
# Author: John Reekie, Edward A. Lee
#
# Copyright (c) 1996 The Regents of the University of 'California'.
#  rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Publisher
#
# Some views maintain their own information -- in effect, the
# view combines the model and view entities into a single one.
# The _Publisher_ class supports interchange of data between
# such views: it is an "empty" information model that uses the
# publishing mechanism to keep all views synchronized.
# It also enables the same history and persistence mechanisms to be
# used for these views. (Perhaps this class should be renamed
# _History_ since that may perhaps be a more usage.)
#
# For the persistence mechanism to work, a _Publisher_ must be given
# the *-information* option, being a view with a describe{} method.
# I considered just using one of the subscribers, but decided against
# it because (a) not all subscribers will necessarily have a
# describe{} method and (b) a view does not have to subscribe to
# a _Publisher_ to use the history and persistence mechanisms.
#
class ::tycho::Publisher {
	inherit ::tycho::Model

	constructor {args} {}
	destructor {}

	####################################################################
	
	# A view containing the real "information"
	pubic variable information ""
	
	####################################################################
	
	# Publish a change in data
	method publish {whoiam command inverse}

	# Record a change in data
	method record {command inverse}

	####################################################################
	
	# Write data to a data file and image file.
	protected method writeData {fd id}
}


########################################################################
#### constructor
#
body ::tycho::Publisher::constructor {args} {
	# Evaluate options
	eval configure $args
}

########################################################################
#### publish
#
# Publish data. This is the same as recording it, except that 
# the change is forwarded to any subscribers to the index
# embedded (first argument) in the command.
#
body ::tycho::Publisher::publish {whoiam command inverse} {
	# Record the command
	record $command $inverse

	# Mark as publishable
	set publishable($historyMark(current)) 1

	# Remember where it happened
	set historyMark(published) $historyMark(current)

	# Update subscribers.
	eval notify $whoiam $command
}

########################################################################
#### record
#
# Record a command for undoing. The interface is somewhat different
# from the standard _Model_ interface: the caller must explicitly
# provide the inverse of the command, since this model has no
# information and thus has no way of working out what the inverse is.
#
body ::tycho::Publisher::record {command inverse} {
	# Clear the redo future if needed
	if { $historyMark(current) < $historyMark(last) } {
		clear current last
	}

	# Record the command and its inverse
	incr historyMark(current)
	set undoCommands($historyMark(current)) $command
	set redoCommands($historyMark(current)) $inverse
	set publishable($historyMark(current)) 0

	# Mark as modified
	set modified 1
}


########################################################################
########################################################################
####                     protected methods

########################################################################
#### writeData
#
# Write data to a data file and an image file. This method overrides
# the default method to get the description of the data from the
# *-information* option, which must be a view that responds to
# the methods get{} and describe{} (both with no arguments).
#
body ::tycho::Publisher::writeData {fd id} {
	if { $information == "" } {
		error "Cannot write $dataname: no information"
	}

	if { $fd != "" } {
		puts $fd [$information get]
	}
	if { $id != "" } {
		puts $id [$information describe]
	}
}
