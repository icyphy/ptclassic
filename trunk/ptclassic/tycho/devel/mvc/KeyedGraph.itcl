# A mixin class for Graphs with "welds" between vertices and edges.
#
# @Author: Edward A. Lee, John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### KeyedGraph
#
# A mixin class that makes connections between edges and vertices in
# a graph "keyed" -- that is, indexed by name. This is used for
# graphs in which the different edges to each vertex need to be
# ordered or otherwise uniquely distinguished,.
#
class ::tycho::KeyedGraph {

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####
    
    # The default options of each weld
    public variable weldoptions {}

    ###################################################################
    ####                         public methods                    ####

    # Get edges adjacent to a vertex
    method adjacentedges {vertex {pattern1 *} {pattern2 *}}

    # Get vertices adjacent to a vertex
    method adjacentvertices {vertex {pattern1 *} {pattern2 *}}

    # Get welds adjacent to a vertex
    method adjacentwelds {vertex {pattern1 *} {pattern2 *}}

    # Get the keys at a vertex
    method keys {vertex}

    # Attach one or more welds to a vertex
    method weld {vertex args}

    # Get an option or options of a weld
    method weldcget {weld option}

    # Configure a weld with one or more options
    method weldconfigure {weld args}

    # Return all options of a weld
    method weldoptions {weld}

    #################################################################
    ####                  protected variables                    ####

    # The welds
    protected variable _welds

    # The options associated with each weld
    protected variable _weldoptions
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### adjacentedges
#
# Get the adjacent edges to all welds matching the given patterns.
# The first argument is the vertex we are looking at. The second
# argument, if present, is a pattern that is matched against the keys
# of that vertex; the third argument, if present, is a pattern that
# that is matched against the keys at the "other end" of the edges
# matched by the first pattern. If the second or third argument
# is omitted, it defaults to *, so that all adjacent edges will
# be returned. Edges are returned in whatever format makes sense
# for the concrete subclass.
#
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::MultiGraph::adjacentedges {vertex {pattern1 *} {pattern2 *}} {
    abstractMethod adjacentedges
}

########################################################################
#### adjacentvertices
#
# Get the adjacent vertices to all welds matching the given patterns.
# The first argument is the vertex we are looking at. The second
# argument, if present, is a pattern that is matched against the keys
# of that vertex; the third argument, if present, is a pattern that
# that is matched against the keys at the "other end" of the edges
# matched by the first pattern. If the second or third argument
# is omitted, it defaults to *, so that all adjacent vertices will
# be returned.
#
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::MultiGraph::adjacentvertices {vertex {pattern1 *} {pattern2 *}} {
    abstractMethod adjacentvertices
}

########################################################################
#### adjacentwelds
#
# Get the adjacent welds to all welds matching the given patterns.
# The first argument is the vertex we are looking at. The second
# argument, if present, is a pattern that is matched against the keys
# of that vertex; the third argument, if present, is a pattern that
# that is matched against the keys at the "other end" of the edges
# matched by the first pattern. If the second or third argument
# is omitted, it defaults to *, so that all adjacent welds will
# be returned.
#
# Return the empty string if the weld does not exist or there is
# no connection to it.
#
body ::tycho::MultiGraph::adjacentwelds {vertex {pattern1 *} {pattern2 *}} {
    abstractMethod adjacentwelds
}

########################################################################
#### keys
#
# Return a list of keys on a given vertex. (This was named "welds," but
# since it does return keys (eg "bar") instead of welds (eg "foo.bar")
# I thought this name would be more accurate.)
#
body ::tycho::AbstractGraph::keys {vertex} {
    set result {}
    foreach weld [array names _welds $vertex.*] {
	lappend result [lindex [split $weld "."] 1]
    }
    return $result
}

########################################################################
#### weld
#
# Attach welds to a vertex. The arguments are a list of keys.
#
# FIXME: Return the inverse command.
#
body ::tycho::AbstractGraph::weld {vertex args} {
	#
	# The internal arrays are used by default as follows:
	#
	#     _welds:       vertex.key |-> 1
	#     _weldoptions: vertex.key |-> {option value ...}
	#
	
    if { ! [::info exists _vertices($vertex)] } {
	error "Unknown vertex $vertex in $dataname"
    }
    foreach key args {
		set _welds($vertex.$key) 1
		set _weldoptions($vertex.$key) $weldoptions
    }
}

########################################################################
#### weldcget
#
# Get an option of a weld.  An error will occur if the
# weld does not exist or the option does not exist for that weld.
#
body ::tycho::AbstractGraph::weldcget {weld option} {
    array set temp $_weldoptions($weld)
    return $temp($option)
}

########################################################################
#### weldconfigure
#
# Configure the weld and return the inverse command. The argument list
# is a flat list of option-value pairs. An error will occur if the
# weld does not exist.
#
body ::tycho::AbstractGraph::weldconfigure {weld args} {
    set inverse [list weldconfigure $weld]
    array set temp $_weldoptions($weld)
    foreach {option value} $args {
	lappend inverse $option $temp($option)
	set temp($option) $value
    }
    set _weldoptions($weld) [array get temp]
    return $inverse
}

########################################################################
#### weldoptions
#
# Return a list containing the options of a weld as a flat
# option-value list. An error will occur if the weld does not exist.
#
body ::tycho::AbstractGraph::weldoptions {weld} {
    return $_weldoptions($weld)
}
