##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### MultiGraph
#
# The _MultiGraph_ model is a directed graph that associates
# a "key" with each edge connected to a vertex. This is needed for 
# applications such as dataflow, in which the order of edges
# is significant. Keys are completely arbitrary strings; the vertex-key
# combination to which an edge is connected is called a "weld"
# and is denoted _vertex_._key_. Each weld (as well each vertex and
# each edge) can have a set of arbitrary options. More than one
# edge can be connected to a weld -- this class thus "sort-of"
# supports hyperedges.
#
# <b>Note</b>: Keys must be unique at each vertex.
#
class ::tycho::MultiGraph {
    inherit ::tycho::Digraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    # The default options of each weld
    public variable weldoptions {}

    #################################################################
    ####                     public methods                      ####

    # Get the adjacent vertex connected to the given weld
    method adjacentvertex {weld}

    # Get the adjacent weld connected to the given weld
    method adjacentweld {weld}

    # Add an edge and options to the graph
    method connect {source target args}

    # Remove a vertex (but not adjacent edges) from the graph
    method delete {vertex}

    # Remove an edge from the graph
    method disconnect {source target}
}

########################################################################
#### constructor
#
body ::tycho::MultiGraph::constructor {args} {
    # Evaluate options
    eval configure $args
}

########################################################################
#### adjacentvertex
#
# Get the adjacent vertex connected to the given weld. Return the
# empty string if the weld does not exist or there is no connection
# to it.
#
body ::tycho::MultiGraph::adjacentvertex {weld} {
    # Try child
    set adjacent [array names _edges $vertex.$key^*]
    if { $adjacent != "" } {
	return [lindex [split [lindex [split $adjacent "^"] 1] "."] 0]
    }
    # Try parent
    set adjacent [array names _edges *^$vertex.$key]
    if { $adjacent != "" } {
	return [lindex [split [lindex [split $adjacent "^"] 0] "."] 0]
    }
    return ""
}

########################################################################
#### adjacentweld
#
# Get the adjacent weld connected to the given weld. Return the
# empty string if the weld does not exist or there is no connection
# to it.
#
body ::tycho::MultiGraph::adjacentweld {weld} {
    # Try child
    set adjacent [array names _edges $vertex.$key^*]
    if { $adjacent != "" } {
	return [lindex [split $adjacent "^"] 1]
    }
    # Try parent
    set adjacent [array names _edges *^$vertex.$key]
    if { $adjacent != "" } {
	return [lindex [split $adjacent "^"] 0]
    }
    return ""
}

########################################################################
#### connect
#
# Add a new edge to the graph, and return the inverse command.
# The edge is specified by two welds; additional arguments are a
# flat option-value list for the edge. Flag an error if the edge
# already exists, but not if the two vertices or their welds do not exist. 
#
body ::tycho::MultiGraph::connect {source target args} {
    if { [::info exists _edges($source^$target)] } {
	error "Edge ($source, $target) already exists in $dataname"
    }
    set modified 1

    # Figure vertex names
    set edgeinfo "[split $source .] [split $target .]"
    set src [lindex $edgeinfo 0]
    set tgt [lindex $edgeinfo 2]

    # Record the edge
    set _edges($source^$target) $edgeinfo
    adjacencyadd $src $tgt

    # Record its options
    array set temp [concat $edgeoptions $args]
    set _edgeoptions($source^$target) [array get temp]

    # Remember the welds
    if { ! [::info exists _weldoptns($source)] } {
	set _weldoptns($source) $weldoptions
    }
    if { ! [::info exists _weldoptns($target)] } {
	set _weldoptns($target) $weldoptions
    }

    # Clear any cached structural information
    unset _attributes

    # Return the inverse command
    return [list disconnect $source $target]
}

########################################################################
#### delete
#
# Delete a vertex from the graph, and return the inverse command.
#
body ::tycho::Digraph::delete {vertex} {
    if { ! [::info exists _vertices($vertex)] } {
	error "Unknown vertex $vertex in $dataname"
    }
    set modified 1

    set inverse [list add $vertex $_vertices($vertex) $_vertexoptions($vertex)]
    unset _vertices($vertex)

    foreach weld [array names _weldoptns $vertex.*] {
	append inverse "; weldconfigure $weld $_weldoptns($weld)"
	unset _weldoptns($weld)
    }

    # Clear any cached structural information
    catch {unset _cache}

    return $inverse
}

########################################################################
#### disconnect
#
# Remove an edge from the graph, and return the inverse command. Flag an
# error if the edge does not exist.
#
body ::tycho::Digraph::disconnect {source target} {
    if { ! [::info exists _edges($source^$target)] } {
	error "Edge ($source, $target) unknown in $dataname"
    }
    set modified 1

    # Figure vertex names
    set src [lindex [split $source "."] 0]
    set tgt [lindex [split $target "."] 0]

    # Remember the inverse
    set inverse [list connect $edge $target $_edgeoptions($source^$target)]

    # Delete the edge
    unset _edges($source^$target)
    if { [array names _edges $src.*->$tgt.*] == "" } {
	adjacencydelete $src $tgt
    }

    # Delete the options(s)
    unset _edgeoptions($source^$target)

    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}
