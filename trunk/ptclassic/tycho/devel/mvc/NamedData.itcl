##########################################################################
# Version: $Id$
# Author: John Reekie, Edward A. Lee
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### NamedData
#
# The _NamedData_ class implements a simple information model --
# it is, in effect, an associative array, except that the array
# can be associated with
# a set of files, changes to the array can be undone, redone, and
# published, and each entry in the 
# array can have options as well as a value. For example, you
# can add an entry to an array and give it some options with:
# <pre>
#     $dataarray add Fred "You rang?" -ingratiating never
# </pre>
#
# To change an option, use the entryconfigure{} method:
# <pre>
#     $dataarray entryconfigure Fred -ingratiating sometimes
# </pre>
#
# By default, a NamedData will accept any options. To limit
# the options that will be accepted and to set the default values,
# set the *-entryoptions* option (of the NamedData, not of an entry):
#
#     $dataarray configure -entryoptions {-ingratiating always -glib usually}
#
# Because this class supports glob-style pattern matching in
# many of its functions, it can be used to implement hierarchical
# arrays (i.e. forests) with barely any extra effort. For example,
#
# <pre>
#     $dataarray add Fred.greeting "Hello!"
#     $dataarray add Fred.farewell "See ya!"
# </pre>
#
# Then you can find the "nested" components with, say,
# <pre>
#     $dataarray match Fred.*
# </pre>
#
# which will return the list <code>{Fred.greeting Hello! Fred.farewell {See 
# ya!}}</code>. To delete all the entries related to Fred, use 
# <code>$dataarray match Fred*</code> to find the entries and use
# *foreach* to iterate through and delete each.
# (Note the pattern: <code>Fred*</code> not <code>Fred.*</code>. If using
# this idea in a general setting, you should probably use an index like
# <code>Fred._</code> instead of <code>Fred</code> for the node entry.)
#
# This idea is not intended to be "bullet-proof": the hierarchy
# mechanism is quite exposed to clients. For example, a node
# of a tree can have values and options as well as its leaves. Whether
# and how this is used is entirely up to the client. It may be a good
# idea to provide a more restrictive interface to an instance
# of this class used in this way -- see the _WidgetPreferences_ class for
# an example.
#
class ::tycho::NamedData {
    inherit ::tycho::Model
    
    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The default options of each data entry -- if empty, any are legal
    public variable entryoptions {}
    
    #################################################################
    ####                     public methods                      ####

    # Add an entry to the array
    method add {index data args}
    
    # Assign new data to en existing entry
    method assign {index data}
    
    # Delete an entry
    method delete {index}

    # Describe the entries matched by a pattern
    method describe {pattern args}

    # Get an option or options of an entry
    method entrycget {index option}

    # Configure the entry with one or more options
    method entryconfigure {index args}
    
    # Return all options of an entry
    method entryoptions {index}
    
    # Return an entry in the array
    method get {index}

    # Return a list of indexes that match a pattern
    method indexes {{pattern *} {regexpflag {}}}

    # Return a list of entries and values based on a pattern
    method match {pattern args}

    #################################################################
    ####                  protected methods                      ####

    # Write data to a data file and image file.
    protected method writeData {fd id}

    #################################################################
    ####                  protected variables                    ####

    # The values in the array
    protected variable _value
    
    # The options of the data values
    protected variable _optns
}

########################################################################
#### constructor
#
body ::tycho::NamedData::constructor {args} {
    # Evaluate options
    eval configure $args
}

########################################################################
#### add
#
# Add a new entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry options. Return the inverse command.
#
body ::tycho::NamedData::add {index data args} {
    if { [::info exists _value($index)] } {
	error "Data $index already exists in $dataname"
    }

    # set value
    set _value($index) $data

    # Set options
    if { $entryoptions != "" } {
    	# Set default options then given options. Flag an error
    	# if a given option is not in the defaults
	array set temp $entryoptions
	foreach {option value} $args {
	    if { ! [::info exists temp($option)] } {
		error "Unknown option $option in $dataname"
	    }
	    set temp($option) $value
	}
	set _optns($index) [array get temp]
    } else {
	# Set the options. Any options are legal
	set _optns($index) $args
    }
    return [list delete $index]
}

########################################################################
#### assign
#
# Assign new data to an existsing entry. Flag an error if the entry
# does not exist. Return the inverse command.
#
body ::tycho::NamedData::assign {index data} {
    if { ! [::info exists _value($index)] } {
	error "Data $index does not exist in $dataname"
    }
    set inverse [list assign $index $_value($index)]
    set _value($index) $data
    return $inverse
}

########################################################################
#### delete
#
# Delete an entry. Flag an error if the entry does not exist.
# Return the inverse command.
#
body ::tycho::NamedData::delete {index} {
    if { ! [::info exists _value($index)] } {
	error "Unknown entry $index in $dataname"
    }
    set inverse [list add $index $_value($index)]
    eval lappend inverse $_optns($index)
    unset _value($index)
    
    return $inverse
}

########################################################################
#### describe
#
# Return a low-level "description" of the entries matching the
# given pattern. All options are included in the result.
#
# Additional flags recognized by this routine are *-regexp*, which
# selects regular-expression matching instead of glob-style matching,
# and *-nohistory*, which prevents the undo history from being
# generated.
#
body ::tycho::NamedData::describe {pattern args} {
    set description ""
    
    # Add the undo history if not inhibited
    if { [lsearch -exact $args "-nohistory"] == -1 } {
	append description [::tycho::NamedData::describe $pattern]
    }

    # If the pattern is *, then do the most efficient thing
    if { $pattern == "*" } {
	append description "\n\n# Values of data $dataname\n\n"
	append description "array set _value [array get _value]\n"
	append description "\n\n# Options of data $dataname\n\n"
	append description "array set _optns [array get optns]\n"
	return $description
    } else {
	# Get matching indexes.
	if { [lsearch -exact $args "-regexp"] != -1 } {
	    set indexes [indexes $pattern -regexp]
	} else {
	    set indexes [indexes $pattern]
	}

	# Add the data regeneration commands
	append description "\n\n# Data of $dataname matching \"$pattern\"\n\n"
	foreach index $indexes {
	    append description "set _value($index) $_value($index)\n"
	    append description "set _optns($index) $_optns($index)\n"
	}
    }
    return $description
}

########################################################################
#### entrycget
#
# Get an option of a data entry. Flag an error if the entry
# does not exist or the option does not.
#
body ::tycho::NamedData::entrycget {index option} {
    if { ! [::info exists _value($index)] } {
	error "Data $index does not exist in $dataname"
    }
    array set temp $_optns($index)
    if { ! [::info exists temp($option)] } {
	error "Unknown option $option in $dataname"
    }
    return $temp($option)
}

########################################################################
#### entryconfigure
#
# Configure the given entry.  The argument list
# is a flat list of option-value pairs. If there are arbitrary
# options, the undo command will not delete options
# that have not already been set, although it will change
# back existing options that are changed.
#
# Flag an error if the entry does not exist, or if an
# option is invalid.
# 
body ::tycho::NamedData::entryconfigure {index args} {
    if { ! [::info exists _value($index)] } {
	error "Data $index does not exist in $dataname"
    }

    set inverse [list entryconfigure $index]
    if { $entryoptions != "" } {
	# Can only change options that are already there
	array set temp $_optns($index)
	foreach {option value} $args {
	    if { ! [::info exists temp($option)] } {
		error "Unknown option $option in $dataname"
	    }
	    lappend inverse $option $temp($option)
	    set temp($option) $value
	}
	set _optns($index) [array get temp]
    } else {
	# Can set any options at all
	array set temp $_optns($index)
	foreach {option value} $args {
	    if { $value == "_NamedDataDeleteThisOption_" } {
		unset temp($option)
	    } elseif { [::info exists temp($option)] } {
		lappend inverse $option $temp($option)
		set temp($option) $value
	    } else {
		lappend inverse $option _NamedDataDeleteThisOption_
		set temp($option) $value
	    }
	}
	set _optns($index) [array get temp]
    }
    return $inverse
}

########################################################################
#### entryoptions
#
# Return a list containing the options of the entry as a flat
# option-value list.
#
body ::tycho::NamedData::entryoptions {index} {
    return $_optns($index)
}

########################################################################
#### get
#
# Get the value of an entry. Flag an error if the entry does
# not exist.
#
body ::tycho::NamedData::get {index} {
    if { ! [::info exists _value($index)] } {
	error "Data $index does not exist in $dataname"
    }
    return $_value($index)
}

########################################################################
#### indexes
#
# Return a list of indexes based on the given pattern. The
# *-regexp* flag following the pattern selects regular expression
# matching instead of glob-style matching.
#
body ::tycho::NamedData::indexes {{pattern *} {regexpflag {}}} {
    if { $regexpflag != "" } {
	# Get indexes using regular expression matching
	set result {}
	set testlist [array names _value]
	while { [set index [lsearch -regexp $testlist $pattern]] != -1 } {
	    lappend result [lindex $testlist $index]
	    set result [lreplace $testlist 0 $index]
	}
	return $result
    } else {
	# Glob-style matching
	return [array names _value $pattern]
    }
}

########################################################################
#### match
#
# Return a list of index-value pairs based on the given pattern. The
# following flags can follow the pattern argument:
# <ul>
# <li>*-regexp*: Use regular expression matching instead of glob-style
# matching.
# <li>*-arrayset*: The returned list is in a form that can be given to 
# "array set".
# <li>*-alloptions*: If *-arrayset* is not specified, return a flat
# list of index-value-options 
# triples, where the third element is a flat list of option-value pairs.
# For example, <pre>match "*" -alloptions</pre> might return
# <pre>{first This {-x 0 -y 1} second That {-x 7 -y 4}}</pre>. If
# *-arrayset* is specified, this would return
# <pre>{first {This {-x 0 -y 1}} second {That {-x 7 -y 4}}}</pre>.
# <li>*-withoptions* _option_ ... _option_: If *-arrayset* is not 
# specified, return a flat list 
# containing the index, value, and then the value of each of the 
# specified options (without the option name). This must be the last
# option specified.
# For example, <pre>match "*" -withoptions -x</pre> would return
# <pre>{first This 0 second That 7}</pre>. If
# *-arrayset* is specified, this would return
# <pre>{first {This 0} second {That 7}}</pre>.
# </ul>
#
# The option testing and matching is not super-efficient, but since
# this method is likely to be returning a large result, it probably
# doesn't matter.
#
body ::tycho::NamedData::match {pattern args} {
    set regexp 0
    set arrayset 0
    set alloptions 0
    set withoptions {}
    
    # Get the option flags
    while { $args != "" } {
	set test [lindex $args 0]
	set args [lreplace $args 0 0]
	if { $test == "-regexp" } {
	    set regexp 1
	} elseif { $test == "-alloptions" } {
	    set alloptions 1
	} elseif { $test == "-arrayset" } {
	    set arrayset 1
	} elseif { $test == "-withoptions" } {
	    set withoptions $args
	    set args ""
	}
    }

    # Get the matching indexes
    if { $regexp } {
	set matching [indexes $pattern -regexp]
	# Might as well do the default case here
	if { ! $alloptions && $withoptions == 0 } {
	    set result {}
	    foreach index $matching {
		lappend result $index $_value($index)
	    }
	    return $result
	}
    } else {
	# Glob-style matching. Optimize for the default case
	if { ! $alloptions && $withoptions == 0 } {
	    return [array get _value $pattern]
	}
	set matching [array names _value $pattern]
    }
    
    # Return the found indexes according to the other flags
    set result {}
    if { $alloptions } {
	# Get all options with the values
	if { $arrayset } {
	    foreach index $matching {
		lappend result $index [concat [list $_value($index)] \
			[array get _optns $index@*]]
	    }		
	} else {
	    foreach index $matching {
		lappend result $index $_value($index) \
			[array get _optns $index@*]
	    }
	}
    } else {
	# Return specified options only
	if { $arrayset } {
	    foreach index $matching {
		lappend result $index
		set r [list $_value($index)]
		foreach opt $withoptions {
		    lappend r $_optns($index@$opt)
		}
		lappend result $r
	    }		
	} else {
	    foreach index $matching {
		lappend result $index $_value($index)
		foreach opt $withoptions {
		    lappend result $_optns($index@$opt)
		}
	    }
	}
    }
    return $result
}


########################################################################
########################################################################
####                     protected methods

########################################################################
#### writeData
#
# Write data to a data file and an image file. This extends the default
# method to write the default options to the image file.
#
body ::tycho::NamedData::writeData {fd id} {
    if { $id != "" } {
	puts $id "set entryoptions [list $entryoptions]"
    }
    ::tycho::Model::writeData $fd $id
}
