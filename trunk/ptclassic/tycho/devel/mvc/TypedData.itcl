##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### TypedData
#
# The _TypedData_ class extends the _NamedData_ model by giving each
# entry a "type," which affects the legal values it may have and how
# a view will display them.
#
# The *-defaultoptions* option can be set in the constructor call, but must
# _not_ be changed thereafter (with configure{}) because this class adds
# its own options to *-defaultoptions*, which must be there for the
# code to function correctly.
#
class ::tycho::TypedData {
    inherit ::tycho::NamedData
    
    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                     public methods                      ####

    # Add an entry to the array
    method add {index data args}

    # Assign data to an entry
    method assign {index data}

    #################################################################
    ####                    protected methods                    ####

    # Verify that data matches its type and passes its verification script
    method verifydata {type data verify}
}

########################################################################
#### constructor
#
body ::tycho::TypedData::constructor {args} {
    # Evaluate arguments
    eval configure $args

    # Add the default entry options
    lappend entryoptions -type string -verify {} -values {} -state normal
}

########################################################################
#### add
#
# Add a new entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry options. By default, each new entry has the type "string,"
# meaning it can have any legal value. To give it a different type,
# supply the *-type* option, which can take any of the values:
# <ul>
#   <ul>
#   <li>*string*: Can be any arbitrary value. This is the default, and
#   is assumed if no *-type* variable is given.
#   <li>*number*: Constrained to be a number.
#   <li>*integer*: Constrained to be an integer.
#   <li>*boolean*: A boolean value.
#   <li>*choice*: A small set of (arbitrary) possible values. These
#   are intended for display by radiobuttons.
#   <li>*set*: A larger set of (arbitrary) possible values. These
#   are intended for display by an option menu.
#   <li>*font*: A font value, specified as a list {_family_ _size_
#   _style_}. The second and third elements can be omitted -- see FontManager
#   for details.
# </ul>
#
# Apart from the *-type* option, data entries can have a number of
# other options:
# <ul>
# <li>*-values*: A list representing the set of legal values of
# the parameters. Valid for _choice_ and _set_ types.
# <li>*-state*: Can be either "normal" or "disabled." If disabled, the
# parameter cannot be altered.
# <li>*-verify*: If this option is supplied, then calls to replace{}
# apply that option to a new data value to verify that it is legal.
# This can be used to implement arbitrary range-checking, and so on.
# For example, supplying the function-script {%0 > 0} will ensure that any
# subsequent assignments to that variable are greater than zero.
# </ul>
#
body ::tycho::TypedData::add {index data args} {
    # First just add the data entry using the superclass' method
    eval [list chain $index $data] $args

    # Get the options
    array set options $_optns($index)

    # Check for valid type
    if { [lsearch -exact \
	    {string number integer boolean choice set font color} \
	    $options(-type)] == -1 } {
	error "Invalid entry type \"$type\""
    }

    # Check the data for validity
    if { ! [verifydata $options(-type) $data $options(-verify)] } {
	# Failed: undo the change
	delete $index
	error "Data $data at $index in $dataname failed to verify"
    }

    # Return the inverse
    return [list delete $index]	
}

########################################################################
#### assign
#
# Replace a given entry with new data. Flag an error if the entry
# does not exist. The new data value is first checked that it conforms
# to the type of the entry, and secondly checked with that entry's
# verification function-script (if it has one). This method returns
# the inverse command if the data is successfully replaced and the
# null string if not.
#
body ::tycho::TypedData::assign {index data} {
    if { ! [::info exists _value($index)] } {
	error "Data $index does not exist in $dataname"
    }
    set inverse [list assign $index $_value($index)]
    
    # Check the data for validity
    array set options $_optns($index)
    if { ! [verifydata $options(-type) $data $options(-verify)] } {
	return ""
    }

    # Set it
    set _value($index) $data

    # Return the inverse
    return $inverse
}


########################################################################
#### verifydata
#
# Verify that data matches its type and passes its verifcation
# script (if there is one).
#
body ::tycho::TypedData::verifydata {type data verify} {
    switch -exact $type {
	"string" {
	    # anything is acceptable
	}
	"integer" {
	    if { ! [regexp {^-?[0-9]+$} $data] } {
		return 0
	    }
	}
	"number" {
	    if { ! [regexp {^-?[0-9]+\.?[0-9]*$} $data] } {
		return 0
	    }
	}
	"boolean" {
	    if { $data != 0 && $data != 1 } {
		return 0
	    }
	}
	"choice" -
	"set" {
	    if { [lsearch -exact $_datas($name) $data] == -1 } {
		return 0
	    }
	}
	"font" -
	"color" {
	    ;# FIXME: Don't know what to do here!
	}
	default {
	    return 0
	}
    }

    # Verify data
    if { $verify != "" } {
	return [uplevel #0 apply [list $verify] $data]
    } else {
	return 1
    }
}
