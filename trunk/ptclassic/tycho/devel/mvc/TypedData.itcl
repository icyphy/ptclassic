##########################################################################
# Version: $Id$
# Author: John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### TypedData
#
# The _TypedData_ class extends the _NamedData_ model by giving each
# entry a "type," which affects the legal values it may have and how
# a view will display them.
#
# The *-defaultoptions* option can be set in the constructor call, but must
# _not_ be changed thereafter (with configure{}) because this class adds
# its own options to *-defaultoptions*, which must be there for the
# code to function correctly.
#
class ::tycho::TypedData {
	inherit ::tycho::NamedData
	
	constructor {args} {}
	destructor {}
	
	####################################################################
	
	# Add an entry to the array
	method add {index data args}

	# Assign data to an entry
	method assign {index data}
}

########################################################################
#### constructor
#
body ::tycho::TypedData::constructor {args} {
	# Evaluate arguments
	eval configure $args

	# Add the data options of this class
	lappend defaultoptions -type string -verify {}
}

########################################################################
#### add
#
# Add a new entry to the array. Flag an error if the entry
# already exists. Additional arguments are the initial values
# of entry options. By default, each new entry has the type "string,"
# meaning it can have any legal value. To give it a different type,
# supply the *-type* option, which can take any of the values:
# <ul>
# FIXME
# </ul>
#
# Apart from the *-type* option, data entries can have a number of
# other options:
# <ul>
# FIXME
# <li>*-verify*: If this option is supplied, then calls to replace{}
# apply that option to a new data value to verify that it is legal.
# This can be used to implement arbitrary range-checking, and so on.
# For example, supplying the function-script {%0 > 0} will ensure that any
# subsequent assignments to that variable are greater than zero.
# </ul>
#
body ::tycho::TypedData::add {index data args} {
	# First just add the data entry using the superclass' method
	eval [list ::tycho::DataArray add $index $data] $args
	
	# Now check the data for validity
	# FIXME
	switch -exact $_optns($index@-type) {
		"string" {
			;#
		}
		default {
			error "Unknown type $_optns($index@-type)"
		}
	}
	
	# Verify the new data
	if { $_optns($index@-verify) != "" } {
		if { [apply $_optns($index@-verify) $data] } {
			delete $index
			error "Data $data at $index failed to verify $_optns($index@-verify)"
		}
	}
	return [list delete $index]	
}

########################################################################
#### assign
#
# Replace a given entry with new data. Flag an error if the entry
# does not exist. The new data value is first checked that it conforms
# to the type of the entry, and secondly checked with that entry's
# verification function-script (if it has one). This method returns
# the inverse command if the data is successfully replaced and the
# null string if not.
#
body ::tycho::TypedData::assign {index data} {
	if { ! [::info exists $_value($index)] } {
		error "Data $index does not exist in $dataname"
	}

	set passed 0
	set inverse [list assign $index $_value($index)]
	
	# Now check the data for validity
	# FIXME
	switch -exact $_optns($index@-type) {
		"string" {
			;#
		}
		default {
			error "Unknown type $_optns($index@-type)"
		}
	}

	# Check that new data passes verification
	if { $_optns($index@-verify) != "" } {
		set passed [apply $_optns($index@-verify) $data]
		if { $passed } {
			set _value($index) $data
		}
	} else {
		set _value($index) $data
	}		
	if { $passed } {
		return $inverse
	} else {
		return ""
	}
}
