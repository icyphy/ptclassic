##########################################################################
# Version: $Id$
# Author: Edward A. Lee, John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Digraph
#
# The _Digraph_ model is a standard directed graph.  It extends the
# _AbstractGraph_ superclass with concrete methods for a number
# of common algorithms on directed graphs.
#
# When constructed,  edges do not require that vertices
# already exist, as this can occur when graphs are automatically
# generated; once all vertices and edges have been added, the graph
# can be checked for correctness and "repaired" with the verify{}
# and repair{} methods. It also makes graph construction somewhat
# faster as there is less error-checking.
#
# Here are some examples of its use; see <a 
# href="AbstractGraph">AbstractGraph</a> for examples of
# the basics of graph construction. First, create a graph
# that looks like this:
# <pre>
#   d----+
#        v
#   a--->b&lt;==>c
#   |         ^
#   +---------+
# </pre>
# <tcl><pre>
#     catch {delete object $graph}
#     set graph [::tycho::Digraph [::tycho::autoName graph]]
#     $graph parse {
#         vertex a
#         vertex b
#         vertex c
#         vertex d
#         edge a b
#         edge b c
#         edge a c
#         edge c b
#         edge d b
#     }
#     $graph describe
# </tcl></pre>
#
# Get the children of a vertex:
# <pre><tcl>
#     $graph children a
# </tcl></pre>
#
# Get the parents of a vertex:
# <pre><tcl>
#     $graph parents b
# </tcl></pre>
#
# Test if the graph is acyclic:
# <pre><tcl>
#     $graph acyclic
# </tcl></pre>
#
# Get the roots of the graph:
# <pre><tcl>
#     $graph roots
# </tcl></pre>
#
# Get the topological sort of the graph:
# <pre><tcl>
#     $graph topologicalSort
# </tcl></pre>
#
# Get a depth-sort of the graph:
# <pre><tcl>
#     $graph depthSort
# </tcl></pre>
#
# Get the graph in a grid layout (Not working!):
# <pre><tcl>
#     $graph gridLayout
# </tcl></pre>
#
class ::tycho::Digraph {
    inherit ::tycho::AbstractGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Remove a vertex _and_ adjacent edges from the graph
    method delete* {vertex}

    # Add an edge and attributes to the graph
    method edge {vertex1 vertex2 args}

    # Get an attribute or attributes of an edge
    method edgecget {vertex1 vertex2 {attribute {}}}

    # Configure the edge with one or more attributes
    method edgeconfigure {vertex1 vertex2 args}

    # Remove an edge from the graph
    method edgedelete {vertex1 vertex2}

    # Return edges matching a pair of connection patterns
    method edges {{pattern1 *} {pattern2 *}}

    # "Repair" a graph by deleting improperly-connected edges
    method repair {}

    # Get the edges within a subgraph
    method subgraphEdges {args}

    # Get the input edges to a subgraph
    method subgraphInputs {args}

    # Get the output edges from a subgraph
    method subgraphOutputs {args}

    # Test whether a graph is correctly constructed
    method verify {}

    #################################################################
    ####                   protected methods                     ####

    # Return a description of a single item
    protected method _describeitem {name {prefix {}}}

    # Update the cache
    protected method _updatecache
}

########################################################################
#### constructor
#
body ::tycho::Digraph::constructor {args} {
    # Evaluate options
    eval configure $args

    # Define the "edge" type
    type define edge \
            :override 1 \
            :leafonly 1
}

########################################################################
#### delete*
#
# Delete a vertex and all connected edges from the graph, and
# return the undo command.
#
body ::tycho::Digraph::delete* {vertex} {
    if ![exists vertex:$vertex] {
        error "Unknown vertex: \"$vertex\""
    }

    # Start undo command
    set undo [list sequence]

    # Delete outward edges
    foreach {src tgt} [edges $vertex *] {
	lappend undo [edgedelete $src $tgt]
    }
    # Delete inward edges
    foreach {src tgt} [edges * $vertex] {
	lappend undo [edgedelete $src $tgt]
    }
    # Delete the vertex. (NB: This must follow the edge deletion.)
    lappend undo [vertexdelete $vertex]

    # Return the undo command
    return $undo
}

########################################################################
#### edge
#
# Add a new edge to the graph, and return the undo command.
# By default, this method just adds a link between the
# two named edges.  Flag an error if the edge
# already exists, but not if any of the connected vertices do not exist.
#
body ::tycho::Digraph::edge {vertex1 vertex2 args} {
    # Add the edge to the model. We encode the vertex name into the
    # edge names to make it possible to implement methods like
    # edges{} using pattern-matching.
    eval add edge:$vertex1^$vertex2 $args
}

########################################################################
#### edgecget
#
# Get an attribute of an edge. An error will occur if the edge does not
# exist or the attribute does not exist.
#
body ::tycho::Digraph::edgecget {vertex1 vertex2 {attribute {}}} {
     eval itemcget edge:$vertex1^$vertex2
}

########################################################################
#### edgeconfigure
#
# Configure the edge and return the undo command. An error will
# occur if the edge does not exist. The argument list
# is a flat list of attribute-value pairs.
#
body ::tycho::Digraph::edgeconfigure {vertex1 vertex2 args} {
    eval itemconfigure edge:$vertex1^$vertex2 $args
}

########################################################################
#### edgedelete
#
# Remove an edge from the graph, and return the undo command. This
# default method works for simple directed graphs.
#
body ::tycho::Digraph::edgedelete {vertex1 vertex2} {
    delete edge:$vertex1^$vertex2
}

########################################################################
#### edges
#
# Return a list containing the edges of the graph with source and target
# vertex names that match the given patterns. The result is a flat list
# of source-target pairs. If no arguments are supplied, return all edges.
# To test for the presence of a single edge, provide its source and 
# target vertices as the arguments and compare the result with the empty
# list.
#
body ::tycho::Digraph::edges {{pattern1 *} {pattern2 *}} {
    # Only use the cached data if the cache is valid
    if [cache valid] {
        eval concat [array names _edges [list $pattern1 $pattern2]]
    } else {
        set result {}
        foreach edge [names edge:$pattern1^$pattern2] {
            eval lappend result [lreplace [split $edge :^] 0 0]
        }
        return $result
    }
}

########################################################################
#### repair
#
# "Repair" a graph by deleting improperly-connected edges. This method
# provides a default implementation that will remove invalid edges in 
# most properly-written subclasses; however, subclasses may
# choose to override it for efficiency, because it doesn't work
# with the subclass, or to perform additional repairs. This
# method should be called after building a graph if it is not certain
# that the graph is correctly constructed.
# This method cannot be recorded or published.
#
body ::tycho::Digraph::repair {} {
    # Do not use cached data
    foreach edge [names edge:*] {
        set splat [split $edge :^]
        set src [lindex $splat 1]
        set tgt [lindex $splat 2]

        if { ![exists vertex:$src] || ![exists vertex:$tgt] } {
            # Delete a disconnected edge
            edgedelete $src $tgt
        }
    }
    # Return null so record{} or publish{} will complain.
    return ""
}

########################################################################
#### subgraphEdges
#
# Return the edges within a sub-graph. The arguments are the vertices
# of the subgraph. The returned list of edges are source-target pairs
# (not a flat list as in some other methods). This is to make graph
# editors more generic.
#
body ::tycho::Digraph::subgraphEdges {args} {
    _update
    set result {}
    foreach u $args {
        foreach v $args {
            eval lappend result [array names _edges [list $u $v]]
        }
    }
    return $result
}

########################################################################
#### subgraphInputs
#
# Return the input edges to a sub-graph. The arguments are the vertices
# of the subgraph. The returned list of edges are source-target pairs
# (not a flat list as in some other methods). This is to make graph
# editors more generic.
#
body ::tycho::Digraph::subgraphInputs {args} {
	_update
    set result {}
    foreach v $args {
        foreach edge [array names _edges [list * $v]] {
            if { [lsearch -exact $args [lindex $edge 0]] < 0 } {
                lappend result $edge
            }
        }
    }
    return $result
}

########################################################################
#### subgraphOutputs
#
# Return the output edges from a sub-graph. The arguments are the vertices
# of the subgraph. The returned list of edges are source-target pairs
# (not a flat list as in some other methods). This is to make graph
# editors more generic.
#
body ::tycho::Digraph::subgraphOutputs {args} {
    _update
    set result {}
    foreach v $args {
        foreach edge [array names _edges [list $v *]] {
            if { [lsearch -exact $args [lindex $edge 1]] < 0 } {
                lappend result $edge
            }
        }
    }
    return $result
}

########################################################################
#### verify
#
# Test whether a graph is properly constructed. This method
# provides a default implementation that tests for invalid edges; however,
# subclasses may choose to override this method for efficiency, because
# it doesn't work with the subclass, or to perform additional tests.
#
body ::tycho::Digraph::verify {} {
    foreach edge [names edge:*] {
        set splat [split $edge :^]
        set src [lindex $splat 1]
        set tgt [lindex $splat 2]
        
        if { ![exists vertex:$src] || ![exists vertex:$tgt] } {
            return 0
        }
    }
    return 1
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _describeitem
#
# Return a string describing an item. this method overrides
# the default method because edges have a different format
# from the default.
#
body ::tycho::Digraph::_describeitem {name {prefix {}}} {
    regexp {(.+):(.+)} [lindex $name end] _ type tail

    if { $type == "edge" } {
        # Start string with type
        set string $prefix
        append string "edge"

        # Append the two vertices
        eval lappend string [split $tail ^]

	# Append data that differs from the default
	array set dflt [type defaults edge]
	foreach {attr val} [itemcget edge:$tail] {
	    if { ! [::info exists dflt($attr)] || $dflt($attr) != $val } {
		lappend string $attr $val
	    }
	}
        append string \n
    } else {
        chain $name $prefix
    }
}

########################################################################
#### _updatecache
#
# Clear the cache and build updated versions of the _parents,
# _children, _edges and _vertices arrays.
#
body ::tycho::Digraph::_updatecache {} {
    # Clear all cached data
    cache delete

    # Clear locally-cached data
    catch {unset _edges}
    catch {unset _parents}
    catch {unset _children}
    catch {unset _vertices}

    # Regenerate vertex list
    foreach vertex [names vertex:*] {
        set vertex [lindex [split $vertex :] 1]
        lappend _vertices $vertex
        set _parents($vertex) {}
        set _children($vertex) {}
    }
    foreach edge [names edge:*] {
        set splat [split $edge :^]
        set src [lindex $splat 1]
        set tgt [lindex $splat 2]

        # Regenerate parent-child lists
        lappend _children($src) $tgt
        lappend _parents($tgt) $src

        # Regenerate edge array
        set _edges([list $src $tgt]) 1
    }
    # Chain to validate cache
    chain
}
