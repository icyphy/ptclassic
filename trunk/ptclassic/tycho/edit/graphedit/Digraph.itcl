##########################################################################
# Version: $Id$
# Author: Edward A. Lee, John Reekie
#
# Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Digraph
#
# The _Digraph_ model is a standard directed graph.  It extends the
# _AbstractGraph_ superclass with concrete methods to add and delete
# vertices and edges, and provides methods for a number of common 
# algorithms on directed graphs.
#
# Because the graph is directed, adjacent vertices are known as
# "parent" or "child" vertices.
#
class ::tycho::Digraph {
    inherit ::tycho::AbstractGraph
    
    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Get the children of a vertex
    method children {vertex}

    # Add an edge and options to the graph
    method connect {source target args}

    # Remove an edge from the graph
    method disconnect {source target}

    # Get the "leaves" of the graph
    method leaves {}

    # Get the parents of a vertex
    method parents {vertex}

    # Get the roots of the graph
    method roots {}
}

########################################################################
#### constructor
#
body ::tycho::Digraph::constructor {args} {
    # Evaluate options
    eval configure $args
}

########################################################################
#### children
#
# Return the children of a vertex. An empty list will be returned
# if the vertex does not exist.
#
body ::tycho::Digraph::children {vertex} {
    set result {}
    foreach {_ edge} [array get _adjacency $vertex^*] {
	lappend result [lindex $edge 1]
    }
    return $result
}

########################################################################
#### connect
#
# Add a new edge to the graph, and return the inverse command.
# The edge is specified by two vertices; additional arguments are a
# flat option-value list for the edge. Flag an error if the edge
# already exists, but not if the two vertices do not exist. 
#
body ::tycho::Digraph::connect {source target args} {
	#
	# The edge matrices are stored as
	#
	#     _edges:       source^target |-> {source target}
	#     _edgeoptions: source^target |-> {option value ...}
	# 

    if { [::info exists _edges($source^$target)] } {
	error "Edge ($source, $target) already exists in $dataname"
    }
    set modified 1

    # Record the edge
    adjacencyadd $source $target
    set _edges($source^$target) [list $source $target]

    # Record its options
    array set temp [concat $edgeoptions $args]
    set _edgeoptions($source^$target) [array get temp]
    
    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return [list disconnect $source $target]
}

########################################################################
#### disconnect
#
# Remove an edge from the graph, and return the inverse command. Flag an
# error if the edge does not exist.
#
body ::tycho::Digraph::disconnect {source target} {
    if { ! [::info exists _edges($source^$target)] } {
	error "Edge ($source, $target) unknown in $dataname"
    }
    set modified 1

    # Remember the inverse
    set inverse [list connect $source $target $_edgeoptions($source^$target)]

    # Delete the edge
    adjacencydelete $source $target
    unset _edges($source^$target)

    # Delete the options(s)
    unset _edgeoptions($source^$target)

    # Clear any cached structural information
    catch {unset _cache}

    # Return the inverse command
    return $inverse
}

########################################################################
#### leaves
#
# Return the "leaves" of the graph.
#
body ::tycho::Digraph::leaves {} {
    # Start with all vertices
    set result [array names _vertices]

    # Delete the ones that have children
    foreach {_ edge} [array get _adjacency *^*] {
	set result [ldelete $result [lindex $edge 0]]
    }
    return $result
}

########################################################################
#### parents
#
# Return the parents of a vertex. An empty list will be returned
# if the vertex does not exist.
#
body ::tycho::Digraph::parents {vertex} {
    set result {}
    foreach {_ edge} [array get _adjacency *^$vertex] {
	lappend result [lindex $edge 0]
    }
    return $result
}

########################################################################
#### roots
#
# Return the roots of the graph.
#
body ::tycho::Digraph::roots {} {
    # Start with all vertices
    set result [array names _vertices]
    
    # Delete the ones that have parents
    foreach {_ edge} [array get _adjacency *^*] {
	set result [ldelete $result [lindex $edge 1]]
    }
    return $result
}

