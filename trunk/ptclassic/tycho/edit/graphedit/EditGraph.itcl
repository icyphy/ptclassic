##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### editgraph
#
# Procedure to create graph editor
#
proc ::tycho::editgraph {file} {
    set nm [::tycho::view EditGraph -file $file]

    # FIXME FIXME
    # Load stars and icons
    $nm loadStars [::tycho::expandPath {$TYCHO/editors/visedit/stars.tim}]
    $nm loadIcons [::tycho::expandPath {$TYCHO/editors/visedit/icons.tim}]

    return $nm
}

##########################################################################
#### EditGraph
#
# _EditGraph_ is an editor for the _GraphLayout_ model. It edits
# directed graphs.
#
class ::tycho::EditGraph {
    inherit ::tycho::TCanvas

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The layout model
    itk_option define -layout layout Layout {}
    
    # The graph model
    itk_option define -graph graph Graph {}
    
    #################################################################
    ####                     public methods                      ####

    # Create another editor.
    method clone {}

	# Edit parameters of the given vertices
    method editparameters {args}

    # Select an icon -- for menubar use only
    method iconselect {name}

    # Start creating a new edge
    method newclick {item x y}

    # Continue move the end of the new edge
    method newdrag {item x y}

    # Stop moving a new edge
    method newrelease {ignore}

    # Handle change notification from the graph layout model
    method notify {method args}

    # Move mouse over a port
    method portenter {}

    # Move mouse away from a port
    method portleave {}

    # Redo the most recent command
    method redo {}

    # Manipulate the selection
    method selection {mode {id {}}}
    
    # Undo the most recent command
    method undo {}

    # Make a new vertex
    method vertex {name x y}

    # Start moving a vertex
    method vertexclick {tag x y args}

    # Delete a vertex
    method vertexdelete {vertex}

    # Continue moving a vertex
    method vertexdrag {tag x y}

    # Stop moving a vertex
    method vertexrelease {tag}

    ##### Pitcl stuff
    ###
    # Create a Ptolemy script
    method createPitcl {{iterations {}}}

    # Run as a Ptolemy Universe
    method runPtolemy {}

    # Run as a Ptolemy Universe o a remote server
    method runRemotePtolemy {}

    # Generate Pitcl to a file
    method writePitcl {}

   #################################################################
    ####                  protected methods                      ####

    # Initialize the menu/status/tool bars
    protected method initialize {{menubar {}} {statusbar {}} {toolbar {}}}

    #################################################################
    ####                 protected variables                     ####
    
    # The interactor to move things around
    protected variable follower

    # The interactor to connect edges
    protected variable dropper

    # The view on the slate
    protected variable slateView

    # Storage for temporary variables
    protected variable _scratch

    #################################################################
    ####                   private methods                       ####

    # Initialize the menubar
    private method initializeMenubar {menubar}

    #################################################################
    ####                  FIXME FIXME FIXME                      ####

    # FIXME: temporary

    # Clear all data
    method clear {}

    # Insert the specified data
    method insertData {data}

    # Return the data to be saved
    protected method saveText {}

    # Load a star library
    method loadStars {file}

    # Load an icon library
    method loadIcons {file}

    # The icon library
    private variable iconLibrary

    # The star library
    private variable starLibrary

    # The current number of iterations
    private variable iterationCount 100

    # The current remote Tycho server
    private variable remoteServer "yoyodyne.eecs.berkeley.edu"

    # The current port of the remote server
    private variable remotePort 7010

    # The java object used to talk to the server
    private variable javaClient ""

    #################################################################
    ####                  FIXME FIXME FIXME                      ####
    
    # Position used to place new icons
    private variable iconx 10
    private variable icony 10
 }

#####################################################################
#### -layout configuration
# Subscribe to the layout model. Note: there will be a problem here
# if the model is changed, since the old one is not unsubscribed...
#
configbody ::tycho::EditGraph::layout {
    if { $itk_option(-layout) != "" } {
        $itk_option(-layout) subscribe $slateView all
	    # If the graph model already exists, load the layout
    	if { $itk_option(-graph) != "" } {
        	$slateView clear
 	        $slateView load $itk_option(-layout)
    	}
    }
}

########################################################################
#### constructor
#
body ::tycho::EditGraph::constructor {args} {
    # Create the "view" object for this slate
    set slateView [uplevel #0 ::tycho::SlateView \
                [::tycho::autoName slateview] \
                -slate $slate]

    # Evaluate options
    eval itk_initialize $args

    # If there is not already a graph model, create one
    if { $itk_option(-graph) == "" } {
	configure -graph \
                [uplevel #0 ::tycho::KeyedDigraph \
                [::tycho::autoName graph] \
                -strictoptions 0]
    }

    # If there is not already a layout model, create one
    if { $itk_option(-layout) == "" } {
	configure -layout \
                [uplevel #0 ::tycho::Layout \
                [::tycho::autoName layout] \
                -primaryview $slateView]
    }

    # Key bindings
    bind $slate <Meta-Key-z> "$this undo"
    bind $slate <Meta-Key-r> "$this redo"

    # Make a more pronounced highlight
    $slate configure -highlightcolor azure2 -highlightwidth 4

    # Enable selection with button 1; shift-click toggles
    $slate selector bind vertex -button 1
    $slate selector bind vertex -button 1 \
            -modifiers shift -toggle 1

    # Create the interactor to move selected items
    set follower [$slate interactor Follower]
    $slate selector delegate $follower vertex -button 1
    $slate selector delegate $follower vertex -button 1 \
            -modifiers shift

    # Now for some tricky stuff: we want the follower to send
    # the interaction to the model, rather than to the slate.
    # Give it the right "prefixes":
    $follower configure \
            -clickprefix "$this vertexclick" \
            -dragprefix "$this vertexdrag" \
            -releaseprefix "$this vertexrelease"

    # More tricky stuff: the selector sends selection events
    # to the model:
    $slate selector configure \
	    -clearprefix "$this selection clear" \
	    -deselectprefix "$this selection remove" \
	    -selectprefix "$this selection add"

    # Create a DragDropper to join terminals
    set dropper [$slate interactor DragDropper]
    $dropper bind output
    $dropper configure \
	    -halo 6 \
	    -targettags input \
	    -activatecommand "$this newclick" \
	    -dragcommand "$this newdrag" \
	    -deactivatecommand "$this newrelease"

    # Is this needed?
    $slate configure -exportselection 0
}

########################################################################
#### clone
#
# Create another editor -- for demos only.
#
body ::tycho::EditGraph::clone {} {
    set clone [::tycho::view EditGraph \
            -layout $itk_option(-layout) \
            -graph $itk_option(-graph)]
}

########################################################################
#### editparameters
#
body ::tycho::EditGraph::editparameters {args} {
    # FIXME: The parameter editing window must include the whole
    # path name of the model
    foreach v $args {
        set item [$itk_option(-graph) vertexcget $v -type]
        regsub -all {\.} $v "_" nm
        set nm .$nm
        if { [::info which -command $nm] != "" } {
            # Already exists
            wm deiconify $nm
            raise $nm
        } else {
            uplevel #0 [list ::tycho::ParameterEdit $nm \
                    -command "::tycho::post \[$nm get\]"]
            $nm edit $starLibrary $item $itk_option(-graph) $v vertex
            wm deiconify $nm
        }
    }
}

########################################################################
#### iconselect
#
# Process an icon selection.
#
body ::tycho::EditGraph::iconselect {name} {
    # Figure out where to put the icon. First check if topleft is free
    if { [$slate find overlapping 10 10 10 10] == "" } {
        set iconx 10
        set icony 10
    }
    # Create the icon
    set v [vertex $name 0 0]
    set id [$slateView id $v]

    # Move its nw corner to the right position
    $slate moveto $id $iconx $icony "nw" -shape rectangle

    # Advance place position
    incr iconx 10
    incr icony 10
}

########################################################################
#### newclick
#
# Start creating a new edge. Create the edge item and remember
# it.
#
body ::tycho::EditGraph::newclick {item x y} {
    # First we make sure that we clear the selection, since the
    # DragDropper is too dumb to do this...
    selection clear

    # Create the connection line
    set coords [$slate aspect $item terminal]
    set _scratch(line) [eval $slate create SmartLine $coords $x $y]

    # Set the directions of the line
    set dir [eval ::tycho::Shape::compassFromVector \
	    [$slate itemcget $item -direction]]
    $slate itemconfigure $_scratch(line) -start $dir -end $dir
    set _scratch(dir) $dir

    # Remember the source item
    set _scratch(source) $item
}

########################################################################
#### newdrag
#
# Move the end of the new edge. If the _item_ argument is null,
# then we are not over a suitable terminal item, so just move the
# end of the line. If _item_ is not null, then we are over
# an input terminal, so move the end of the line to the right
# connection point.
#
body ::tycho::EditGraph::newdrag {item x y} {
    if { $item == "" } {
	# Just move end point
	$slate reshapeto $_scratch(line) $x $y end
    } else {
	# Move end point to terminal connection point
	set coords [$slate aspect $item terminal]
	eval $slate reshapeto $_scratch(line) $coords end

	# If the line direction does not match the terminal
	# direction, change the line
	set dir [eval ::tycho::Shape::compassFromVector \
	    [$slate itemcget $item -direction]]
	set dir [::tycho::Shape::compass $dir rev]

	if { $dir != $_scratch(dir) } {
	    $slate itemconfigure $_scratch(line) -end $dir
	    set _scratch(dir) $dir
	}
    }
    # Remember the target item for newrelease{}
    set _scratch(dest) $item
}

########################################################################
#### newrelease
#
# Release the item. If we are currently over a target input terminal,
# make a connection in the graph. If not, just delete the line,
# since connection failed.
#
body ::tycho::EditGraph::newrelease {ignore} {
    set line $_scratch(line)
    if { $_scratch(dest) == "" } {
	$slate delete $line
    } else {
	# Get the vertices and ports being connected
	set srcpar [$slateView name [$slate parent $_scratch(source)]]
	set source [$slateView name $_scratch(source)]
	set dstpar [$slateView name [$slate parent $_scratch(dest)]]
	set dest [$slateView name $_scratch(dest)]

	# Add an edge to the graph
	$itk_option(-graph) publish edge $srcpar $source $dstpar $dest

	# Give the edge a name
	set name [list $srcpar $source $dstpar $dest]
	$slateView name $line $name

	# Add an edge to the layout model, 
	# and inform all views _except_ the slate-view
	$itk_option(-layout) update $slateView item \
		[list $srcpar $source $dstpar $dest] \
		[concat [$slate type $line] [$slate coords $line]] \
		-start [$slate itemcget $line -start] \
		-end [$slate itemcget $line -end]
	
	# Update the layout model's coordinates
	eval $itk_option(-layout) coords $name [$slate coords $line]
    }
}

########################################################################
#### notify
#
body ::tycho::EditGraph::notify {method args} {
    # eval $_method $args
    # Assume any notification means a modification...
    # (This is too agrresive -- even selecting an item
    # causes the view to be marked modified...)
    markModified
}

########################################################################
#### redo
#
# Redo the most recent command
#
body ::tycho::EditGraph::redo {} {
    eval $itk_option(-layout) redo
    eval $itk_option(-graph) redo
}

########################################################################
#### selection
#
# Manipulate the selection
#
body ::tycho::EditGraph::selection {mode {id {}}} {
	if { $id != {} } {
		set name [$slateView name $id]
	} else {
		set name {}
	}
	eval $itk_option(-layout) publish selection $mode $name
}

########################################################################
#### undo
#
# Undo the most recent command
#
body ::tycho::EditGraph::undo {} {
    set foo [eval $itk_option(-layout) undo]
    set bar [eval $itk_option(-graph) undo]
}

########################################################################
#### vertex
#
# Create a new vertex using the given name to find
# its icon and parameters. Return the name of the new vertex.
#
body ::tycho::EditGraph::vertex {star x y} {
    set name [::tycho::autoName vertex]
    set graph $itk_option(-graph)
    set layout $itk_option(-layout)
    set stars $starLibrary
    set icons $iconLibrary

    # Mark the graph and the layout
    $graph mark vertex
    $layout mark vertex

    # Add a vertex to the graph
    $graph publish vertex $name -type $star

    # Get its parameters and add them as attributes
    foreach parm [$stars names parameter $star] \
	    parm2 [$stars names* parameter $star] {
        $graph vertexconfigure $name -$parm [$stars get parameter $parm2]
    }

    # Add a vertex to the layout model
    set type  [$icons type $star]
    set attrs [$icons attributes icon $star]
    set undo [eval [list $layout publish item \
	    $name [list $type $x $y]] $attrs \
	    -tags vertex]

    # Remember the undo commands. FIXME!!!
    set undograph [$graph getUndo current]
    set undolayout [$layout getUndo current]

    # Add ports to the graph.
    foreach port [$icons names port $star] {
        $graph publish key $name $port
    }

    # Add the ports to the layout model
    foreach port [$icons names port $star] {
        set type  [$icons type $star.$port]
        set attrs [$icons attributes port $star.$port]
		
        # When creating the port item, give it a tag which is the same
        # as its type -- that is, "input" or "output". Give it a
        # name which is the same as its name in the icon model.
        #set cmd [concat [list subitem $name $port [list $type 0 0]] $attrs \
        #        -tags [$icons portcget $icon.$port -type] \
        #        -name $port]
        #eval $layout $cmd
        #eval $layout notify $cmd
	eval [list $layout publish subitem $name $port [list $type 0 0]] \
		$attrs \
                -tags [list [$icons itemcget port $star.$port -type]] \
		-name $port
    }

    # Compact the commands into a single one
    $graph compactHistory vertex current 1
    $layout compactHistory vertex current 1

    # Do this kludge to overwrite the undo command
    $graph setUndo current $undograph
    $layout setUndo current $undolayout

    # Return its name
    return $name
}


########################################################################
#### vertexclick
#
# Start a move interaction on vertices. The argument is a tag which
# must be attached only to vertices to be moved. Get the names of
# edges that are fully connected to these vertices and tag
# all vertices and those edges. Also get the names of edges
# that have one end connected to one of these vertices and
# remember who they are.
#
body ::tycho::EditGraph::vertexclick {tag x y args} {
    set layout $itk_option(-layout)
    set graph  $itk_option(-graph)

    # Get the vertices, and start a move sequence on them
    set vertices [$slateView withtag $tag]

    # Get the item name or the same tag
    set name [$slateView name $tag]
    set _scratch(movetag) $name

    # Notify views that these items are about to move
    $layout publish moveclick $name $x $y

    # Get completely-connected and partially-connected edges
    set _scratch(moveedges) [eval $graph subgraphEdges $vertices]
    set _scratch(inputedges) [eval $graph subgraphInputs $vertices]
    set _scratch(outputedges) [eval $graph subgraphOutputs $vertices]
    
    # Start a move or reshape sequence on found edges
    if { $_scratch(moveedges) != "" } {
	eval $layout publish addtag $this.edge $_scratch(moveedges)
	$layout publish moveclick $this.edge $x $y
    }
    foreach edge $_scratch(inputedges) {
        $layout publish reshapeclick $edge $x $y -aspects end
    }
    foreach edge $_scratch(outputedges) {
        $layout publish reshapeclick $edge $x $y -aspects start
    }
}

########################################################################
#### vertexdelete
#
# Delete a vertex and all connected edges.
#
body ::tycho::EditGraph::vertexdelete {vertex} {
    set layout $itk_option(-layout)
    set graph  $itk_option(-graph)

    # Get connected edges
    set edges [concat \
	    [$graph subgraphEdges $vertex] \
	    [$graph subgraphInputs $vertex]]
    
    # Mark the layout history
    $layout mark vertex
    
    # Delete the vertex and connected edges
    $layout publish delete $vertex
    foreach edge $edges {
    	$layout publish delete $edge
    }
    
    # Merge the deletion commands into one
    if { $edges != "" } {
    	$layout compactHistory vertex current 1
    }
    
    # Delete the vertex form the graph model. This automatically
    # deletes connected edges
    $graph publish vertexdelete $vertex
}

########################################################################
#### vertexdrag
#
# Continue a move interaction on vertices. The
# vertices and edges are moved and reshaped as appropriate.
#
body ::tycho::EditGraph::vertexdrag {tag x y} {
    set layout $itk_option(-layout)

    # Move the vertices and fully-connected edges
    $layout publish movedrag $_scratch(movetag) $x $y
    if { $_scratch(moveedges) != "" } {
	$layout publish movedrag $this.edge $x $y
    }
    # Reshape the partially-connected edges.
    foreach edge $_scratch(inputedges) {
	$layout publish reshapedrag $edge $x $y
    }
    foreach edge $_scratch(outputedges) {
	$layout publish reshapedrag $edge $x $y
    }
}

########################################################################
#### vertexrelease
#
# Terminate a move interaction on vertices and add an undo and
# redo command to the history of the layout model.
#
body ::tycho::EditGraph::vertexrelease {tag} {
    set layout $itk_option(-layout)
    
    # Because the following will record a bunch of commands that we
    # want merged into a single undo/redo command, set a mark
    $layout mark vertex

    # Terminate move of vertices
    $layout publish moverelease $_scratch(movetag)

    # Terminate move of fully-connected edges
    if { $_scratch(moveedges) != "" } {
        $layout publish moverelease $this.edge
        $layout publish dtag $this.edge
    }

    # Terminate the reshape of partially-connected edges
    foreach edge $_scratch(inputedges) {
	$layout publish reshaperelease $edge
    }
    foreach edge $_scratch(outputedges) {
	$layout publish reshaperelease $edge
    }

    # Now merge all those commands into a single one
    $layout compactHistory vertex current 1

    # Finally (and importantly!), add a null command to the graph
    # model to match this command
    $itk_option(-graph) appendHistory {} {} 0
}

###################################################################
###################################################################
#### Pitcl stuff -- move somewhere else???

########################################################################
#### createPitcl
#
# Create a Pitcl string that will run the graph. If an argument is
# given, run that many times, otherwise query the user.
#
body ::tycho::EditGraph::createPitcl {{iterations {}}} {
    set graph $itk_option(-graph)
    set layout $itk_option(-layout)
    set result ""

    append result "# This bogosity to make ptcl know what domain to use\n"
    append result "catch \{::pitcl::addUniverse .x SDF\}\n"

    # Ask the user how long to run
    if { $iterations == "" } {
        foreach {_ iterations} \
                [::tycho::query "Number of iterations" \
                [list [list line n {Number of Iterations} $iterationCount]]] {}
    }
    set iterationCount $iterations

    # Create a new universe
    append result "\n# Create a new universe\n"
    append result "set universe \[::tycho::autoName .universe\]\n"
    append result "::ptolemy::Universe \$universe \{\}\n"

    # Create blocks
    append result "\n# Create blocks\n"
    foreach vertex [$graph vertices] {
        append result "\$universe addBlock $vertex \
                [$layout itemcget $vertex -label]\n"

        # FIXME: HACK HACK HACK
        # Set their parameters
        if { [$layout itemcget $vertex -label] == "Printer" } {
            append result "\n# Set their parameters\n"
            append result \
                    "::pitcl::setState \$universe.$vertex.fileName <stdout>\n"
        }
    }

   # Create edges
    append result "\n# Create edges\n"
    foreach {v0 k0 v1 k1} [$graph edges] {
        append result \
                "\$universe connect \$universe.$v0.$k0 \$universe.$v1.$k1\n"
    }

    append result "\n# Run and wrapup\n"
    append result "\$universe run $iterations\n"
    append result "\$universe wrapup\n"
}

########################################################################
#### runPtolemy
#
# Run the graph as a Ptolemy universe. Only works if this is
# running in tycho -ptiny or tycho -ptrim.
#
body ::tycho::EditGraph::runPtolemy {} {
    uplevel #0 [createPitcl]
}

########################################################################
#### runRemotePtolemy
#
# Run the graph as a Ptolemy universe. Only works if this
# is running in tycho -java.
#
body ::tycho::EditGraph::runRemotePtolemy {} {
    set script [createPitcl]

    set nm [::tycho::autoName .runPtolemy]
    ::tycho::Query $nm
    $nm line server "Host name" $remoteServer
    $nm line port "Port number" $remotePort
    array set info [::tycho::Dialog::wait $nm 0]

    set remoteServer $info(server)
    set remotePort $info(port)
    
    # Now create the Java client object
    if { $javaClient == "" } {
        set javaClient [uplevel #0 ::java::new weld.client.TclClient \
                [::tycho::autoName client]]
    }
    # Setup up parameters
    putStatus "Contacting Tycho server $remoteServer:$remotePort"
    ::tycho::safeUpdate $this
    $javaClient setServer $remoteServer
    $javaClient setPort $remotePort

    # For some reason, tycho -ptiny -tty -s doesn't exit
    # when it's done, so add some crap to the script
    append script "\n# Put this bogosity in to force Tycho to exit\n"
    append script "::exit\n"

    # And run it!
    set result [$javaClient invoke $script]
    putStatus "Received result from $remoteServer"
    ::tycho::safeUpdate $this

    # Display the data
    set view [::tycho::view Edit]
    $view insertData $result
    $view markUnmodified
    # FIXME
    [winfo toplevel $view] configure -title "Data from $remoteServer"
}

#######################################################################
#### writePitcl
#
# Write Pitcl to a file
#
body ::tycho::EditGraph::writePitcl {} {
    # Get the script
    set script [createPitcl]

    # Get the file to write
    set filename [::tycho::queryfilename "File to write"]
    
    # For some reason, tycho -ptiny -tty -s doesn't exit
    # when it's done, so add some crap to the script
    append script "\n# Put this bogosity in to force Tycho to exit\n"
    append script "::exit\n"

    # Write the file
    ::tycho::resource write $filename $script
}

###################################################################
###################################################################
####                      protected methods                    ####

#####################################################################
#### initialize
# Initialize the menu, status, and toolbars associated with this widget.
# The root (view) class sets up the menubar methods in it's initialize
# via the chain command, which should always be the first command in
# this method.
# 
# This method is called by it's displayer when attachView is called (usually
# in ::tycho::view
#
body ::tycho::EditGraph::initialize {{menubar {}} {statusbar {}} {toolbar {}}} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::EditGraph::initializeMenubar $menubar
    }
}

    #####################################################################
    #####################################################################
    ####                       private methods                       ####

#####################################################################
#### initializeMenubar
# Adds entries to the menu bar specific to this class.
#
body ::tycho::EditGraph::initializeMenubar {menubar} {
    # Add an Edit menu before the Window menu
    $menubar addMenu edit -label Edit -before window -underline 0
    
    $menubar command undo edit \
	    -label "Undo" -accelerator "M-z" \
	    -underline 0 -command "$this undo"
    
    $menubar command redo edit \
	    -label "Redo" -accelerator "M-r" \
	    -underline 0 -command "$this redo"
    
    $menubar separator editsep1 edit
    
    $menubar command cut edit \
	    -label "Cut" -underline 0 -accelerator "C-w" \
	    -command "$this cut"
    
    $menubar command copy edit \
	    -label "Copy" -underline 1 -accelerator "M-w" \
	    -command "$this copy"
    
    $menubar command paste edit \
	    -label "Paste" -underline 0 -accelerator "C-y" \
	    -command "$this paste"
    
    $menubar separator editsep2 edit
    
    $menubar command selectall edit \
	    -label "Select All" -underline 0 \
	    -accelerator "C-/" -command "$this selectRange 1.0 end"
    
    $menubar command unselect edit \
	    -label "Unselect" -underline 0 \
	    -accelerator "C-\\" -command "$this unselectRange 1.0 end"

    # Build a menu for stars
    $menubar addMenu stars -label Stars -underline 0
    $menubar menuconfigure stars -tearoff 1

    $menubar command editparameters stars \
            -label "Edit Parameters..." \
            -underline 5 \
            -command "eval $this editparameters \[$slateView withtag sel\]"

    $menubar separator starsep1 stars

    # Add a Devel menu for development use
    $menubar addMenu devel -label Devel -underline 0
    $menubar command clone devel \
	    -label "Clone" \
            -command "$this clone"

    $menubar add separator develsep1 devel

    $menubar command showlayout devel \
	    -label "Show layout" \
            -command "::tycho::post \[\[$this cget -layout\] describe\]"

    $menubar command showgraph devel \
	    -label "Show graph" \
            -command "::tycho::post \[\[$this cget -graph\] describe\]"

    $menubar add separator develsep2 devel

    $menubar command runptolemy devel \
	    -label "Run Ptolemy" \
            -command "$this runPtolemy"

    $menubar command runremoteptolemy devel \
	    -label "Run Remote Ptolemy" \
            -command "$this runRemotePtolemy"

    $menubar command generatescript devel \
	    -label "Generate Ptolemy Script" \
            -command "$this writePitcl"

    $menubar command showscript devel \
	    -label "Show Ptolemy Script" \
            -command "::tycho::post \[$this createPitcl\]"
}


#########################################################################
#########################################################################
####                            TEMPORARY                          ####


#####################################################################
#### clear
# Clear the data.
#
body ::tycho::EditGraph::clear {} {
    # OK, the easiest way to do this is to just delete the
    # two models. Obviously this won't work with multiple
    # subscribers so models should really have a clear method!
    # $itk_option(-graph) clear
    # $itk_option(-layout) clear
    delete object $itk_option(-graph)
    configure -graph \
            [uplevel #0 ::tycho::KeyedDigraph \
            [::tycho::autoName graph] \
            -strictoptions 0]

    delete object $itk_option(-layout)
    configure -layout \
            [uplevel #0 ::tycho::Layout \
            [::tycho::autoName layout] \
            -primaryview $this]
    
    # Clean the slate
    $slate delete all
}

#####################################################################
#### insertData
# Insert the specified data. For now, this is a two-list containing
# a description of the graph and the layout respectively.
# Note that data cannot be just inserted: it will always
# be cleared too.
#
body ::tycho::EditGraph::insertData {data} {
    # Delete all data
    clear
    # Load the new data into the models
    $itk_option(-graph) read string [lindex $data 0]
    $itk_option(-layout) read string [lindex $data 1]
    # Load the new data into this view
    loadLayout
}

#####################################################################
#### saveText
# Return the text to save. For now, this is a two-list containing
# a description of the graph and the layout respectively.
#
body ::tycho::EditGraph::saveText {} {
    set result "\{\n"
    append result [$itk_option(-graph) describe]
    append result "\}\n\{\n"
    append result [$itk_option(-layout) describe]
    append result "\}\n"
    return $result
}

#####################################################################
#### loadIcons
# Load an icon library.
#
body ::tycho::EditGraph::loadIcons {file} {
    set icons [uplevel #0 ::tycho::IconIndex \
	    [::tycho::autoName icons] \
	    -datafile $file]
    $icons load
    set iconLibrary $icons
}
    
#####################################################################
#### loadStars
# Load a star library.
#
body ::tycho::EditGraph::loadStars {file} {
    set stars [uplevel #0 ::tycho::Library \
	    [::tycho::autoName stars] \
	    -datafile $file]
    $stars load
    $stars menu [menubar] stars "$this iconselect"
    set starLibrary $stars
}
