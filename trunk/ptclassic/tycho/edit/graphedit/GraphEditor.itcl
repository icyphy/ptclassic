##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### foo
#
# Procedure to create a test graph editor
#
proc ::tycho::foo {} {
    set nm [::tycho::view DFGEditor]

    # FIXME FIXME
    # Load stars and icons
    # $nm loadStars [::tycho::expandPath {$TYCHO/editors/graphedit/stars.tim}]
    # $nm loadIcons [::tycho::expandPath {$TYCHO/editors/graphedit/icons.tim}]

    # FIXME: Where should this go??     
    $nm library load editors/graphedit/stars.tim
    $nm library addtomenu stars stars \
            -command "$nm newstar stars" \
            -customizecommand "$nm _initmenu stars" \
            -types {star}

    return $nm
}

##########################################################################
#### DFGEditor
#
# _DFGEditor_ is an editor for the _GraphLayout_ model. It edits
# directed graphs.
#
class ::tycho::DFGEditor {
    inherit ::tycho::SlateView

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Initialize a new star menu
    method _initmenu {args}

    # Create an icon palette
    method _iconpalette {library context}

    # Clear all data
    method clear {}

    # Delete the selection
    method delete {}

    # Edit parameters of the given vertices
    method editparameters {args}

    # Add a star
    method newstar {libname starname}

    # Handle change notification from the graph model
    method notifygraph {method args}

    # Place an icon
    method place {}

    # Redo the most recent command
    method redo {}
    
    # Handle changes to the selection
    method select {mode args}
    
    # Undo the most recent command
    method undo {}

    #################################################################
    ####                  protected methods                      ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    # Configure the popup menu depending on the current context
    protected method configureContextMenu {}

    # Insert the specified data
    protected method insertData {data}

    # Return the data to be saved
    protected method saveText {}

    #################################################################
    ####                 protected variables                     ####
    
    # The interactor to move things around
    protected variable follower

    # The controller for edges
    protected variable edgecontroller

    # The interactor to connect edges
    protected variable dropper

    # The controller for vertices
    protected variable vertexcontroller

    # The item selector
    protected variable selector

    # The interactor to split edges
    protected variable splitter

    # The semantic model
    protected variable _graph ""

    # Storage for temporary variables
    protected variable _scratch

    # The currently grappled edge
    protected variable _grapplededge ""

    #################################################################
    ####                   private methods                       ####

    # Initialize the menubar
    private method _initializeMenubar {menubar}

    #################################################################
    ####                 private variables                       ####

    # The icon palettes
    private common _palettes

    #################################################################
    ####                  FIXME FIXME FIXME                      ####
    
    # Position used to place new icons
    private variable iconx 50
    private variable icony 50
}

########################################################################
#### constructor
#
body ::tycho::DFGEditor::constructor {args} {

    # Create the models. The graph model has a special notify{} method
    set _graph [uplevel #0 ::tycho::PortedGraph [::tycho::autoName graph]]
    model add graph $_graph
    $_graph subscribe data $this "$this notifygraph"

    # The layout model uses notify{} inherited from SlateView
    set _layout [uplevel #0 ::tycho::Layout [::tycho::autoName layout]]
    model add layout $_layout
    $_layout subscribe data $this "$this notify"

    # In addition, subscribe to the layout model as a "view". This
    # is necessary because the Layout model sometimes needs to get
    # data from a real Tk canvas...
    $_layout subscribe view $this

    # Evaluate options
    eval itk_initialize $args

    # Create the context-sensitive popup menu
    contextmenu create $_slate

    # Modify the binding tags of the canvas so that this megawidget
    # gets events too. This is unfortunate but appears to be necessary
    set tl [winfo toplevel $itk_component(hull)]
    set canvas [$_slate component canvas]
    bindtags $canvas \
            "$tl $itk_component(hull) $_slate Slate all"
    
    # Prevent shadowing of bindings in the Displayer class.
    bind $_slate <Control-x> {continue}

    # Key bindings
    bind $_slate <Meta-Key-z> "$this undo"
    bind $_slate <Meta-Key-r> "$this redo"
    bind $_slate <Key-Delete> "$this delete"

    # Make a more pronounced highlight
    $_slate configure -highlightcolor azure2 -highlightwidth 4

    # Create the edge controller object
    set edgecontroller [uplevel #0 ::tycho::DFGEdgeController \
    		[::tycho::autoName controller] \
            -slate $_slate \
            -slateview $this \
            -graph $_graph \
            -layout $_layout]

    # Create the vertex controller object
    set vertexcontroller [uplevel #0 ::tycho::DFGVertexController \
            [::tycho::autoName controller] \
            -slate $_slate \
            -slateview $this \
            -graph $_graph \
            -layout $_layout]

    # Cross-link the controllers
    $edgecontroller configure -vertexcontroller $vertexcontroller
    $vertexcontroller configure -edgecontroller $edgecontroller

    # Get handles to interactors
    set follower [$vertexcontroller _follower]
    set dropper  [$edgecontroller _dropper]
    set splitter [$edgecontroller _splitter]

    # Enable vertex selection with button 1; shift-click toggles
    set selector [$_slate interactor Selector]
    $selector bind vertex -button 1
    $selector bind vertex -button 1 \
            -modifiers shift -toggle 1

    # Enable edge selection with button 1; shift-click toggles
    $selector bind edge -button 1
    $selector bind edge -button 1 \
            -modifiers shift -toggle 1

    # Enable edge selection with control-button 1; shift-click toggles
    $selector bind edge -button 1 -modifiers control
    $selector bind edge -button 1 \
            -modifiers {shift control} -toggle 1

    # Enable junction selection with button 1; shift-click toggles
    $selector bind junction -button 1
    $selector bind junction -button 1 \
            -modifiers shift -toggle 1

    # Enable junction selection with control-button 1; shift-click toggles
    $selector bind junction -button 1 -modifiers control
    $selector bind junction -button 1 \
            -modifiers {shift control} -toggle 1

    # Enable grapple selection with button 2; shift-click toggles
    $selector bind grapple -button 2
    $selector bind grapple -button 2 \
            -modifiers shift -toggle 1

    # Delegate vertex movement for selected vertexes
    $selector delegate $follower vertex -button 1
    $selector delegate $follower vertex -button 1 \
            -modifiers shift

    # Delegate junction movement for selected vertexes
    $selector delegate $follower junction -button 1
    $selector delegate $follower junction -button 1 \
            -modifiers shift

    # The selector sends selection events here
    $selector configure \
            -clearprefix "$this select clear" \
            -deselectprefix "$this select remove" \
            -selectprefix "$this select add"

    # Delegate to the edge splitter if control-clicked on an edge
    # that is the only selected item
    $selector delegate $splitter edge -button 1 -mode {0 1} \
            -modifiers control
    $selector delegate $splitter edge -button 1 -mode {0 1} \
            -modifiers {shift control}
    
    # Delegate to the edge connector if control-clicked on a junction
    $selector delegate $dropper junction -button 1 -mode {0 1} \
            -modifiers control
    $selector delegate $dropper junction -button 1 -mode {0 1} \
            -modifiers {shift control}
    
    # Is this needed?
    # $_slate configure -exportselection 0
    
    # Experiment: move disconnected edges
    $selector delegate $follower disconnected -button 1
    $selector delegate $follower disconnected -button 1 \
            -modifiers shift
}

########################################################################
#### _initmenu
#
# Initialize a new menu.
#
body ::tycho::DFGEditor::_initmenu {libname menuname context} {
    set mb [menubar]
    set lib [library access $libname]
    
    # Add a palette entry only if there are items at this level
    if { [$lib match star $context] != "" } {
        $mb command $menuname.palette $menuname \
                -label "Palette..." \
                -command "$this _iconpalette $libname $context"
        $mb separator $menuname.separator $menuname
    }
}

########################################################################
#### _iconpalette
#
# Create a palette of icons.
#
body ::tycho::DFGEditor::_iconpalette {libname context} {
    set lib [library access $libname]
    set palettename [concat $libname $context]

    # Raise the window if it already exists
    if [::info exists _palettes($palettename)] {
        if { [info which -command $_palettes($palettename)] != "" } {
            raise [winfo toplevel $_palettes($palettename)]
            return
        } else {
            unset _palettes($palettename)
        }
    }
    # Otherwise create a new one
    set nm [::tycho::view IconPalette]
    set _palettes($palettename) $nm
    set icons {}
    foreach star [$lib match star $context] {
        set star [concat $context $star]
        # Make sure the star has an icon
        # FIXME: use default icon if none specified
        if [$lib exists $star -icon] {
            lappend icons [$lib attrget $star -icon]
        }
    }
    # Now get the palette to paint itself
    eval $nm loadIcons $icons
}

########################################################################
#### delete
#
# Process a delete event.
#
body ::tycho::DFGEditor::delete {} {
    # Mark the history
    $_graph mark set temp
    $_layout mark set temp

    # Split the selection into vertices and edges
    set selection [$_slate find withtag "sel"]
    set edges [::tycho::lintersection $selection [$_slate find withtag edge]]
    set vertices [::tycho::lsubtract $selection $edges]

    # Delete edges first: it makes less work when deleting vertices
    foreach edge $edges {
        $edgecontroller delete [itemname $edge]
    }
    foreach vertex $vertices {
        $vertexcontroller delete [itemname $vertex]
    }
    # Compact the history
    $_graph history compact temp current
    $_layout history compact temp current
}

########################################################################
#### editparameters
#
body ::tycho::DFGEditor::editparameters {args} {
    # FIXME: The parameter editing window must include the whole
    # path name of the model
    foreach v $args {
        set item [$_graph vertexcget $v -type]
        regsub -all {\.} $v "_" nm
        set nm .$nm
        if { [::info which -command $nm] != "" } {
            # Already exists
            wm deiconify $nm
            raise $nm
        } else {
            uplevel #0 [list ::tycho::ParameterEdit $nm \
                    -command "::tycho::post \[$nm get\]"]
            $nm edit $starLibrary $item $_graph $v vertex
            wm deiconify $nm
        }
    }
}

########################################################################
#### newstar
#
body ::tycho::DFGEditor::newstar {libname starname} {
    $vertexcontroller add $libname $starname
}

########################################################################
#### notifygraph
#
body ::tycho::DFGEditor::notifygraph {method args} {
    # puts "$this notifygraph $method"
    # eval _$method $args

    # Assume any notification means a modification...
    # (This is too agrresive -- even selecting an item
    # causes the view to be marked modified...)
    # markModified
}

########################################################################
#### place
#
# Find a good place to put an icon in the layout model, and return
# the coordinates. Currently, this just guesses
# at a good location to put the icon. Later on, it will do some
# kind of grab and place or drag-and-drop.
#
body ::tycho::DFGEditor::place {} {
    # Figure out where to put the icon. First check if topleft is free
    if { [$_slate find overlapping 10 10 10 10] == "" } {
        set iconx 10
        set icony 10
    }
    set result [list $iconx $icony]

    # Advance place position
    incr iconx 10
    incr icony 10
    
    return $result
}

########################################################################
#### redo
#
# Redo the most recent command
#
body ::tycho::DFGEditor::redo {} {
    eval $_layout redo
    eval $_graph redo
}

########################################################################
#### select
#
# Handle changes to the selection.
#
body ::tycho::DFGEditor::select {mode args} {
    # puts "DFGEditor::select $mode $args ([$_slate find withtag sel])"
    switch -exact $mode {
        "clear" {
            $_slate select clear
        }
        "add" {
            eval $_slate select add $args
        }
        "remove" {
            eval $_slate select remove $args
        }
    }
    # See if there is a single edge selected
    set sel [$_slate find withtag sel]
    if { [llength $sel] == 1 } {
        set id [lindex $sel 0]
        if [$_slate hastag $id edge] {
            # There is: grapple it
            # FIXME: publish to model
            set _grapplededge $id
            $_slate grapple $id -interactor $dropper -aspects {start end}
        }
    } elseif { $_grapplededge != "" } {
        $_slate ungrapple $_grapplededge
        set _grapplededge ""
    }
}

########################################################################
#### undo
#
# Undo the most recent command
#
body ::tycho::DFGEditor::undo {} {
    eval $_layout undo
    eval $_graph undo
}

###################################################################
###################################################################
####                      protected methods                    ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# The root (view) class sets up the menubar methods in its initialize
# via the chain command, which should always be the first command in
# this method.
# 
# This method is called by its displayer when attachView is called (usually
# in ::tycho::view
#
body ::tycho::DFGEditor::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::DFGEditor::_initializeMenubar $menubar
    }
}

#####################################################################
#### clear
# Clear the data.
#
body ::tycho::DFGEditor::clear {} {
    if { $_graph != "" } {
        $_graph clear
    }
    if { $_layout != "" } {
        $_layout clear
    }
    $_slate delete all
}

#####################################################################
#### configureContextMenu
# Configure the popup menu according to context.
#
body ::tycho::DFGEditor::configureContextMenu {} {
    chain

    contextmenu separator sep1
    contextmenu command undo -label Undo -command "$this undo"
    contextmenu command redo -label Redo -command "$this redo"
    contextmenu separator sep2

    # See if we clicked on something that needs to be handled
    # specially
    set current [$_slate find withtag current]
    if { $current != "" && ![$_slate hastag $current #] } {
        contextmenu command info -label Info... \
                -command "::tycho::post \[$this iteminfo $current\]"
        # contextmenu separator sep3
        
        if [$_slate hastag $current "edge"] {
            $edgecontroller contextmenu $current
        } elseif [$_slate hastag $current "vertex"] {
            $vertexcontroller contextmenu $current vertex
        } elseif [$_slate hastag $current "junction"] {
            $vertexcontroller contextmenu $current junction
        }
    } else {
        # Do the default according to the selection
        contextmenu command showselection \
                -label "Show Selection" \
                -command "::tycho::inform \"[find withtag sel]\""
    }
}

#####################################################################
#### insertData
# Insert the specified data. For now, this is a two-list containing
# a description of the graph and the layout respectively.
# Note that data cannot be just inserted: it will always
# be cleared too.
#
body ::tycho::DFGEditor::insertData {data} {
    # Delete all data
    clear

    # Load the data into the models
    $_graph parse [lindex $data 0]
    $_layout parse [lindex $data 1]

    # Load the new data into this view
    loadLayout
}

#####################################################################
#### saveText
# Return the text to save. For now, this is a two-list containing
# a description of the graph and the layout respectively.
#
body ::tycho::DFGEditor::saveText {} {
    set result "\{\n"
    append result [$_graph describe]
    append result "\}\n\{\n"
    append result [$_layout describe]
    append result "\}\n"
    return $result
}

    #####################################################################
    #####################################################################
    ####                       private methods                       ####

#####################################################################
#### _initializeMenubar
# Adds entries to the menu bar specific to this class.
#
body ::tycho::DFGEditor::_initializeMenubar {menubar} {
    # Add an Edit menu before the Window menu
    $menubar addMenu edit -label Edit -before window -underline 0
    
    $menubar command undo edit \
	    -label "Undo" -accelerator "M-z" \
	    -underline 0 -command "$this undo"
    
    $menubar command redo edit \
	    -label "Redo" -accelerator "M-r" \
	    -underline 0 -command "$this redo"
    
    $menubar separator editsep1 edit
    
    $menubar command cut edit \
	    -label "Cut" -underline 0 -accelerator "C-w" \
	    -command "$this cut"
    
    $menubar command copy edit \
	    -label "Copy" -underline 1 -accelerator "M-w" \
	    -command "$this copy"
    
    $menubar command paste edit \
	    -label "Paste" -underline 0 -accelerator "C-y" \
	    -command "$this paste"
    
    $menubar separator editsep2 edit
    
    $menubar command selectall edit \
	    -label "Select All" -underline 0 \
	    -accelerator "C-/" -command "$this selectRange 1.0 end"
    
    $menubar command unselect edit \
	    -label "Unselect" -underline 0 \
	    -accelerator "C-\\" -command "$this unselectRange 1.0 end"

    # Build a menu for stars
    $menubar addMenu stars -label Stars -underline 0
    $menubar menuconfigure stars -tearoff 1

    $menubar command editparameters stars \
            -label "Edit Parameters..." \
            -underline 5 \
            -command "eval $this editparameters \[$this find withtag sel\]"

    $menubar separator starsep1 stars

    # Add a Devel menu for development use
    $menubar addMenu devel -label Devel -underline 0

    $menubar add separator develsep1 devel

    $menubar command showlayout devel \
	    -label "Show layout" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access layout describe\]"

    $menubar command showgraph devel \
	    -label "Show graph" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access graph describe\]"

    $menubar add separator develsep2 devel

    $menubar command showlayouthistory devel \
	    -label "Show layout history" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access layout history get\]"

    $menubar command showgraphhistory devel \
	    -label "Show graph history" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access graph history get\]"

}
