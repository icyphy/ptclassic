##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABL TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### IconLibrary
#
# The _IconLibrary_ model is a hierarchical model for a library
# of "icons" for dataflow graphs and such.
#
# In addition to those in the <a href="Library.html">Library</a>
# superclass, this model has the following types:
# This model has the following types:
# <dl>
# <dt><b>icon</b>
# <dd>
# A description of a graphical icon. An item of this type can
# be drawn on a Slate with the <b>draw</b> method. Items of type
# <b>icon</b> have the following predefined attributes; in
# addition, they can have any attributes that are legal for the
# Slate type that will be used to draw the icon (see the
# <b>-slatetype</b> attribute):
#   <dl>
#   <dt><b>-label</b> _string_
#   <dd>
#    The label used to display the icon in menu bars and the like.
#    (Note that the text displayed in the icon itself is usually
#    set by the <b>-text</b> option.)
#
#   <dt><b>-slatetype</b> _slatetype_
#   <dd>
#    The Slate class that will be used to draw the icon. The default
#    is IconRect, which is a simple rectangle with a text
#    label and optional graphics. Other choices include IconOval
#    and IconFrame.
#
#   <dt><b>-termstyles</b> _stylelist_
#   <dd>
#    A list of terminal styles that the icon will accept. When the icon
#    is drawn, it can be drawn with any of the termstyles given in
#    this list. The listed termstyles must be within the same IconLibrary
#    model.
#
#   </dl>
#
# <dt><b>terminal</b>
# <dd>
# A description of a terminal of an icon. An item of this type
# can be drawn on a Slate as a child item of an <b>icon</b> item.
# The <b>port</b> item type can be contained within an <b>icon</b>
# item, in which cas it will be drawn as part of the icon, or
# within a <b>termstyle</b> item, in which case it will be draw as
# part of any icon that selects the containing termstyle. Items of type
# <b>terminal</b> have the following predefined attributes; in
# addition, they can have any attributes that are legal for the
# Slate type that will be used to draw the terminal (see the
# <b>-slatetype</b> attribute):
# 
#   <dl>
#   <dt><b>-slatetype</b> _slatetype_
#   <dd>
#    The Slate class that will be used to draw the icon. The default
#    is Terminal.
#
#   <dt><b>-coords</b> {_x y_}
#   <dd>
#    The coordinates of the terminal, relative to the icon that
#    it become parts of.
#
#   </dl>
#
# <dt><b>termstyle</b>
# <dd>
# A set of terminals. Termstyles allow a single icon to have different
# terminal appearances, and allow different icons to share definitions
# of terminal appearance. A termstyle can appear anywhere in an IconLibrary.
# Its name can be referred to from within any <b>-termstyle</b>
# list. If the termstyle appears within an <b>icon</b>, then that termstyle
# is implicitly prepended to the <b>-termstyle</b> option of the icon
# (if it has one). A termstyle has the following attributes:
#   <dl>
#   <dt><b>-label</b> _string_
#   <dd>
#    The label used to display the termstyle in menu bars and
#    selection lists.
#
#   </dl>
#
#
# </dl>
#
# Here is an example of an icon library:
# <pre><tcl>
#     catch {delete object $icons}
#     set icons [::tycho::IconLibrary [::tycho::autoName icons]]
#     $icons parse {
#         termstyle 1-0-east -label "One output, east" {
#             terminal in -coords {0 50} -direction {-1 0} -style circle
#         }
#         
#         termstyle 1-0-west -label "One output, west" {
#             terminal in -coords {100 50} -direction {1 0} &#92
#                         -style rectangle -fill magenta
#         }
#         
#         group sample -label {Sample Icons} {
#             icon add -label Add \
#                     -slatetype IconOval \
#                     -fill white \
#                     -text "" \
#                     -termstyles {1-0-east 1-0-west} \
#                     -graphics {
#                 line 20 50 80 50 -width 4
#                 line 50 20 50 80 -width 4
#             }
#             
#             icon foo \
#                     -slatetype IconFrame \
#                     -color blue \
#                     -label {The Foo Icon} \
#                     -text Foo \
#                     -textanchor nw \
#                     -termstyles {1-0-east 1-0-west} \
#                     -graphics {
#                 Frame 10 10 50 50 -color red
#                 Frame 50 50 90 90 -color green -relief sunken
#             }
#         }
#     }
#     $icons describe
# </tcl></pre>
#
# Create a menubar and add this index to it:
# <tcl quiet><pre>
#    proc select {library item} {
#        ::tycho::inform "item $item: [$library describe $item]"
#    }
#    catch {delete object .mb}
#    ::tycho::MenuBar .mb
#    pack .mb
#    raise .
#    wm deiconify .
#    .mb addMenu foo -label Foo
#    $icons makemenu {icon termstyle} .mb foo "select $icons"
# </pre></tcl>
#
# Create a blank slate and draw the icons on it:
# <tcl><pre>
#     source $TYCHO/editors/slate/doc/internals/newslate.itcl
#     $icons draw {sample add} $slate 100 100 -tags moveable
#     $icons draw {sample foo} $slate 200 100 -tags moveable &#92
#            -termstyle 1-0-west
# </pre></tcl>
# 
class ::tycho::IconLibrary {
    inherit ::tycho::Library

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####


    #################################################################
    ####                     public methods                      ####

    # Draw an icon on a given slate
    method draw {icon slate x y args}
}

########################################################################
#### constructor
#
body ::tycho::IconLibrary::constructor {args} {
    # Evaluate options
    eval configure $args

    # The icon type
    type define icon \
	    -label "" \
            -slatetype IconRect \
            -termstyles {}

    # The terminal type
    type define terminal \
	    :leafonly 1 \
            -slatetype Terminal \
            -coords {0 0} \
	    -type input

    # The termstyle type
    type define termstyle \
            -label ""
}

########################################################################
#### draw
#
# Draw an icon on a slate at the given coordinates. Optional
# arguments can be any of the following:
# <dl>
# <dt><b>-tags</b> _taglist_
# <dd>
# One or more canvas tags to give to the icon.
#
# <dt><b>-termstyle</b> _style_
# <dd>
# The terminal style to draw the icon in. The given style must be
# one in the icons <b>termstyle</b> list or a termstyle that is
# a child of the icon. If not supplied, the first termstyle found
# will be used. If there are none, don't draw any terminals.
#
# </dl>
#
body ::tycho::IconLibrary::draw {icon slate x y args} {
    if ![exists $icon] {
        error "Unknown icon \"$icon\""
    }
    if { [type get $icon] != "icon" } {
        error "\"$icon\" is not an icon"
    }
    array set attrs [attrget $icon]
    array set opts {-tags {} -termstyle {}}
    array set opts $args

    # Check and get attributes
    set slatetype $attrs(-slatetype)
    set termstyles {}
    foreach t [match termstyle $icon] {
        lappend termstyles [concat $icon $t]
    }
    eval lappend termstyles $attrs(-termstyles)
    unset attrs(-slatetype)
    unset attrs(-termstyles)

    # Check and get termstyle
    if { $opts(-termstyle) == "" } {
        set termstyle [lindex $termstyles 0]
    } else {
        set termstyle $opts(-termstyle)
        if { [lsearch -exact $termstyles $termstyle] == -1 } {
            error "Unknown termstyle \"$termstyle\": must be one\
                    of $termstyles"
        }
    }

    # Create the icon
    set id [eval $slate create $slatetype $x $y [array get attrs] \
            [list -tags $opts(-tags)]]

    # Create the terminals
    foreach term [match terminal $termstyle] {
        array set a [attrget [concat $termstyle $term]]
        set termtype $a(-slatetype)
        unset a(-slatetype)
        set x [lindex $a(-coords) 0]
        set y [lindex $a(-coords) 1]
        unset a(-coords)
        # FIXME: the -type tag thing is a real hack...
        eval $slate call $id terminal \
                $term $termtype $x $y [array get a] \
                -tags [list $a(-type)]
        unset a
    }
}
