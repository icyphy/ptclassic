##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

##########################################################################
#### IconPalette
#
# _IconPalette_ is a view that contains a Slate full of icons.
# It is intended to be used in conjunction with an IconLibrary,
# as a means of displaying some of the library's contents to
# the user for selection and placement into graphical editors.
#
class ::tycho::IconPalette {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The x position of the first icon
    public variable startx 80

    # The y position of the first icon
    public variable starty 80

    # The x spacing between icons
    public variable spacingx 150

    # The y spacing between icons
    public variable spacingy 150

    # The number of columns of icons
    public variable columns 4

    #################################################################
    ####                     public methods                      ####

    # Draw a single icon on the palette
    method draw {library icon x y}

    # Load a portion of an icon library to the palette
    method load {library args}

    # Load icons from arbitrary libraries into the palette
    method loadIcons {args}

    # Handle update notification from a library
    method notify {library args}

    # Resize to contain displayed icons
    method resize {}

    #################################################################
    ####                  protected methods                      ####

    #################################################################
    ####                  protected variables                    ####
    
    # The slate
    protected variable _slate

    #################################################################
    ####                   private methods                       ####
    
    #################################################################
    ####                   private variables                     ####
    
}

########################################################################
#### constructor
#
body ::tycho::IconPalette::constructor {args} {
    # Create a slate
    itk_component add slate {
        uplevel #0 ::tycho::slate $itk_interior.slate
    } {
        keep -cursor
        rename -background -canvascolor canvasColor CanvasColor
        rename -height -canvasheight canvasHeight CanvasHeight
        rename -width -canvaswidth canvasWidth CanvasWidth
    }
    set _slate $itk_component(slate)
    pack $_slate -expand yes -fill both -side left

    # Evaluate options
    eval configure $args
}

########################################################################
#### draw
#
# Draw a single icon in the palette, at the given position.
#
body ::tycho::IconPalette::draw {library icon x y} {
    $library draw $icon $_slate $x $y -tags "icon"
}

########################################################################
#### load
#
# Load a portion of an icon library into the palette. The argument
# is the pointer to the icon library, the context of the library
# within which to load items, the type of item to load, and the
# command to load 
#
body ::tycho::IconPalette::load {library args} {
    array set opts [list \
	    -context {} \
	    -type "icon"]
    array set opts $args

    set x $startx
    set y $starty
    set i 0
    set j 0
    foreach icon [$library match $opts(-type) $opts(-context)] {
	draw $library [concat $opts(-context) $icon] $x $y

	if { [incr i] >= $columns } {
	    set i 0
	    set x $startx
	    incr j
	    incr y $spacingy
	} else {
	    incr x $spacingx
	}
    }
    after idle "catch \{$this resize\}"
}

########################################################################
#### loadIcons
#
# Load icons from arbitrary libraries into the palette.
#
body ::tycho::IconPalette::loadIcons {args} {
    set x $startx
    set y $starty
    set i 0
    set j 0

    foreach iconpath $args {
        set splat [split $iconpath #]
        set iconlib [lindex $splat 0]
        set iconname [lindex $splat 1]

        # FIXME: Need a shorter way of doing this...
        set libpath [::tycho::model load $iconlib]
        # FIXME: key cannot be reused, hence the autoname...
        set iconmodel [::tycho::model link $libpath [::tycho::autoName $this]]

        # See if the icon has a dot-separated name
        if ![$iconmodel exists $iconname] {
            if [$iconmodel exists [split $iconname .]] {
                set iconname [split $iconname .]
            } else {
                error "Unknown icon \"$iconname\" in $iconlib"
            }
        }
        # Place the icon
 	draw $iconmodel $iconname $x $y

	if { [incr i] >= $columns } {
	    set i 0
	    set x $startx
	    incr j
	    incr y $spacingy
	} else {
	    incr x $spacingx
	}
    }
    after idle "catch \{$this resize\}"
}

########################################################################
#### notify
#
# Notify of a change to a library. The first argument is a pointer
# to the library. Remaining arguments are the method and the arguments
# to the method. Currently, this does nothing.
#
body ::tycho::IconPalette::notify {library method args} {
    # Do nothing
}

########################################################################
#### resize
#
# Resize to contain displayed icons.
# 
# FIXME: Introduce scrollbars if the window becomes too large.
# FIXME: Doesn't work...
#
body ::tycho::IconPalette::resize {} {
    set bbox [$_slate bbox all]
puts $bbox
    set xmax [expr [lindex $bbox 2] + 50]
    set ymax [expr [lindex $bbox 3] + 50]

    pack propagate $_slate on
    $_slate configure -width $xmax -height $ymax
}

#####################################################################
#####################################################################
####                     protected methods                       ####
