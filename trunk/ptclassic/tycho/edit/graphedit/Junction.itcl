#########################################################################
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1997-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes ComplexItem] == "" } {
	uplevel #0 {source $env(SLATE_LIBRARY)/ComplexItem.itcl}
    }
}

##########################################################################
## Junction
#
# A Junction is a small item that represents a junction between
# nets in a graph. A Junction has two coordinates, which are located
# at its center. It has four aspects, <b>n</b>, <b>s</b>, <b>e</b>, 
# <b>w</b>, which are the points at which nets can be attached.
#
# <p><a name="#options"></a><b>Options</b>
#
# <ul>
#
# <li><b>-fill</b>:
# The fill color of the junction. By default, it is black.
#
# <li><b>-outline</b>:
# The color of the outline of the junction. If "", 
# the junction has no outline. By default, it is black.
#
# <li><b>-size</b>:
# The size of the junction, in pixels from the origin to each corner.
# The default is 10.
#
# <li><b>-width</b>:
# The width of the outline of the junction, in pixels. By 
# default, it is one.
#
# </ul>
#
# <p><b>Bugs</b>: (none)
#
# <p><b>Example</b>: Create a junction:
# <tcl quiet><pre>
#   source $tycho/edit/slate/doc/internals/newslate.itcl
#   $slate create Junction 100 100 -fill white -outline blue &#92
# 		-width 4 -text Foo -tags moveable
# </pre></tcl>
#
# <p><b>Enhancements</b>: (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/howtoread.html">Reading <i>ComplexItem</i>
# documentation</a>.
# <li><a href="../internals/items.html">Complex item classes</a>.
# </ul>
#
class ::tycho::Junction {
    inherit ::tycho::ComplexItem

    ###################################################################
    ####                         public procs                      ####

    # Update the *-fill* option
    proc _fill {id canvas slate fill}

    # Update the *-outline* option
    proc _outline {id canvas slate outline}

    # Update the *-size* option
    proc _size {id canvas slate size}

    # Update the *-width* option
    proc _width {id canvas slate width}

    # Get an aspect  of the junction
    proc aspect {id canvas slate args}

    # Create a new item
    proc construct {id canvas slate tags x y args}

    # Set or get the item's coordinates
    proc coords {id canvas slate args}
    
    ###################################################################
    ####                         private variables                 ####

    # The virtual "method" table
    private common methodtable

    # Default values of this item's options
    private common optiondefault

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::ComplexItem::methodtable]

    set methodtable(_fill)     ::tycho::Junction::_fill
    set methodtable(_item)     ::tycho::Junction::_item
    set methodtable(_outline)  ::tycho::Junction::_outline
    set methodtable(_size)     ::tycho::Junction::_size
    set methodtable(_sticky)   ::tycho::Junction::_sticky
    set methodtable(_width)    ::tycho::Junction::_width

    set methodtable(aspect)    ::tycho::Junction::aspect
    set methodtable(construct) ::tycho::Junction::construct
    set methodtable(coords)    ::tycho::Junction::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::ComplexItem::optiondefault]

    set optiondefault(-fill)    black
    set optiondefault(-outline) black
    set optiondefault(-shape)   point
    set optiondefault(-size)    6
    set optiondefault(-width)   1
}

##########################################################################
## -fill option configuration
#
body ::tycho::Junction::_fill {id canvas slate fill} {
    set option(fill$id) $fill
    $canvas itemconfigure $primary($id) -fill $fill
}

##########################################################################
## -outline option configuration
#
body ::tycho::Junction::_outline {id canvas slate outline} {
    set option(outline$id) $outline
    $canvas itemconfigure $primary($id) -outline $outline
}

##########################################################################
## -size option configuration
#
body ::tycho::Junction::_size {id canvas slate size} {
    set option(size$id) $size
    coords $id $canvas $slate
}

##########################################################################
## -width option configuration
#
body ::tycho::Junction::_width {id canvas slate width} {
    set option(width$id) $width
    $canvas itemconfigure $primary($id) -width $width
}

##########################################################################
#### aspect
#
body ::tycho::Junction::aspect {id canvas slate args} {
    array set opts {-aspects {}}
    array set opts $args

    if { $opts(-aspects) == "" } {
        return {n s e w}
    }
    set coords [$canvas coords $primary($id)]
    set result {}
    foreach a $opts(-aspects) {
        switch -exact -- $a {
            w {
                lappend result [lrange $coords 0 1]
            }
            n {
                lappend result [lrange $coords 2 3]
            }
            e {
                lappend result [lrange $coords 4 5]
            }
            s {
                lappend result [lrange $coords 6 7]
            }
            default {
                error "Unknown aspect \"$a\""
            }
        }
    }
    eval concat $result
}

##########################################################################
#### construct
#
body ::tycho::Junction::construct {id canvas slate tags x y args} {
    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $args] {
	set option([string trimleft $opt -]$id) $val
    }
    # Create the primary component. This is the displayed polygon.
    set primary($id) [$canvas create polygon \
            [expr $x - $option(size$id)] $y \
            $x [expr $y - $option(size$id)] \
            [expr $x + $option(size$id)] $y \
            $x [expr $y + $option(size$id)] \
            -fill $option(fill$id) \
            -outline $option(outline$id) \
            -width $option(width$id) \
            -tags $tags]
}

##########################################################################
#### coords
#
# Set or read the junction's coordinates
#
body ::tycho::Junction::coords {id canvas slate args} {
    set coords [$canvas coords $primary($id)]

    # No args: just return coordinates
    if { $args == "" } {
    	list [lindex $coords 2] [lindex $coords 1]
    } else {
    	set x [lindex $args 0]
    	set y [lindex $args 1]
    	$canvas coords $id \
	    	[expr $x - $option(size$id)] $y \
    		$x [expr $y - $option(size$id)] \
    		[expr $x + $option(size$id)] $y \
    		$x [expr $y - $option(size$id)]
    }
}
