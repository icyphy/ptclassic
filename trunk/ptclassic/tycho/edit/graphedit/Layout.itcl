#########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Layout
#
# The _Layout_ model is a model for any graphical "picture"
# drawn on the slate.
#
class ::tycho::Layout {
    inherit ::tycho::Model

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The "primary" view of this model
    public variable primaryview {}

    #################################################################
    ####                     public methods                      ####

    # Add a tag to specified items
    method addtag {tag args}
    
    # Return all attributes of an item
    method attributes {item}

    # Get or set the coordinates of an item
    method coords {item args}

    # Delete an item
    method delete {item}

    # Describe the layout
    method describe {{prefix {}}}

    # Delete a tag from all items
    method dtag {tag}

    # Add a top-level item to the layout
    method item {item spec args}

    # Configure an item
    method itemconfigure {item args}

    # Get an attribute of an item
    method itemcget {item args}

    # Move an item
    method move {tag x y}

    # Start moving an item
    method moveclick {tag x y args}

    # Continue moving an item
    method movedrag {tag x y}

    # Stop moving an item
    method moverelease {tag x y}

    # Get the (full) names of items
    method names {{context {}}}

    # Reshape an item
    method reshape {name x y args}

    # Start reshaping an item
    method reshapeclick {name x y args}

    # Continue reshaping an item
    method reshapedrag {name x y}

    # Stop reshaping an item
    method reshaperelease {name x y}

    # Manipulate the selection
    method selection {args}

    # Add a nested item
    method subitem {context item spec args}

    # Get the type of an item
    method type {item}

    #################################################################
    ####                  protected methods                      ####
    
    # Add a nested item -- parser call
    protected method _item {context item spec args}

    # Evaluate code in this object's context
    protected method evalInSpecificContext {args} {eval $args}

    #################################################################
    ####                 protected variables                     ####
    
    # Storage used during interaction sequences
    protected variable _scratch
}

########################################################################
#### constructor
#
body ::tycho::Layout::constructor {args} {
    # Items can have arbitrary attributes
    configure -strictoptions 0

    # Evaluate options
    eval configure $args

    # The item entity has a value (its type and coords)
    defineEntityType item -valued 1
}

########################################################################
#### addtag
#
# Add a tag to all specified items. Does not return an inverse
# command, since tagging and untagging are not undoable commands.
#
body ::tycho::Layout::addtag {tag args} {
    return ""
}

########################################################################
#### attributes
#
# Return a list containing the attributes of the item as a flat
# attribute-value list. Flag an error if the item does not exist.
#
body ::tycho::Layout::attributes {item} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verify item $cntxt $local
    _attributes item $cntxt $local
}

########################################################################
#### coords
#
# With no arguments, get the coordinates of an item, with arguments,
# set the coordinates and return the undo command. Note: this
# must be called after a call to move{}, release{}, etc, in order
# to update the model itself, since those calls do not actually
# keep the coordinates up-to-date.
#
body ::tycho::Layout::coords {item args} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verify item $cntxt $local
    if { $args == "" } {
	lreplace $_value($item) 0 0
    } else {
	set inverse "coords $item [lreplace $_value($item) 0 0]"
    	_assign item $cntxt $local \
    		[linsert $args 0 [lindex $_value($item) 0]]
    	return $inverse
    }
}

########################################################################
#### delete
#
# Delete an item from the model.
#
body ::tycho::Layout::delete {item} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verify $type $cntxt $local
    set info [_delete $type $cntxt $local]
    
    # Return inverse command.
    # FIXME: does not work with nested entities yet!
    concat item $item $info
}

########################################################################
#### dtag
#
# Delete a tag from all items. Does not return an inverse
# command, since tagging and untagging are not undoable commands.
#
body ::tycho::Layout::dtag {tag} {
    return ""
}

########################################################################
#### describe
#
# Return a string that describes the layout.
# See the <a href="Interchange.html"> Interchange</a> class.
#
body ::tycho::Layout::describe {{prefix {}}} {
    # First call my primary view to update layout
    $primaryview updateLayout

    # Call the superclass
    chain $prefix
}

########################################################################
#### item
#
# Add a new item to the model and return the inverse command. The
# value is the type and the _initial_ coordinates only.
#
body ::tycho::Layout::item {item spec args} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verifynot item $cntxt $local $item
    _addentity item $cntxt $local $item $spec $args
}

########################################################################
#### itemcget
#
# Get an attribute of an item.
#
body ::tycho::Layout::itemcget {item attribute} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verify item $cntxt $local
    _cget item $cntxt $local $attribute
}

########################################################################
#### itemconfigure
#
# Configure an item and return the inverse command.
#
body ::tycho::Layout::itemconfigure {item args} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verify item $cntxt $local
    concat [list itemconfigure $name] [_configure $type $cntxt $local $args]
}

########################################################################
#### move
#
# Move an item by name, or a set of items by tag.
# Note: coords{} must be called (but not via publish{})
# after calling this to keep the model itself up-to-date.
#
body ::tycho::Layout::move {tag x y} {
    # puts "::tycho::Layout::move $tag $x $y"
    # Only construct the inverse if the "recording" flag is set.
    # This is not for efficiency, but because the command may
    # need to generate its own redo command.
    if { $recording } {
	if { [::info exists _value($tag)] } {
	    # This is an item, so return simple inverse command
	    return [list move $tag [expr -$x] [expr -$y]]
	} else {
	    # It's a tag, so explicitly construct commands to move all
	    # tagged items. Note that we don't use the tag since the
	    # tags may change by the time the command is undone.
	    set undo [list sequence]
	    set redo [list sequence]
	    foreach item [$primaryview withtag $tag] {
		lappend undo [list move $item [expr -$x] [expr -$y]]
		lappend redo [list move $item $x $y]
	    }
	    # Add to history, and return null so nothing else is recorded.
	    appendHistory $redo $undo 1
	    return ""
	}
    }
}

########################################################################
#### moveclick
#
# Start moving an item specified by name, or a set of items 
# specified by tag.
#
body ::tycho::Layout::moveclick {tag x y} {
    # puts "::tycho::Layout::moveclick $tag $x $y"
    # Just remember where we are, and don't record in the history
    set _scratch($tag.startx) $x
    set _scratch($tag.starty) $y
    return ""
}

########################################################################
#### movedrag
#
# Continue moving an item specified by name, or a set of items 
# specified by tag.
#
body ::tycho::Layout::movedrag {tag x y} {
    # puts "::tycho::Layout::movedrag $tag $x $y"
    return ""
}

########################################################################
#### moverelease
#
# Terminate movement of an item specified by name, or a set of items 
# specified by tag. Record a single move command (for the whole
# sequence since the call to moveclick{}) in the history.
# Note: coords{} must be called (but not via publish{})
# after calling this to keep the model itself up-to-date.
#
body ::tycho::Layout::moverelease {tag x y} {
    # puts "::tycho::Layout::moverelease $tag $x $y"
    set deltax [expr $x - $_scratch($tag.startx)]
    set deltay [expr $y - $_scratch($tag.starty)]
    unset _scratch($tag.startx)
    unset _scratch($tag.starty)

    # Only construct the inverse if the "recording" flag is set.
    # This should never happen, but we check just to make sure.
    if { $recording } {
	if { [::info exists _value($tag)] } {
	    # This is an item, so use simple command
	    set undo [list move $tag [expr -$deltax] [expr -$deltay]]
	    set redo [list move $tag $deltax $deltay]
	} else {
	    # It's a tag, so construct commands to move all tagged items.
	    # Note that we don't use the tag in the command since the
	    # tags may change by the time the command is undone.
	    set items [$primaryview withtag $tag]
	    if { [llength $items] == 0 } {
		set undo {}
		set redo {}
	    } elseif { [llength $items] == 1 } {
		set undo [list move [lindex $items 0] \
			[expr -$deltax] [expr -$deltay]]
		set redo [list move [lindex $items 0] $deltax $deltay]
	    } else {
		set undo [list sequence]
		set redo [list sequence]
		foreach item [$primaryview withtag $tag] {
		    lappend undo [list move $item \
			    [expr -$deltax] [expr -$deltay]]
		    lappend redo [list move $item $deltax $deltay]
		}
	    }
	}
    	# Add to history, and return null so nothing else is recorded.
    	appendHistory $redo $undo 1
    	return ""
    }
}

########################################################################
#### names
#
# Get the names of items. If the context argument is
# given, get items within that context; if not, get root items.
#
body ::tycho::Layout::names {{context {}}} {
    _children item $context
}

########################################################################
#### reshape
#
# Reshape an item by name.
# Note: coords{} must be called (but not via publish{})
# after calling this to keep the model itself up-to-date.
#
body ::tycho::Layout::reshape {name x y args} {
    # puts "::tycho::Layout::reshape $name $x $y $args"
    if { ! [::info exists _value($name)] } {
    	error "Item \"$name\" does not exists in [_dataname]"
    }
    concat reshape [list $name] [expr -$x] [expr -$y] $args
}

########################################################################
#### reshapeclick
#
# Start moving an item specified by name.
#
body ::tycho::Layout::reshapeclick {name x y args} {
    # puts "::tycho::Layout::reshapeclick $name $x $y $args"
    if { ! [::info exists _value($name)] } {
    	error "Item \"$name\" does not exist in [_dataname]"
    }
    # Just remember where we are, and don't record in the history
    set _scratch($name.startx) $x
    set _scratch($name.starty) $y
    array set opts $args
    set _scratch($name.aspects) $opts(-aspects)
    return ""
}

########################################################################
#### reshapedrag
#
# Continue reshaping an item specified by name.
#
body ::tycho::Layout::reshapedrag {name x y} {
    # puts "::tycho::Layout::reshapedrag $name $x $y"
    return ""
}

########################################################################
#### reshaperelease
#
# Terminate reshaping of an item specified by name. Record a
# single reshape command (for the whole sequence since the call
# to reshapeclick{}) in the history.
# Note: coords{} must be called (but not via publish{})
# after calling this to keep the model itself up-to-date.
#
body ::tycho::Layout::reshaperelease {name x y} {
    # puts "::tycho::Layout::reshaperelease $name $x $y"
    set deltax [expr $x - $_scratch($name.startx)]
    set deltay [expr $y - $_scratch($name.starty)]
    set aspects $_scratch($name.aspects)
    unset _scratch($name.startx)
    unset _scratch($name.starty)
    unset _scratch($name.aspects)

    # Only construct the inverse if the "recording" flag is set.
    # This should never happen, but we check just to make sure.
    if { $recording } {
    	# This is an item, so use simple commands
    	set undo [concat reshape [list $name] \
		[expr -$deltax] [expr -$deltay] $aspects]
    	set redo [concat reshape [list $name] $deltax $deltay $aspects]

    	# Add to history, and return null so nothing else is recorded.
    	appendHistory $redo $undo 1
    	return ""
    }
}

########################################################################
#### selection
#
# Manipulate the selection. This command is here only because
# it needs to be propagated to multiple subscribers. Does not
# return an inverse command, since selection and deselection
# are not undoable commands.
#
body ::tycho::Layout::selection {mode {name {}}} {
    return ""
}

########################################################################
#### subitem
#
# Add a nested item.
#
body ::tycho::Layout::subitem {context item value args} {
    _verifynot item $context $item $context.$item
    _addentity item $context $item $context.$item $value $args
}

########################################################################
#### type
#
# Get the Slate type of an item
#
body ::tycho::Layout::type {item} {
    set splut [split $item "."]
    set cntxt [lreplace $splut end end]
    set local [lindex $splut end]

    _verify item $cntxt $local
    lindex $_value($item) 0
}

########################################################################
#### _item
#
# Add a nested item -- parser call
#
body ::tycho::Layout::_item {context item value args} {
    _verifynot item $context $item $context.$item
    _addentity item $context $item $context.$item $value $args]
}
