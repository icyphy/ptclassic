#########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Layout
#
# The _Layout_ model is a model for graphical items drawn onto a
# slate. Its methods provide a model-like interface for slate
# modifications, so that any view based on a slate can communicate
# with other views.
#
# _Layout_ has the following types:
# <dl>
# <dt><b>item</b> _name_
# <dd>
# A graphical item on the slate. Items can be nested arbitrarily, and
# views should interpret nested items as active child items on the slate.
# Items have the following attributes:
#   <dl>
#   <dt><b>-coords</b> <b>{</b> _x_ _y_ ?_x_ _y_ ...? <b>}</b>
#   <dd>
#   The coordinates of the item. The coordinates are not always kept
#   up to date, simply because most of the work of maintaining them
#   is done by the Slate, and duplicating it in this mdoel would be
#   pointless. Instead, this attribute is updated automatically when
#   it is read. This item must be supplied when the item is created.
#
#   <dt><b>-slatetype</b> _type_
#   <dd>
#   The slate type of the item. This attribute must be supplied when
#   an item is created, and cannot be changed afterwards.
#
#   <dt>_Item option_
#   <dd>
#   Any other attributes must be legal options to the slate type
#   given by </b>-slatetype</b>. 
#
#   </dl>
#
class ::tycho::Layout {
    inherit ::tycho::DataModel
    
    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####
    
    #################################################################
    ####                     public methods                      ####
    
    # Add a new item
    method add {type name args}

    # Get an attribute or attributes of an item
    method attrget {name {attr {}}}

    # Set attributes of an item
    method attrset {name args}

    # "Clean" an item
    method clean {{item {}}}
    
    # Clear data from the model
    method clear {}

    # Get or set the coordinates of an item
    method coords {item args}

    # Get a description of the layout or an item
    method describe {{item {}} {prefix {}}}

    # "Dirty" an item
    method dirty {item}
    
    # Forward a query to a subscriber view
    method forward {method name args}
    
    # Move an item
    method move {tag x y}
    
    # Start moving an item
    method moveclick {tag x y args}
    
    # Continue moving an item
    method movedrag {tag x y}
    
    # Stop moving an item
    method moverelease {tag}
    
    # Reshape an item
    method reshape {item x y args}
    
    # Start reshaping an item
    method reshapeclick {item x y args}
    
    # Continue reshaping an item
    method reshapedrag {item x y}
    
    # Stop reshaping an item
    method reshaperelease {item}
    
    # Subscribe to this model
    method subscribe {type {subscriber {}} {command {}}}
    
    # Unsubscribe from this model
    method unsubscribe {type subscriber}
    
    #################################################################
    ####                   protected methods                     ####
    
    # Add an item
    protected method _additem {args} {eval add $args}
    
    # Return a description of a single item
    protected method _describeitem {item {prefix {}}}
    
    # Find items using a subscribed view
    protected method find {mode args}
    
    #################################################################
    ####                   private variables                     ####
    
    # Flag to mark "dirty" coordinates
    private variable _dirty
    
    # Storage used during interaction sequences
    private variable _scratch
    
    # A list of subscribed slate views
    private variable _views {}
}

########################################################################
#### constructor
#
body ::tycho::Layout::constructor {args} {
    # Evaluate options
    eval configure $args
    
    # The "item" type
    type define item
}

#########################################################################
#### add
#
# Add an item. This method overrides the inherited method to deal
# with the <b>-slatetype</b> and <b>-coords</b> attributes.
#
body ::tycho::Layout::add {type item args} {
    array set opts $args
    if ![info exists opts(-slatetype)] {
        error "attribute \"-slatetype\" must be supplied"
    }
    if ![info exists opts(-coords)] {
        error "attribute \"-coords\" must be supplied"
    }
    eval [list chain $type $item] $args
}

########################################################################
#### attrget
#
# Get an attribute or attributes of an item. This method overrides
# the inherited method to deal with the coordinates.
#
body ::tycho::Layout::attrget {item {attribute {}}} {
    # Clean it first
    clean $item

    # Get the attribute
    chain $item $attribute
}

########################################################################
#### attrset
#
# Configure an attribute or attributes of an item. This method overrides
# the inherited method to deal with the <b>-slatetype</b> and
# <b>-coords</b> attributes.
#
body ::tycho::Layout::attrset {item args} {
    # This is commented out because it's too tedious to deal with
    # if { [lsearch -exact $args -slatetype] != -1 } {
    #     error "Attribute \"-slatetype\" is read-only"
    # }
    #if { [lsearch -exact $args -coords] != -1 } {
    #    catch {unset _dirty($item)}
    #}
    eval chain [list $item] $args
}

########################################################################
#### clean
#
# "Clean" a dirty item or all items. The data in this model is
# updated to reflect the true state of the item as obtained from
# a canvas contained in one of the subscribers. If an item is
# supplied, clean it; if no item is supplied, clean all dirty
# items. This is a necessary prerequisite to describing
# the model, and to certain other operations...
#
body ::tycho::Layout::clean {{item {}}} {
    if { $item == "" } {
	# Clean all dirty items. This in inefficient, but I can't
	# think of a better way of doing it...
	foreach i [array names _dirty] {
	    set attrs [list -coords [forward coords $i]]
	    foreach {opt _ _ _ val} [eval concat [forward itemconfigure $i]] {
		lappend attrs $opt $val
	    }
	    eval attrset [list $i] $attrs
	}
	catch {unset _dirty}

    } elseif [info exists _dirty($item)] {
	# Clean just one item
	set attrs [list -coords [forward coords $item]]
	foreach {opt _ _ _ val} [eval concat [forward itemconfigure $item]] {
	    lappend attrs $opt $val
	}
	eval attrset [list $item] $attrs
	unset _dirty($item)
    }
}
	
########################################################################
#### clear
#
# Clear all data from the model and invalidate the cache.
#
body ::tycho::Layout::clear {} {
    catch {unset _dirty}
    chain
}

########################################################################
#### coords
#
# With no arguments, get the coordinates of an item, with arguments,
# set the coordinates and add to the history if recording. 
#
body ::tycho::Layout::coords {item args} {
    if { $args == "" } {
        forward coords $item -coords
    } else {
        if $recording {
            history append \
                    "coords $item $args" \
                    "coords $item [attrget $item -coords]"
        }
        # norecord attrset $item -coords $args
        attrset $item -coords $args
    }
}

########################################################################
#### describe
#
# Generate a TIM description of an item or the layout model.
# See the docs in the DataModel superclass.
#
body ::tycho::Layout::describe {{item {}} {prefix {}}} {
    clean $item
    chain $item $prefix
}
	
########################################################################
#### dirty
#
# Mark an item as "dirty." This means that its coordinates and/or
# attributes in the model are out of sync with the coordinates
# and attributes in the actual slates on which ths item is drawn.
# We have to do this because this model is not a "real" model -- most
# of the work is done in the Tk canvas itself. If the item is not
# a real item, then it is assumed to be a tag, and all items with
# that tag are made dirty.
#
body ::tycho::Layout::dirty {item} {
    if [exists $item] {
	set _dirty($item) 1
    } else {
	foreach i [find withtag $item] {
	    set _dirty($i) 1
	}
    }
}

#######################################################################
#### forward
#
# Call a method on a slate. The first widget in the list of widgets
# subscribed with <b>subscribe view</b> must be able to respond to
# the <b>slateid</b> method and the <b>component slate</b>
# method.
#
body ::tycho::Layout::forward {method name args} {
    if { $_views == "" } {
        error "$modelname has no subscribed views"
    }
    set view [lindex $_views 0]
    set id [$view slateid $name]
    set slate [$view component slate]
    eval $slate $method $id $args
}

########################################################################
#### move
#
# Move an item by name, or a set of items by tag. Record a single move
# command in the history if currently recording.
#
body ::tycho::Layout::move {tag x y} {
    # Set the dirty flag of each item.
    dirty $tag

    # If recording, add to the history as well
    if $recording {
        if [exists $tag] {
            history append \
                    "move $tag $x $y" \
                    "move $tag [expr -$x] [expr -$y]"
        } else {
            set redo _compound
            set undo _compound
            foreach item [find withtag $tag] {
                lappend redo "move $item $x $y"
                lappend undo "move $item [expr -$x] [expr -$y]"
            }
            history append $redo $undo
        }
    }
}

########################################################################
#### moveclick
#
# Start moving an item specified by name, or a set of items 
# specified by tag. Don't record anything in the history.
#
body ::tycho::Layout::moveclick {tag x y} {
    set _scratch($tag.startx) $x
    set _scratch($tag.starty) $y
    set _scratch($tag.currentx) $x
    set _scratch($tag.currenty) $y
}

########################################################################
#### movedrag
#
# Continue moving an item specified by name, or a set of items 
# specified by tag. Don't record anything in the history.
#
body ::tycho::Layout::movedrag {tag x y} {
    set _scratch($tag.currentx) $x
    set _scratch($tag.currenty) $y
}

########################################################################
#### moverelease
#
# Terminate movement of an item specified by name, or a set of items 
# specified by tag. Record a single move command in the history
# if currently recording.
#
body ::tycho::Layout::moverelease {tag} {
    set deltax [expr $_scratch($tag.currentx) - $_scratch($tag.startx)]
    set deltay [expr $_scratch($tag.currenty) - $_scratch($tag.starty)]
    unset _scratch($tag.startx)
    unset _scratch($tag.starty)
    unset _scratch($tag.currentx)
    unset _scratch($tag.currenty)
    
    # Call the move method to construct history
    move $tag $deltax $deltay
}

########################################################################
#### reshape
#
# Reshape an item by name. Record a single reshape
# command in the history if currently recording.
#
body ::tycho::Layout::reshape {item x y args} {
    # Set the dirty flag
    dirty $item

    # puts "reshape $item $x $y $args"
    if ![exists $item] {
        error "Cannot reshape \"$item\""
    }
    if $recording {
        history append \
                "reshape $item $x $y $args" \
                "reshape $item [expr -$x] [expr -$y] $args"
    }
}

########################################################################
#### reshapeclick
#
# Start moving an item specified by name. Don't record anything in
# the history.
#
body ::tycho::Layout::reshapeclick {item x y args} {
    # puts "reshapeclick $item $x $y $args"
    if ![exists $item] {
        error "Cannot reshape \"$item\""
    }
    set _scratch($item.startx) $x
    set _scratch($item.starty) $y
    set _scratch($item.currentx) $x
    set _scratch($item.currenty) $y
    
    array set opts $args
    set _scratch($item.aspects) $opts(-aspects)
}

########################################################################
#### reshapedrag
#
# Continue reshaping an item specified by name. Don't record anything in
# the history.
#
body ::tycho::Layout::reshapedrag {item x y} {
    # puts "reshapedrag $item $x $y"
    if ![exists $item] {
        error "Cannot reshape \"$item\""
    }
    set _scratch($item.currentx) $x
    set _scratch($item.currenty) $y
}

########################################################################
#### reshaperelease
#
# Terminate reshaping of an item specified by name. Record a reshape
# command in the history if currently recording.
#
body ::tycho::Layout::reshaperelease {item} {
    if ![exists $item] {
        error "Cannot reshape \"$item\""
    }
    set deltax [expr $_scratch($item.currentx) - $_scratch($item.startx)]
    set deltay [expr $_scratch($item.currenty) - $_scratch($item.starty)]
    set aspects $_scratch($item.aspects)
    
    unset _scratch($item.startx)
    unset _scratch($item.starty)
    unset _scratch($item.currentx)
    unset _scratch($item.currenty)
    unset _scratch($item.aspects)
    
    # Call the reshape method to construct history
    eval reshape $item $deltax $deltay $aspects
}

########################################################################
#### subscribe
#
# Subscribe to this model. This command has several forms, depending
# on the value of the _mode_ argument.
#
# <dl>
# <dt><b>data</b> _subscriber_ ?_command_?
# <dd>
# As inherited from the _Model_ superclass.
#
# <dt><b>event</b> _subscriber_ ?_command_?
# <dd>
# As inherited from the _Model_ superclass.
#
# <dt><b>view</b> _subscriber_
# <dd>
# The _subscriber_ must be a view that understands the following
# methods with model item names as arguments: <b>coords</b>,
# and <b>find</b>. A layout model requires at least one
# subscriber that nominates itself as a view if items coordinates
# are being manipulated. This is bceause this model does not actually
# store current item coordinates, as to do so would require duplicating
# too much of the functionality of the Tk canvas, meaning that
# we would need to write a lot code and it would run way
# too slowly.
#
# </dl>
#
body ::tycho::Layout::subscribe {mode {subscriber {}} {command {}}} {
    if { $mode == "view" } {
        lappend _views $subscriber
    } else {
        chain $mode $subscriber $command
    }
}

########################################################################
#### unsubscribe
#
# Unsubscribe from this model. This command has several forms, depending
# on the value of the _mode_ argument.
#
# <dl>
# <dt><b>data</b> _subscriber_
# <dd>
# As inherited from the _Model_ superclass.
#
# <dt><b>event</b> _subscriber_
# <dd>
# As inherited from the _Model_ superclass.
#
# <dt><b>view</b> _subscriber_
# <dd>
# The _subscriber_ must be a view previously subscribed with
# <b>subscribe view</b>.
#
# </dl>
#
body ::tycho::Layout::unsubscribe {mode subscriber} {
    if { $mode == "view" } {
        set _views [::tycho::ldelete $_views $subscriber]
    } else {
        chain $mode $subscriber
    }
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _describeitem
#
# Return a string describing an item. This method overrides
# the default method in order to make sure that the item's
# <b>-coords</b> attribute is correctly updated.
#
body ::tycho::Layout::_describeitem {item {prefix {}}} {
    itemcget $item -coords
    _describe $item $prefix
}

#######################################################################
########################################################################
#### find
#
# Perform a "find" command, using one of the subscribed slate views.
#
body ::tycho::Layout::find {mode args} {
    if { $_views != "" } {
        eval [lindex $_views 0] find $mode $args
    } else {
        return ""
    }
}
