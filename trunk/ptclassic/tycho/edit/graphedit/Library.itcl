##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Library
#
# A _Library_ is a model containing a collection of items that are
# accessed by other models and widgets. This class is an abstract class
# for applications-specific libraries, and contains support for
# grouping items in the library, access to meta-data for viewing and
# editing, and facilities for building menus for accessing the library.
# In the future, it may also support transparent access to larger
# libraries spread over many files.
#
# This model has the following types:
# <dl>
# <dt><b>group</b> _name_
# <dd>
# A group of items. This is a structuring mechanism for the library.
# Tools that access a library will usually treat each group as a new
# hierarchical menu or palette. Groups have the following attributes:
#   <dl>
#   <dt><b>-label</b> _string_
#   <dd>
#   The label used to display the group in menu bars and the like.
#   By convention, groups with a null label
#   will not be made available in user interfaces.
#
#   <dt><b>-description</b> _html-string_
#   <dd>
#   An HTML description of the purpose or contents of the group. This
#   attribute is genreally used by help viewers.
#
#   </dl>
#
# <dt><b>xref</b> _name_ _value-list_
# <dd>
# A cross-reference to other models. The usage of this type is not
# dictated by this model at all -- rather, it is provided to allow
# other models and widgets that manipulate libraries to set up
# cross-references of various kinds. By convention, a <b>xref</b>
# item is a name-value list suitable for setting into an array, where
# each name is the full name of an item in this library, and the value
# is a cross-reference to an item in another model. The <b>xref</b>
# item has no attributes, and cannot nest other items.
#
# </dl>
#
# Note that there is no item type that actually stores data. This
# must be created by an application-specific subclass.
#
class ::tycho::Library {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                     public methods                      ####

    # Create an editor on this library
    method edit {command}

    # Create a modal editor on this library
    method editModal {}

    # Create an editor on an item in this library
    method edititem {item command}

    # Create a modal editor on an item in this library
    method edititemModal {item}

    # Create a menu with items in this library
    method makemenu {type menubar menuname prefix {context {}}}
}

########################################################################
#### constructor
#
body ::tycho::Library::constructor {args} {
    # Evaluate options
    eval configure $args

    # The group type.
    definetype group \
    	-valued 0 \
    	-label "" \
    	-description ""

    # The xref entity type. Label is for menu display.
    definetype xref \
    	-valued 1 \
    	-leafonly 1
}

########################################################################
#### edit
#
# Create a graphical editor for this library. The _command_
# argument is a script to evaluate when the user elects
# to update changes made in the editor. The returned value
# is the created editing widget.
#
body ::tycho::Library::edit {command} {
	error "not implemented"
}

########################################################################
#### editModal
#
# Create a modal graphical editor for this library. The returned 
# result is a list of _changed_ parameter name and 
# corresponding value.
#
body ::tycho::Library::editModal {} {
	error "Not implemented"
}

########################################################################
#### edititem
#
# Create a graphical editor for an item. The _command_
# argument is a script to evaluate when the user elects
# to update changes made in the editor. The returned value
# is the created editing widget.
#
body ::tycho::Library::edititem {item command} {
    regsub -all {\.} $item "_" nm
    set nm .$nm
    if { [::info which -command $nm] != "" } {
        # Already exists
        wm deiconify $nm
        raise $nm
     } else {
        uplevel #0 [list ::tycho::ParameterEdit $nm -command $command]
        $nm edit $this $item
        wm deiconify $nm
    }
    return $nm
}

########################################################################
#### edititemModal
#
# Create a modal graphical editor for an item. The returned 
# result is a list of _changed_ parameter name and 
# corresponding value.
#
body ::tycho::Library::edititemModal {item} {
	error "Not implemented"
}

########################################################################
#### makemenu
#
# Add a menu to a menubar containing items in this library.
# The first argument is the type of item to be added to the menubar.
# The second argument is the menubar. The third is the name
# of the menu to place these items into. The fourth is the command
# for each menu entry, to which will be appended the item
# name. The fifth, if supplied and not null, is the group to add
# items from. The sixth, if supplied and not null, is the prefix
# of the name which will be appended to the menu command.
#
body ::tycho::Library::makemenu \
		{type menubar menuname prefix {context {}} {prefix {}}} {
   	# Add cascade menus
	foreach g [listing group] {
        $menubar add cascade $g $menuname \
        		-label [itemcget [concat $context group:$g] -label]
	    makemenu $type $menubar $g $prefix \
	    	[concat $context group:$g] \
	    	[concat $prefix $g]
	}
	# Add items
    foreach i [listing $type] {
        $menubar command $i $menuname \
             -label [itemcget [concat $context $type:$i] -label] \
             -command [concat $command [concat $prefix $i]]
	}
}
