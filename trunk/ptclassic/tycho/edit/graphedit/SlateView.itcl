##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

##########################################################################
#### SlateView
#
# _SlateView_ is a view that references a Slate. It
# provides a symbolic naming interface to a Slate to make it
# easy for Slates to be notified by Layout models.
#
class ::tycho::SlateView {
    inherit ::tycho::Object

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The slate
    public variable slate ""
    
    #################################################################
    ####                     public methods                      ####

    # Add a tag to all indicated items.
    method addtag {tag args}

    # Clear data from this editor (Note: not the viewer)
    method clear {}

    # Delete an item
    method delete {name}

    # Delete a tag from all items.
    method dtag {tag}

    # Get the id of an item given its name
    method id {name}

    # Add a new item
    method item {name spec args}

    # Configure an item
    method itemconfigure {name args}
    
    # Load items from the model into the slate
    method load {layout {context {}}}

    # Move an item
    method move {tag x y}

    # Start moving an item
    method moveclick {tag x y args}

    # Continue moving an item
    method movedrag {tag x y}

    # Stop moving an item
    method moverelease {tag x y}

    # Get or set the name of an item given its id
    method name {id {name {}}}

    # Handle change notification from the layout model
    method notify {method args}

    # Reshape an item
    method reshape {name x y args}

    # Start reshaping an item
    method reshapeclick {name x y args}

    # Continue reshaping an item
    method reshapedrag {name x y}

    # Stop reshaping an item
    method reshaperelease {name x y}

    # Manipulate the the selection
    method selection {mode {name {}}}

    # Add a nested item
    method subitem {context name spec args}

    # Synchronize the model with current coordinates
    method syncback {layout}

    # Return the vertices and edges with a given tag.
    method withtag {tag}

    #################################################################
    ####                  protected methods                      ####

    #################################################################
    ####                   private variables                     ####
    
    # The mapping from item names to item IDs
    private variable _itemID

    # The mapping from item IDs to item names
    private variable _nameof
}

########################################################################
#### constructor
#
body ::tycho::SlateView::constructor {args} {
    # Evaluate options
    eval configure $args
    
    # Check correct usage
    if { $slate == "" } {
        error "SlateView requires a -slate option"
    }
}

########################################################################
#### addtag
#
# Add a tag to all indicated vertices and names.
#
body ::tycho::SlateView::addtag {tag args} {
    foreach name $args {
	$slate addtag $tag withtag $_itemID($name)
    }
}

########################################################################
#### clear
#
# Clear all items from the slate.
#
body ::tycho::SlateView::clear {} {
    catch {unset _itemID}
    catch {unset _nameof}
    $slate delete all
}

########################################################################
#### delete
#
# Delete an item.
#
body ::tycho::SlateView::delete {name} {
    $slate delete $_itemID($name)
    unset _nameof(_itemID($name))
    unset _itemID($name)
}

########################################################################
#### dtag
#
# Delete a tag from all items.
#
body ::tycho::SlateView::dtag {tag} {
    $slate dtag $tag
}

########################################################################
#### id
#
# Return the id of an item given its name. If the id is unknown,
# return the argument on the assumption that it's a valid canvas
# tag.
#
body ::tycho::SlateView::id {name} {
    if ![::info exists _itemID($name)] {
        return $_itemID($name)
    } else {
        return $name
    }
}

########################################################################
#### item
#
# Add a new item to the view.
#
body ::tycho::SlateView::item {name spec args} {
    # puts "::tycho::SlateView::item $name $spec $args"
    set id [eval $slate create $spec $args]
    set _itemID($name) $id
    set _nameof($id) $name
}

########################################################################
#### itemconfigure
#
# Configure an item.
#
body ::tycho::SlateView::itemconfigure {name args} {
    eval $slate itemconfigure $_itemID($name) $args
}

########################################################################
#### load
#
# Load all items from a layout model into the slate. Be sure to
# call clear{} before calling this method.
#
body ::tycho::SlateView::load {layout {context {}}} {
    # Create items
    if { $context == "" } {
        # Top-level items
        foreach item [$layout names] {
            eval [list item $item \
                    [$layout type $item]] \
                    [$layout coords $item] \
                    [$layout attributes $item]
            
            # Recursive call to do nested items
            load $item
        }
    } else {
    	# Nested items
    	foreach item [$layout names $context] {
	    eval [list subitem $context $item \
		    [$layout type $item]] \
		    [$layout coords $item] \
		    [$layout attributes $item]
        }
    }
}

########################################################################
#### move
#
body ::tycho::SlateView::move {tag x y} {
    if { [::info exists _itemID($tag)] } {
        $slate move $_itemID($tag) $x $y
    } else {
        $slate move $tag $x $y
    }
}

########################################################################
#### moveclick
#
body ::tycho::SlateView::moveclick {tag x y} {
    # puts "moveclick $tag"
    if { [::info exists _itemID($tag)] } {
        eval $slate moveclick $_itemID($tag) $x $y
    } else {
        eval $slate moveclick $tag $x $y
    }
}

########################################################################
#### movedrag
#
body ::tycho::SlateView::movedrag {tag x y} {
    if { [::info exists _itemID($tag)] } {
        $slate movedrag $_itemID($tag) $x $y
    } else {
        $slate movedrag $tag $x $y
    }
}

########################################################################
#### moverelease
#
body ::tycho::SlateView::moverelease {tag x y} {
    if { [::info exists _itemID($tag)] } {
        $slate moverelease $_itemID($tag) $x $y
    } else {
        $slate moverelease $tag $x $y
    }
}

########################################################################
#### name
#
# Get or set the name of an item. With no arguments, just return
# the name of the given id if it's a valid id and it's been
# previsouly registerd. If it's not a valid id, _assume_ that
# it is intended as a tag and just return it. If it's an ID
# that doesn't exists, throw an error.
# With an argument and if the id is valid, register the name
# with the id; throw an error if the id is invalid.
#
body ::tycho::SlateView::name {id {name {}}} {
    if { $name != "" } {
        # Bind a name to an id
        if [regexp {^[_0-9][0-9]*$} $id] {
            # It's a valid id
            set _nameof($id) $name
            set _itemID($name) $id
            return $name
        } else {
            error "Invalid id $id"
        }
    } else {
        # Get a name
        if [regexp {^[_0-9][0-9]*$} $id] {
            # It's a valid id
            if [::info exists _nameof($id)] {
                return $_nameof($id)
            } else {
                error "Unknown id $id"
            }
        } else {
            # Assume it's a valid tag
            return $id
        }
    }
}

########################################################################
#### notify
#
# FIXME: Want to call methods directly!
#
body ::tycho::SlateView::notify {method args} {
    eval $method $args
}

########################################################################
#### reshape
#
body ::tycho::SlateView::reshape {name x y args} {
    eval $slate reshape $_itemID($name) $x $y $args
}

########################################################################
#### reshapeclick
#
body ::tycho::SlateView::reshapeclick {name x y args} {
    eval $slate reshapeclick $_itemID($name) $x $y $args
}

########################################################################
#### reshapedrag
#
body ::tycho::SlateView::reshapedrag {name x y} {
    $slate reshapedrag $_itemID($name) $x $y
}

########################################################################
#### reshaperelease
#
body ::tycho::SlateView::reshaperelease {name x y} {
    $slate reshaperelease $_itemID($name) $x $y
}

########################################################################
#### selection
#
# Manipulate the selection.
#
body ::tycho::SlateView::selection {mode {name {}}} {
    switch -exact $mode {
    	"add" {
	    $slate selection add $_itemID($name)
    	}
    	"remove" {
	    $slate selection add $_itemID($name)
    	}
    	"clear" {
	    $slate selection clear
    	}
    }
}

########################################################################
#### subitem
#
# Add a nested item. The item is created as a "root" child so that
# it responds to events.
#
body ::tycho::SlateView::subitem {context name spec args} {
    set parent $_itemID($context)
    set id [eval $slate createrootchild $parent $spec $args]
    set _itemID($name) $id
    set _nameof($id) $name
}

########################################################################
#### withtag
#
# Return the items with a given tag.
#
body ::tycho::SlateView::withtag {tag} {
    set result {}
    foreach id [$slate find withtag $tag] {
	lappend result $_nameof($id)
    }
    return $result
}

