##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### VertexController
#
# _VertexController_ is a controller object used by the
# _DFGEditor_ view. It is responsible for managing vertices
# of the graph.
#
class ::tycho::VertexController {
    inherit ::tycho::ViewController
	
    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The corresponding edge controller
    public variable edgecontroller ""
	
    #################################################################
    ####                     public methods                      ####

    # Get the follower
    method _follower {} {return $_follower}

    # Add a vertex and icon
    method add {libname starname}

    # Process a click event
    method click {tag x y args}

    # Initialize the context-sensitive popup menu
    method contextmenu {item type}

    # Delete a vertex
    method delete {name}

    # Process a motion event
    method drag {tag x y}

    # Edit parameters of the given vertices
    method editparameters {tag}

    # Initialize the popup menu
    method initPopup {name}

    # Add an icon at the specified location
    method place {iconlib iconname starname x y}

    # Process a release event
    method release {tag}

    #################################################################
    ####                  protected methods                      ####

    # Reset all variables
    protected method _cleanup {}

    #################################################################
    ####                 protected variables                     ####
    
    # The interactor to move vertexes
    protected variable _follower

    # Input edges to the subgraph
    protected variable _inputedges ""
    
    # Edges within the subgraph
    protected variable _moveedges ""
    
    # The tag of items being moved
    protected variable _movetag
    
    # The vertices being moved
    protected variable _vertices
    
    # Output edges from the subgraph
    protected variable _outputedges ""
    
    #################################################################
    ####                   private variables                     ####
    
    # The starting coordinates of the vertex
    private variable _initcoords

}

########################################################################
#### constructor
#
body ::tycho::VertexController::constructor {args} {
    # Evaluate options
    eval configure $args

    set _follower [$slate interactor Follower]

    # Make the follower send moves here
    $_follower configure \
            -clickprefix "$this click" \
            -dragprefix "$this drag" \
            -releaseprefix "$this release"
}

########################################################################
#### add
#
# Add a vertex given the library name and star name
#
body ::tycho::VertexController::add {libname starname} {
    set lib [$slateview library access $libname]

    # Instantiate the star as a vertex of the graph
    set starname [$lib instantiate $starname $graph -itemtype vertex]

    # Find the icon of the star
    if [$graph exists $starname -icon] {
        set iconpath [$graph attrget $starname -icon]
        set splat [split $iconpath #]
        set iconlib [lindex $splat 0]
        set iconname [lindex $splat 1]

        # FIXME: Need a shorter way of doing this...
        set libpath [::tycho::model load $iconlib]
        # FIXME: key cannot be reused, hence the autoname...
        set iconmodel [::tycho::model link $libpath [::tycho::autoName $this]]

        # See if the icon has a dot-separated name
        if ![$iconmodel exists $iconname] {
            if [$iconmodel exists [split $iconname .]] {
                set iconname [split $iconname .]
            } else {
                error "Unknown icon \"$iconname\" in $iconlib"
            }
        }
        # Place the icon
        set coords [$slateview place]
        eval place [list $iconmodel $iconname $starname] $coords
    } else {
        # FIXME
        error "No icon for $starname"
    }

    # Notify views that the data has been modified
    $layout notify event "modified"
    $graph notify event "modified"
}

########################################################################
#### click
#
# Start a move interaction on vertices. The argument is a tag which
# must be attached only to vertices to be moved. Get the names of
# edges that are fully connected to these vertices and tag
# all vertices and those edges. Also get the names of edges
# that have one end connected to one of these vertices and
# remember who they are.
#
body ::tycho::VertexController::click {tag x y args} {
    # Get the vertices, and start a move sequence on them
    set _vertices [$slateview find withtag $tag]

    # Get the item name or the same tag
    set name [itemname $tag]
    set _movetag $name

    # Remember the coordinates of the first vertex
    set _initcoords [$slateview coords [lindex $_vertices 0]]

    # Notify views that these items are about to move
    $layout publish moveclick $name $x $y

    # Get completely-connected and partially-connected edges
    set _moveedges [eval $graph subgraphEdges $_vertices]
    set _inputedges [eval $graph subgraphInputs $_vertices]
    set _outputedges [eval $graph subgraphOutputs $_vertices]

    # Start a move or reshape sequence on found edges
    if { $_moveedges != "" } {
	eval $layout notify data addtag $this.edge $_moveedges
	$layout publish moveclick $this.edge $x $y
    }
    foreach edge $_inputedges {
        $layout publish reshapeclick $edge $x $y -aspects end
    }
    foreach edge $_outputedges {
        $layout publish reshapeclick $edge $x $y -aspects start
    }
}

#########################################################################
#### contextmenu
#
# Initialize the context-sensitive pop-up menu. 
#
body ::tycho::VertexController::contextmenu {slateid type} {
    set name [itemname $slateid]

    if { $type == "vertex" } {
        # Show all terminal styles
        # set termstyle [$graph
        # contextmenu 
    }
    ;
}

########################################################################
#### delete
#
# Delete a vertex and icon by name
#
body ::tycho::VertexController::delete {vertex} {
    # Mark the histories
    $layout mark set vertex
    $graph mark set vertex

    # Disconnect input edges
    foreach edge [concat \
            [$graph edges * [list $vertex *]] \
            [$graph edges * $vertex]] {
        $edgecontroller disconnect $edge -to
    }
    # Disconnect output edges
    foreach edge [concat \
            [$graph edges [list $vertex *] *] \
            [$graph edges $vertex *]] {
        $edgecontroller disconnect $edge -from
    }
    # Delete the vertex and icon, making sure it's clean first
    $layout clean $vertex
    $layout publish delete $vertex
    $graph publish delete $vertex

    # Compact the histories
    $layout history compact vertex current
    $graph history compact vertex current

    # Notify views that the data has modified
    $layout notify event "modified"
    $graph notify event "modified"
}

########################################################################
#### drag
#
# Continue a move interaction on vertices. The vertices and
# edges are moved and reshaped as appropriate.
#
body ::tycho::VertexController::drag {tag x y} {
    # Move the vertices and fully-connected edges
    $layout publish movedrag $_movetag $x $y
    if { $_moveedges != "" } {
	$layout publish movedrag $this.edge $x $y
    }
    # Reshape the partially-connected edges.
    foreach edge $_inputedges {
	$layout publish reshapedrag $edge $x $y
    }
    foreach edge $_outputedges {
	$layout publish reshapedrag $edge $x $y
    }
}

########################################################################
#### editparameters
#
body ::tycho::VertexController::editparameters {tag} {
    # FIXME: The parameter editing window must include the whole
    # path name of the model
    set items [$slateview find withtag $tag]
    foreach i $items {
	# Filter out non-vertices
        # FIXME FIXME FIXME (access to slate)
        set id [$slateview slateid $i]
        set sl [$slateview component slate]
	if ![$sl hastag $id "vertex"] {
	    continue
	}
        # Get the name of the item
        # FIXME FIXME FIXME
        set foo [$graph attrget $i -icon]
        set bar [split $foo #]
        set baz [lindex $bar end]
        set itemname [split $baz "."]

        # Produce a name for the window
        set dialogname [$slateview component hull].
        regsub -all {\.} $baz "_" nm
        set dialogname [$slateview component hull].$nm

        if { [::info which -command $dialogname] != "" } {
            # Already exists
            wm deiconify $dialogname
            raise $dialogname
        } else {
            # Create the dialog box
            uplevel #0 [list ::tycho::ParameterDialog $dialogname \
                    -command "::tycho::post \[$dialogname get\]"]

            # Get the library.
            # FIXME: un-hardwire library name
            set lib [$slateview library access "stars"]
            $dialogname edit $lib $itemname $graph $i vertex
            wm deiconify $dialogname
        }
    }
}

########################################################################
#### initPopup
#
# Initialise popup menu for vertices.
#
body ::tycho::VertexController::initPopup {name} {
    $slateview popup add $name command editparameters \
	    -command "$this editparameters current" \
	    -label "Parameters..."

    # Add a cascade for debugging type stuff
    $slateview popup add $name separator sepdebug
    $slateview popup add $name cascade debug -label "Debug"
    $slateview popup add $name command describeItem debug \
	    -command "::tycho::post \[$slateview describe graph current\]" \
	    -label "Describe item"
    $slateview popup add $name command describeLayout debug \
	    -command "::tycho::post \[$slateview describe layout current\]" \
	    -label "Describe layout"
}

########################################################################
#### place
#
# Place an icon at the specified location.
#
body ::tycho::VertexController::place {iconlib iconname starname x y} {
    # Mark the history
    $layout mark set vertex

    # Place the icon into the layout model, giving it the
    # same name as the vertex in the graph.
    $iconlib instantiate $iconname $layout \
            -itemname $starname \
            -coords [list $x $y] \
            -tags vertex

    # Move its nw corner to the right position. Find the position
    # from my slate, and then move by publishing to the model
    # $_slate moveto $id $iconx $icony "nw" -shape rectangle
    set current [$layout forward aspect $starname "nw" -shape "rectangle"]
    set dx [expr $x - [lindex $current 0]]
    set dy [expr $y - [lindex $current 1]]
    $layout publish move $starname $dx $dy

    # Compact the history and replace the undo command
    $layout history compact vertex current
    $layout history undo current "delete $starname"
}

########################################################################
#### release
#
# Terminate a move interaction on vertices and add an undo and
# redo command to the history of the layout model.
#
body ::tycho::VertexController::release {tag} {
    # Mark the history
    $layout mark set vertex

    # Terminate move of vertices
    $layout publish moverelease $_movetag

    # Terminate move of fully-connected edges
    if { $_moveedges != "" } {
        $layout publish moverelease $this.edge
        $layout notify data dtag $this.edge
    }

    # Terminate the reshape of partially-connected edges
    foreach edge $_inputedges {
	$layout publish reshaperelease $edge
    }
    foreach edge $_outputedges {
	$layout publish reshaperelease $edge
    }
    # Now merge all those commands into a single one
    $layout history compact vertex current

    # Finally (and importantly!), add a null command to the graph
    # model to match this command
    $graph history append {} {}

    # Even more finally, figure out if the vertex actually moved.
    # and if it did, tell all views that the layout was modified
    if { $_initcoords != [$slateview coords [lindex $_vertices 0]] } {
	$layout notify event "modified"
    }
}


###################################################################
###################################################################
####                      protected methods                    ####

########################################################################
#### _cleanup
#
body ::tycho::VertexController::_cleanup {} {
    ;
}
