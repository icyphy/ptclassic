##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### PtEdit
#
# _PtEdit_ is an editor for the _GraphLayout_ model. It edits
# directed graphs.
#
class ::tycho::PtEdit {
    inherit ::tycho::GraphEditor

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Create a new actor icon
    method newActor {libname starname}

    # Open my control panel
    method openControlPanel {graph}

    #################################################################
    ####                  protected methods                      ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    #################################################################
    ####                 protected variables                     ####
    
    #################################################################
    ####                   private methods                       ####

    # Initialize the menubar
    private method _initializeMenubar {menubar}

    #################################################################
    ####                 private variables                       ####

    # The domain library
    private variable _domainLibrary ""

    # The icon library root
    private variable _iconLibrary ""
}

########################################################################
#### constructor
#
body ::tycho::PtEdit::constructor {args} {
    # Connect to Ptolemy II and initialize
    set _domainLibrary [::tycho::DomainLibrary::getInstance]
    set _iconLibrary [::tycho::PtIconLibrary::getRoot]
    
    # Create the run controls within the same window
    itk_component add controlFrame {
	frame $itk_component(top).controlFrame -relief raised
    } {
	keep -background -cursor
    }
    # Place it in the bottom-right corner of the slate
    ::place $itk_component(controlFrame) -anchor se \
	    -relx 1.0 -rely 1.0

    # Create a "run window" and put it in
    itk_component add runWindow {
	::tycho::PtRunWindow $itk_component(controlFrame).runWindow
    } {
	keep -background -cursor -font
    }
    pack $itk_component(runWindow) -side bottom

    # Initialize options
    eval itk_initialize $args

    # Set the "mode" of the graph model so it will
    # be loaded correctly later
    # FIXME: Is this the right place for this?
    $_graph configure -modelmode "ptII"

    ###### FIXME hack hack hack
    set domainList [$_domainLibrary domains]
    # puts "Domains are: $domainList"

    # Add to menu ???


}

########################################################################
#### newActor
#
body ::tycho::PtEdit::newActor {libname starname} {
    # puts "Loading $starname from $libname"

    set icon [$libname getIcon $starname]
    # puts [$icon toString]
}

#####################################################################
#### openControlPanel
#
# Open the control panel for running the simulation.
#
body ::tycho::PtEdit::openControlPanel {graph} {
    set tl [[displayer] component hull].runwindow

    if { [infoWhichCommand $tl] != "" } {
	raise $tl
    } else {
	# Create a simulation run control panel
	set rw [::tycho::view CTRunWindow -name $tl -debug 1]

	# Create a simulation
	set file [filename]
	set name [file tail [file root $file]]

	# FIXME: need to be able to bring up the runwindow
	# immediately
	set sim [$rw simulation create]
	$rw simulation name $name
	$rw simulation script $file

        # Give the graph to the simulation so it can initialize
        # the simulation run-time
        $sim perform $_graph
    }
}

###################################################################
###################################################################
####                      protected methods                    ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# The root (view) class sets up the menubar methods in its initialize
# via the chain command, which should always be the first command in
# this method.
# 
# This method is called by its displayer when attachView is called (usually
# in ::tycho::view
#
body ::tycho::PtEdit::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::PtEdit::_initializeMenubar $menubar
    }

    # OK, here's some nasty stuff. Create a control button panel
    # and squidge it into the status bar
#    ::tycho::ButtonPanel [$statusbar component status].buttonPanel
#    puts [$statusbar component status].buttonPanel
#    update
#    pack [$statusbar component status].buttonPanel -side right
#    puts Packed!
#    update

    # Not packed yet!!?
    # -after [$statusbar component message]
}

    #####################################################################
    #####################################################################
    ####                       private methods                       ####

#####################################################################
#### _initializeMenubar
# Adds entries to the menu bar specific to this class.
#
body ::tycho::PtEdit::_initializeMenubar {menubar} {
    # FIXME FIXME
    # Load the library. Should the library info be in the model?
    #library load [file join edit cts stars.tim]
    #library addtomenu stars stars \
    #        -command "$this newstar stars" \
    #        -customizecommand "$this _initmenu stars" \
    #        -types {star}

    $menubar add separator starbar stars
    $_iconLibrary addToMenu $menubar stars "$this newActor"

    $menubar add separator develsepctedit devel

    $menubar command run devel \
	    -label "Run..." \
            -command "$this openControlPanel [model access graph]"

}

