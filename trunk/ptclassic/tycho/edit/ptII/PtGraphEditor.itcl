##########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################
##########################################################################
#### PtGraphEditor
#
# _PtGraphEditor_ is an editor for the _GraphLayout_ model. It edits
# directed graphs.
#
class ::tycho::PtGraphEditor {
    inherit ::tycho::SlateView

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    #################################################################
    ####                     public methods                      ####

    # Change to a new graph model
    method _graph {graph}

    # Change to a new layout model
    method _layout {layout}

    # Initialize a new star menu
    method _initmenu {args}

    # Create an icon palette
    method _iconpalette {library context}

    # Clear all data
    method clear {}

    # Delete the selection
    method delete {}

     # Create a new actor icon
    method newActor {libname starname}

    # Handle data change notification from the graph model
    method notifygraph {method args}

    # Handle event notification from the graph model
    method notifygraphevent {event args}

    # Place an icon
    method place {}

    # Redo the most recent command
    method redo {}
    
    # Handle changes to the selection
    method select {mode args}
    
    # Undo the most recent command
    method undo {}

    #################################################################
    ####                  protected methods                      ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    # Configure the global popup menu
    protected method _configurePopup {}

    # Initialize the global popup menu
    protected method _initializePopup {}

    # Insert the specified data
    protected method insertData {data}

    # Return the data to be saved
    protected method saveText {}

    #################################################################
    ####                 protected variables                     ####
    
    # The interactor to move things around
    protected variable follower

    # The controller for edges
    protected variable edgecontroller

    # The interactor to connect edges
    protected variable dropper

    # The controller for vertices
    protected variable vertexcontroller

    # The item selector
    protected variable selector

    # The interactor to split edges
    protected variable splitter

    # The semantic model
    protected variable _graph ""

    # Storage for temporary variables
    protected variable _scratch

    # The currently grappled edge
    protected variable _grapplededge ""

    #################################################################
    ####                   private methods                       ####

    # Initialize the menubar
    private method _initializeMenubar {menubar}

    #################################################################
    ####                 private variables                       ####

    # The icon palettes
    private common _palettes

    # The domain library
    private variable _domainLibrary ""

    # The icon library root
    private variable _iconLibrary ""

    # The Ptolemy II simulation proxy
    private variable _simulation ""

    #################################################################
    ####                  FIXME FIXME FIXME                      ####
    
    # Position used to place new icons
    private variable iconx 50
    private variable icony 50

    # For demos only....
    method clone {} {
	set opts {}
	foreach {opt _ _ _ val} [eval concat [configure]] {
	    lappend opts $opt $val
	}
	set clone [uplevel #0 ::tycho::view [info class] $opts]
	
	# Give it the graph and layout models
	$clone model delete "layout"
	$clone model add "layout" $_layout
	$clone model delete "graph"
	$clone model add "graph" $_graph

	# Make it draw the data
	# $clone layout load
    }
}

########################################################################
#### constructor
#
body ::tycho::PtGraphEditor::constructor {args} {

    # Create the models. The graph model has special notify{} methods
    model notify "graph" "$this _graph"
    model add "graph" \
	    [uplevel #0 ::tycho::PortedGraph [::tycho::autoName graph]]
    $_graph subscribe data $this "$this notifygraph"
    $_graph subscribe event $this "$this notifygraphevent"

    # Evaluate options
    eval itk_initialize $args

    # Key bindings
    bind $_slate <Meta-Key-z> "$this undo"
    bind $_slate <Meta-Key-r> "$this redo"
    bind $_slate <Key-Delete> "$this delete"

    # Make a more pronounced highlight
    $_slate configure -highlightcolor azure2 -highlightwidth 4

    # Create the edge controller object
    set edgecontroller [uplevel #0 ::tycho::PtEdgeController \
    		[::tycho::autoName controller] \
            -slate $_slate \
            -slateview $this \
            -graph $_graph \
            -layout $_layout]

    # Create the vertex controller object
    set vertexcontroller [uplevel #0 ::tycho::PtVertexController \
            [::tycho::autoName controller] \
            -slate $_slate \
            -slateview $this \
            -graph $_graph \
            -layout $_layout]

    # Cross-link the controllers
    $edgecontroller configure -vertexcontroller $vertexcontroller
    $vertexcontroller configure -edgecontroller $edgecontroller

    # Get handles to interactors
    set follower [$vertexcontroller _follower]
    set dropper  [$edgecontroller _dropper]
    set splitter [$edgecontroller _splitter]

    # Enable vertex selection with button 1; shift-click toggles
    set selector [$_slate interactor Selector]
    $selector bind vertex -button 1
    $selector bind vertex -button 1 \
            -modifiers shift -toggle 1

    # Enable edge selection with button 1; shift-click toggles
    $selector bind edge -button 1
    $selector bind edge -button 1 \
            -modifiers shift -toggle 1

    # Enable edge selection with control-button 1; shift-click toggles
    $selector bind edge -button 1 -modifiers control
    $selector bind edge -button 1 \
            -modifiers {shift control} -toggle 1

    # Enable junction selection with button 1; shift-click toggles
    $selector bind junction -button 1
    $selector bind junction -button 1 \
            -modifiers shift -toggle 1

    # Enable junction selection with control-button 1; shift-click toggles
    $selector bind junction -button 1 -modifiers control
    $selector bind junction -button 1 \
            -modifiers {shift control} -toggle 1

    # Enable grapple selection with button 2; shift-click toggles
    $selector bind grapple -button 2
    $selector bind grapple -button 2 \
            -modifiers shift -toggle 1

    # Delegate vertex movement for selected vertexes
    $selector delegate $follower vertex -button 1
    $selector delegate $follower vertex -button 1 \
            -modifiers shift

    # Delegate junction movement for selected vertexes
    $selector delegate $follower junction -button 1
    $selector delegate $follower junction -button 1 \
            -modifiers shift

    # The selector sends selection events here
    $selector configure \
            -clearprefix "$this select clear" \
            -deselectprefix "$this select remove" \
            -selectprefix "$this select add"

    # Delegate to the edge splitter if control-clicked on an edge
    # that is the only selected item
    $selector delegate $splitter edge -button 1 -mode {0 1} \
            -modifiers control
    $selector delegate $splitter edge -button 1 -mode {0 1} \
            -modifiers {shift control}
    
    # Delegate to the edge connector if control-clicked on a junction
    $selector delegate $dropper junction -button 1 -mode {0 1} \
            -modifiers control
    $selector delegate $dropper junction -button 1 -mode {0 1} \
            -modifiers {shift control}
    
    # Is this needed?
    # $_slate configure -exportselection 0
    
    # Experiment: move disconnected edges
    $selector delegate $follower disconnected -button 1
    $selector delegate $follower disconnected -button 1 \
            -modifiers shift

    # Set the "mode" of the graph model so it will
    # be loaded correctly later
    # Create and initialize the popup menus for the vertices and
    # edges
    popup new "vertex" 
    popup bind "vertex" "vertex" "$vertexcontroller configurePopup vertex"
    $vertexcontroller initPopup "vertex"

    popup new "edge"
    popup bind "edge" "edge" "$edgecontroller configurePopup edge"
    $edgecontroller initPopup "edge"


    ######## Ptolemy II stuff from here on
    
    # Connect to Ptolemy II and initialize
    set _domainLibrary [::tycho::PtDomainLibrary::getInstance]
    set _iconLibrary [::tycho::PtIconLibrary::getRoot]
    set _simulation [uplevel #0 ::tycho::PtSimulation #auto \
	    -graph $_graph \
	    -domainLibrary $_domainLibrary]
    
    # More setting up......
    $vertexcontroller configure \
	    -simulation $_simulation

    $edgecontroller configure \
	    -simulation $_simulation

    # Create the run controls within the same window
    itk_component add controlFrame {
	frame $itk_component(top).controlFrame -relief raised
    } {
	keep -background -cursor
    }
    # Place it in the bottom-right corner of the slate
    ::place $itk_component(controlFrame) -anchor se \
	    -relx 1.0 -rely 1.0

    # Create a "run window" and put it in
    itk_component add runWindow {
	::tycho::PtRunWindow $itk_component(controlFrame).runWindow \
		-simulation $_simulation \
		-domainLibrary $_domainLibrary
    } {
	keep -background -cursor -font
    }
    pack $itk_component(runWindow) -side bottom

    # Set the "mode" of the graph model so it will
    # be loaded correctly later
    # FIXME: Is this the right place for this?
    $_graph configure -modelmode "ptII"

    ###### FIXME hack hack hack
    set domainList [$_domainLibrary domains]
    # puts "Domains are: $domainList"

    # Reload because of weird initialization problems
    reload
}

########################################################################
#### _graph
#
# Change to a new graph model.
#
body ::tycho::PtGraphEditor::_graph {graph} {
    # Lose interest in the old one first...
    if { $_graph != "" } {
        $_graph unsubscribe data $this
        $_graph unsubscribe event $this
        # FIXME: decrement reference count?
    }
    set _graph $graph

    # Subscribe to the layout
    if { $graph != "" } {
        $_graph subscribe data $this "$this notifygraph"
        $_graph subscribe event $this "$this notifygraphevent"
    }

    # Tell the controllers
    if [info exists edgecontroller] {
	$edgecontroller configure -graph $graph
    }
    if [info exists vertexcontroller] {
	$vertexcontroller configure -graph $graph
    }
}

########################################################################
#### _layout
#
# Change to a new layout model.
#
body ::tycho::PtGraphEditor::_layout {layout} {
    chain $layout

    # Tell the controllers
    if [info exists edgecontroller] {
	$edgecontroller configure -layout $layout
    }
    if [info exists vertexcontroller] {
	$vertexcontroller configure -layout $layout
    }
}

########################################################################
#### _initmenu
#
# Initialize a new menu.
#
body ::tycho::PtGraphEditor::_initmenu {libname menuname context} {
    set mb [menubar]
    set lib [library access $libname]
    
    # Add a palette entry only if there are items at this level
    if { [$lib match star $context] != "" } {
        $mb command $menuname.palette $menuname \
                -label "Palette..." \
                -command "$this _iconpalette $libname $context"
        $mb separator $menuname.separator $menuname
    }
}

########################################################################
#### _iconpalette
#
# Create a palette of icons.
#
body ::tycho::PtGraphEditor::_iconpalette {libname context} {
    set lib [library access $libname]
    set palettename [concat $libname $context]

    # Raise the window if it already exists
    if [::info exists _palettes($palettename)] {
        if { [infoWhichCommand $_palettes($palettename)] != "" } {
            raise [winfo toplevel $_palettes($palettename)]
            return
        } else {
            unset _palettes($palettename)
        }
    }
    # Otherwise create a new one
    set nm [::tycho::view IconPalette]
    set _palettes($palettename) $nm
    set icons {}
    foreach star [$lib match star $context] {
        set star [concat $context $star]
        # Make sure the star has an icon
        # FIXME: use default icon if none specified
        if [$lib exists $star -icon] {
            lappend icons [$lib attrget $star -icon]
        }
    }
    # Now get the palette to paint itself
    eval $nm loadIcons $icons
}

########################################################################
#### delete
#
# Process a delete event.
#
body ::tycho::PtGraphEditor::delete {} {
    # Mark the history
    $_graph mark set temp
    $_layout mark set temp

    # Split the selection into vertices and edges
    set selection [$_slate find withtag "sel"]
    set edges [::tycho::lintersection $selection [$_slate find withtag edge]]
    set vertices [::tycho::lsubtract $selection $edges]

    # Delete edges first: it makes less work when deleting vertices
    foreach edge $edges {
        $edgecontroller delete [itemname $edge]
    }
    foreach vertex $vertices {
        $vertexcontroller delete [itemname $vertex]
    }
    # Compact the history
    $_graph history compact temp current
    $_layout history compact temp current
}

########################################################################
#### newActor
#
body ::tycho::PtGraphEditor::newActor {libname starname} {
    $vertexcontroller add $libname $starname
}

########################################################################
#### notifygraph
#
# Handle data change notification from the graph model.
#
body ::tycho::PtGraphEditor::notifygraph {method args} {
    # FIXME FIXME FIXME
    # puts "$this notifygraph $method"
    # eval _$method $args
}

########################################################################
#### notifygraphevent
#
# Handle event notification from the layout model. This processes
# the event in a switch. Subclasses may choose to override and
# chain any unrecognized events.
#
body ::tycho::PtGraphEditor::notifygraphevent {event args} {
    switch -exact $event {
	"clear" {
	    # Clear data from the graph
	    $_graph clear
	}
	"modified" {
	    # Mark the data unmodified
	    # puts !Modified
	    markModified
	}
	"saved" {
	    # We only want to mark unmodified if the layout is saved,
	    # so ignore this event
	}
	default {
	    puts "Unrecognized event \"$event\" from \
		    [$_graph cget -modelname]"
	}
    }
}

########################################################################
#### place
#
# Find a good place to put an icon in the layout model, and return
# the coordinates. Currently, this just guesses
# at a good location to put the icon. Later on, it will do some
# kind of grab and place or drag-and-drop.
#
body ::tycho::PtGraphEditor::place {} {
    # Figure out where to put the icon. First check if topleft is free
    if { [$_slate find overlapping 10 10 10 10] == "" } {
        set iconx 10
        set icony 10
    }
    set result [list $iconx $icony]

    # Advance place position
    incr iconx 10
    incr icony 10
    
    return $result
}

########################################################################
#### redo
#
# Redo the most recent command
#
body ::tycho::PtGraphEditor::redo {} {
    eval $_layout redo
    eval $_graph redo
}

########################################################################
#### select
#
# Handle changes to the selection.
#
body ::tycho::PtGraphEditor::select {mode args} {
    # puts "PtGraphEditor::select $mode $args ([$_slate find withtag sel])"
    switch -exact $mode {
        "clear" {
            $_slate select clear
        }
        "add" {
            eval $_slate select add $args
        }
        "remove" {
            eval $_slate select remove $args
        }
    }
    # See if there is a single edge selected
    set sel [$_slate find withtag sel]
    if { [llength $sel] == 1 } {
        set id [lindex $sel 0]
        if [$_slate hastag $id edge] {
            # There is: grapple it
            # FIXME: publish to model
            set _grapplededge $id
            $_slate grapple $id -interactor $dropper -features {start end}
        }
    } elseif { $_grapplededge != "" } {
        $_slate ungrapple $_grapplededge
        set _grapplededge ""
    }
}

########################################################################
#### undo
#
# Undo the most recent command
#
body ::tycho::PtGraphEditor::undo {} {
    eval $_layout undo
    eval $_graph undo
}

###################################################################
###################################################################
####                      protected methods                    ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# The root (view) class sets up the menubar methods in its initialize
# via the chain command, which should always be the first command in
# this method.
# 
# This method is called by its displayer when attachView is called (usually
# in ::tycho::view
#
body ::tycho::PtGraphEditor::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::PtGraphEditor::_initializeMenubar $menubar
    }
}

#####################################################################
#### _initializePopup
#
# Initialize the global context-sensitive menu.
#
body ::tycho::PtGraphEditor::_initializePopup {} {
    popup add "global" command undo -label Undo -command "$this undo"
    popup add "global" command redo -label Redo -command "$this redo"
    
    chain
}

#####################################################################
#### _configurePopup
#
# Configure the global context-sensitive menu.
#
body ::tycho::PtGraphEditor::_configurePopup {} {
    # FIXME: enable/disable undo/redo
}

#####################################################################
#### clear
# Clear the data.
#
body ::tycho::PtGraphEditor::clear {} {
    if { $_graph != "" } {
        $_graph notify event clear
    }
    layout clear
    puts "Simulation is \"$_simulation\""
    if { $_simulation != "" } {
        $_simulation clear
    }
}

#####################################################################
#### insertData
# Insert the specified data.
#
body ::tycho::PtGraphEditor::insertData {data} {
    puts insertData
    
    if { $_simulation == "" } {
	return
    }

    # Delete all data
    clear

    # Load the data
    set schematic [::tycho::PtSchematic #auto]
    puts "$schematic"
    $schematic parse $data
    $schematic construct $_simulation $_graph $_layout "MyName" \
	    [$itk_component(runWindow) component domain] \
	    $vertexcontroller \
	    $edgecontroller
}

#####################################################################
#### saveText
# Return the text to save. This is a description of the Ptolemy
# II kernel in XML.
#
body ::tycho::PtGraphEditor::saveText {} {
    set schematic [::tycho::PtSchematic #auto]
    $schematic load $_simulation $_graph $_layout "WhoAmI?"
    $schematic getText
}

    #####################################################################
    #####################################################################
    ####                       private methods                       ####

#####################################################################
#### _initializeMenubar
# Adds entries to the menu bar specific to this class.
#
body ::tycho::PtGraphEditor::_initializeMenubar {menubar} {
    # Add an Edit menu before the Window menu
    $menubar addMenu edit -label Edit -before window -underline 0
    
    $menubar command undo edit \
	    -label "Undo" -accelerator "M-z" \
	    -underline 0 -command "$this undo"
    
    $menubar command redo edit \
	    -label "Redo" -accelerator "M-r" \
	    -underline 0 -command "$this redo"
    
    $menubar separator editsep1 edit
    
    $menubar command cut edit \
	    -label "Cut" -underline 0 -accelerator "C-w" \
	    -command "$this cut"
    
    $menubar command copy edit \
	    -label "Copy" -underline 1 -accelerator "M-w" \
	    -command "$this copy"
    
    $menubar command paste edit \
	    -label "Paste" -underline 0 -accelerator "C-y" \
	    -command "$this paste"
    
    $menubar separator editsep2 edit
    
    $menubar command selectall edit \
	    -label "Select All" -underline 0 \
	    -accelerator "C-/" -command "$this selectRange 1.0 end"
    
    $menubar command unselect edit \
	    -label "Unselect" -underline 0 \
	    -accelerator "C-\\" -command "$this unselectRange 1.0 end"

    # Build a menu for stars
    $menubar addMenu stars -label Stars -underline 0
    $menubar menuconfigure stars -tearoff 1

    $menubar command editparameters stars \
            -label "Edit Parameters..." \
            -underline 5 \
            -command "eval $this editparameters sel"

    $menubar separator starsep1 stars

    # Add a Devel menu for development use
    $menubar addMenu devel -label Devel -underline 0

    $menubar add separator develsep1 devel

    $menubar command showlayout devel \
	    -label "Show layout" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access layout describe\]"

    $menubar command showgraph devel \
	    -label "Show graph" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access graph describe\]"

    $menubar command showkernel devel \
	    -label "Show Ptolemy kernel topology" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[\[$_simulation getToplevelActor\] description\]"

    $menubar add separator develsep2 devel

    $menubar command showlayouthistory devel \
	    -label "Show layout history" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access layout history get\]; \
        \$_nm_ markUnmodified"

    $menubar command showgraphhistory devel \
	    -label "Show graph history" \
            -command "set _nm_ \[::tycho::view EditTcl\]; \
        \$_nm_ insertData \[$this model access graph history get\]; \
        \$_nm_ markUnmodified"

    $menubar add separator develsep3 devel

    $menubar command clone devel \
	    -label "Clone..." \
            -command "$this clone"


    ##### Ptolemy II stuff from here on

    $menubar add separator starbar stars
    $_iconLibrary addToMenu $menubar stars "$this newActor"

    $menubar add separator develsepctedit devel

    $menubar command run devel \
	    -label "Run..." \
            -command "$this openControlPanel [model access graph]"

}

