# The root of the Ptolemy II icon library.
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### PtIconLibrary
#
class ::tycho::PtIconLibrary {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####
    
    # The debug flag
    public variable debug 1

    ###################################################################
    ####                         public methods                    ####

    # Add the contents of this library to the given menubar and menu entry
    method addToMenu {menubar menuname command}

    # Get a single icon
    method getIcon {iconname}

    # Get the name of the library
    method getName {} {
	return $_libraryName
    }

    # Return a list of icons in this library
    method icons {}

    # Instantiate an icon into a layout model
    method instantiate {item layout args}

    # Parse it
    method parse {url}

    # Parse the library tree starting at this library
    method parseLibraryTree {}

    # Return a list of sub-libraries
    method sublibraries {}

    # Get the library with the given name
    proc getLibrary {name} {
	return $_libraries($name)
    }

    # Return the root of the icon library tree
    proc getRoot {}


    ###################################################################
    ####                      public procs                         ####

    ###################################################################
    ####                   protected methods                       ####

    # Print a debug message
    protected method debug {msg} {
	if $debug {
	    puts "$this: $msg"
	}
    }

    ###################################################################
    ####                   private variables                       ####

    # The Java icon library (Java object)
    private variable _iconLibrary ""

    method getJavaObject {} {
        return $_iconLibrary
    }

    # The root of the whole lot of liconlibraries (Itcl object)
    private common _root ""

    # The array of sub-libraries (Itcl objects)
    private variable _sublibraries

    # The name of this library
    private variable _libraryName

    # The list of all libraries
    private common _libraries
}


#######################################################################
#### constructor
#
body ::tycho::PtIconLibrary::constructor {args} {
    # Initialize args
    eval configure $args
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

body ::tycho::PtIconLibrary::addToMenu {menubar menuname command} {
    # Add cascade menus
    foreach lib [sublibraries] {
        set entry $menuname.$lib
	set label $_sublibraries($lib)
	$menubar add cascade $entry $menuname -label $lib
	$_sublibraries($lib) addToMenu $menubar $entry $command
    }
    # Add icons
    foreach icon [icons] {
	set entry $menuname.$icon
	# FIXME Get label
	$menubar command $entry $menuname \
		-label $icon \
		-command [concat $command $_libraryName $icon]
    }
}

########################################################################
#### getRoot
#
# Get the root icon library.
#
body ::tycho::PtIconLibrary::getRoot {} {
    if { $_root == "" } {
	# Figure out where the root library is
	global env tcl_platform
	if { $tcl_platform(platform) == "windows" } {
	    set iconLibURL "file:/[file join \
		    $env(PTII) ptolemy schematic lib pticons.ptml]"
	} else {
	    set iconLibURL "file:[file join \
		    $env(PTII) ptolemy schematic lib pticons.ptml]"
	}

	# Parse it
        set _root [uplevel #0 "::tycho::PtIconLibrary #auto"]
	$_root parse $iconLibURL

	# For now, at least, parse all sublibraries too
	$_root parseLibraryTree
    }
    return $_root
}

########################################################################
#### getIcon
#
# Get the given icon
#
body ::tycho::PtIconLibrary::getIcon {iconname} {
    return [$_iconLibrary getIcon $iconname]
}

########################################################################
#### icons
#
# Get the icons of this library
#
body ::tycho::PtIconLibrary::icons {} {
    set iterator [$_iconLibrary icons]
    set result ""
    while { [$iterator hasMoreElements] } {
	lappend result [$iterator nextElement]
    }
    return $result
}

########################################################################
#### instantiate
#
# Instantiate an icon into a layout mode
#
body ::tycho::PtIconLibrary::instantiate {icon uniqueName layout args} {
    # puts "instantiate $icon $layout $args"

    # Get the graphics from XML
    set graphics ""
    set icon [getIcon $icon]
    set i [$icon childElements]
    while { [$i hasMoreElements] } {
	set elt [$i nextElement]
	if { [$elt getElementType] == "graphic" } {
	    if { [$elt getAttribute "format"] == "tcl" } {
                # puts "Tcl graphics element: [$elt toString]"
		set options {}
		lappend options -graphics \
			[[$elt getChildElement "tclscript"] getPCData]

		if { [$elt hasAttribute "slatetype"] } {
		    lappend options -slatetype [$elt getAttribute "slatetype"]
		} else {
		    lappend options -slatetype IconFrame
		}
		if { [$elt hasAttribute "color"] } {
		    lappend options -color [$elt getAttribute "color"]
		}
		if { [$elt hasAttribute "fill"] } {
		    lappend options -fill [$elt getAttribute "fill"]
		}
		if { [$elt hasAttribute "hsize"] } {
		    lappend options -hsize [$elt getAttribute "hsize"]
		}
		if { [$elt hasAttribute "vsize"] } {
		    lappend options -vsize [$elt getAttribute "vsize"]
		}
		# puts "Got graphics \"$graphics\""
		break
	    }
	}
    }
    
    # Add the icon item to the layout model
    eval [list $layout publish add item $uniqueName] \
	    $options \
            $args

    # Add the ports
    set i [$icon childElements "port"]
    while { [$i hasMoreElements] } {
	set p [$i nextElement]
	set j [$p childElements]
	while { [$j hasMoreElements] } {
	    set elt [$j nextElement]
	    if { [$elt getElementType] == "graphic" } {
		if { [$elt getAttribute "format"] == "tcl" } {
		    # puts "Tcl graphics element: [$elt toString]"
		    set graphics [[$elt getChildElement "tclscript"] getPCData]
		    # puts "Got port graphics \"$graphics\""
		    break
		}
	    }
	}
	array set opts {
	    -slatetype Terminal
            -coords {0 0}
	}
	if { $graphics != 0 } {
	    array set opts $graphics
	}
	if { [$p getAttribute "input"] == "true" } {
	    set opts(-tags) input
	} else {
	    set opts(-tags) output
	}	    
	eval [list $layout publish add item \
		[concat $uniqueName [$p getAttribute name]]] \
		[array get opts]
    }
 
    set OLDSTUFF {
        # Add the icon item
        eval [list $layout publish add item $itemname] \
                [array get attrs] \
                [array get opts]
        
        # Check and get termstyle and terminals
        if { $termstyle == "" } {
            # Try for nested terminals
            set terminals [match terminal $icon]
            if { $terminals != "" } {
                set termstyle $icon
            } else {
                # Try for a default termstyle
                set termstyle [lindex $termstyles 0]
                if { $termstyle != "" } {
                    set terminals [match terminal $termstyle]
                }
            }
        } else {
            if { [lsearch -exact $termstyles $termstyle] == -1 } {
                error "Unknown termstyle \"$termstyle\": must be one\
                        of $termstyles"
            }
            set terminals [match terminal $termstyle]
        }
        
        # Create the terminals. If there were no termstyles or terminals
        # found for the icon, then terminals will be empty and none
        # will be drawn 
        foreach term $terminals {
            eval [list $layout publish add item [concat $itemname $term]] \
                    [attrget [concat $termstyle $term]]
        }
        
        # Return the item name
        return $itemname
    }
}

########################################################################
#### sublibraries
#
# Get the sub-libraries of this library
#
body ::tycho::PtIconLibrary::sublibraries {} {
    set iterator [$_iconLibrary subLibraries] ;# note bizarre spelling
    set result ""
    while { [$iterator hasMoreElements] } {
	lappend result [$iterator nextElement]
    }
    return $result
}

########################################################################
#### parse
#
# Parse it.
#
body ::tycho::PtIconLibrary::parse {url} {
    # Parse it
    debug "Parsing $url"
    set ptmlParser [java::new ptolemy.schematic.PTMLParser]
    set _iconLibrary [uplevel #0 "$ptmlParser parse $url"]

    global tcl_platform
    if $tcl_platform(javaCastNeeded) {
        set _iconLibrary [java::cast ptolemy.schematic.IconLibrary \
                $_iconLibrary]
    }

    set _libraryName [$_iconLibrary getAttribute "name"]
    puts "Parsed library \"$_libraryName\""

    set _libraries($_libraryName) $this

    # FIXME: Give the Java PtIconLibrary knowledge of the root?
    # java::call ptolemy.schematic.PtIconLibrary setInstance $_iconLibrary
}

########################################################################
#### parseLibraryTree
#
# Parse the library tree, from this one on down
#
body ::tycho::PtIconLibrary::parseLibraryTree {} {
    global env tcl_platform

    foreach lib [sublibraries] {
	# This will do for now...
	set myurl [$_iconLibrary getXMLFileLocation]
	set suburl [[$_iconLibrary getSubLibrary $lib] \
		getAttribute "url"]

	# puts "myurl = $myurl"
	# puts "suburl = $suburl"

	regsub {^file:/+} $myurl {} file
	regsub {/[^/]*$} $file {} file
	# puts "file = $file"
	set iconLibURL "file:/$file/$suburl"
	
	# set iconLibURL "[file dirname $myurl]/$suburl"
	#set iconLibURL "[eval file join \
	#	[file split [file dirname $myurl]] \
	#	[file split $suburl]]"

	# Parse it
        set sublib [uplevel #0 "::tycho::PtIconLibrary #auto"]
	# puts "parsing $iconLibURL"
	$sublib parse $iconLibURL

	# Remember it
	set _sublibraries($lib) $sublib

	# Parse all sublibraries too
	$sublib parseLibraryTree
    }
}
