# A dialog box for editing parameters in graph editors.
# This will change, do not rely on it.
#
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### PtParameterDialog
#
# A widget for editing parameters of an Entity in a Ptolemy II
# system.
#
class ::tycho::PtParameterDialog {
    inherit ::tycho::Query

    constructor {args} {}
    destructor {}


    ###################################################################
    ####                            options                        ####

    # The command to execute to update parameters
    itk_option define -command command Command {}

    ###################################################################
    ####                         public methods                    ####

    # Edit a NamedObj
    method edit {namedObj}

    # Refresh the parameter display
    method refresh {}

    # Update specified or changed parameters
    method update {}

    ###################################################################
    ####                         private procs                     ####

    # Compare two lists by element 1
    # FIXME: Will not be needed with Tcl8.0
    private proc cmp {a b} {
	string compare [lindex $a 1] [lindex $b 1]
    }

    ###################################################################
    ####                       private variables                   ####

    # List of editors opened by this editor
    private variable editors {}

    # The namedObj being edited
    private variable _namedObj

    private variable _type
    private variable _object
    private variable _val
}


#######################################################################
#### constructor
#
body ::tycho::PtParameterDialog::constructor {args} {
    addButton apply -text "Apply <M-a>" -command "$this update"
    configure -okcommand "$this update"

    # Meta-a performs update
    bind $itk_component(hull) <Meta-a> \
	    "$this update; break"

    # Initialise options
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
# In theory, we would un-listen to the parameter here.
#
body ::tycho::PtParameterDialog::destructor {} {
    ;# Do nothing
}

#######################################################################
#### edit
#
# Edit the given NamedObj
#
body ::tycho::PtParameterDialog::edit {namedObj} {
    puts "PtParameterDialog::edit $namedObj"

    # Set the current model
    set _namedObj $namedObj

    # Configure the title
    configure -title "[$namedObj getFullName]"
    configure -labelcolor [::tycho::color blue black]

    # Build list of parameters
    set i [$namedObj getAttributes]
    while { [$i hasMoreElements] } {
	set attr [$i nextElement]
	set label [$attr getName]
	set type [string tolower [[$attr getClass] getName]]
	set _type($label) $type
	set _object($label) $attr
	set _val($label) [[$attr getToken] stringValue]
    }

    # Build queries
    foreach label [lsort [array names _val]] {
	line $label $label $_val($label)
    }
}

#######################################################################
#### refresh
#
# Update the displayed values
#
body ::tycho::PtParameterDialog::refresh {} {
    # Clear all
    clear

    if { $instanceModel == "" } {
        # Get values from the library model
        foreach tag [names] {
            insert $tag [$libraryModel get parameter $tag]
        }
    } else {
        # Get values from the attributes of an instance
        array set vals [$instanceModel access attrs $instanceType $instanceItem]
        foreach tag [names] {
            insert $tag $vals(-$tag)
        }
    }
}

#######################################################################
#### update
#
# With no args, update any changed parameters. With args, always
# update specified parameters.
#
body ::tycho::PtParameterDialog::update {} {
    set updated {}
    # Collect the changed parameters and change the model
    foreach {tag val} [$this get] {
        set attr $_object($tag)
        set token [$attr getToken]
        puts "$tag -> $val"
	if { $val != [$token stringValue] } {
            $attr setExpression $val
            $attr parameterChanged [java::null]
            lappend updated $tag $val
	}
    }
    # If the update command is supplied, call it
    if { $itk_option(-command) != "" && $updated != "" } {
	uplevel #0 $itk_option(-command)
    }
}
