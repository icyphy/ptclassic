# A class that represents a Ptolemy schematic
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### PtSchematic
#
# A <i>PtSchematic</i> is a facade that deals with Ptolemy II XML
# schematics.
#
class ::tycho::PtSchematic {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    ###################################################################
    ####                         public methods                    ####

    # Get the text of the schematic
    method getText {}

    # Load the schematic from the given simulation
    method load {simulation graph layout}

    ###################################################################
    ####                   protected methods                       ####

    # Print a debug message
    protected method debug {msg} {
	if $debug {
	    puts "$this: $msg"
	}
    }

    ###################################################################
    ####                     private variables                     ####

    # The java schematic object
    private variable _schematic
}

#######################################################################
#### constructor
#
body ::tycho::PtSchematic::constructor {args} {
    # Initialize args
    eval configure $args
    
    set _schematic [java::new ptolemy.schematic.Schematic]
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### getText
#
# Get the schematic text
#
body ::tycho::PtSchematic::getText {} {
    # Screw around to deal with Tycho's bogus i/o mechanism
    set tmpFile [::tycho::tmpFileName schematic]
    set outputStream [java::new {java.io.FileOutputStream String} $tmpFile]

    set printer [java::new ptolemy.schematic.PTMLPrinter \
	    "garbage" $_schematic]
    $printer print $outputStream
    $outputStream flush
    $outputStream close

    set fd [open $tmpFile]
    set text [read $fd]
    close $fd

    return $text
    # $_schematic toString
}

########################################################################
#### load
#
# Load the schematic from a simulation, a graph, and a layout model
#
body ::tycho::PtSchematic::load {simulation graph layout} {
    puts "PtSimulation::load $simulation $graph $layout"

    # The domain
    set domain [$simulation getDomain]
    set p [java::new ptolemy.schematic.SchematicParameter \
	    domain string $domain]
    $_schematic addParameter $p

    # The director name
    set director [$simulation getDirector]
    set directorName [$simulation getDirectorName]
    set p [java::new ptolemy.schematic.SchematicParameter \
            "director" string $directorName]
    $_schematic addParameter $p

    # The director parameters are added directly as parameters
    set iterator [$director getAttributes]
    while { [$iterator hasMoreElements] } {
        set attr [$iterator nextElement]
	set class [[[$attr getToken] getClass] getName]
	set type [lindex [split $class "."] end]
	set p [java::new ptolemy.schematic.SchematicParameter \
		[join [$attr getName] ""] \
		$type \
		[[$attr getToken] stringValue]]
	$_schematic addParameter $p
    }

    # The actors
    foreach a [$simulation actors] {
	puts "Actor $a"
	set actor [$simulation getActor $a]
	set xmlelt [java::new ptolemy.schematic.SchematicEntity]
	$xmlelt setAttribute name $a
	$xmlelt setAttribute icon [$graph attrget $a -icon]
	$xmlelt setAttribute class [$graph attrget $a -class]
	$xmlelt setAttribute coords [$layout attrget $a -coords]

	# Parameters
	set iterator [$actor getAttributes]
	while { [$iterator hasMoreElements] } {
	    set attr [$iterator nextElement]
	    set class [[[$attr getToken] getClass] getName]
	    set type [lindex [split $class "."] end]
	    set p [java::new ptolemy.schematic.SchematicParameter \
		    [join [$attr getName] ""] \
		    $type \
		    [[$attr getToken] stringValue]]
	    $xmlelt addParameter $p
	}
	# Add it
	$_schematic addEntity $xmlelt
    }

    # The relations
    foreach r [$simulation relations] {
	puts "Relation $r"
	set relation [$simulation getRelation $r]
	set xmlelt [java::new ptolemy.schematic.SchematicRelation]
	$xmlelt setAttribute name $r
	
	# Links
	set fromlink [join [$graph attrget $r -from] "."]
	set tolink [join [$graph attrget $r -to] "."]
	$xmlelt addLink $fromlink
	$xmlelt addLink $tolink

	puts !!![$xmlelt toString]

	# Parameters
	set iterator [$relation getAttributes]
	while { [$iterator hasMoreElements] } {
	    set attr [$iterator nextElement]
	    set class [[[$attr getToken] getClass] getName]
	    set type [lindex [split $class "."] end]
	    set p [java::new ptolemy.schematic.SchematicParameter \
		    [join [$attr getName] ""] \
		    $type \
		    [[$attr getToken] stringValue]]
	    $xmlelt addParameter $p
	}
	# Add it
	$_schematic addRelation $xmlelt
    }
}
