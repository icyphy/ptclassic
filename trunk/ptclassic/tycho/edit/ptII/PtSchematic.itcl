# A class that represents a Ptolemy schematic
#
# @Author: John Reekie
#
# @Version: $Id$
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### PtSchematic
#
# A <i>PtSchematic</i> is a facade that deals with Ptolemy II XML
# schematics.
#
class ::tycho::PtSchematic {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                            options                        ####

    ###################################################################
    ####                         public methods                    ####

    # Contruct a new simulation
    method construct {simulation graph layout name \
	    domainPanel vertexcontroller edgecontroller}

    # Contruct a composite actor for execution only
    method constructComposite {simulation name composite}

    # Get the text of the schematic
    method getText {}

    # Load the schematic from the given simulation
    method load {simulation graph layout name}

    # Parse from the given text data
    method parse {text}

    # Parse from a URL
    method parseURL {url}

    ###################################################################
    ####                   protected methods                       ####

    # Print a debug message
    protected method debug {msg} {
	if $debug {
	    puts "$this: $msg"
	}
    }

    ###################################################################
    ####                     private variables                     ####

    # The java schematic object
    private variable _schematic
}

#######################################################################
#### constructor
#
body ::tycho::PtSchematic::constructor {args} {
    # Initialize args
    eval configure $args
    
    set _schematic [java::new ptolemy.schematic.Schematic]
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### getText
#
# Get the schematic text
#
body ::tycho::PtSchematic::getText {} {
    # Screw around to deal with Tycho's bogus i/o mechanism
    set tmpFile [::tycho::tmpFileName schematic]
    set outputStream [java::new {java.io.FileOutputStream String} $tmpFile]

    set printer [java::new ptolemy.schematic.PTMLPrinter \
	    "garbage" $_schematic]
    $printer print $outputStream
    $outputStream flush
    $outputStream close

    set fd [open $tmpFile]
    set text [read $fd]
    close $fd

    return $text
    # $_schematic toString
}

########################################################################
#### load
#
# Load the schematic from a simulation, a graph, and a layout model
#
body ::tycho::PtSchematic::load {simulation graph layout name} {
    puts "PtSimulation::load $simulation $graph $layout $name"

    # The name
    $_schematic setAttribute name $name
    $_schematic setAttribute version "1.0"

    # Top-level
    set isToplevel [$simulation cget -isToplevel]
    set p [java::new ptolemy.schematic.SchematicParameter \
	    isToplevel "CONTROLPARAMETER" $isToplevel]
    $_schematic addParameter $p

    # The domain
    set domain [$simulation getDomain]
    set p [java::new ptolemy.schematic.SchematicParameter \
	    domain "CONTROLPARAMETER" $domain]
    $_schematic addParameter $p

    # The director name
    set director [$simulation getDirector]
    set directorName [$simulation getDirectorName]
    set p [java::new ptolemy.schematic.SchematicParameter \
            "director" "CONTROLPARAMETER" $directorName]
    # FIXME
    $p setAttribute class [[$director getClass] getName]
    $_schematic addParameter $p

    # The director parameters are added directly as parameters
    set iterator [$director getAttributes]
    while { [$iterator hasMoreElements] } {
        set attr [$iterator nextElement]
	set class [[[$attr getToken] getClass] getName]
	set type [lindex [split $class "."] end]
	set p [java::new ptolemy.schematic.SchematicParameter \
		[join [$attr getName] ""] \
		$type \
		[[$attr getToken] stringValue]]
	$_schematic addParameter $p
    }

    # The actors
    foreach a [$simulation actors] {
	puts "Actor $a"
	set actor [$simulation getActor $a]
	set xmlelt [java::new ptolemy.schematic.SchematicEntity]
	$xmlelt setAttribute name $a
	$xmlelt setAttribute icon [$graph attrget $a -icon]
	$xmlelt setAttribute coords [$layout attrget $a -coords]

	set etype [java::new ptolemy.schematic.EntityType]
	$etype setAttribute name [$graph attrget $a -class]
	$etype setAttribute ports "?"
	$xmlelt addChildElement $etype

	# Parameters
	set iterator [$actor getAttributes]
	while { [$iterator hasMoreElements] } {
	    set attr [$iterator nextElement]
	    set class [[[$attr getToken] getClass] getName]
	    set type [lindex [split $class "."] end]
	    set p [java::new ptolemy.schematic.SchematicParameter \
		    [join [$attr getName] ""] \
		    $type \
		    [[$attr getToken] stringValue]]
	    $xmlelt addParameter $p
	}
	# Add it
	$_schematic addEntity $xmlelt
    }

    # The ports
    foreach a [$simulation ports] {
	puts "Port $a"
	set actor [$simulation getPort $a
]
	set xmlelt [java::new ptolemy.schematic.SchematicEntity]
	$xmlelt setAttribute name $a
	$xmlelt setAttribute icon [$graph attrget $a -icon]
	$xmlelt setAttribute coords [$layout attrget $a -coords]

	set etype [java::new ptolemy.schematic.EntityType]
	$etype setAttribute name [$graph attrget $a -class]
	$etype setAttribute type "port"
	$xmlelt addChildElement $etype

	# Parameters
	set iterator [$actor getAttributes]
	while { [$iterator hasMoreElements] } {
	    set attr [$iterator nextElement]
	    set class [[[$attr getToken] getClass] getName]
	    set type [lindex [split $class "."] end]
	    set p [java::new ptolemy.schematic.SchematicParameter \
		    [join [$attr getName] ""] \
		    $type \
		    [[$attr getToken] stringValue]]
	    $xmlelt addParameter $p
	}
	# Add it
	$_schematic addEntity $xmlelt
    }

    # The relations
    foreach r [$simulation relations] {
	puts "Relation $r"
	set relation [$simulation getRelation $r]
	set xmlelt [java::new ptolemy.schematic.SchematicRelation]
	$xmlelt setAttribute name $r
	
	# Links
        foreach link [$simulation links $r] {
            $xmlelt addLink [join $link "."]
        }

	# Layout
	foreach junction [$simulation junctions $r] {
	    set xe [java::new ptolemy.schematic.SchematicLayout]
	    $xe setAttribute name $junction
	    $xe setAttribute coords [$layout attrget $junction -coords]
	    $xe setAttribute type "junction"
	    $xmlelt addChildElement $xe
	}
	foreach e [$simulation edges $r] {
	    set from [$graph attrget $e -from]
            puts $from
	    if [string match {junction*} $from] {
		set from [list $from [$layout attrget $e -fromfeature]]
                puts !$from
	    }
	    set to [$graph attrget $e -to]
            puts $to
	    if [string match {junction*} $to] {
		set to [list $to [$layout attrget $e -tofeature]]
                puts !$to
	    }
	    set xe [java::new ptolemy.schematic.SchematicLayout]
	    $xe setAttribute name $e
	    $xe setAttribute from $from
	    $xe setAttribute to $to
	    $xe setAttribute type "edge"
	    $xmlelt addChildElement $xe
	}

	#set tolink [join [$graph attrget $r -to] "."]
	#$xmlelt addLink $fromlink
	#$xmlelt addLink $tolink

	# Parameters
	set iterator [$relation getAttributes]
	while { [$iterator hasMoreElements] } {
	    set attr [$iterator nextElement]
	    set class [[[$attr getToken] getClass] getName]
	    set type [lindex [split $class "."] end]
	    set p [java::new ptolemy.schematic.SchematicParameter \
		    [join [$attr getName] ""] \
		    $type \
		    [[$attr getToken] stringValue]]
	    $xmlelt addParameter $p
	}
	# Add it
	$_schematic addRelation $xmlelt
    }
}


########################################################################
#### parse
#
# Parse from the given text data
#
body ::tycho::PtSchematic::parse {text} {
    puts "PtSimulation::parse"

    # Screw around to deal with Tycho's bogus i/o mechanism
    set tmpFile [::tycho::tmpFileName schematic]
    set fd [open $tmpFile "w"]
    puts $fd $text
    close $fd

    # Screw around to get the url
    global env tcl_platform
    if { $tcl_platform(platform) == "windows" } {
        set url "file:/$tmpFile"
    } else {
        set url "file:$tmpFile"
    }

    # Parse it
    set ptmlParser [java::new ptolemy.schematic.PTMLParser]
    puts "Parsing $url with $ptmlParser"
    set _schematic [$ptmlParser parse $url]
    puts "Schematic is: [$_schematic toString]"
}

########################################################################
#### parseURL
#
# Parse from the given URL
#
body ::tycho::PtSchematic::parseURL {url} {
    puts "PtSimulation::parseURL $url"

    set ptmlParser [java::new ptolemy.schematic.PTMLParser]
    puts "Parsing $url with $ptmlParser"
    set _schematic [$ptmlParser parse $url]
    puts "Schematic is: [$_schematic toString]"
}

########################################################################
####
#
# Construct a new simulation
#
body ::tycho::PtSchematic::construct {simulation graph layout name \
	domainPanel vertexcontroller edgecontroller} {
    puts "PtSimulation::construct $simulation $graph $layout $name"

    # Configure for top-level
    set isToplevel [$_schematic getChildElement parameter isToplevel]
    puts ####[$isToplevel toString]
    #puts [$domain toString]
    $simulation configure -isToplevel [$isToplevel getAttribute value]

    # Get the domain
    set domain [$_schematic getChildElement parameter domain]
    #puts [$domain toString]
    $domainPanel setDomain [$domain getAttribute value]

    # Get the director
    set director [$_schematic getChildElement parameter director]
    #puts [$director toString]
    $domainPanel setDirector [$director getAttribute value]
    set javaDir [$simulation getDirector]

    # Update the director's parameters
    set iterator [$_schematic parameters]
    while { [$iterator hasMoreElements] } {
	set param [$iterator nextElement]
	if { [$param getAttribute "type"] != "CONTROLPARAMETER" } {
	    set name [$param getAttribute name]
	    set value [$param getAttribute value]
	    [$javaDir getAttribute $name] setExpression $value
	}
    }
    [[winfo parent $domainPanel] component time] loadParameters $javaDir

    # Create the entities
    set iterator [$_schematic entityNames]
    while { [$iterator hasMoreElements] } {
	set i [$iterator nextElement]
	set xmlelt [$_schematic getChildElement "entity" $i]
	set icon [$xmlelt getAttribute "icon"]
	set iconlib [lindex [split $icon "."] 0]
	set iconname [lindex [split $icon "."] 1]
	set name [$xmlelt getAttribute "name"]
	set coords [$xmlelt getAttribute "coords"]

	# Create the actor
	$vertexcontroller add $iconlib $iconname $name $coords
    } 

    # Create the relations
    set iterator [$_schematic relationNames]
    while { [$iterator hasMoreElements] } {
	set i [$iterator nextElement]

	# The relation
	set xmlelt [$_schematic getChildElement "relation" $i]
	#puts [$xmlelt toString]
	set name [$xmlelt getAttribute name]
	
	# Create the relation
	$simulation addRelation $name

	# The links
	#set ports {}
	set links [$xmlelt childElements "link"]
	while { [$links hasMoreElements] } {
	    set l [$links nextElement]
	    set port [$l getAttribute name]
	    #lappend ports $port

	    set a [lindex [split $port "."] 0]
	    set p [lindex [split $port "."] 1]
	    $simulation link $name $a $p
	}

	# Process layout
	set elts [$xmlelt childElements "layout"]
	while { [$elts hasMoreElements] } {
	    set l [$elts nextElement]
            puts [$l toString]
	    if { [$l getAttribute type] == "junction" } {
		set coords [$l getAttribute coords]
		set junctionname [$l getAttribute name]

		# Create the new junction
		$layout publish add item $junctionname \
			-slatetype Junction \
			-coords $coords \
			-tags "junction"

		# Create the junction vertex and add it to the simulation
		$graph publish add vertex $junctionname \
			-relation $name
		$simulation addJunction $name $junctionname
	    }
	}
	set elts [$xmlelt childElements "layout"]
	while { [$elts hasMoreElements] } {
	    set l [$elts nextElement]
            puts [$l toString]
	    if { [$l getAttribute type] == "edge" } {
		set edgename [$l getAttribute name]
		set from [$l getAttribute from]
		set to [$l getAttribute to]
                puts "from = $from"
                puts "to = $to"
                
		set opts {}
		if { [string match {junction*} [lindex $from 0]] } {
		    set dfrom [lindex $from 1]
		    set from [lindex $from 0]
		    set cfrom [$layout forward feature $from $dfrom]
		} else {
		    set dfrom [$layout forward itemcget $from -direction]
		    set cfrom [$layout forward feature $from "terminal"]
		}

		if { [string match {junction*} [lindex $to 0]] } {
		    set dto [lindex $to 1]
		    set to [lindex $to 0]
		    set cto [$layout forward feature $to $dto]
		} else {
		    set dto [$layout forward itemcget $to -direction]
		    set cto [$layout forward feature $to "terminal"]
		}
		set dto [::tycho::Shape::compass $dto "rev"]

		# Create the new edge
		$graph publish add edge $edgename -from $from -to $to \
			-relation $name

		# Create the new net
		$layout publish add item $edgename \
			-slatetype Net \
			-coords [concat $cfrom $cto] \
			-start $dfrom \
			-end $dto \
			-tags "edge"
		
		if { [string match {junction*} $from] } {
		    $layout attrset $edgename -fromfeature $dfrom
		}
		if { [string match {junction*} $to] } {
		    $layout attrset $edgename -tofeature $dto
		}
	
		# Add to the simulation
		$simulation addEdge $name $edgename
	    }
	}
    }
}


########################################################################
####
#
# Construct a new simulation for execution only
#
body ::tycho::PtSchematic::constructComposite {simulation name composite} {
    puts "PtSimulation::constructComposite $simulation $name"

    # Configure for top-level
    set isToplevel [$_schematic getChildElement parameter isToplevel]
    puts ####[$isToplevel toString]
    #puts [$domain toString]
    $simulation configure -isToplevel [$isToplevel getAttribute value]

    # Get the domain
    set domain [$_schematic getChildElement parameter domain]
    puts "domain = [$domain toString]"
    $simulation setDomain [$domain getAttribute value]

    # Get the director
    set xmlDirector [$_schematic getChildElement parameter director]
    puts "xmlDirector = [$xmlDirector toString]"
    set class [$xmlDirector getAttribute "class"]
    set javaDirector [java::new $class]
    $simulation setDirector $javaDirector
    $simulation setDirectorName [$xmlDirector getAttribute name]

    # Update the director's parameters
    set iterator [$_schematic parameters]
    while { [$iterator hasMoreElements] } {
	set param [$iterator nextElement]
	if { [$param getAttribute "type"] != "CONTROLPARAMETER" } {
	    set name [$param getAttribute name]
	    set value [$param getAttribute value]
	    [$javaDirector getAttribute $name] setExpression $value
	}
    }

    # Create the entities
    set iterator [$_schematic entityNames]
    while { [$iterator hasMoreElements] } {
	set i [$iterator nextElement]
	set xmlelt [$_schematic getChildElement "entity" $i]

	#set icon [$xmlelt getAttribute "icon"]
	#set iconlib [lindex [split $icon "."] 0]
	#set iconname [lindex [split $icon "."] 1]
	#set coords [$xmlelt getAttribute "coords"]

	set type [$xmlelt getChildElement entitytype]
	puts [$type toString]
	set realname [$type getAttribute "name"]
	set etype [$type getAttribute "type"]
	set uniqueName [::tycho::autoName $realname]

	switch -exact $etype {
	    "actor" {
		$simulation addActor $realname $uniqueName
	    }
	    "port" {
		$simulation addPort $realname $uniqueName
	    }
	    "composite" {
		$simulation addCompositeActor $realname $uniqueName
		set actor [$simulation getActor $uniqueName]
		
		# Create ports
		set iterator [$icon ports]
		while { [$iterator hasMoreElements] } {
		    set p [$iterator nextElement]
		    set port [java::new ptolemy.actor.TypedIOPort \
			    $actor \
			    [$p getAttribute name]]
		    puts "Created port [$port toString]"
		    
		    if { [$p getAttribute input] == "false" } {
			$port setOutput 1
		    }
		}
	    }
	}
    }

    # Create the relations
    set iterator [$_schematic relationNames]
    while { [$iterator hasMoreElements] } {
	set i [$iterator nextElement]

	# The relation
	set xmlelt [$_schematic getChildElement "relation" $i]
	puts [$xmlelt toString]
	set name [$xmlelt getAttribute name]
	
	# Create the relation
	$simulation addRelation $name

	# The links
	#set ports {}
	set links [$xmlelt childElements "link"]
	while { [$links hasMoreElements] } {
	    set l [$links nextElement]
	    set port [$l getAttribute name]
	    #lappend ports $port

	    set a [lindex [split $port "."] 0]
	    set p [lindex [split $port "."] 1]
	    $simulation link $name $a $p
	}
    }
}
