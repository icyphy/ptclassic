##########################################################################
# Version: $Id$
# Author: H. John Reekie
#
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


## Bounder
#
# An interactor that keeps the target object within a given region.
#
class ::tycho::Bounder {
    inherit ::tycho::Follower

    ## constructor
    #
    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c

	eval configure $args
    }


    ###################################################################
    ####                            options                        ####

    # The bounds to move the object between. Note that these bounds
    # are for the object being moved, not for the cursor.
    # If null, the bounds are the width and height of the slate.
    #
    public variable bounds ""


    ###################################################################
    ####                         public methods                    ####

    # Start interaction sequence
    method click {x y} {}

    # Continue interaction sequence
    method drag {x y} {}


    ###################################################################
    ####                    private variables                      ####

    # Individual values of bounds
    private variable x0
    private variable y0
    private variable x1
    private variable y1
    
    private variable actualX
    private variable actualY
}


## click
#
# Start the interaction. To find the bounds within which to move
# the picture, the interactor first examines its -bounds option.
# If that it is null, then it tries to see if the picture responds
# to " query bounds"; if that doesn't work, then use the size of the
# slate.
#
body ::tycho::Bounder::click {x y} {
    # Get the bounds to move between.
    if { [llength $bounds] == 4 } {
	set b $bounds
    } else {
	set b [$target query bounds]
	if { [llength $b] != 4 } {
	    set b [list 1 1 \
		    [expr [winfo width $slate] - 2] \
		    [expr [winfo height $slate] - 2]]
	}
    }
    assign x0 y0 x1 y1 $b

    # Here's the size of the picture
    assign a0 b0 a1 b1 [$target region]

    # Adjust the bounds accrodingly
    set x0 [expr $x0 + ($x - $a0)]
    set y0 [expr $y0 + ($y - $b0)]
    set x1 [expr $x1 + ($x - $a1)]
    set y1 [expr $y1 + ($y - $b1)]

    # Initialise other variables, and click on target
    $proxy click $x $y

    set actualX $x
    set actualY $y
}


## drag
#
# Test if the new point is outside the bounds. If it is,
# then move to the boundary. Otherwise, move to the
# new point.
#
body ::tycho::Bounder::drag {x y} {
    if { $x < $x0 } {
	set actualX $x0
    } elseif { $x > $x1  } {
	set actualX $x1
    } else {
	set actualX $x
    }

    if { $y < $y0 } {
	set actualY $y0
    } elseif { $y > $y1  } {
	set actualY $y1
    } else {
	set actualY $y
    }

    $proxy drag $actualX $actualY
    
    if { $dragcommand != "" } {
	uplevel #0 apply [list $dragcommand] $target $x $y
    }
}
