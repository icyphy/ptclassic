#########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################



## Picture
#
# An "empty" picture class into which items and other pictures can be
# added.
#
class ::tycho::Picture {

    proc construct {id tags canvas x0 y0 x1 y1 args}
    proc destruct  {id canvas}

    ###################################################################
    ####                         public procs                      ####

    proc coords {id canvas args}
    proc draw   {id canvas args}
    proc ghost  {id canvas}
    proc update {id canvas}

    ###################################################################
    ####                         protected variables               ####

    # All methods are looked up through a table
    common methodtable

    # All options have a default value
    common optiondefault

    # All pictures must have a "primary" item to define their coordinates
    common primary

    # The "shape" of pictures of this class -- rectangle by default
    common shape "rectangle"

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    set methodtable(construct) ::tycho::Picture::construct
    set methodtable(destruct)  ::tycho::Picture::destruct
    set methodtable(coords)    ::tycho::Picture::coords
    set methodtable(draw)      ::tycho::Picture::draw
    set methodtable(ghost)     ::tycho::Picture::ghost
    set methodtable(update)    ::tycho::Picture::update
}


##########################################################################
#### construct
#
body ::tycho::Picture::construct {id tags canvas x0 y0 x1 y1 args} {

    # Create the primary component for the outline coordinates.
    # Because this item is completely blank, it will actually respond to
    # events inside it -- I don't know if this is good or bad, but that's
    # the way it is.
    set primary($id) [$canvas create rectangle $x0 $y0 $x1 $y1 \
	    -outline "" -tags $tags]
}


##########################################################################
#### destruct
#
# Does nothing.
#
body ::tycho::Picture::destruct {id canvas} {}


##########################################################################
#### coords
#
# Set or read the picture's coordinates
#
body ::tycho::Picture::coords {id canvas args} {

    # Get the current coordinates
    set coords [$canvas coords $primary($id)]

    # If there are no arguments, return the coords
    if { $args == "" } {
	return $coords
    }

    # If the primary is rectangular, use those coords. If not,
    # base it on the bounding box.
    if { [llength $coords] != 4 } {
	set oldbox [rectShrink \
		[$canvas bbox $primary($id)] 2]
	eval $canvas coords $primary($id)($id) $args
	set newbox [rectShrink \
		[$canvas bbox $primary($id)] 2]
    } else {
	set oldbox $coords
	set newbox $args
    }

    # Scale the picture
    assign x0 y0 x1 y1 $oldbox
    assign a0 b0 a1 b1 $newbox

    set xdelta [expr $a0-$x0]
    set ydelta [expr $b0-$y0]
    set xscale [expr double($a1-$a0)/($x1-$x0)]
    set yscale [expr double($b1-$b0)/($y1-$y0)]

    set slate [canvasslate $canvas]
    # Move and scale each of the components
    foreach pict [$slate picture children $id] {
	$slate move  $pict $xdelta $ydelta
	$slate scale $pict $a0 $b0 $xscale $yscale
    }

    # Move and scale the items belonging to this picture
    $canvas move  !$id $xdelta $ydelta
    $canvas scale !$id $a0 $b0 $xscale $yscale

    # Fix the primary coordinates (non-rectangular)
    if { [llength $coords] != 4 } {
	eval $canvas coords $primary($id) $args
    }
}

##########################################################################
## ghost
#
# Create and return a "ghost" of the picture.
#
body ::tycho::Picture::ghost {id canvas} {
    eval $canvas create rectangle [$canvas coords $primary($id)] \
	    -outline grey
}

##########################################################################
## update
#
# The proc that gets called after changing a configuration option.
# By default, does nothing.
#
body ::tycho::Picture::update {id canvas} {}
