##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Follower
#
# The simplest interactor: follow the mouse. This interactor implements
# the activate{}, deactivate{}, bind{}, and unbind{} methods so that
# clicking and dragging on a target picture causes corresponding actions
# on the target -- in other words, with the default moving behavior,
# the picture is moved by clicking and dragging.
#
# It seems like this class goes to a lot of trouble to perform a simple
# function. However, its real power comes from inheritance, where
# click-and-drag behavior can be customized for more sophistictaed
# interaction -- see
# <a href="Gridder.html"><i>Gridder</i></a>,
# <a href="Bounder.html"><i>Bounder</i></a>, and
# <a href="Alonger.html"><i>Alonger</i></a> for examples.
#
class ::tycho::Follower {
    inherit ::tycho::Interactor

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c

	eval configure $args
    }
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Bind the interactor to a picture or tag
    method bind {t args} {}

    ## Remove the binding of an interactor to a picture or tag
    method unbind {t} {}


    ###################################################################
    ####                        protected methods                  ####

    # Attach the interactor to the current picture
    protected method activate {t x y} {}

    # Remove the interactor from the current picture
    protected method deactivate {} {}
}


#######################################################################
#### activate target x y
#
# Activate the interactor on a picture object. Motion and release events
# are bound to the current picture so that the picture can be dragged
# and so on. After setting up bindings and calling the *activatecommand*
# option, this method calls the click{} metjod -- subclasses therefore
# need only to override click{} (and drag{} and release{}) to alter the
# interaction behavior.
# 
body ::tycho::Follower::activate {t x y} {
    # Remember the tag/object, for use in deactivate
    set tag $t

    # Set the target. The client can modify its options later
    # with -activatecommand if desired. If the target argument is
    # in fact a tag, get the current picture from the slate.
    if { [string match {_*} $t] || [string match {[0-9]*} $t] } {
	target $t
    } else {
	# FIXME: current{} is not implemented!
	target [current]
    }

    # Set up the bindings. Note: the bindings are set to the tag,
    # not to the current object.
    foreach b $button {
	$slate bind $tag \
		[::tycho::Interactor::event Motion -button $b ] \
		[list @scope [info class] "$this drag %x %y; update idletasks"]
	$slate bind $tag \
		[::tycho::Interactor::event Release -button $b ] \
		[list @scope [info class] "$this release; $this deactivate"]
    }

    # If there's a proxy, tell it about the current target
    if { $proxy != "" } {
	$proxy target $target
    }

    # Execute the user-specified activation command
    execute $activatecommand $x $y

    # Start the interaction sequence
    eval click $x $y $options
}


#######################################################################
#### bind target
#
# Bind button-press events to the specified object or tag, so that
# clicking on one of those pictures calls activate{}. The configuration
# options *-button* and *-modifiers* determine the actual events.
#
body ::tycho::Follower::bind {t args} {
    foreach b $button {
	$slate bind $t \
		[::tycho::Interactor::event Press -button $b ] \
		[list @scope [info class] "$this activate $t %x %y"]
    }
}


#######################################################################
#### deactivate
#
# Deactivate the interactor from the target. This method must be called
# by the script bound to the release event.
# 
body ::tycho::Follower::deactivate {} {
    # Remove bindings from the current tag
    foreach b $button {
	$slate bind $tag \
		[::tycho::Interactor::event Motion -button $b] {}
	$slate bind $tag \
		[::tycho::Interactor::event Release -button $b] {}
    }

    # Execute the user-specified de-activation command
    if { $deactivatecommand != "" } {
	uplevel #0 apply [list $deactivatecommand] $target
    }
}


#######################################################################
#### unbind target
#
# Remove the bindings to the specified object or tag. The specified 
# pictures will no longer respond to the mouse.
#
body ::tycho::Follower::unbind {t} {
    foreach b $button {
	$slate bind $t \
		[::tycho::Interactor::event Press -button $b] {}
    }
}
