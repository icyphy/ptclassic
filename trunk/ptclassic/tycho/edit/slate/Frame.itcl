#########################################################################
# Version: $Id$
# Author: H. John Reekie
#
# Copyright (c)	%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


## Frame
#
# A 3D rectangle.
#
class ::tycho::Frame {
    inherit ::tycho::ThreeD


    ## constructor
    #
    constructor	{x0 y0 x1 y1 args} {
    } {}

    ###################################################################
    ## Public methods
    
    method coords {args}   {}


    ###################################################################
    ## Private methods

    method _answer {option} {}

    private method _borderwidth {args} {}
    private method _fill        {args} {}
    private method _relief      {args} {}
}


## _answer
#
# Supply an answer to some query.
#
body ::tycho::Frame::_answer {option} {
    switch -exact $option {
	"bounds" -
	"scratchpad" {
	    if { $relief == "flat" } {
		set w 1
	    } elseif { $relief == "ridge" || $relief == "groove" } {
		set w [expr 2 * $borderwidth + 1]
	    } else { 
		set w [expr $borderwidth + 1]
	    }

	    return [rectShrink [$this coords] $w]
	}
	default {
	    return -1
	}
    }
}


## _borderwidth
#
# Update the -borderwidth configuration option.
#
body ::tycho::Frame::_borderwidth {args} {
    set coords [$canvas	coords $component(primary)]

    set x0 [lindex $coords 0]
    set y0 [lindex $coords 1]
    set x1 [expr [lindex $coords 2] + 1]
    set y1 [expr [lindex $coords 3] + 1]

    set	a0 [expr $x0 + $borderwidth]
    set	b0 [expr $y0 + $borderwidth]
    set	a1 [expr $x1 - $borderwidth]
    set	b1 [expr $y1 - $borderwidth]

    $canvas coords $component(lit)	   \
	    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
    $canvas coords $component(shaded) \
	    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1

    if { $relief == "ridge" || $relief == "groove" } {
	set x0 $a0
	set y0 $b0
	set x1 $a1
	set y1 $b1

	set a0 [expr $x0 + $borderwidth]
	set b0 [expr $y0 + $borderwidth]
	set a1 [expr $x1 - $borderwidth]
	set b1 [expr $y1 - $borderwidth]
	
	$canvas coords $component(notlit) \
		$x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
	$canvas coords $component(notshaded) \
		$x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1
    }
}


## _fill
#
# Update the -fill configuration option.
#
body ::tycho::Frame::_fill {args} {
    if { $fill != "none" } {
	set coords [$canvas coords $component(primary)]

	if { $relief != "ridge" && $relief != "groove" } {
	    set x0 [expr [lindex $coords 0] + $borderwidth]
	    set y0 [expr [lindex $coords 1] + $borderwidth]
	    set x1 [expr [lindex $coords 2] - $borderwidth + 1]
	    set y1 [expr [lindex $coords 3] - $borderwidth + 1]
	} else {
	    set x0 [expr [lindex $coords 0] + 2 * $borderwidth]
	    set y0 [expr [lindex $coords 1] + 2 * $borderwidth]
	    set x1 [expr [lindex $coords 2] - 2 * $borderwidth + 1]
	    set y1 [expr [lindex $coords 3] - 2 * $borderwidth + 1]
	}

	if { [info exists component(surface)] } {
	    $canvas coords $component(surface) $x0 $y0 $x1 $y1
	} else {
	    $this component create "surface" rectangle \
		    $x0 $y0 $x1 $y1 \
		    -outline "" -fill [$colorObject $fill]
	}
    }
}


## _relief
#
# Update the -relief configuration option.
#
body ::tycho::Frame::_relief {args} {
    #
    # If the relief has changed to ridge or groove, then we
    # have to create the inside border polygons, and move
    # the surface if it exists.
    #
    if { ($relief == "ridge" || $relief == "groove") \
	    && ! [info exists component(notlit)] } {
	
	set light [$colorObject light]
	set dark  [$colorObject dark]

	if { $relief == "groove" } {
	    set light $dark
	    set dark [$colorObject light]
	}

	set coords [$canvas coords $component(primary)]

	set x0 [expr [lindex $coords 0] + $borderwidth]
	set y0 [expr [lindex $coords 1] + $borderwidth]
	set x1 [expr [lindex $coords 2] - $borderwidth + 1]
	set y1 [expr [lindex $coords 3] - $borderwidth + 1]

	set a0 [expr $x0 + $borderwidth]
	set b0 [expr $y0 + $borderwidth]
	set a1 [expr $x1 - $borderwidth]
	set b1 [expr $y1 - $borderwidth]

	$this component create "notlit" polygon \
		$x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1 \
		-fill $dark

	$this component create "notshaded" polygon \
		$x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1 \
		-fill $light

	if { [info exists component(surface)] } {
	    $canvas coords $component(surface) $a0 $b0 $a1 $b1
	}
    }

    #
    # If the relief has changed _from_ ridge or groove, then we
    # delete the inside border polygons and move the surface.
    #
    if { $relief != "ridge" && $relief != "groove" \
	    && [info exists component(notlit)] } {
	
	$this component delete "notlit"
	$this component delete "notshaded"

	if { [info exists component(surface)] } {
	    set coords [$canvas	coords $component(primary)]

	    set x0 [lindex $coords 0]
	    set y0 [lindex $coords 1]
	    set x1 [expr [lindex $coords 2] + 1]
	    set y1 [expr [lindex $coords 3] + 1]

	    set	a0 [expr $x0 + $borderwidth]
	    set	b0 [expr $y0 + $borderwidth]
	    set	a1 [expr $x1 - $borderwidth]
	    set	b1 [expr $y1 - $borderwidth]

	    $canvas coords $component(surface) $a0 $b0 $a1 $b1
	}
    }
}


## constructor
#
body ::tycho::Frame::constructor {x0 y0 x1 y1 args} {
    #
    # Set the slate and canvas variables.
    #
    set t [lsearch -exact $args -slate]
    if { $t != -1 } {
	set slate [lindex $args [expr $t+1]]
	set canvas [$slate _canvas]
	set args [lreplace $args $t [expr $t+1]]
    }

    #
    # Extract the -color option value if there is one.
    # This is a ``speed'' hack, so that objects are already
    # created with the right color.
    #
    getopt color args
    set colorObject [::tycho::Shades::new $color]

    #
    # Extract the -borderwidth option value if there is one.
    # This is another ``speed'' hack, so that components do not
    # have to be resized later.
    #
    getopt borderwidth args

    #
    # Override defaults: shape is rectangular
    #
    configure -shape "rectangular"

    #
    # Initialize the list used to create the components
    #
    set itemspecs {}

    #
    # Set the traces on configuration options. If borderwidth is
    # changed, update the fill as well to resize the surface item.
    #
    trace variable borderwidth w [code $this _borderwidth]
    trace variable borderwidth w [code $this _fill]
    trace variable relief      w [code $this _relief]
    trace variable fill        w [code $this _fill]

    #
    # Add some answers.
    #
    lappend answers [info context]
#    set answers [concat [list [code $this _answer]] $answers]

    #
    # Create the primary component for the outline coordinates.
    # Note that this has an outline, but it will be obscured
    # by other components. DO NOT give this rectangle a blank
    # outline, because then it will respond to mouse events on
    # its inside (even though invisible), which makes see-through
    # frames impossible.
    #
    lappend itemspecs [list "primary" [list rectangle $x0 $y0 $x1 $y1]]

    #
    # The way that the polygon co-ordinates is set up in the Tk
    # canvas seems somewhat bogus, so we have to futz with the
    # coordinates here.
    #
    set	y1 [expr $y1+1]
    set	x1 [expr $x1+1]

    #
    # Create the borders and the fill. This is set for the default
    # relief (raised). This should really be done
    # in the option-update methods, which is how I originally
    # had it, but duplicating some of the code here gave a
    # speed improvement	of about 40%...
    #
    set	a0 [expr $x0 + $borderwidth]
    set	b0 [expr $y0 + $borderwidth]
    set	a1 [expr $x1 - $borderwidth]
    set	b1 [expr $y1 - $borderwidth]

    lappend itemspecs [list "lit" polygon \
	    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1 \
	    -fill [$colorObject light]]

    lappend itemspecs [list "shaded" polygon \
	    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1 \
	    -fill [$colorObject dark]]

    lappend itemspecs [list "surface" rectangle \
	    $a0 $b0 $a1 $b1 \
	    -outline {} -fill [$colorObject matt]]

    #
    # Create the items with the itemspces list.
    #
    $this component create* $itemspecs

    #
    # Configure option variables
    #
    eval configure $args
}


## coords
## coords x0 y0	x1 y1
#
# Set or read the frame's coordinates
#
body ::tycho::Frame::coords {args} {
    if { $args == "" } {
	return [$canvas	coords $component(primary)]
    }

    #
    # Move the line that marks the frame coordinates.
    #
    set coords $args
    eval $canvas coords $component(primary) $coords

    #
    # Now change the co-ordinates of the outside borders.
    # This duplicates code from	the -borderwidth and -fill
    # configuration scripts to make resizing as	fast as	possible...
    #
    set x0 [lindex $coords 0]
    set y0 [lindex $coords 1]
    set x1 [expr [lindex $coords 2] + 1]
    set y1 [expr [lindex $coords 3] + 1]

    set a0 [expr $x0 + $borderwidth]
    set b0 [expr $y0 + $borderwidth]
    set a1 [expr $x1 - $borderwidth]
    set b1 [expr $y1 - $borderwidth]

    $canvas coords $component(lit) \
	    $x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
    $canvas coords $component(shaded) \
	    $x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1

    #
    # If the relief is "ridge" or "groove," change the coordinates
    # of the inside borders.
    #
    if { $relief == "ridge" || $relief == "groove" } {
	set x0 $a0
	set y0 $b0
	set x1 $a1
	set y1 $b1

	set a0 [expr $x0 + $borderwidth]
	set b0 [expr $y0 + $borderwidth]
	set a1 [expr $x1 - $borderwidth]
	set b1 [expr $y1 - $borderwidth]
	
	$canvas coords $component(notlit) \
		$x0 $y1 $x0 $y0 $x1 $y0 $a1 $b0 $a0 $b0 $a0 $b1
	$canvas coords $component(notshaded) \
		$x0 $y1 $x1 $y1 $x1 $y0 $a1 $b0 $a1 $b1 $a0 $b1
    }

    #
    # If there is a surface component, change its coordinates
    #
    if { [info exists component(surface)] } {
	$canvas coords $component(surface) $a0 $b0 $a1 $b1
    }


    #
    # Notify that coordinates have changed
    #
    #    notify "coords"
}
