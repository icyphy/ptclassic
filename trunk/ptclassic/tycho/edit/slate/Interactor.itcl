##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
### Interactor
#
# The abstract superclass of all interactor classes. <i>Interactors</i>
# are a mechanism originally developed in Brad Meyer's Garnet system.
# The key idea is to abstract various forms of user interaction into
# objects, so that a) user interaction code can be reused easily and
# b) more complex interactions can be built from simpler ones. The
# interactors implemented in this set of classes fulfills both of these
# goals, although they are much smaller, lighter, and more numerous
# than the interactors in Garnet.
# <p>
# Each sub-class of <i>Interactor</i> implements a particular kind of
# user interaction. Each is based on the observation that most user
# interactions can be broken into a sequence: a <i>click</i>, some number
# of <i>drags</i>, and a <i>release</i>. Note that each of these
# <i>actions</i> is abstract, and they do not necessarily correspond to
# to physical mouse clicks, drags, and releases.
# <p>
# Interactors can be combined to make more complex interactions: several
# interactors can be <i>bound</i> to the same picture; they can be
# <i>cascaded</i> to modify each other's effects. Actions eventually
# end up being given to a <a href="../../../kernel/doc/codeDoc/Picture.html">
# <i>Picture</i></a> object, which then reacts according to its current
# ``behavior.''
#
class ::tycho::Interactor {

    constructor {} {}
    destructor {}


    ###################################################################
    ####                            options                        ####

    # The button number used for mouse events. If a list, then bindings
    # are created for all buttons in the list. <i>This option cannot
    # be changed once the interactor has been bound.</i>
    public variable button 1

    # A list of modifiers for mouse events. <i>This option cannot
    # be changed once the interactor has been bound.</i>
    public variable modifiers {}

    # A script executed at the beginning of the interaction sequence. It
    # is typically used to set target parameters or to chain interactors.
    # As with all interactor scripts, this script takes four arguments:
    # this interactor, the target picture, and the <i>x</i> and <i>y</i>
    # co-ordinates. See the <a href="../../../../lib/util/syntax.tcl#apply">
    # <i>apply</i></a> procedure for the format of the script.
    public variable activatecommand {}

    # A script executed at the end of the interaction sequence. It is
    # useful for assigning objects created during an interaction to
    # variables, and other clean-up stuff.
    public variable deactivatecommand {}

    # A script executed at the completion of the interactor's drag
    # method. This is useful for performing some actions on
    # an object when it is moved, etc.
    public variable dragcommand {}


    ###################################################################
    ####                         public methods                    ####

    ## ``Bind'' an interactor to a picture.
    method bind {tagOrID args} {}

    # Forward actions to a proxy.
    method cascade {that} {}

    # Set or get the target object
    method target {args} {}

    # Remove a binding from the interactor to the target.
    method unbind {tagOrID} {}

    # Stop cascading actions to a proxy.
    method uncascade {} {}


    ###################################################################
    ####                      public procs                         ####

    # Generate a Tk event code from parameters
    proc event {type args} {}


    ###################################################################
    ####                   protected methods                       ####

    # Set up bindings to intercept events that I need from now on.
    protected method activate {args} {}

    # Start the interaction sequence on the target.
    protected method click {x y} {}

    # Continue the interaction sequence: start a new phase.
    protected method continue {} {}

    # Get the current picture on the slate.
    protected method current {} {}

    # Remove my bindings
    protected method deactivate {args} {}

    # Continue the interaction sequence: move the mouse.
    protected method drag {x y} {}

    # Terminate the interaction sequence.
    protected method release {} {}

    # Execute a script.
    protected method execute {script x y} {}

    # Set or get the proxy object.
    protected method proxy {args} {}


    ###################################################################
    ####                   protected variables                     ####

    # The canvas on which this interactor resides.
    protected variable canvas ""

    # The slate on which this interactor resides.
    protected variable slate ""

    # The tag to which this interactor is currently bound.
    protected variable tag ""

    # The picture that this interactor is operating on.
    protected variable target ""

    # An interactor to forward actions to.
    protected variable proxy ""
}


#######################################################################
#### activate
#
# <i>Abstract method</i>.
# Make myself active. That is, set up bindings to intercept
# events that I need from now on. One of the bindings is obliged to
# call <code>deactivate</code> to remove the bindings.
#
body ::tycho::Interactor::activate {args} {
    abstractMethod Interactor activate
}


#######################################################################
#### bind target
#
# <i>Abstract method</i>.
# ``Bind'' an interactor to a picture or to a tag. This creates a binding
# to the specified picture or tag so that, when the appropriate event
# occurs on that picture or a picture withe the specified tags, the
# interactor is ``activated'' on the target.
#
body ::tycho::Interactor::bind {t args} {
    abstractMethod Interactor bind
}


#######################################################################
#### cascade proxy
#
# Forward actions to a proxy interactor instead of directly
# to the target object. This used when further modification of the
# interaction can be provided by another interaactor -- for example,
# a <a href="Stepper.html"><i>Stepper</i></a> interactor can be used
# to quantize movement within a bounded rectangular region provided by the
# <a href="Bounder.html"><i>Bounder</i></a> interactor.
#
body ::tycho::Interactor::cascade {that} {
    $this proxy  $that
    $that target $target
}


#######################################################################
#### click
#
# Start an interaction sequence. The co-ordinates <i>x</i> and <i>y</i>
# are the current mouse coordinates relative to the slate.
# By default, this method simply forwards a <code>click</code> action
# to the target, or to the proxy interactor if there
# is one. Sub-classes that over-ride this method should always call
# this implementation to forward the click action.
#
body ::tycho::Interactor::click {x y} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy click $x $y"
    } else {
	$target click $x $y
    }
}


#######################################################################
#### continue
#
# Continue an interaction sequence. This method is intended for a few
# special kinds of interaction that use different buttons to mark
# different ``phases'' of the interation. It is still very experimental.
#
body ::tycho::Interactor::continue {} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy continue"
    } else {
	$target continue
    }
}


#######################################################################
#### deactivate
#
# <i>Abstract method</i>.
# Make myself inactive. In other words, remove my bindings.
#
body ::tycho::Interactor::deactivate {args} {
    abstractMethod Interactor deactivate
}


#######################################################################
#### drag
#
# Continue an interaction sequence with a mouse move. The co-ordinates
# <i>x</i> and <i>y</i> are the current mouse coordinates relative to
# the slate. By default, this method simply forwards a <code>drag</code>
# action to the target, or to the proxy interactor if there
# is one. Sub-classes that over-ride this method should always call
# this implementation to forward the drag action.
#
body ::tycho::Interactor::drag {x y} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy drag $x $y"
    } else {
	$target drag $x $y
    }
    execute $dragcommand $x $y
}


#######################################################################
#### execute
# Execute a script, by applying it to the interactor, the target, and
# the current x and y coordinates.
#
body ::tycho::Interactor::execute {script x y} {
    if { $script != "" } {
	uplevel \#0 apply [list $script] $this $target $x $y
    }
}


#######################################################################
#### proxy
#
# Set or get the interactor to which actions
# are forwarded. If null, actions are sent straight to the target.
#
body ::tycho::Interactor::proxy {args} {
    if { $args == "" } {
	return $proxy
    } else {
	set proxy [lindex $args 0]
    }
}


#######################################################################
#### release
#
# Terminate an interaction sequence. By default, this method
# simply forwards a <code>release</code>
# action to the target, or to the proxy interactor if there
# is one. Sub-classes that over-ride this method should always call
# this implementation to forward the release action.
#
body ::tycho::Interactor::release {} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy release"
    } else {
	$target release
    }
}


#######################################################################
#### target
#
# Set or get the picture that this interactor is currently
# operating on. With no argument, returns the current target;
# with an argument, sets the target picture to that value. This
# method is for use only within actions -- the target is not valid
# until the interactor has been activated. If you're careful about it,
# you can use this method to have the picture being operated on
# set to a different picture to the one being moused on, which is
# very useful in some situations -- see
# <a href="../../../../lib/widgets/doc/codeDoc/Slider.html">
# <i>Slider</i></a> for an example.
#
body ::tycho::Interactor::target {args} {
    if { $args == "" } {
	return $target
    } else {
	set target [lindex $args 0]
	if { $proxy != "" } {
	    $proxy target $target
	}
    }
}


#######################################################################
#### unbind target
#
# <i>Abstract method</i>.
# Remove a binding from the interactor to a picture or a tag. This is useful
# when using interactors that bind to a slate rather to an individual
# picture: all picture-specific interactions should be
# unbound to prevent bizarre interactions in case of clicks that
# match both a picture and the slate.
#
body ::tycho::Interactor::unbind {t} {
    abstractMethod Interactor unbind
}


#######################################################################
#### uncascade
#
# Stop forwarding actions to a proxy interactor.
#
body ::tycho::Interactor::uncascade {} {
    $this proxy {}
}



#######################################################################
#### event
#
# Translate an event specification into a Tk event code. The arguments
# take the form
# <p>
# <i>type</i>: specifies which button to use.
# <br>
# <i>-button button</i>: specifies which button to use.
# <br>
# <i>-key key</i>: specifies which key to use.
# <br>
# <i>-modifiers modifiers</i>: specifies any modifiers.
#
body ::tycho::Interactor::event {type args} {
    set button ""
    set modifiers {}

    getopt button args
    getopt key args
    getoption modifiers args

    set i ""
    switch -exact [string tolower $type] {

	"button" -
	"press" -
	"click" -
	"buttonpress" {
	    set i "ButtonPress"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"double" -
	"doubleclick" {
	    set i "Double-ButtonPress"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"triple" -
	"tripleclick" {
	    set i "Triple-ButtonPress"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"release" -
	"buttonrelease" {
	    set i "ButtonRelease"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"drag"   -
	"move"   -
	"motion" {
	    set i "Motion"
	    if { $button != "" } {
		set i [join [list "B" $button "-" $i] ""]
	    }
	}

	"enter" {
	    set i "Enter"
	}

	"leave" {
	    set i "Leave"
	}

	"key" -
	"keypress" -
	"keydown" {
	    if { [info exists key] } {
		set i "KeyPress-$key"
	    } else {
		set i "KeyPress"
	    }
	}

	"keyup" -
	"keyrelease" {
	    if { [info exists key] } {
		set i "KeyRelease-$key"
	    } else {
		set i "KeyRelease"
	    }
	}
    }

    foreach m $modifiers {
	set i [join [list [capitalize $m] $i] "-"]
    }

    return <$i>
}
