##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Interactor
#
# The abstract superclass of all interactor classes. <i>Interactors</i>
# are a mechanism originally developed in Brad Meyer's Garnet system.
# The key idea is to abstract various forms of user interaction into
# objects, so that a) user interaction code can be reused easily and
# b) more complex interactions can be built from simpler ones. The
# interactors implemented in this set of classes fulfills both of these
# goals, although they are much smaller, lighter, and more numerous
# than the interactors in Garnet.
#
# Each sub-class of <i>Interactor</i> implements a particular kind of
# user interaction. Each is based on the observation that most user
# interactions can be broken into a sequence: a <i>click</i>, some number
# of <i>drags</i>, and a <i>release</i>. Note that each of these
# <i>actions</i> is abstract, and they do not necessarily correspond to
# to physical mouse clicks, drags, and releases.
#
# Interactors can be combined to make more complex interactions: several
# interactors can be <i>bound</i> to the same picture; they can be
# <i>cascaded</i> to modify each other's effects. Actions eventually
# end up being given to am IncrCanvas item, which then reacts according
# to its current "behavior."
#
# <p><b>Options</b>
#
# <dl>
# <dt><dd>
# <dl>
# <dt><b>-activatecommand</b>
# <dd>If not null, this is a function-script 
# (see the documentation for the <code>apply</code> procedure) which is 
# applied to four arguments when the interactor is activated: the 
# interactor, the target, and the current <i>x</i> and <i>y</i> 
# coordinates. This is used to customize the behavior of the interactor
# depending on information that is not known until activation.
#
# <dt><b>-deactivatecommand</b>
# <dd>If not null, this is a function-script 
# which is applied to the same four arguments when the interactor is 
# de-activated.
#
# <dt><b>-dragcommand</b>
# <dd>If not null, this is a function-script 
# which is applied to the same four arguments at the completion of the
# interactor's <code>drag</code> method.
#
# </dl></dl>
#
#
# <p><b>Bugs</b> (none)
#
# <p><b>Enhancements</b> (none)
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/interacting.html">How interactors work</a>.
# <li><a href="../internals/interactors.html">Interactor classes</a>.
# </ul>
#
class ::tycho::Interactor {
    inherit ::tycho::Object

    constructor {} {}
    destructor {}


    ###################################################################
    ####                            options                        ####

    # A script executed at the beginning of the interaction sequence. It
    # is typically used to set target parameters or to chain interactors.
    # As with all interactor scripts, this script takes four arguments:
    # this interactor, the target picture, and the _x_ and _y_
    # co-ordinates. See the <a href="../../../../kernel/Misc.tcl#apply">
    # <i>apply</i></a> procedure for the format of the script.
    public variable activatecommand {}

    # The prefix used to forward click events
    public variable clickprefix {}

    # A script executed at the end of the interaction sequence. It is
    # useful for assigning objects created during an interaction to
    # variables, and other clean-up stuff.
    public variable deactivatecommand {}

    # A script executed at the completion of the interactor's drag
    # method. This is useful for performing some actions on
    # an object when it is moved, etc.
    public variable dragcommand {}

    # The prefix used to forward drag events
    public variable dragprefix {}

    # The prefix used to forward release events
    public variable releaseprefix {}

    ###################################################################
    ####                         public methods                    ####

    # Set up bindings to intercept events that I need from now on
    method activate {t x y args}

    # ``Bind'' an interactor to a picture
    method bind {tagOrID args}

    # Forward actions to a proxy interactor
    method cascade {that}

    # Start the interaction sequence on the target
    method click {x y args}

    # Remove my bindings
    method deactivate {args}

    # Completely disable an interactor
    method disable {}

    # Continue the interaction sequence: move the mouse
    method drag {x y}

    # Re-enable an interactor
    method enable {}

    # Terminate the interaction sequence
    method release {x y}

    # Set or get the target object
    method target {args}

    # Remove a binding from the interactor to the target
    method unbind {tagOrID args}

    # Stop cascading actions to a proxy
    method uncascade {}


    ###################################################################
    ####                      public procs                         ####

    # Generate a Tk event code from parameters
    proc event {type args}

    ###################################################################
    ####                   protected methods                       ####

    # Execute a script
    protected method execute {script {x {}} {y {}} {options {}}}

    # Set or get the proxy object
    protected method proxy {args}


    ###################################################################
    ####                   protected variables                     ####

    # The tags or pictures to which this picture has been bound and arguments
    protected variable _bindings

    # The canvas on which this interactor resides.
    protected variable canvas ""

    # The slate on which this interactor resides.
    protected variable slate ""

    # The picture that this interactor is currently operating on.
    protected variable target ""

    # An interactor to forward actions to.
    protected variable proxy ""
}


#######################################################################
#### activate
#
# <i>Abstract method</i>.
# Make this interactor active. That is, set up bindings to intercept
# events that I need from now on. One of the bindings is obliged to
# call *deactivate* to remove the bindings.
#
body ::tycho::Interactor::activate {t x y args} {
    ::tycho::abstractMethod Interactor activate
}

#######################################################################
#### bind target
#
# ``Bind'' an interactor to a picture or to a tag. This creates a binding
# to the specified picture or tag so that, when the appropriate event
# occurs on that picture or a picture with the specified tags, the
# interactor is ``activated'' on the target. The
# options *-button* and *-modifiers* determine the actual events.
# By default, the mouse-press event is the one used to activate
# the interactor.
#
# Always return the bound script for this tag and options.
#
body ::tycho::Interactor::bind {t args} {
    # Remember the target and bindings
    if { ! [::info exists _bindings($t)] } {
	set _bindings($t) [list $args]
    } else {
	lappend _bindings($t) $args
    }

    # Create the default activation binding
    $slate bind $t \
	    [eval ::tycho::Interactor::event Click $args] \
	    "$this activate \[$slate find withtag current\] %x %y $args"

    # Return the script
    return "$this activate $t %x %y $args"
}

#######################################################################
#### cascade proxy
#
# Tell the interactor to forward actions to a proxy interactor
# instead of directly to the target object. This is typically used
# when further modification of the
# interaction can be provided by another interactor -- for example,
# a <a href="Stepper.html"><i>Stepper</i></a> interactor can be used
# to quantize movement within a bounded rectangular region provided by the
# <a href="Bounder.html"><i>Bounder</i></a> interactor.
#
# With no argument, this method returns the cascaded interactor;
# with a null argument, it disconnects the cascade.
#
body ::tycho::Interactor::cascade {args} {
    if { $args == "" } {
	return $proxy
    } elseif { [lindex $args 0] == "" } {
	$this proxy {}
    } else {
	set that [lindex $args 0]

	$this proxy  $that
	$that target $target
    }
}

#######################################################################
#### click
#
# Start an interaction sequence. The co-ordinates _x_ and _y_
# are the current mouse coordinates relative to the slate.
# By default, this method simply forwards a *click* action
# to the target, or to the proxy interactor if there
# is one. Sub-classes that over-ride this method should always call
# this implementation to forward the click action.
#
body ::tycho::Interactor::click {x y args} {
    if { $proxy != "" } {
	eval $proxy click $x $y $args
    } elseif { $clickprefix != "" } {
        eval $clickprefix $x $y $args
    } else {
	eval $slate moveclick $target $x $y $args
    }
}

#######################################################################
#### deactivate
#
# <i>Abstract method</i>.
# Make this interactor inactive. In other words, remove my bindings.
#
body ::tycho::Interactor::deactivate {args} {
    ::tycho::abstractMethod Interactor deactivate
}

#######################################################################
#### disable
#
# Disable an interactor. This calls unbind{} on all bindings to
# disable events, but remembers what they are so they can be
# enabled again.
#
body ::tycho::Interactor::disable {} {
    set temp [array get _bindings]
    foreach {name options} $temp {
	foreach o $options {
	    eval $this unbind $name $o
	}
    }
    array set _bindings [array get temp]
}

#######################################################################
#### drag
#
# Continue an interaction sequence with a mouse move. The co-ordinates
# _x_ and _y_ are the current mouse coordinates relative to
# the slate. By default, this method simply forwards a *drag*
# action to the target, or to the proxy interactor if there
# is one. Sub-classes that over-ride this method should always call
# this implementation to forward the drag action.
#
body ::tycho::Interactor::drag {x y} {
    if { $proxy != "" } {
	$proxy drag $x $y
    } elseif { $dragprefix != "" } {
        eval $dragprefix $x $y
    } else {
	$slate movedrag $target $x $y
    }
    execute $dragcommand $x $y
}

#######################################################################
#### enable
#
# Re-enable an interactor. This calls bind{} on all bindings to
# re-enable events.
#
body ::tycho::Interactor::enable {} {
    set temp [array get _bindings]
    unset _bindings
    foreach {tag options} $temp {
	foreach o $options {
	    eval $this bind $tag $o
	}
    }
}

#######################################################################
#### execute
# Execute a script, by applying it to the interactor, the target, and
# the current _x_ and _y_ coordinates.
#
body ::tycho::Interactor::execute {script {x {}} {y {}} {options {}}} {
    if { $script != "" } {
	uplevel \#0 ::tycho::apply \
		[list $script] $this $target $x $y $options
    }
}

#######################################################################
#### proxy
#
# Set or get the interactor to which actions
# are forwarded. If null, actions are sent straight to the target.
#
body ::tycho::Interactor::proxy {args} {
    if { $args == "" } {
	return $proxy
    } else {
	set proxy [lindex $args 0]
    }
}

#######################################################################
#### release
#
# Terminate an interaction sequence. By default, this method
# simply forwards a *release* action to the target, or to the
# proxy interactor if there is one. Sub-classes that over-ride
# this method should always call this implementation to forward
# the release action.
#
# The _x_ and _y arguments to this method should be the coordinates
# of the cursor when it is release -- they will usually (always?)
# be the same as the coordinates given to the last call to drag{}.
#
body ::tycho::Interactor::release {x y} {
    if { $proxy != "" } {
	$proxy release $x $y
    } elseif { $releaseprefix != "" } {
        eval $releaseprefix $x $y
    } else {
	$slate moverelease $target $x $y
    }
}

#######################################################################
#### target
#
# Set or get the picture that this interactor is currently
# operating on. With no argument, return the current target;
# with an argument, sets the target picture to that value. This
# method is for use only within actions -- the target is not valid
# until the interactor has been activated. If you're careful about it,
# you can use this method to have the picture being operated on
# set to a different picture to the one being moused on, which is
# very useful in some situations -- see
# <a href="Slider.html"><i>Slider</i></a> for an example.
#
body ::tycho::Interactor::target {args} {
    if { $args == "" } {
	return $target
    } else {
	set target [lindex $args 0]
	if { $proxy != "" } {
	    $proxy target $target
	}
    }
}

#######################################################################
#### unbind
#
# Remove a binding from the interactor to a picture or a tag. The
# optional arguments _must_ be the same as they were for the
# corresponding call to bind{}.
#
body ::tycho::Interactor::unbind {t args} {
    # Make sure that the interactor is deactivated first
    if { $target != "" } {
	deactivate $t
    }

    # Forget the target
    if { $_bindings($t) == $args } {
		unset _bindings($t)
    }

    # Remove the bindings
    $slate bind $t \
	    [eval ::tycho::Interactor::event Press $args] {}
}

#######################################################################
#### uncascade
#
# Stop forwarding actions to a proxy interactor.
#
body ::tycho::Interactor::uncascade {} {
    $this proxy {}
}

#######################################################################
#### event
#
# Translate an event specification into a Tk event code. The arguments
# take the form
# <p>
# <i>type</i>: specifies which button to use.
# <br>
# <i>-button button</i>: specifies which button to use.
# <br>
# <i>-key key</i>: specifies which key to use.
# <br>
# <i>-modifiers modifiers</i>: specifies any modifiers.
#
body ::tycho::Interactor::event {type args} {
    set button {}
    set modifiers {}

    ::tycho::getopt button args
    ::tycho::getopt key args
    ::tycho::getopt modifiers args

    set i ""
    switch -exact [string tolower $type] {

	"button" -
	"press" -
	"click" -
	"buttonpress" {
	    set i "ButtonPress"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"double" -
	"doubleclick" {
	    set i "Double-ButtonPress"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"triple" -
	"tripleclick" {
	    set i "Triple-ButtonPress"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"release" -
	"buttonrelease" {
	    set i "ButtonRelease"
	    if { $button != "" } {
		append i "-$button"
	    }
	}

	"drag"   -
	"move"   -
	"motion" {
	    set i "Motion"
	    if { $button != "" } {
		set i [join [list "B" $button "-" $i] ""]
	    }
	}

	"enter" {
	    set i "Enter"
	}

	"leave" {
	    set i "Leave"
	}

	"key" -
	"keypress" -
	"keydown" {
	    if { [info exists key] } {
		set i "KeyPress-$key"
	    } else {
		set i "KeyPress"
	    }
	}

	"keyup" -
	"keyrelease" {
	    if { [info exists key] } {
		set i "KeyRelease-$key"
	    } else {
		set i "KeyRelease"
	    }
	}
    }

    foreach m $modifiers {
	set i [join [list [::tycho::capitalize $m] $i] "-"]
    }

    return <$i>
}
