##########################################################################
# Version: $Id$
# Author: H. John Reekie
#
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


## Interactor
#
# The abstract superclass for all interactor classes.
#
class ::tycho::Interactor {

    constructor {} {}
    destructor {}


    ###################################################################
    ####                            options                        ####

    # The button number to switch on events. DO NOT change after
    # the interactor has been bound.
    #
    # FIXME: Check that the interactor is not bound (how?).
    public variable button 1

    # A list of event modifiers. DO NOT change after
    # the interactor has been bound.
    #
    # FIXME: Check that the interactor is not bound (how?).
    public variable modifiers {}

    # A script executed at the beginning of the interaction sequence. It
    # is typically used to set target parameters or to chain interactors.
    public variable activatecommand {}

    # A script executed at the end of the interaction sequence. It is
    # useful for assigning objects created during an interaction to
    # variables, and other clean-up stuff.
    public variable deactivatecommand {}

    # A script executed at the completion of the interactor's drag
    # method. This is useful for performing some actions on
    # an object when it is moved, etc.
    public variable dragcommand {}


    ###################################################################
    ####                         public methods                    ####

    ## ``Bind'' an interactor to a picture.
    method bind {t args} {}

    # Forward interaction commands to a proxy.
    method cascade {that} {}

    # Set or get the target object
    method target {args} {}

    # Remove a binding from the interactor to the target.
    method unbind {t} {}

    # Stop cascading interaction commands to a delegate object.
    method uncascade {} {}


    ###################################################################
    ####                   protected methods                       ####

    # Set up bindings to intercept events that I need from now on.
    protected method activate {args} {}

    # Start the interaction sequence on the target
    protected method click {x y} {}

    # Continue the interaction sequence: start a new phase
    protected method continue {} {}

    # Get the current picture on the slate.
    protected method current {} {}

    # Remove my bindings
    protected method deactivate {args} {}

    # Continue the interaction sequence: move the mouse
    protected method drag {x y} {}

    # Terminate the interaction sequence
    protected method release {} {}

    # Execute a script
    protected method execute {script x y} {}

    # Set or get the proxy object
    protected method proxy {args} {}


    ###################################################################
    ####                   protected variables                     ####

    # The canvas on which this interactor resides
    protected variable canvas ""

    # Set if the proxy and the target are the same
    private variable chained 0

    # The slate on which this interactor resides
    protected variable slate ""

    # The tag to which this interactor is currently bound
    protected variable tag ""

    # The picture to operate on
    protected variable target ""

    # The picture to forward interaction commands to
    protected variable proxy ""
}


#######################################################################
#### activate
#
# Make myself active. In other words, set up bindings to intercept
# events that I need from now on. One of the bindings is obliged to
# call deactivate to remove the bindings.
#
body ::tycho::Interactor::activate {args} {
    abstractMethod Interactor activate
}


#######################################################################
#### bind target
#
# ``Bind'' an interactor to a picture.
# This creates a binding on the specified picture so that,
# when the appropriate event occurs, the interactor is
# is ``activated'' on the target.
#
body ::tycho::Interactor::bind {t args} {
    abstractMethod Interactor bind
}


#######################################################################
#### cascade proxy
#
# Forward interaction commands to a proxy.
#
body ::tycho::Interactor::cascade {that} {
    $this proxy  $that
    $that target $target
}


#######################################################################
#### click
#
body ::tycho::Interactor::click {x y} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy click $x $y"
    } else {
	$target click $x $y
    }
}


#######################################################################
#### continue
#
body ::tycho::Interactor::continue {} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy continue"
    } else {
	$target continue
    }
}


#######################################################################
#### deactivate
#
# Make myself inactive. In other words, remove my bindings.
#
body ::tycho::Interactor::deactivate {args} {
    abstractMethod Interactor deactivate
}


#######################################################################
#### drag
#
body ::tycho::Interactor::drag {x y} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy drag $x $y"
    } else {
	$target drag $x $y
    }
    execute $dragcommand $x $y
}


#######################################################################
#### execute
# Execute a script, by applying it to the interactor, the target, and
# the current x and y coordinates.
#
body ::tycho::Interactor::execute {script x y} {
    if { $script != "" } {
	uplevel \#0 apply [list $script] $this $target $x $y
    }
}


#######################################################################
#### proxy
#
# Set or get the interactor to which interaction commands
# are forwarded. If null, commands are sent straight to the target.
#
body ::tycho::Interactor::proxy {args} {
    if { $args == "" } {
	return $proxy
    } else {
	set proxy [lindex $args 0]
    }
}


#######################################################################
#### release
#
body ::tycho::Interactor::release {} {
    if { $proxy != "" } {
	@scope [$proxy info class] "$proxy release"
    } else {
	$target release
    }
}

#######################################################################
#### target
#
# Set or get the picture that this interactor is currently
# operating on.
#
body ::tycho::Interactor::target {args} {
    if { $args == "" } {
	return $target
    } else {
	set target [lindex $args 0]
	if { $proxy != "" } {
	    $proxy target $target
	}
    }
}


#######################################################################
#### unbind target
#
# Remove a binding from the interactor to the target. In other
# disable potential interactions. This is partciularly needed
# when using interactors that bind to a slate rather to an
# individual picture: all picture-specific interactions should be
# unbound to prevent bizarre interactions in case of clicks that
# match both a picture and the slate.
#
body ::tycho::Interactor::unbind {t} {
    abstractMethod Interactor unbind
}


#######################################################################
#### uncascade
#
# Stop cascading interaction commands to a delegate object.
#
body ::tycho::Interactor::uncascade {} {
    $this proxy {}
}



#######################################################################
#### eventcode type [-button button] [-key key] [-modifiers modifiers]
#
# Translate an event specification into a Tk event code
#
proc eventcode {type args} {
    set button ""
    set modifiers {}

    getopt button args
    getopt key args
    getoption modifiers args

    set code ""
    switch -exact [string tolower $type] {

	"button" -
	"press" -
	"click" -
	"buttonpress" {
	    set code "ButtonPress"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"double" -
	"doubleclick" {
	    set code "Double-ButtonPress"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"triple" -
	"tripleclick" {
	    set code "Triple-ButtonPress"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"release" -
	"buttonrelease" {
	    set code "ButtonRelease"
	    if { $button != "" } {
		append code "-$button"
	    }
	}

	"drag"   -
	"move"   -
	"motion" {
	    set code "Motion"
	    if { $button != "" } {
		set code [join [list "B" $button "-" $code] ""]
	    }
	}

	"enter" {
	    set code "Enter"
	}

	"leave" {
	    set code "Leave"
	}

	"key" -
	"keypress" -
	"keydown" {
	    if { [info exists key] } {
		set code "KeyPress-$key"
	    } else {
		set code "KeyPress"
	    }
	}

	"keyup" -
	"keyrelease" {
	    if { [info exists key] } {
		set code "KeyRelease-$key"
	    } else {
		set code "KeyRelease"
	    }
	}
    }

    foreach m $modifiers {
	set code [join [list [capitalize $m] $code] "-"]
    }

    return <$code>
}
