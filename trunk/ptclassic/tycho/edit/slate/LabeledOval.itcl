#########################################################################
# @Version: $Id$
# @Author: John Reekie, Bilung Lee
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#  
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


# Explicitly load the superclass. I don't really know why this is
# needed, but the common arrays get upset otherwise.
namespace ::tycho {
    if { [::info classes Picture] == "" } {
	uplevel #0 {source $tychoslate/Picture.itcl}
    }
}

## LabelledOval
#
# An oval with a label in it.
#
class ::tycho::LabelledOval {
    inherit ::tycho::Picture

    # Create a new LabelledOval item
    proc construct {id canvas slate tags x0 y0 x1 y1 args}

    ###################################################################
    ####                            options                        ####

    # The fill color of the oval
    common fill

    # The outline color of the oval
    common outline

    # The text in the label
    common text

    # The width of the oval outline
    common width

    ###################################################################
    ####                         public procs                      ####

    # Set or get the LabelledOval's coordinates
    proc coords  {id canvas slate args}
    
    # Update the -fill option
    proc fill {id canvas slate fi}

    # Update the -outline option
    proc outline {id canvas slate ot}

    # Update the -text option
    proc text {id canvas slate tx}

    # Update the -width option
    proc width {id canvas slate wd}

    ###################################################################
    ####                         protected variables               ####

    # The item with the text label
    common textitem

    # The virtual "method" table
    common methodtable

    # Default values of this item's options
    common optiondefault

    # Labelled ovals are oval in shape
    common shape "oval"

    ###################################################################
    ####                       class initialization                ####

    #### Set method table
    array set methodtable [array get ::tycho::Picture::methodtable]

    set methodtable(construct) ::tycho::LabelledOval::construct
    set methodtable(coords)    ::tycho::LabelledOval::coords
    set methodtable(fill)      ::tycho::LabelledOval::fill
    set methodtable(outline)   ::tycho::LabelledOval::outline
    set methodtable(text)      ::tycho::LabelledOval::text
    set methodtable(width)     ::tycho::LabelledOval::width

    #### Set option defaults
    array set optiondefault [array get ::tycho::Picture::optiondefault]

    set optiondefault(-fill) ""
    set optiondefault(-outline) "black"
    set optiondefault(-text) ""
    set optiondefault(-width) "1"

}

##########################################################################
## fill
#
# Set the fill configuration option.
#
body ::tycho::LabelledOval::fill {id canvas slate fi} {
    set fill($id) $fi
    $canvas itemconfigure $primary($id) -fill $fill($id)
}

##########################################################################
## outline
#
# Set the outline configuration option.
#
body ::tycho::LabelledOval::outline {id canvas slate ot} {
    set outline($id) $ot
    $canvas itemconfigure $primary($id) -outline $outline($id)
    $canvas itemconfigure $textitem($id) -fill $outline($id)
}

##########################################################################
## text
#
# Set the text configuration option.
#
body ::tycho::LabelledOval::text {id canvas slate tx} {
    set text($id) $tx
    $canvas itemconfigure $textitem($id) -text $text($id)
}

##########################################################################
## width
#
# Set the width configuration option.
#
body ::tycho::LabelledOval::width {id canvas slate wd} {
    set width($id) $wd
    $canvas itemconfigure $primary($id) -width $width($id)
}


##########################################################################
#### construct
#
body ::tycho::LabelledOval::construct {id canvas slate tags x0 y0 x1 y1 args} {
    # Initialize the options
    foreach {option value} [concat [array get optiondefault] $args] {
	set [string trimleft $option -]($id) $value
    }

    # Create the primary component. This is the displayed oval.
    set primary($id) [$canvas create oval $x0 $y0 $x1 $y1 \
	    -fill $fill($id) -outline $outline($id) \
	    -tags $tags]

    # Create the text label
    set textitem($id) [$canvas create text \
	    [expr ($x0+$x1)/2] [expr ($y0+$y1)/2] \
	    -text $text($id) -tags $tags]
}

##########################################################################
#### coords
#
# Set or read the oval's coordinates
#
body ::tycho::LabelledOval::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the oval itself
    assign x0 y0 x1 y1 $args
    $canvas coords $primary($id) $x0 $y0 $x1 $y1

    # Move the text item
    $canvas coords $textitem($id) [expr ($x0+$x1)/2] [expr ($y0+$y1)/2]
}
