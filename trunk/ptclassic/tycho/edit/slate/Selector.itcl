##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Selector
#
# A _Selector_ is an interactor that selects items. It can
# be configured to select items by clicking, to toggle items in and out
# of the selection set, and to support drag-selecting. One of its
# key functions is conditional activation of interactors -- for example,
# it could activate a Stepper interactor on the selected items, or an
# Editor interactor on a single selected item. A Slate should use
# a Selector when the simple binding mechanism provided by default
# in all interactors is not sophisticated enough.
#
# When an item is selected, it is given the tag "sel". Client code
# can use this to process selected items; note, however, that this tag is
# maintained by the Selector and the Slate, and must not be added to
# or removed from items -- use the Slate's select{} method instead.
# When an item is selected, it is highighted using the Slate's
# highlight{} method.
#
# The Selector is bound to to items and tags with its bind{} method,
# as usual for interactors. The Selector's method, however, has an
# additional argument that must be either "click", indicating that
# the binding applies to selection or deselection of items by clicking
# on them; or "drag," indicating that the bindings applies to selection
# and deselection by drag-selecting. The method accepts the usual
# *-button* and *-modifiers* options, and an additional option,
# *-toggle*, which causes the binding to toggle items into and out
# of the selection.
#
# The *-dragmode* option controls the style of drag-selection: if
# it is set to "overlapping," then items are selected (or toggled)
# if they overlap the drag outline at all; if it is "enclosed,"
# then the item is selected (or toggled) only if the drag box
# entirely encloses it. The *-dragcolor* option sets the color of the
# drag outline box and is by default set to some shade of grey.
# (Should the drag box be a dashed line?)
#
# Once an item is selected, the Selector can bind or activate another
# interactor on it: in the "immediate" mode an interactor
# that is to be activated on an item or the selection as soon as it
# is selected -- this is typically used for moving items, for example.
# This "delegation" can apply either to a single item or to the whole
# selection. In "subsequent" mode, an interactor is bound
# to an item or the selection when it is selected: selecting an item
# does not activate this interactor, but subsequent mouse events on it
# _will_ activate it. This is used, for example, to change
# a selected item into a live editing mode: select the item with say
# button 1, then use say button 2 to edit it.
#
# The Selector interactor is smart enough to know when these delegate
# interactors need to be unbound. It thus should be used if a Slate is
# being used for more than simple click-and-move and click-and-select
# interactions.
#
# <p><b>Options</b>
#
# <dl>
# <dt><dd>
# <dl>
# <dt><b>-activatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>.
#
# <dt><b>-deactivatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>.
#
# <dt><b>-dragcommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>.
#
# <dt><b>-dragmode</b>
# <dd>This can be <i>overlapping</i>, in which case an item 
# is selected if the drag-selector interactor has dragged out a region 
# that overlaps its bounding box, or <i>enclosed</i>, in which case an 
# item is selected only if the drag-selector has dragged out a region 
# that fully encloses its bounding box. The default is <i>overlapping</i>.
#
# <dt><b>-dragcolor</b>
# <dd>The color of the box used to mark the current 
# drag-selection region. The default color is "grey."
#
# </dl></dl>
#
# <p><b>Bugs</b> (none)
#
# <p><b>Enhancements</b> (none)
#
# <p><b>Links</b>
#
# <ul>
# <li><a href="../internals/selecting.html">More about the
# graphical selection</a>.
# <li><a href="../internals/interacting.html">How interactors work</a>.
# <li><a href="../internals/interactors.html">Interactor classes</a>.
# <li><a href="../internals/index.html">Infrastructure contents</a>
# <li><a href="index.html">Class documentation index</a>
# </ul>
#
class ::tycho::Selector {
    inherit ::tycho::Interactor

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c

	eval configure $args

	# Create the selection handler
	::selection handle $slate "$this describe"
    }
    destructor {}

    ###################################################################
    ####                            options                        ####

    # The prefix used to forward selection clear events
    public variable clearprefix {}

    # The prefix used to forward deselection events
    public variable deselectprefix {}

    # The prefix used to forward selection events
    public variable selectprefix {}

    # The drag-select mode: "overlapping," or "enclosed"
    public variable dragmode "overlapping"

    # The color of the drag-select box
    public variable dragcolor "grey60"

    ###################################################################
    ####                         public methods                    ####

    # Activate the interactor for drag-selecting
    method activate {tag x y args}

    # Bind the selector to mouse events
    method bind {mode tagOrID args}

    # Start the drag-select interaction sequence.
    method click {x y args}

    # Remove the interactor from drag-selecting
    method deactivate {args}

    # Specify a delegate interactor to operate on selected items
    method delegate {mode howmany interactor tag args}

    # Continue the drag-select interaction sequence
    method drag {x y}

    # Process a click on an item
    method itemclick {tag x y args}

    # Notify that the selection has been changed by someone else
    method refresh {}

    # Terminate the drag-select interaction sequence
    method release {}

    # Notify that the canvas size has changed
    method resize {}

    # Remove a mouse binding
    method unbind {mode tagOrID args}

    ###################################################################
    ####                        protected methods                  ####

    # Activate delegate interactors
    protected method activateDelegates {id x y args}

    # Bind delegate interactors
    protected method bindDelegates {}

    # Clear the selection
    protected method _clear {}

    # Deselect an item
    protected method _deselect {id}

    # Select an item
    protected method _select {id}

    ###################################################################
    ####                    private variables                      ####

    # The drag box
    private variable dragbox ""

    # The delegate interactors
    private variable delegates

    # The pictures currently selected by dragging
    private variable covered ""

    # The current drag-select mode: "select" or "toggle"
    private variable selectmode

    # The origin of the drag box
    private variable xOrigin
    private variable yOrigin
}

#######################################################################
#### activate
#
# Activate the drag-selector. Apart from the standard
# -button and -modifiers options, the method also responds to the
# *-toggle* option, which causes items to toggle in and out
# of the selection.
#
body ::tycho::Selector::activate {tag x y args} {
    # Process depending on whether this is toggle mode or not
    ::tycho::getflag toggle args
    if { $toggle } {
    	set selectmode "toggle"
    } else {
    	set selectmode "select"
    }

    # Change raw coordinates to correct canvas coordinates
    # (needed if canvas has scrollbars)
    set x [$canvas canvasx $x]
    set y [$canvas canvasy $y]

    # Set the target
    $this target $tag

    # Set up the bindings to perform the moving and deactivation.
    $slate bind $tag \
	    [eval ::tycho::Interactor::event Motion $args] \
	    "$this drag %x %y; update idletasks"
    $slate bind $tag \
	    [eval ::tycho::Interactor::event Release $args] \
	    "$this release; $this deactivate $args"

    # Start the interaction sequence
    eval click $x $y $args
}

#######################################################################
#### bind
#
# Bind a selector interactor. The first argument is a "mode" flag, and
# can be either "drag" or "click". If "drag", the bindings for
# drag-selecting are made to the given object or tag. The slate
# automatically maintains an item tagged with "#background" which
# should be specified if there is no other suitable background item.
# If "click," then the
# given item or items with the given tag can be selected by clicking
# on them. Apart from the standard
# *-button* and *-modifiers* options, the method also responds to the
# *-toggle* option, which causes the clicked-on item to toggle into
# and out of the selection.
#
body ::tycho::Selector::bind {mode tag args} {
    set event [eval ::tycho::Interactor::event Click $args]

    # Select according to mode
    if { $mode == "click" } {
	# If click, remember the binding tag so we can test whether
	# an object can be drag-selected later on. (Note: any object
	# that can be click-selected can be drag-selected.)
	if { ! [::info exists _bindings($tag)] } {
	    set _bindings($tag) [list $args]
	} else {
	    lappend _bindings($tag) $args
	}
	# Make the binding
	$slate bind $tag $event "$this itemclick $tag %x %y $args"
    } else {
	# If drag mode, test that there is at least one item with
	# the background tag. If the tag is actually "#background,"
	# create an item if necessary.
	# FIXME: If the background item does not cover the whole slate,
	# drag-selecting will need to be adjusted by the origin of that
	# item. How do we fix this???
	if { $tag == "#background" } {
	    if { [$canvas find withtag $tag] == "" } {
		# Create the item
		$canvas create rectangle \
			0 0 [winfo width $slate] [winfo height $slate] \
			-outline "" \
			-tags [list # #background]
		$canvas lower #background

		# If the slate resizes, we have to resize the background too
		::bind $slate <Configure> "$this resize"
	    }
	} else {
	    if { [$canvas find withtag $tag] == "" } {
		error "Cannot find items with given background tag"
	    }
	}
    	# Make the binding
	$slate bind $tag $event "$this activate $tag %x %y $args"
    }
}

#######################################################################
#### click
#
# Start an interaction sequence.
#
body ::tycho::Selector::click {x y args} {
    if { $selectmode == "select" } {
	_clear
    }

    # Rebind delegates to make sure any active ones are made inactive
    $this bindDelegates

    # To start with, no items are covered
    # $slate search $dragmode init $this.covered $x $y $x $y
    # set covered {}

    # Create the drag box and make it "invisible"
    set xOrigin $x
    set yOrigin $y
    
    set dragbox [$slate create rect $x $y $x $y \
	    -outline $dragcolor \
	    -tags "#"]
}

#######################################################################
#### deactivate
#
body ::tycho::Selector::deactivate {args} {
    # Remove bindings
    $slate bind $target \
	    [eval ::tycho::Interactor::event Motion $args] {}
    $slate bind $target \
	    [eval ::tycho::Interactor::event Release $args] {}

    # Update the screen. This appears to be necessary to ensure that
    # the "current" tag is updated correctly before processing another
    # event.
    update idletasks
}

#######################################################################
#### delegate
#
body ::tycho::Selector::delegate {mode howmany interactor tag args} {
	set key $mode,$howmany,$tag,$args
    if { [::info exists delegates($key)] } {
		eval lappend tag [lindex $delegates($key) 1]
    } else {
    	set tag [list $tag]
    }    
    set delegates($key) [list $interactor $tag $args]
    return
}

#######################################################################
#### drag
#
# Continue an interaction sequence with a mouse move. The behaviour
# depends on the current "mode" of the selector: in "select" mode,
# the drag box is moved and any newly covered items are selected;
# In "toggle" mode, an item that becomes covered or uncovered is
# toggled into or out of the selection. Whether an item
# is covered depends on the *-dragmode* option: if "overlapping" then
# an item is covered if the drag box overlaps it at all;
# if "enclosed" then the item is covered if the drag box
# entirely encloses it.
#
body ::tycho::Selector::drag {x y} {
    # Change raw coordinates to correct canvas coordinates
    # (needed if canvas has scrollbars)
    set x [$canvas canvasx $x]
    set y [$canvas canvasy $y]

    # Resize the drag box
    $slate coords $dragbox $xOrigin $yOrigin $x $y

    # Get the box again in "correct" coordinates. This is needed
    # because it may be that x < xOrigin or y < yOrigin.
    set coords [$slate coords $dragbox]

    # The bindings to this selector
    set bindings [array names _bindings]

    # Get the newly covered and uncovered items
    set cu [eval $slate search $dragmode $this.covered $coords]
    set covered [lindex $cu 0]
    set uncovered [lindex $cu 1]

    # Process according to selection mode
    if { $selectmode == "select" } {
	# Add newly covered selectable objects. An object
	# is selectable if its name is in the binding set, or if
	# it has a tag that is in the binding set
	foreach {o tags} $covered {
	    if { [::tycho::lmember $bindings $o] \
		    || ! [::tycho::ldisjoint $bindings $tags] } {
		# Select it
		_select $o
	    }
	}
    	# Deselect selectable objects that are no longer covered
	foreach {o tags} $uncovered {
	    if { [::tycho::lmember $bindings $o] \
		    || ! [::tycho::ldisjoint $bindings $tags] } {
		# Deselect it
		_deselect $o
	    }
    	}
    } else {
	# Toggle any selectable objects that have changed state
    	foreach {o tags} [concat $covered $uncovered] {
	    # An object is selectable if its name is in the binding
	    # set or if it has a tag in the binding set.
	    if { [::tycho::lmember $bindings $o] \
		    || ! [::tycho::ldisjoint $bindings $tags] } {
		# Test if already selected or not, and act accordingly
		if { [$slate hastag $o "sel"] } {
		    # Deselect it
		    _deselect $o
		} else {
		    # Select it
		    _select $o
		}
	    }
	}
    }

    # Update the covered pictures for next time
    # set covered $candidates

    # Execute the client-specified update command
    execute $dragcommand $x $y
}

#######################################################################
#### itemclick
#
# Process a click on an item.
#
body ::tycho::Selector::itemclick {tag x y args} {
    # Get the current object
    set current [$slate find withtag current]

    # Process depending on whether this is toggle mode or not
    ::tycho::getflag toggle args
    if { ! $toggle } {
	# Select it if it isn't already
	if { ! [$slate hastag $current "sel"] } {
	    # Deselect all currently selected objects
	    _clear

	    # Select and highlight the current object
	    _select $current
	}

	# Activate the delegate if there is one
	eval $this activateDelegates $current $x $y $args

    } else {
	# Toggle the state of the clicked-on item
	if { [$slate hastag $current "sel"] } {
	    # The item is selected, so deselect it
	    _deselect $current
	} else {
	    # The item is not selected. Select and highlight it
	    _select $current

	    # Activate the delegate if there is one
	    eval $this activateDelegates $current $x $y $args
	}
    }
    # Adjust delegate bindings
    $this bindDelegates
}

#######################################################################
#### release
#
# Terminate an interaction sequence.
#
body ::tycho::Selector::release {} {
    # Delete the drag box
    $slate delete $dragbox

    # Finish the search
    $slate dtag $this.covered
    # $slate search $dragmode done $this.covered 0 0 0 0

    # Update delegate bindings for new selection set. (Note that
    # this is not done in drag{}, since the bindings couldn't be
    # be activated anyway because the mouse is still moving.)
    $this bindDelegates
}

#######################################################################
#### resize
#
# Notify that the size of the canvas has changed.
#
body ::tycho::Selector::resize {} {
    # First test the scroll region: if not null, use that as the
    # size of the background item
    set region [$slate cget -scrollregion]
    if { $region != "" } {
	eval $slate coords #background $region
    } else {
	# Otherwise use the displayed size
	$slate coords #background 0 0 \
		[winfo width $slate] \
		[winfo height $slate]
    }
}

#######################################################################
#### unbind
#
# Remove the selector from the given background item or tag.
#
body ::tycho::Selector::unbind {mode tag args} {
    set event [eval ::tycho::Interactor::event Click $args]

    if { $mode == "click" } {
	# FIXME
    	if { $_bindings($tag) == $args } {
	    unset _bindings($tag)
    	}
    	$slate bind $tag $event {}
    } else {
    	$slate bind $tag $event {}
    }
}

#######################################################################
#### refresh
#
# The selection has been changed by someone else. Update the
# delegate bindings.
#
body ::tycho::Selector::refresh {} {
    bindDelegates
}

#####################################################################
#####################################################################
####                     protected methods                       ####


#######################################################################
#### _clear
#
body ::tycho::Selector::_clear {} {
    if { $clearprefix == "" } {
	$slate select clear
    } else {
	eval $clearprefix
    }
}

#######################################################################
#### _deselect
#
body ::tycho::Selector::_deselect {id} {
    if { $deselectprefix == "" } {
	$slate select _remove $id
    } else {
	eval $deselectprefix $id
    }
}

#######################################################################
#### _select
#
body ::tycho::Selector::_select {id} {
    if { $selectprefix == "" } {
	$slate select _add $id
    } else {
	eval $selectprefix $id
    }
}

#######################################################################
#### activateDelegates
#
# Activate delegate interactors when a new item is added to
# the selection. This method is called whenever a new item
# is added to the selection by a mouse click.
#
body ::tycho::Selector::activateDelegates {id x y args} {
    set selection [$slate find withtag "sel"]
    set selcount [llength $selection]
    
    # Process interactors that operate on a single item only
    if { $selcount == 1 } { 
	foreach index [array names delegates immediate,single,*] {
	    # Activate the delegate interactor if that item is in the tags
	    # or if it has a tag that is in the tags
	    ::tycho::assign interactor tags options $delegates($index)
	    if { $selcount == 1 } {
		if { $args == $options } {
		    if { [::tycho::lmember $tags $id] \
			    || ! [::tycho::ldisjoint \
			    $tags [$slate gettags $id]] } {
			# Activate it; it will deactivate automatically
			eval $interactor activate $id $options
		    }
		}
	    }
	}
    }
    # Process interactors that operate on the whole selection
    foreach index [array names delegates immediate,selected,*] {
	# Activate a delegate interactor on the whole selection if
	# every item is either in the interactor's tags or if it
	# has a tag that is.
	::tycho::assign interactor tags options $delegates($index)
	if { $args == $options } {
	    set ok 1
	    foreach item $selection {
		if { ! [::tycho::lmember $tags $item] \
			&& [::tycho::ldisjoint \
			$tags [$slate gettags $item]] } {
		    set ok 0
		    break
		}
	    }
	    if { $ok } {
		# Activate it; it will deactivate automatically
		eval $interactor activate "sel" $x $y $options
	    }
	}
    }
}

#######################################################################
#### bindDelegates
#
# Bind or unbind delegate interactors in "subsequent" mode. This
# method is called whenever the selection has changed by means other
# than direct mouse clicks on an item.
#
# FIXME: Binding to a delegate means we have to unbind the selector
# from that item!
#
body ::tycho::Selector::bindDelegates {} {
    set selection [$slate find withtag "sel"]
    set selcount [llength $selection]

    # Process interactors that operate on a single item only
    foreach index [array names delegates subsequent,single,*] {
	::tycho::assign interactor tags options $delegates($index)

	if { $selcount == 1 } {
	    set id [lindex $selection 0]
	    # If there is only one item and it's in that interactor's
	    # tags or has a tag in that interactor's tags, bind it
	    if { [::tycho::lmember $tags $id] \
		    || ! [::tycho::ldisjoint $tags [$slate gettags $id]] } {
		# Bind it
		eval $interactor bind $id $options
		continue
	    }
	}
	# Make sure it's not bound
	set target [$interactor target]
	if { $target != "" } {
	    eval $interactor unbind $target $options
	}
    }

    # Process interactors that operate on the whole selection
    foreach index [array names delegates subsequent,selected,*] {
	# Activate a delegate interactor on the whole selection if
	# every item is either in the interactor's tags or if it
	# has a tag that is.
	::tycho::assign interactor tags options $delegates($index)
	set ok 1
	foreach item $selection {
	    if { ! [::tycho::lmember $tags $item] \
		    && [::tycho::ldisjoint $tags [$slate gettags $item]] } {
		set ok 0
		break
	    }
	}
	if { $ok } {
	    # Bind it
	    eval $interactor bind "sel" $options
	} else {
	    # Make sure it's not bound
	    catch {eval $interactor unbind "sel" $options}
	}
    }
}
