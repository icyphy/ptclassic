##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#                                                         COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Shape
#
# The superclass of the shape class hierarchy. The Shape
# classes are, like the ComplexItem class, really just collections
# of procedures with shared data that use item IDs to "simulate"
# real objects.
#
class ::tycho::Shape {
    inherit ::tycho::Uninstantiable

    ###################################################################
    ####                         public procs                      ####

    # Get one or more aspects of an item
    proc aspect {id canvas slate args}

    # Get a compass point transformed in some way
    proc compass {compass transformation}

    # Attach a set of grapples to an item
    proc grapple {id canvas slate interactor args}

    # Reshape one or more aspects of an item
    proc reshape {id canvas slate x y args}

    # Start a reshape interaction sequence
    proc reshapeclick {id canvas slate x y args}

    # Continue a reshape interaction sequence
    proc reshapedrag {id canvas slate x y}

    # Terminate a reshape interaction sequence
    proc reshaperelease {id canvas slate x y}

    # Start a move interaction sequence
    proc moveclick {id canvas slate x y args}

    # Continue a move interaction sequence
    proc movedrag {id canvas slate x y}

    # Terminate a move interaction sequence
    proc moverelease {id canvas slate x y}

    ###################################################################
    ####                  protected variables                      ####

    # Storage for temporary variables
    protected common scratch

    ###################################################################
    ####                   private variables                       ####

    # Compass rotation
    private common compassTransformation
    array set compassTransformation {
    	 cw,n e  cw,ne se  cw,e s  cw,se sw  cw,s w  cw,sw nw  cw,w n  cw,nw ne
    	ccw,n s ccw,ne sw ccw,e w ccw,se sw ccw,s n ccw,sw ne ccw,w e ccw,nw se
    	rev,n w rev,ne nw rev,e n rev,se ne rev,s e rev,sw se rev,w s rev,nw sw
    	 lr,n n  lr,ne nw  lr,e w  lr,se sw  lr,s s  lr,sw se  lr,w e  lr,nw ne
    	 ud,n s  ud,ne se  ud,e e  ud,se ne  ud,s n  ud,sw nw  ud,w w  ud,nw sw
    	   ,n n    ,ne ne    ,e e    ,se se    ,s s    ,sw sw    ,w w    ,nw nw
    }
}

#######################################################################
#### aspect
#
# Return the value of one or more aspects. Valid aspects in this
# class are "center."
#
body ::tycho::Shape::aspect {id canvas slate args} {
    set coords [$slate bbox $id]

    switch -exact [lindex $args 0] {
	"c" -
	"center" {
	    return [list \
		    [expr ([lindex $coords 0] + [lindex $coords 2]) / 2] \
		    [expr ([lindex $coords 1] + [lindex $coords 3]) / 2]]
	}
	default {
	    error "Invalid aspect [lindex $args 0] of $id"
	}
    }
}

#######################################################################
#### compass
#
# Change a compass coordinate into a related one. Valid values
# of the second argument are:
#
# <ul>
# <li><b>cw</b>: Rotate the point 90 degrees clockwise
# <li><b>ccw</b>: Rotate the point 90 degrees counter-clockwise
# <li><b>rev</b>: Rotate the point 180 degrees
# <li><b>lr</b>: Reflect the point about the vertical axis
# <li><b>ud</b>: Reflect the point about the horizontal axis
# <li>blank string: Return the point.
# </ul>
# 
body ::tycho::Shape::compass {compass transformation} {
    return $compassTransformation($transformation,$compass)
}

#######################################################################
#### grapple
#
# This procedure must be implemented by Shape subclasses.
#
body ::tycho::Shape::grapple {id canvas slate interactor args} {
    error "Abstract procedure"
}

#######################################################################
#### moveclick
#
body ::tycho::Shape::moveclick {id canvas slate x y args} {
	getflag ghost args
	
    # Remember where we started
    set scratch($id.prevX) $x
    set scratch($id.prevY) $y

    # If the -ghost option is specified, create the ghost
    if { [lsearch -exact $args -ghost] != -1 } {
		set scratch($id.ghost) [$slate call $id ghost]
		set scratch($id.start) [$slate coords $scratch($id.ghost)]
    }
}

#######################################################################
#### movedrag
#
body ::tycho::Shape::movedrag {id canvas slate x y} {
    # If there's a ghost, move it. else move the complex item.
    if { [::info exists scratch($id.ghost)] } {
		set movethis $scratch($id.ghost)
    } else {
		set movethis $id
    }

    # Move is a delta operation.
    $slate move $movethis \
	    [expr $x - $scratch($id.prevX)] \
	    [expr $y - $scratch($id.prevY)]

    # Remember the new position
    set scratch($id.prevX) $x
    set scratch($id.prevY) $y
}
	
#######################################################################
#### moverelease
#
body ::tycho::Shape::moverelease {id canvas slate x y} {
    # If there's a ghost, move the complex item to its
    # position and then delete it
    if { [::info exists scratch($id.ghost)] } {
		assign x y $scratch($id.start)
		assign a b [$this coords $scratch($id.ghost)]

		$slate move $id [expr $a - $x] [expr $b - $y]
		$slate delete $scratch($id.ghost)

		unset scratch($id.ghost)
		unset scratch($id.start)
	}

    # Clean up
    unset scratch($id.prevX)
    unset scratch($id.prevY)
}

#######################################################################
#### reshape
#
# This procedure must be implemented by Shape subclasses.
#
body ::tycho::Shape::reshape {id canvas slate x y args} {
    error "Abstract procedure"
}

#######################################################################
#### reshapeclick
#
# Start a click-drag-release sequence for reshaping an item. This
# assumes that a release action has been called since previous
# drag actions. The optional -ghost flag indicates that the picture
# is to be reshaped by dragging a ``ghost'' of the picture. One or
# more aspects can be specified.
#
# This procedure must be implemented by Shape subclasses.
#
body ::tycho::Shape::reshapeclick {id canvas slate x y args} {
    error "Abstract procedure"
}

#######################################################################
#### reshapedrag
#
# Reshape the aspects previously specified by click{}
# to the specified value. Aspects are modified by the relevent
# x or y coordinate only.
# Drag assumes that click has already been called on the picture,
# and will function unpredictably if not.
#
# This procedure must be implemented by Shape subclasses.
#
body ::tycho::Shape::reshapedrag {id canvas slate x y} {
    error "Abstract procedure"
}

#######################################################################
#### reshaperelease
#
# Terminate a click-drag-release sequence. If a ghost is
# being reshaped, then the picture is reshaped to the shape of the ghost
# and the ghost is deleted. Note: A release must be used to terminate
# the click-drag-release sequence, even if not ghosting the picture.
#
# This procedure must be implemented by Shape subclasses.
#
body ::tycho::Shape::reshaperelease {id canvas slate x y} {
    error "Abstract procedure"
}
