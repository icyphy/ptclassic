##########################################################################
# Version: $Id$
# Author: H. John Reekie
#
# Copyright (c)	%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is	hereby granted,	without	written	agreement and without
# license or royalty fees, to use, copy, modify, and distribute	this
# software and its documentation for any purpose, provided that	the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
# 
# IN NO	EVENT SHALL THE	UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT,	SPECIAL, INCIDENTAL, OR	CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN	ADVISED	OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES	OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.	THE SOFTWARE
# PROVIDED HEREUNDER IS	ON AN "AS IS" BASIS, AND THE UNIVERSITY	OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,	UPDATES,
# ENHANCEMENTS,	OR MODIFICATIONS.
#							  COPYRIGHTENDKEY
##########################################################################


## Solid
#
# A 3D polygon. This accepts all relief options supported by the 4D
# parent class: flat, raised, sunken, ridge, and groove. Because
# of some funnies with Tk's coordinates, the last two don't work too
# well with sharp angles ( < 25 or so), but with moderate angles
# they look fine.
#
class ::tycho::Solid {
    inherit ::tycho::ThreeD

    ## Options
    #
    public variable smooth off {
	$canvas itemconfigure $component(primary) -smooth $smooth
    }


    ## constructor
    #
    constructor	{args} {}


    ###################################################################
    ## Public methods
    
    method coords    {args}      {}
    method transform {mode args} {}

    ###################################################################
    ## Private methods

    method _answer {option} {}

    private method _borderwidth {args} {}
    private method _fill        {args} {}
    private method _relief      {args} {}

    private method adjust {name shade coords} {}
}



## _answer
#
# Supply an answer to some query.
#
body ::tycho::Solid::_answer {option} {
    switch -exact $option {
	"shape" {
	    return "polygon"
	}
	"ghost" {
	    eval $canvas create polygon \
		    [$this coords] \
		    {-outline grey -fill "" -smooth $smooth}
	}
	default {
	    return -1
	}
    }
}


## _borderwidth
#
# Update the -borderwidth configuration option. Just cause a redraw
# by calling the coords{} method with the current coordinates.
#
# This could be made a lot faster by duplicating code.
#
body ::tycho::Solid::_borderwidth {args} {
    eval $this coords [$canvas coords $component(primary)]
}


## _fill
#
# Update the -fill configuration option. Just cause a redraw
# by calling the coords{} method with the current coordinates.
#
# This could be made a lot faster by duplicating code.
#
body ::tycho::Solid::_fill {args} {
    eval $this coords [$canvas coords $component(primary)]
}


## _relief
#
# Update the -relief configuration option.
#
body ::tycho::Solid::_relief {args} {
    #
    # If the relief has changed to ridge or groove, then we
    # have to create the inside border polygons, and move
    # the surface if it exists.
    #
    if { ($relief == "ridge" || $relief == "groove") \
	    && ! [info exists component(notlit)] } {

	set light [$colorObject light]
	set dark  [$colorObject dark]

	if { $relief == "groove" } {
	    set light $dark
	    set dark [$colorObject light]
	}

	set coords [$canvas coords $component(primary)]
	assign inside lit shaded \
		[polyBorders 45 -135 $coords $borderwidth]

	assign inside notlit notshaded \
		[polyBorders 45 -135 $inside $borderwidth]

	set component(notlit)    {}
	set component(notshaded) {}

	adjust "notshaded" $light $notshaded
	adjust "notlit"    $dark  $notlit

	if { [info exists component(surface)] } {
	    eval $canvas coords $component(surface) $inside
	}
    }

    #
    # If the relief has changed _from_ ridge or groove, then we
    # delete the inside border polygons and move the surface.
    #
    if { $relief != "ridge" && $relief != "groove" \
	    && [info exists component(notlit)] } {
	
	$this component delete "notlit"
	$this component delete "notshaded"

	if { [info exists component(surface)] } {
	    set coords [$canvas coords $component(primary)]
	    assign inside lit shaded \
		    [polyBorders 45 -135 $coords $borderwidth]
	    
	    eval $canvas coords $component(surface) $inside
	}
    }
}


## adjust name shade coords
#
# Adjust a list of polygons to a new set of coordinates
#
body ::tycho::Solid::adjust {name shade coords} {

    #
    # Move the components to their new locations.
    #
    foreach p $component($name) c $coords {
	eval $canvas coords $p $c
    }

    #
    # If there weren't enough polygons, create some more. Lower the
    # new components to the same level as the primary component.
    #
    if { [llength $coords] > [llength $component($name)] } {
	set moreneeded [ldrop $coords [llength $component($name)]]
	foreach c $moreneeded {
	    set p [eval $this component create $name polygon $c -fill $shade]
	    $canvas lower $p $component(primary)
	}
    }

    #
    # If there were too many polygons, delete the leftovers
    #
    if { [llength $coords] < [llength $component($name)] } {
	set leftovers [ldrop $component($name) [llength $coords]]
	set component($name) [ltake $component($name) [llength $coords]]
	foreach p $leftovers {
	    $slate deregisterItem $p
	    $canvas delete $p
	}
    }
}


## constructor
#
body ::tycho::Solid::constructor {{s {}} {c {}} args} {
    getalloptions options args

    #
    # Set the slate and canvas variables.
    #
    set slate  $s
    set canvas $c

    #
    # Extract the -color option value if there is one.
    # This is a ``speed'' hack, so that objects are already
    # created with the right color.
    #
    getopt color options
    set colorObject [::tycho::Shades::new $color]

    #
    # Override defaults: shape is segmented
    #
    set shape "segmented"

    #
    # Set the traces on configuration options. If borderwidth is
    # changed, update the fill as well to resize the surface item.
    #
    trace variable borderwidth w [code $this _borderwidth]
    trace variable borderwidth w [code $this _fill]
    trace variable relief      w [code $this _relief]
    trace variable fill        w [code $this _fill]

    #
    # Add some answers.
    #
    lappend answers [info context]

    #
    # Create the primary component for the outline coordinates
    #
    eval $this component create "primary" polygon $args {-fill ""}

    #
    # Create the surface component with null size
    #
    $this component create "surface" polygon 0 0 0 0 0 0 \
	    -fill [$colorObject $fill]

    #
    # Create the borders using the coords{} method. Set the list and
    # shaded components to null to save work in coords{}.
    #
    set component(lit) {}
    set component(shaded) {}

    eval $this coords $args

    #
    # Configure option variables
    #
    eval configure $options
}


## coords
## coords {coord}+
#
# Query or set the coordinates of the object. When reading coordinates,
# the last two values need to be lopped off the list so that
# polygons work correctly with the Segmented shape class.
#
body ::tycho::Solid::coords {args} {
    if { $args == "" } {
	set coords [$canvas coords $component(primary)]
	set coords [lreplace $coords end end]
	set coords [lreplace $coords end end]
	return $coords
    }

    #
    # Move the polygon that marks the solid's coordinates. Read the
    # coords again to make sure that we have the duplicated start/end
    # point.
    #
    eval $canvas coords $component(primary) $args
    set coords [$canvas coords $component(primary)]

    #
    # Get the coordinates of the borders and the surface component
    #
    assign inside lit shaded [polyBorders 45 -135 $coords $borderwidth]

    #
    # Adjust the positions of the border polygons, creating and
    # deleting them as necessary.
    #
    adjust "lit"    [$colorObject light] $lit
    adjust "shaded" [$colorObject dark]  $shaded

    #
    # If the relief is "groove" or "ridge," adjust the inner borders
    # as well. Note that _inside_ is over-written with new values.
    #
    if { $relief == "ridge" || $relief == "groove" } {
	assign inside notlit notshaded \
		[polyBorders 45 -135 $inside $borderwidth]

	adjust "notshaded" [$colorObject light] $notshaded
	adjust "notlit"    [$colorObject dark]  $notlit
    }

    #
    # Change the co-ordinates of the surface component, if it exists.
    #
    if { [info exists component(surface)] } {
	eval $canvas coords $component(surface) $inside
    }

    #
    # Notify that coordinates have changed
    #
    # notify "coords"
}


## transform mode args
#
# Transformation on a solid has to be overridden to make sure that
# the "direction" in which the coordinates run remains correct.
# Without this overriding, the solid will change relief from
# "raised" to "sunken," or vice versa.
#
body ::tycho::Solid::transform {mode args} {
    if { $mode == "flip" || $mode == "flop" } {
	eval $this coords [lineReverse [$this coords]]
    }
    eval [$this shape] transform $mode $args
}
