##########################################################################
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### Editor
#
# An interactor for "editing" items. This provides the basic functionality
# needed for labels and short text fields. More complex editing
# interactions can be built by cascading editors.
#
# <p> The Tk canvas (and thus the Slate) provides no in-built editing
# capabilities for text. The <i>Editor</i> interactor encapsulates the 
# code needed by the Slate to support basic interactive editing on text 
# items. Note that this is intended only for editing small
# items like labels in diagrams.
#
# <p> The <i>Editor</i> interactor adds no configuration options to
# those inherited from the <a href="Interactor.html">Interactor</a>
# superclass.
#
# <p> The interactor is attached to one or a set of Slate items with the 
# <code>bind</code> command (as usual).  Once activated, the insertion 
# cursor remains in the text item until the <code>stop</code> method is 
# called.  How this method is called depends on the client -- it will 
# usually be by the user clicking on a different object.  (The 
# usual click-drag-release sequence <i>is</i> used in this interactor, but 
# to drag-select text.)
#
# <p> An item which is the target of an editor interactor must respond to 
# the following methods (see the documentation for the Tk canvas): 
# <code>dchars</code>, <code>focus</code>, <code>icursor</code>, 
# <code>index</code>, <code>insert</code>, and <code>select</code>.
#
# <p> While an item has the insertion cursor, the text can be edited as 
# follows:
#
# <ul>
# <li>Typing deletes the selection (if any) and inserts text;
# <li>Left and right cursor keys move one character, control-left and
# control-right move a word;
# <li>Text can be drag-selected with the mouse; double-click and dragging
# selects words at a time;
# <li>Holding shift while pressing cursor keys extends the selection.
# </ul>
#
# <p><b>Options</b>
#
# <dl>
# <dt><dd>
# <dl>
# <dt><b>-activatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>.
#
# <dt><b>-deactivatecommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>.
#
# <dt><b>-dragcommand</b>
# <dd>See <a href="Interactor.html">Interactor</a>.
#
# </dl></dl>
#
# <p><b>Bugs</b>
#
# The bindings used by this editor will interfere with
# bindings to the Slate if they overlap.
#
# <p><b>Enhancements</b>
#
# <ol>
# <li>This interactor should probably be renamed
# <i>LineEditor</i>.
# <li>Double-click and dragging does not quite work: 
# the selection moves from the start of the first selected word, not 
# from the farthest end.
# <li>The up and down cursors should be made to 
# work in multi-line items.
# <li>The cursor should change to the insertion cursor while
# over an item being edited.
# </ol>
#
# <p><b>Links</b>
# 
# <ul>
# <li><a href="../internals/interacting.html">How interactors work</a>.
# <li><a href="../internals/interactors.html">Interactor classes</a>.
# <li><a href="../internals/index.html">Infrastructure contents</a>
# <li><a href="index.html">Class documentation index</a>
# </ul>
#
class ::tycho::Editor {
    inherit ::tycho::Interactor

    constructor {{s {}} {c {}} args} {
	set slate $s
	set canvas $c

	eval configure $args
    }
    destructor {}


    ###################################################################
    ####                         public methods                    ####

    # Attach the interactor to the current picture
    method activate {t x y args}

    # Click on a position in the text item.
    method click {x y args}

    # Double-click on the text item.
    method dbclick {}

    # Remove the interactor from the current picture
    method deactivate {args}

    # Drag the mouse to select.
    method drag {x y}

    # Insert a key
    method key {key keysym state args}

    # Release the mouse from the item.
    method release {}

    # Stop editing an item
    method stop {}

    ###################################################################
    ####                        protected methods                  ####

    # Adjust the cursor position
    protected method icursor {mode}

    # Adjust the selection in the text item
    protected method select {mode args}

    ###################################################################
    ####                        private  variables                 ####

    # The "anchor" of the selection
    protected variable anchor

    # A flag to indicate word-dragging mode
    protected variable wordmode 0
}

#######################################################################
#### activate target x y
#
# Activate the interactor on a picture object.
# 
body ::tycho::Editor::activate {t x y args} {
    # If already editing another item, deactivate from it first
    if { $target != "" } {
	deactivate
    }

    # Set the target. The client can modify its options later
    # with -activatecommand if desired. If the target argument is
    # in fact a tag, get the current picture from the slate.
    if { [string match {_*} $t] || [string match {[0-9]*} $t] } {
	target $t
    } else {
	target [$slate find withtag current]
    }

    # Set the focus to the slate
    $slate focusin

    # Focus on the target
    $slate focus $target

    # Create the binding to insert keys
    # FIXME: Can this be bound to the individual item?
    ::bind $slate <Key> "$this key %A %K %s $args"

    # Execute the user-specified activation command
    execute $activatecommand $x $y $args

    # Set up the mouse bindings for drag-selecting. This uses
    # the default button (button  1, and any other button that
    # has no more specific binding), NOT the button used to activate this
    # interactor. This could be parameterised with an option, but
    # I doubt it's necessary.
    $slate bind $target \
	    [eval ::tycho::Interactor::event Click] \
	    [list @scope [info class] "$this click %x %y $args"]

    # Also a binding to detect a double-click, for word-dragging
    $slate bind $target \
	    [eval ::tycho::Interactor::event DoubleClick] \
	    [list @scope [info class] "$this dbclick"]

    # Start the interaction sequence
    eval click $x $y $args
}

#######################################################################
#### click
#
# Click on a text item. This moves the insertion cursor to the
# point under the mouse. We assume that the item already has the
# focus and the key insertion bindings.
#
body ::tycho::Editor::click {x y args} {
    # Clear the selection
    select clear

    # Move the insertion cursor
    $slate icursor $target @$x,$y

    # Create the motion events
    $slate bind $target \
	    [eval ::tycho::Interactor::event Motion] \
	    [list @scope [info class] "$this drag %x %y"]
    $slate bind $target \
	    [eval ::tycho::Interactor::event Release] \
	    [list @scope [info class] "$this release"]

    # Forward to a proxy if there is one
    if { $proxy != "" } {
	@scope [$proxy info class] "eval $proxy click $x $y $args"
    }
}

#######################################################################
#### dbclick
#
# Double-click on a text item. This selects the word underneath
# and sets the mode for word-dragging.
#
body ::tycho::Editor::dbclick {} {
    # Set this for word-mode dragging
    set wordmode 1

    # Select the word underneath the  cursor
    icursor -word
    select adjust +char

    # For some reason, it is necessary to make the motion bindings again...
    $slate bind $target \
	    [eval ::tycho::Interactor::event Motion] \
	    [list @scope [info class] "$this drag %x %y"]
    $slate bind $target \
	    [eval ::tycho::Interactor::event Release] \
	    [list @scope [info class] "$this release"]
}

#######################################################################
#### deactivate
#
# Deactivate the interactor from the target. This method must be called
# by the script bound to the release event.
# 
body ::tycho::Editor::deactivate {args} {
    # Remove the focus
    $slate focus ""
    ::bind $slate <Key> {}

    # Clear the selection
    select clear

    # Remove the text drag-selection bindings
    $slate bind $target \
	    [eval ::tycho::Interactor::event Click] {}
    $slate bind $target \
	    [eval ::tycho::Interactor::event DoubleClick] {}

    # Reset the original activation bindings in case they changed
    $this enable

    # Call the deactivation command. This must follow the above bindings!
    execute $deactivatecommand

    # Clear the target
    target {}
}

#######################################################################
#### drag
#
# Drag-select a text region.
#
body ::tycho::Editor::drag {x y} {
    select adjust @$x,$y

    # Forward to a proxy if there is one
    if { $proxy != "" } {
	@scope [$proxy info class] "eval $proxy drag $x $y"
    }
    # execute $dragcommand $x $y
}

#######################################################################
#### icursor
#
# Manipulate the insertion cursor in useful ways. This proc only
# works correctly if there is no selection. (Use the select{}
# proc if there is a selection.)
#
# <ul>
# <li><b>start</b>: Move to the start of the item
# <li><b>end</b>: Move to the end of the item
# <li><b>+char</b>: Move forward one character
# <li><b>-char</b>: Move back one character
# <li><b>+word</b>: Move forward one word
# <li><b>-word</b>: Move back one word
# <li><i>index</i>: Move to <i>index</i>
# </ul>
#
body ::tycho::Editor::icursor {mode} {
    switch -exact /$mode {
	"/start" {
	    $slate icursor $target 0
	}
	"/end" {
	    $slate icursor $target end
	}
	"/+char" {
	    $slate icursor $target [expr [$slate index $target insert] + 1]
	}
	"/-char" {
	    $slate icursor $target [expr [$slate index $target insert] - 1]
	}
	"/+word" {
	    set str [$slate itemcget $target -text]
	    $slate icursor $target [::tycho::wordright $str \
		    [$slate index $target insert]]
	}
	"/-word" {
	    set str [$slate itemcget $target -text]
	    $slate icursor $target [::tycho::wordleft $str \
		    [$slate index $target insert]]
	}
	default {
	    $slate icursor $target $mode
	}
    }
}

#######################################################################
#### key
#
# Process a key press. If the key is a return, terminate the
# interaction.
#
body ::tycho::Editor::key {key keysym state args} {

    # Get flags to indicate modifiers
    set shift   [expr $state & 1]
    set control [expr $state & 4]
    set meta    [expr $state & 8] 
    set alt     [expr $state & 64]

    # Process control keys
    if { $control } {
	switch -exact $keysym {
	    "a" {
		select clear
		icursor 0
	    }
	    "e" {
		select clear
		icursor end
	    }
	    "d" {
		select delete
		$slate dchars $target insert
	    }
	    "Left" {
		# Move the cursor. Adjust the selection if shift.
		if { $shift } {
		    select adjust -word
		} else {
		    select clear
		    icursor -word
		}
	    }
	    "Right" {
		# Move the cursor. Adjust the selection if shift.
		if { $shift } {
		    select adjust +word
		} else {
		    select clear
		    icursor +word
		}
	    }
	}
    } elseif { $meta || $alt } {
	return
    } else {
	# Process regular keys. We get an event even for control
	# keys and the like, so we have to filter them out...
	switch -exact $keysym {
	    "Control_L" -
	    "Control_R" -
	    "Shift_L" -
	    "Shift_R" -
	    "Alt_L" -
	    "Alt_R" -
	    "Meta_L" -
	    "Meta_R" -
	    "Caps_Lock" -
	    "Multi_key" -
	    "Mode_switch" -
	    "F1" -
	    "F2" -
	    "F3" -
	    "F4" -
	    "F5" -
	    "F6" -
	    "F7" -
	    "F8" -
	    "F9" -
	    "F10" -
	    "F11" -
	    "F12" -
	    "Prior" -
	    "Next" -
	    "Up" -
	    "Down" -
	    "Pause" -
	    "KP_Insert" -
	    "KP_Prior" -
	    "KP_Next" -
	    "KP_End" -
	    "KP_Up" -
	    "KP_Right" -
	    "KP_Down" -
	    "KP_Left" -
	    "KP_Home" {
 		return
	    }
	    "Escape" {
		eval $this deactivate $args
	    }
	    "Return" {
		# If there's a selection, then delete it
		select delete

		# Insert the character
		$slate insert $target insert "\n"
	    }
	    "BackSpace" {
		# If there's a selection then delete it
		if { [select exists] } {
		    select delete
		} else {
		    # If not, then delete the previous character
		    icursor -char
		    $slate dchars $target insert
		}
	    }
	    "Delete" {
		# If there's a selection then delete it
		if { [select exists] } {
		    select delete
		} else {
		    # If not, then delete the next character
		    $slate dchars $target insert
		}
	    }
	    "Left" {
		# Move the cursor. Adjust the selection if shift.
		if { $shift } {
		    select adjust -char
		} else {
		    select clear
		    icursor -char
		}
	    }
	    "Right" {
		# Move the cursor. Adjust the selection if shift.
		if { $shift } {
		    select adjust +char
		} else {
		    select clear
		    icursor +char
		}
	    }
	    "End" {
		select clear
		icursor 0
	    }
	    "Home" {
		select clear
		icursor end
	    }
	    default {
		# If there's a selection, then delete it
		select delete

		# Insert the character
		$slate insert $target [$slate index $target insert] $key
	    }
	}
    }
}

#######################################################################
#### release
#
body ::tycho::Editor::release {} {
    set wordmode 0

    # Clear the motion and double-click events
    $slate bind $target \
	    [eval ::tycho::Interactor::event Motion] {}
    $slate bind $target \
	    [eval ::tycho::Interactor::event Release] {}
}

#######################################################################
#### stop
#
body ::tycho::Editor::stop {} {
    if { $target != "" } {
	$this deactivate
    }
}

#######################################################################
#### select
#
# Manipulate the selection in useful ways.
#
body ::tycho::Editor::select {mode args} {
    switch -exact $mode {
	"adjust" {
	    # Move the end of the selection to the given index
	    set index [lindex $args 0]

	    # If there's no selection, create it
	    if { [$slate select item] == "" } {
		set anchor [$slate index $target insert]
		$slate select from $target $anchor
	    }

	    # Move the cursor
	    icursor $index

	    # Adjust the selection
 	    if { [$slate index $target insert] == $anchor } {
 		$slate select clear
 	    } else {
		if { ! $wordmode } {
		    # Adjust in character mode
		    if { [$slate index $target insert] > $anchor } {
			icursor -char
			$slate select to $target insert
			icursor +char
		    } else {
			$slate select to $target insert
		    }
		} else {
		    # Adjust in word mode
		    # FIXME: this is not quite right...
		    if { [$slate index $target insert] > $anchor } {
			icursor +word
			icursor -char
			$slate select to $target insert
			icursor +char
		    } else {
			icursor -word
			$slate select to $target insert
		    }
		}
	    }
	}
	"clear" {
	    if { ! ([$slate select item] == "") } {
		$slate select clear
	    }
	}
	"delete" {
	    if { ! ([$slate select item] == "") } {
		$slate dchars $target sel.first sel.last
		$slate select clear
	    }
	}
	"exists" {
	    return [expr {! ([$slate select item] == "")}]
	}
    }
}
