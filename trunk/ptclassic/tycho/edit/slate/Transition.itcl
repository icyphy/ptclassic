#########################################################################
# @Version: $Id$
# @Author: Bilung Lee
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
## Transition
#
class ::tycho::Transition {
    inherit ::tycho::ComplexItem

    ###################################################################
    ####                         public procs                      ####

    # Update the *-arrow* option
    proc _arrow {id canvas slate arrow}

   # Update the *-fill* option
    proc _entry {id canvas slate entry}

    # Update the *-fill* option
    proc _fill {id canvas slate fill}

    # Update the *-smooth* option
    proc _iangle {id canvas slate iangle}

    # Update the *-smooth* option
    proc _oangle {id canvas slate oangle}

    # Update the *-preempt* option
    proc _preempt {id canvas slate preempt}

    # Update the *-smooth* option
    proc _smooth {id canvas slate smooth}

    # Create a new item
    proc construct {id canvas slate tags args}

    # Set or get the lines's coordinates
    proc coords {id canvas slate args}

    ###################################################################
    ####                          private variables                ####

    # The virtual "method" table
    private common methodtable

    # Default values of this item's options
    private common optiondefault
}

###################################################################
####                       class initialization                ####

namespace eval ::tycho::Transition {
    #### Set method table
    array set methodtable [array get ::tycho::ComplexItem::methodtable]

    set methodtable(_arrow)    ::tycho::Transition::_arrow
    set methodtable(_entry)    ::tycho::Transition::_entry
    set methodtable(_fill)     ::tycho::Transition::_fill
    set methodtable(_iangle)   ::tycho::Transition::_iangle
    set methodtable(_oangle)   ::tycho::Transition::_oangle
    set methodtable(_preempt)  ::tycho::Transition::_preempt
    set methodtable(_smooth)   ::tycho::Transition::_smooth

    set methodtable(construct)  ::tycho::Transition::construct
    set methodtable(coords)     ::tycho::Transition::coords

    #### Set option defaults
    array set optiondefault [array get ::tycho::ComplexItem::optiondefault]

    set optiondefault(-arrow)   last
    set optiondefault(-entry)	history
    set optiondefault(-fill)	black    
    set optiondefault(-iangle)	"0"
    set optiondefault(-oangle)  "0"
    set optiondefault(-preempt)	no
    set optiondefault(-smooth)	off
}

##########################################################################
## -arrow option configuration
#
body ::tycho::Transition::_arrow {id canvas slate arrow} {
    set option(arrow$id) $arrow
    $canvas itemconfigure $component(line$id) -arrow $arrow
}

##########################################################################
## -entry option configuration
# Create or move visual syntax for entry type
#
body ::tycho::Transition::_entry {id canvas slate entry} {
    set option(entry$id) $entry

    # Get the last point on the psuedo line
    set coords [$canvas coords $primary($id)]
    set len    [llength $coords]
    set endx   [lindex $coords [expr $len-2]]
    set endy   [lindex $coords [expr $len-1]]

    if {$option(entry$id) == "default"} {
        set radius 7.0
        set angle  $option(iangle$id)

        set adjust 2.0 ;# To make small circle to sanp on node
        set centx  [expr $endx+($radius-$adjust)*cos($angle)]
        set centy  [expr $endy-($radius-$adjust)*sin($angle)]
        set dist   [expr $radius/sqrt(2.0)]

        set pCoords "[expr $centx-$dist] [expr $centy-$dist] \
                [expr $centx+$dist] [expr $centy+$dist]"

        if {[info exists component(entry$id)]} {
            # Move the small circle and label
            eval $canvas coords $component(entry$id) $pCoords
            $canvas coords $component(entryLabel$id) \
                    $centx [expr $centy-2] $centx [expr $centy+3]

        } else {
            # Create a small circle and label
            set component(entry$id) [eval $canvas create oval $pCoords \
                    [list -fill white -tags [$canvas gettags $primary($id)]]]
            set component(entryLabel$id) [$canvas create line \
                    $centx [expr $centy-2] $centx [expr $centy+3] \
                    -width 2 -tags [$canvas gettags $primary($id)]]
            
        }

        # Adjust the real line
        
        # change coords from "rectangle" to "center & radius"
        set pCoords [eval ::tycho::Oval::fromRect $pCoords]

        # Get the point on the small circle
        set prevx [lindex $coords [expr $len-4]]
        set prevy [lindex $coords [expr $len-3]]
        set tan [expr ($centy-$prevy)/($prevx-$centx)]
        set positive [expr $centy>$prevy]
        set point [eval ::tycho::Oval::circumferenceM \
                $pCoords $tan $positive]

        # Replace the last to be on the small circle
        set lCoords [$canvas coords $component(line$id)]
        set lCoords [eval lreplace [list $lCoords] \
                [expr $len-2] [expr $len-1] $point]
        eval $canvas coords $component(line$id) $lCoords
        $canvas itemconfigure $component(line$id) -arrow last

    } else {
        if {[info exists component(entry$id)]} {
            # delete the small circle and label
            $canvas delete $component(entry$id)
            $canvas delete $component(entryLabel$id)

            # unset the info
            unset component(entry$id)
            unset component(entryLabel$id)
        }

        # Adjust the real line:
        # Replace the last point back to be on the psuedo line
        set lCoords [$canvas coords $component(line$id)]
        set lCoords [lreplace $lCoords \
                [expr $len-2] [expr $len-1] $endx $endy]
        eval $canvas coords $component(line$id) $lCoords
    }
}

##########################################################################
## -fill option configuration
#
body ::tycho::Transition::_fill {id canvas slate fill} {
    set option(fill$id) $fill
    $canvas itemconfigure $component(line$id)    -fill $fill
    if {[info exists component(preempt$id)]} {
        $canvas itemconfigure $component(preempt$id) -outline $fill
    }
    if {[info exists component(entry$id)]} {
        $canvas itemconfigure $component(entry$id) -outline $fill
        $canvas itemconfigure $component(entryLabel$id) -fill $fill
    }
}

##########################################################################
## -iangle option configuration
#
body ::tycho::Transition::_iangle {id canvas slate iangle} {
    set option(iangle$id) $iangle

    # Create or move visual syntax for entry type
    # _entry $id $canvas $slate $option(entry$id)
}

##########################################################################
## -oangle option configuration
#
body ::tycho::Transition::_oangle {id canvas slate oangle} {
    set option(oangle$id) $oangle

    # Create or move visual syntax for preemptiveness
    # _preempt $id $canvas $slate $option(preempt$id)
}

##########################################################################
## -preempt option configuration
# Create or move visual syntax for preemptiveness
#
body ::tycho::Transition::_preempt {id canvas slate preempt} {
    set option(preempt$id) $preempt

    # Get the first point of the psuedo line 
    set coords [$canvas coords $primary($id)]
    set beginx [lindex $coords 0]
    set beginy [lindex $coords 1]

    if {$option(preempt$id) == "yes"} {
        set radius 7.0
        set angle  $option(oangle$id)
        set adjust 2.0 ;# To make small circle to sanp on node
        set centx  [expr $beginx+($radius-$adjust)*cos($angle)]
        set centy  [expr $beginy-($radius-$adjust)*sin($angle)]
        set dist   [expr $radius/sqrt(2.0)]

        set pCoords "[expr $centx-$dist] [expr $centy-$dist] \
                [expr $centx+$dist] [expr $centy+$dist]"

        if {[info exists component(preempt$id)]} {
            # Move the small circle
            eval $canvas coords $component(preempt$id) $pCoords
        } else {
            # Create a small circle
            set component(preempt$id) [eval $canvas create oval $pCoords \
                    [list -fill white -tags [$canvas gettags $primary($id)]]]
        }

        # Adjust the real line
        
        # change coords from "rectangle" to "center & radius"
        set pCoords [eval ::tycho::Oval::fromRect $pCoords]

        # Get the point on the small circle
        set nextx [lindex $coords 2]
        set nexty [lindex $coords 3]
        set tan [expr ($centy-$nexty)/($nextx-$centx)]
        set positive [expr $centy>$nexty]
        set point [eval ::tycho::Oval::circumferenceM \
                $pCoords $tan $positive]

        # Replace the first point to be on the small circle
        set lCoords [$canvas coords $component(line$id)]
        set lCoords [eval lreplace [list $lCoords] 0 1 $point]
        eval $canvas coords $component(line$id) $lCoords

    } else {
        if {[info exists component(preempt$id)]} {
            # delete the small circle
            $canvas delete $component(preempt$id)

            # unset the info
            unset component(preempt$id)
        }

        # Adjust the real line:
        # Replace the first point back to be on the psuedo line
        set lCoords [$canvas coords $component(line$id)]
        set lCoords [lreplace $lCoords 0 1 $beginx $beginy]
        eval $canvas coords $component(line$id) $lCoords
    }
}


##########################################################################
## -smooth option configuration
#
body ::tycho::Transition::_smooth {id canvas slate smooth} {
    set option(smooth$id) $smooth
    $canvas itemconfigure $component(line$id) -smooth $smooth
}

##########################################################################
#### construct
#
body ::tycho::Transition::construct {id canvas slate tags args} {
    # Split coordinates and options
    if { [set t [lsearch -glob $args {-[a-zA-Z]*}]] != -1 } {
	set options [lrange $args $t end]
	set args [lreplace $args $t end]
    }

    # Initialize the options
    foreach {opt val} [concat [array get optiondefault] $options] {
	set option([string trimleft $opt -]$id) $val
    }

    # Create the primary component -- the psuedo line
    set bgcolor [$canvas cget -background]
    set primary($id) [eval $canvas create line $args [list \
            -fill $bgcolor -tags $tags]]

    # Create the line component -- the real line
    set component(line$id) [eval $canvas create line $args [list \
	    -arrow   $option(arrow$id) \
	    -fill    $option(fill$id) \
	    -smooth  $option(smooth$id) \
	    -tags [$canvas gettags $primary($id)]]]

    # Create visual syntax for preemptiveness
    _preempt $id $canvas $slate $option(preempt$id)

    # Create visual syntax for entry type
    _entry $id $canvas $slate $option(entry$id)
}

##########################################################################
#### coords
#
# Set or read the Transition's coordinates
#
body ::tycho::Transition::coords {id canvas slate args} {
    # No args: just return coordinates
    if { $args == "" } {
	return [$canvas coords $primary($id)]
    }

    # Move the psuedo line
    eval $canvas coords $primary($id) $args

    # Move the real line
    eval $canvas coords $component(line$id) $args

    # Adjust visual syntax for preemptiveness
    _preempt $id $canvas $slate $option(preempt$id)

    # Adjust visual syntax for entry type
    _entry $id $canvas $slate $option(entry$id)
}
