# Test the LabeledItem class. Actually uses a LabeledRect.
#
# @Author: John Reekie
# 
# @Version: @(#)testLabeledItem.itcl	1.6 07/29/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the test package is loaded
package require slate.test


############################################################################
#### Define a proc that creates a single LabeledItem on the slate
#
proc _item {args} {
    global f
    _clean
    set f [.s create LabeledRect 40 40 80 80 \
	    -tags foo \
	    -text Hello \
            -fill lightsteelblue \
	    -graphics {rectangle 20 20 80 80; line 20 20 80 80; line 20 80 80 20}]
    eval .s itemconfigure $f $args
}

############################################################################
#### Define another proc that creates a single LabeledItem on the slate
#
proc _emptyitem {args} {
    global f
    _clean
    set f [.s create LabeledRect 40 40 80 80 \
	    -tags foo \
            -fill lightsteelblue \
	    -text Hello]
    eval .s itemconfigure $f $args
}

#######################################################################
#### Options
#
_slate
set i 0

incr i
_emptyitem -text Foo
foreach a {n s e w nw sw ne se c} p {n s e w nw sw ne se center} {
    incr i
    test LabeledItem-options-$i "Check anchoring, no graphics, $a" {
        .s itemconfigure $f -textanchor $a
        .s component $f label itemcget -anchor
    } $p
    _update
}

_item -text Bar
foreach a {n s e w nw sw ne se c} p {s n w e sw nw se ne n} {
    incr i
    test LabeledItem-options-$i "Check anchoring, graphics, $a" {
        .s itemconfigure $f -textanchor $a
        .s component $f label itemcget -anchor
    } $p
    _update
}

#######################################################################
#### Reshaping
#
# Fairly simple tests, just to make sure that coords{} is
# doing what it's supposed to. Doesn't use animate{} because
# round-off error makes testing final coords impossible.
#
_slate
set i 0

# Test that internal graphics are being rescaled properly
_emptyitem -graphics {rectangle 25 25 75 75}
test LabeledItem-reshape-1 {Reshape a corner} {
    _interactslate reshape $f 1 1 40 -features se
    set result {}
    # Need to remove rounding errors here
    foreach c [.s coords [.s find withtag graphics.$f]] {
        lappend result [expr round($c)]
    }
    set result
} {60 60 100 100}

# Test that text label is being moved correctly
_item -textanchor ne
test LabeledItem-reshape-2 {Reshape a corner} {
    _interactslate reshape $f 1 1 40 -features e
    .s component $f label coords
} {120.0 40.0}

