# Definition of a C++ context-sensitive editor.
#
# @Author: Edward A. Lee
#
# @Version: @(#)EditCpp.itcl	1.23 01/27/99
#
# @Copyright (c) 1995-1999 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### EditCpp
# This class defines a text widget with an emacs-like editor with some
# context-specific features for editing C++ files. This
# editor automatically indents a line in response to a Tab character,
# and provides a command for indenting a region (the selection). To
# enter a literal Tab, enter the sequence <Control-q><Tab>. This editor
# also colors comments, procedure names, and the strings "FIXME" and
# "NOTE", and provides a method for commenting out a region.
#
class ::tycho::EditCpp {
    inherit ::tycho::EditC

    ##########################################################################
    ####                            options                               ####

    # Location of the .cc template file
    itk_option define -filetemplate fileTemplate FileTemplate \
	    $TYCHO/edit/textedit/templates/CppTemplate.cc {}

    # Location of the .h template file
    itk_option define -hfiletemplate fileTemplate FileTemplate \
	    $TYCHO/edit/textedit/templates/CppTemplate.h {}

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                         public methods                           ####

    # Insert a body template
    method bodyTemplate {}

    # Generate class diagram consisting of all the .h files.
    method classDAG {}

    # Comment out the selection using C++ style line-oriented comments.
    method commentSelection {}

    # Get the blank template for a file and insert it into the window
    method fileTemplate { fileTemplate {newClassName {}}}

    # Guess about the class name from the filename
    method getClassName {}

    # Open a help window.
    method help {}

    # Tag and color the C++ code in a region.
    method parseNow {start stop}

    # Return a list of tags to use when checking the spelling.
    method spellCheckTags {} {return {comment ccomment}}

    # Remove the leading "//" on lines touched by the selection.
    method uncommentSelection {}

    ###################################################################
    ####                         protected methods                 ####

    # Initialize the menu/status/tool bars
    protected method _initializeBars {menubar statusbar toolbar}

    ##########################################################################
    ####                         protected variables                      ####

    # The name of the class in this file.
    protected variable className {}
}

###################################################################
#
body ::tycho::EditCpp::constructor {args} {

    eval itk_initialize $args
    
    # Set the fill prefix to be the comment character for C++.
    set fillPrefix "//"
}

#####################################################################
#### bodyTemplate
# Insert a body template
#
body ::tycho::EditCpp::bodyTemplate {} {

    set template "
/** 
 */	
public [getClassName]::AMethod()
\{
\}
"

    insertData $template
    markModified
}

#####################################################################
#### classDAG
# Generate a class diagram consisting of the classes from all
# the .h files in the current directory
#
body ::tycho::EditCpp::classDAG {} {
    if { [info command cppDAG] == {} } {
        global TYCHO
	# FIXME: this should use a package
        source [file join $TYCHO kernel basic tychoMakeClassDAG.tcl]
    }
    set savedir [pwd]
    cd [file dirname [filename]]
    if [ catch {glob *.h} errmsg] {
        cd $savedir
        error "Could not find any .h files in `[file dirname [filename]]'\n\
               Error message was: $errmsg"
    }
    if [ catch {eval ::cppDAG [list [list "C++ Class Diagram of [file dirname [filename]]"]] class.dag [glob -nocomplain *.h]} errmsg] {
        cd $savedir
        global errorInfo
        error "$errmsg $errorInfo"
    }  
    set window [::tycho::File::openContext class.dag]
    cd $savedir
    return $window
}

#####################################################################
#### commentSelection
# Use the commentSelection method in EditProgram rather than
# the one in EditC.
#
body ::tycho::EditCpp::commentSelection {} {
    EditProgram::commentSelection
}

#####################################################################
#### getClassName
# Guess about the class name from the filename
# If the file has not been parsed then the className variable might
# not be set.  If it is not set, guess on the className from
# the name of the file
#
body ::tycho::EditCpp::getClassName {} {
    if {$className == {}} {
	return [file tail [file rootname [filename]]]
    }
    return $className
}

#####################################################################
#### fileTemplate
# Insert the blank template into the file.
# The fileTemplate argument names the template file that should by used.  
# $TYCHO/edit/textedit/templates contains some sample templates.
# If the optional className argument is set, then its value will 
# be substituted wherever the template file contains the string 'ClassName'
#
body ::tycho::EditCpp::fileTemplate {fileTemplate {newClassName {}}} {
    ::tycho::EditProgram::fileTemplate $fileTemplate $newClassName
    set className $newClassName
}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditCpp::help {} {
    global env
    ::tycho::File::openContext \
	    [file join $env(TEXTEDIT_LIBRARY) doc usersGuides \
	    EditCppHelp.html] html
}

#####################################################################
#### parseNow
# Tag and color the region of text, indentifying both C and C++ features.
#
body ::tycho::EditCpp::parseNow {start stop} {

    # To get C style comments:
    EditC::parseNow $start $stop

    # To get C++ style comments:
    EditProgram::parseNow $start $stop
}

#####################################################################
#### uncommentSelection
# Use the uncommentSelection method in EditProgram rather than
# the one in EditC.
#
body ::tycho::EditCpp::uncommentSelection {} {
    EditProgram::uncommentSelection
}

####################################################################
####################################################################
####                    protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::EditCpp::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$menubar != {}} {
	$menubar separator specialsep2 special

        $menubar command bodytemplate special \
		-label "Body Template" -underline 0 \
                -command "$this bodyTemplate"
        
        $menubar command cctemplate special \
		-label ".cc File Template" -underline 4 \
                -command "$this fileTemplate \
                $itk_option(-filetemplate) \
                \[$this getClassName\]"

        $menubar command htemplate special \
		-label ".h File Template" -underline 1 \
                -command "$this fileTemplate \
                $itk_option(-hfiletemplate) \
                \[$this getClassName\]"

	$menubar separator specialsep3 special

        $menubar command classdag special \
		-label "Generate Class Diagram" -underline 9 \
                -command "$this classDAG"

    }
}
