# Definition of an itcl context-sensitive editor.
#
# @Authors: Edward A. Lee, Christopher Hylands
# 
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditItcl
# This class defines a window for editing Itcl code. Itcl, developed by
# Michael McLennan, is an object-oriented extension to Tcl/Tk,
# developed by John Ousterhout. This editor colorizes the source code
# for easy identification of class definitions, methods, procedures,
# etc. It also supports evaluation of regions of code (the selection,
# if there is one, or the entire file, otherwise) hyperlinks through
# the code, to a limited degree. Hyperlinks are obtained by the "Show
# Links" command.
#
class ::tycho::EditItcl {
    inherit ::tycho::EditTcl

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Generate and display a doc file from the current buffer
    method gendoc {}

    # Open a help window.
    method help {}

    ###################################################################
    ####                    protected methods                      ####

    # Return the name of the type of text widget to use (EditItclText).
    protected method textWidget {} {return ::tycho::EditItclText}
}

###################################################################
#### constructor
#
body ::tycho::EditItcl::constructor {args} {
    addMenu Special left Window -underline 0


    addMenuItem "Body Template" Special -underline 0 \
	    -command "\[$this component text\] bodyTemplate"

    addMenuItem "File Template" Special -underline 0 \
	    -command "\[$this component text\] fileTemplate"

    addMenuSeparator Special

    addMenuItem "Generate doc" Special -underline 0 \
	    -command "$this gendoc"

    eval itk_initialize $args
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

###################################################################
#### gendoc
# Given a source file (a .itcl file) generate and display a doc file.
# If the doc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
#
body ::tycho::EditItcl::gendoc {} {
    set filename [::tycho::expandPath [filename]]
    set dir [file dirname $filename]
    set tail [file tail $filename]
    set root [file rootname $tail]
    set docfile [file join doc codeDoc \
	    [info namespace tail [[$this component text] getClassName]].html]
    set fulldoc [file join $dir $docfile]
    if {![file exists $fulldoc] || \
            [file mtime $filename] > [file mtime $fulldoc]} {
        # Need to regenerate the doc.  Check permissions first.
        # It is sufficient for the directory to be writable.
        if {[file writable $dir]} {

	    # Save the file if it has not been saved
	    if {[isModified] == 1} {
		if {[::tycho::askuser \
			"File $filename has not been saved, Save it now?"]} {
		    save
		}
	    }

	    putStatus "About to generate documentation for $tail"

            set savedir [pwd]
            cd $dir

	    # Not portable, so we comment this out
            #exec rm -f $docfile

	    # Generate the HTML file in doc/codedoc.  Don't generate index.html
	    # To generate index.html, we should pass all the .itcl files 
	    # in the current directory to generateHTML
	    set verbose 0
	    set generateIndex 0
	    ::tycho::HTMLDocSys::generateHTML \
		    $verbose $generateIndex {An Itcl Class} $tail
            cd $savedir
        } {
            ::tycho::warn "The documentation file is out of date, \
                    and you do not have permission to update it."
        }
    }
    if [file exists $fulldoc] {
        ::tycho::File::openContext $fulldoc
    }
}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditItcl::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/editors/textedit/doc/usersGuides/EditItclHelp.html
}

