# A directed acyclic graph (DAG) data structure.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### DirectedAcyclicGraph
# A directed acyclic graph is a <code>Graph</code> without cycles. This
# class provides methods to build, browse, and edit such a data
# structure. The method <code>verifyAcyclic</code> verifies that the
# graph has no cycles. Methods are also provided to topologically sort
# the graph and to sort by depth (distance from a root). Data stored on
# the nodes is as in the base class <code>Graph</code>.
# <p>
# Here is an example of how to use the class:
# <tcl><pre>
#    catch {delete object foo}
#    ::tycho::DirectedAcyclicGraph foo
#    foo add a {}
#    foo add c {} a
#    foo add d {} a
#    foo add e {} {a d}
#    foo verifyAll
#    foo verifyAcyclic
#    ::tycho::post [foo describe]
# </pre></tcl>
# The description that is posted in the last line will be:
# "{d {} a} {e {} {a d}} {a {} {}} {c {} a}".
# This is a list of nodes in the graph in arbitrary order.
# Each node is a list of three items, the name, contents,
# and parents.
#
class ::tycho::DirectedAcyclicGraph {
    inherit ::tycho::Graph

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Check to see whether an arc between a parent and child is in a cycle.
    method checkArc {parent child}

    # Return the depth of the specified node.  Run after depthInit.
    method depth {node}

    # Reset the cached depths.
    method depthInit {}

    # Return a list of lists of nodes sorted by depth.
    method depthSort {}

    # Return a list that describes the subgraph with the given roots.
    method topologicalSort {roots}

    # Verify that the graph has no cycles.
    method verifyAcyclic {{repair {}}}

    ###################################################################
    ####                         private methods                   ####

    # Check to see whether a node is part of a cycle in the graph.
    private method checkNode {node {repair {}}}

    ###################################################################
    ####                         private variables                 ####

    # Array indexed by node giving the level of each node as per depthSort
    private variable level
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### checkArc
# Return 1 if an arc between the specified parent and child is part of
# a cycle.  Return 0 otherwise.  The arc need not exist in the graph.
# It is assumed that without the arc in question, there are no cycles
# in the graph (otherwise, an infinite recursion could result).  This
# can be verified using <code>verifyAcyclic</code> prior to adding the arc.
# It is an error if either the parent or child do not exist.
#
body ::tycho::DirectedAcyclicGraph::checkArc {parent child} {
    verify $parent
    verify $child
    foreach node [topologicalSort [list $child]] {
        set name [lindex $node 0]
        if {$name == $parent} {
            return 1
        }
    }
    return 0
}

#######################################################################
#### depth
# Return the depth of a given node. The depth is the maximum number of
# hops to a root node. A root node has depth zero. A "hop" is a
# parent-child relationship.  As a side effect, the depth of the node
# and all its parents is cached.  The method <code>depthInit</code>
# must be run before this method is invoked or if the graph has been
# modified since this method was last invoked.  It is not run automatically
# for efficiency.  It is assumed that the graph has no directed loops
# (or this method goes into an infinite recursion).  This can be verified
# using <code>verifyAcyclic</code>.
#
body ::tycho::DirectedAcyclicGraph::depth {node} {
    set max -1
    foreach dep $parentnames($node) {
        if {$level($dep) < 0} {
            depth $dep
        }
        set lv $level($dep)
        if {$lv > $max} {
            set max $lv
        }
    }
    set level($node) [incr max]
}

#######################################################################
#### depthInit
# Reset the cached depths of all nodes in the graph.
# This must be run before <code>depth</code> can be called for the first
# time, or if the graph has been modified since the last time it was called.
#
body ::tycho::DirectedAcyclicGraph::depthInit {} {
    if [info exists contentslist] {
        set searchid [array startsearch contentslist]
        while {[set node [array nextelement contentslist $searchid]] != {}} {
            set level($node) -1
        }
        array donesearch contentslist $searchid
    }
}

#######################################################################
#### depthSort
# Return a list of lists of node names by depth. The list of root nodes
# is first (index 0). A node will be in the (N+1)-th list (index N) if
# the maximum number of hops to a node in the first list is N. A "hop"
# is simply a parent-child relationship.
# Within each depth or level, nodes are sorted alphabetically by name.
#
body ::tycho::DirectedAcyclicGraph::depthSort {} {
    depthInit
    set searchid [array startsearch contentslist]
    while {[set node [array nextelement contentslist $searchid]] != {}} {
        set lv $level($node)
        if {$lv < 0} {
            set lv [depth $node]
        }
        lappend nodesAtLevel($lv) $node
    }
    array donesearch contentslist $searchid

    foreach lv [lsort -integer [array names nodesAtLevel]] {
        lappend result $nodesAtLevel($lv)
    }
    return $result
}

#######################################################################
#### topologicalSort
# Return a list of node names in the subgraph with the given roots.
# This includes the roots themselves and all descendants. The returned
# list contains one element for each node in the subgraph, beginning
# with the roots, sorted alphabetically, then children of the first
# root, followed by children of the second root, etc. The descendants
# are listed in a topologically sorted order, meaning that parents are
# always described before their children. Note that this method is not
# very efficient, so for performance sensitive applications, more
# direct scanning of the graph may be more appropriate. Also,
# <code>depthSort</code> provides an alternative topological sort,
# although it does not directly support describing a subgraph (it
# describes the entire graph).
#
body ::tycho::DirectedAcyclicGraph::topologicalSort {roots} {
    # Keep track of our current position in the result list.
    foreach node [lsort $roots] {
        lappend result $node
        set done($node) 1
    }
    set idx 0
    while {$idx < [llength $result]} {
        foreach child [lsort [lindex [lindex $result $idx] 3]] {
            if [info exists done($child)] {
                # The child has been previously listed.  That may have
                # been premature.  Remove it.
                set where [lsearch -exact $result $child]
                set result [lreplace $result $where $where]
                if {$where < $idx} {incr idx -1}
            }
            lappend result $child
            set done($child) 1
        }
        incr idx
    }
    return $result
}

#######################################################################
#### verifyAcyclic
# Verify that there are no cycles in the graph. If no argument is
# given, or if the argument is an empty string, trigger an error on the first
# arc closing a cycle that is encountered. Otherwise, repair the graph
# by removing the offending reference to an arbitrary arc in each
# cycle.
#
body ::tycho::DirectedAcyclicGraph::verifyAcyclic {{repair {}}} {
    if ![array exists contentslist] {
        # graph is empty.
        return
    }
    visitedInit 0
    set searchid [array startsearch contentslist]
    while {[set node [array nextelement contentslist $searchid]] != {}} {
        if [checkNode $node $repair] {
            error "graph is not acyclic"
        }
    }
    array donesearch contentslist $searchid
}


    ###################################################################
    ###################################################################
    ####                         private methods                   ####

#######################################################################
#### checkNode
# If a second argument is not given, or has value 0, then return 1 if
# the node specified by the first argument or any of its children is
# part of a directed cycle, and 0 otherwise. If a non-zero argument is
# given, then remove the first arc encountered in each cycle and always
# return 0. This must be called by <code>verifyAcyclic</code> (so that
# the whole graph is tested at once).
#
body ::tycho::DirectedAcyclicGraph::checkNode {node {repair {}}} {

    # The visited flag is used encoded as follows:
    #    0 - not tested yet.
    #    1 - test in progress.
    #    2 - the node and its children are not part of any loop.
    #    3 - the node or one of its children are part of a loop.

    # If the node has already been checked...
    if {[visited $node] == 2} {return 0}
    if {[visited $node] == 3} {return 1}

    # Mark the current node to indicate that checking is in progress.
    visitedSet $node 1

    # Check the children (if any).
    foreach child $childrennames($node) {
        switch [visited $child] {
            0 {
                # child not tested.
                if [checkNode $child $repair] {
                    visitedSet $node 3
                    return 1
                }
            }
            1 {
                # loop found.
                if {$repair != {}} {
                    deleteArc $node $child
                } {
                    visitedSet $child 3
                    visitedSet $node 3
                    return 1
                }
            }
            3 {
                visitedSet $node 3
                return 1
            }
        }
    }
    # All children are OK.
    visitedSet $node 2
    return 0
}
