# A forest (set of trees) data structure.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### Forest
# A forest is a data structure that includes any number of trees. A
# tree is a data structure with nodes that are either a root or have
# exactly one parent, and that have any number of children. This class
# provides methods to build, browse, and edit such a data structure.
# Data stored on the nodes of the trees are arbitrary Tcl strings. A
# method is provided to encode the data structure as a list, which can,
# for example, be written to a file. A method is also provided to
# convert this list back into a forest.
#
# <p>
# Here is an example of how to use the Forest:
# <tcl><pre>
#     catch {delete object f}
#     ::tycho::Forest f
#     f add a aa
#     f add c cc a
#     f add d dd a
#     ::tycho::post [f describe]
# </pre></tcl>
# The description that is posted in the last line will be:
# {{a {} {c d} aa} {c a {} cc} {d a {} dd}}.
# Notice that in this example there is only one tree in the forest.
#
class ::tycho::Forest {

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Add a leaf node to a tree in the forest.
    method add {nodename contents {parent {}}}

    # Return the list of children of a node.
    method children {nodename}

    # Remove all nodes from the forest.
    method clear {}

    # Return the contents of a cell of the forest.
    method contents {nodename}

    # Delete a node from the forest.
    method delete {nodename}

    # Return a list that describes the forest or a subtree with the given root.
    method describe {{root {}}}

    # Initialize the forest from a description
    method init {description}

    # Return the parent of a node.
    method parent {nodename}

    # Return a list of names of the roots of the trees in the forest.
    method roots {}

    # Set a new name and contents for the specified node.
    method setNode {oldname newname contents}

    ###################################################################
    ####                   protected methods                       ####

    # Verify that nodename is in the forest; flag an error if not.
    protected method verify {nodename}

    ###################################################################
    ####                   private methods                         ####

    # In listname, remove the olditem and append the newitem.
    private method listreplace {listname olditem newitem}

    ###################################################################
    ####                   private variables                       ####

    # List of the names of the roots of the trees in the forest.
    private variable rootnames {}

    # Array storing the contents of each node of the tree.
    private variable contentsstring

    # Array storing the parent name for each node of the tree.
    private variable parentname

    # Array storing the list of children for each node.
    private variable childrennames
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### add
# Add a leaf node to a tree in the forest.
# A leaf node is simply one with no children.
#
body ::tycho::Forest::add {nodename contents {parent {}}} {
    if [info exists contentsstring($nodename)] {
        error "Duplicate node name in forest: $nodename"
    }
    if {$parent == {}} {
        lappend rootnames $nodename
    } {
        verify $parent
        lappend childrennames($parent) $nodename
    }
    set parentname($nodename) $parent
    set childrennames($nodename) {}
    set contentsstring($nodename) $contents
}

#######################################################################
#### children
# Return the list of children of a node.
#
body ::tycho::Forest::children {nodename} {
    verify $nodename
    return $childrennames($nodename)
}

#######################################################################
#### clear
# Remove all nodes from the forest.
#
body ::tycho::Forest::clear {} {
    set rootnames {}
    # The catch is in case the forest is already clear
    catch {
        unset contentsstring
        unset parentname
        unset childrennames
    }
}

#######################################################################
#### contents
# Return the contents of a cell of the forest.
# The contents can be any arbirary Tcl string or list.
#
body ::tycho::Forest::contents {nodename} {
    verify $nodename
    return $contentsstring($nodename)
}

#######################################################################
#### delete
# Delete a node from the forest.  If the node has children, then
# the parent of the node becomes the parent of the children.
# If the node is a root of a tree, then the children become roots.
#
body ::tycho::Forest::delete {nodename} {
    verify $nodename
    set parent $parentname($nodename)
    if {$parent == {}} {
        # Remove from the root list
        set ind [lsearch -exact $rootnames $nodename]
        set rootnames [lreplace $rootnames $ind $ind]
    } {
        # Remove node from the list of children in the parent
        set ind [lsearch -exact $childrennames($parent) $nodename]
        set childrennames($parent) [lreplace $childrennames($parent) $ind $ind]
    }
    # Redirect the parent point of each child
    foreach child $childrennames($nodename) {
        set parentname($child) $parent
        if {$parent == {}} {
            lappend rootnames $child
        } {
            lappend childrennames($parent) $child
        }
    }
    # Finally, remove from the database.
    unset parentname($nodename)
    unset contentsstring($nodename)
    unset childrennames($nodename)
}

#######################################################################
#### describe
# Return a list that describes a subtree with the given root, of if no
# root is given the forest. The returned list contains one element for
# each tree in the forest, sorted alphabetically by name. Each tree is
# described by a list of nodes, again sorted. Each node is described
# itself as a list with three elements: the node name, the contents,
# and the parent (or a null string). The nodes are described in such an
# order that parents are always described before their children.
#
body ::tycho::Forest::describe {{root {}}} {
    set result {}
    if {$root == {}} {
        foreach root [lsort $rootnames] {
            lappend result [describe $root]
        }
    } {
        verify $root
        set result [list [list \
                $root \
                $contentsstring($root) \
                $parentname($root)]]
        foreach child [lsort $childrennames($root)] {
            set result [concat $result [describe $child]]
        }
    }
    return $result
}

#######################################################################
#### init
# Initialize the forest from a description. The format of the
# description should be compatible with that produced by the
# <code>describe</code> method.
#
body ::tycho::Forest::init {description} {
    clear
    foreach tree $description {
        foreach node $tree {
            set nodename [lindex $node 0]
            set contentsstring($nodename) [lindex $node 1]
            set parent [lindex $node 2]
            set parentname($nodename) $parent
            set childrennames($nodename) {}
            if {$parent == {}} {
                lappend rootnames $nodename
            } {
                # A parent is specified
                verify $parent
                lappend childrennames($parent) $nodename
            }
        }
    }
}

#######################################################################
#### parent
# Return the parent of a node.
# If the node is a root, return an empty string.
#
body ::tycho::Forest::parent {nodename} {
    verify $nodename
    return $parentname($nodename)
}

#####################################################################
#### roots
# Return a list the names of the roots of the trees in the forest.
# A root is a node with no parents.
#
body ::tycho::Forest::roots {} {
    return $rootnames
}

#######################################################################
#### setNode
# Set a new name and contents for the specified node.
# It is an error if the new name is alredy the name of another node.
#
body ::tycho::Forest::setNode {oldname newname contents} {
    if {![info exists contentsstring($oldname)]} {
        error "No such node: $oldname"
    }
    if {$newname != $oldname && [info exists contentsstring($newname)]} {
        error "Duplicate node name in forest: $newname"
    }
    set parent $parentname($oldname)
    if {$parent == {}} {
        listreplace rootnames $oldname $newname
    } {
        verify $parent
        listreplace childrennames($parent) $oldname $newname
    }
    set parentname($newname) $parent
    set childrennames($newname) $childrennames($oldname)
    set contentsstring($newname) $contents
    if {$oldname != $newname} {
        unset parentname($oldname)
        unset childrennames($oldname)
        unset contentsstring($oldname)
    }
}


    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#######################################################################
#### verify
# Verify that nodename is in the forest, flagging an error if not.
# In other words, if this method returns, the nodename is valid.
#
body ::tycho::Forest::verify {nodename} {
    if {![info exists contentsstring($nodename)]} {
        error "No node in forest $this with name $nodename"
    }
}


    ###################################################################
    ###################################################################
    ####                      private methods                      ####

#######################################################################
#### listreplace
# For the list <i>listname</i>, remove the <i>olditem</i> and append
# the <i>newitem</i>.  The items are strings, and <i>olditem</i> must
# match exactly a string in the list.
# Issue a warning <i>olditem</i> is not present in the list.
#
body ::tycho::Forest::listreplace {listname olditem newitem} {
    set idx [lsearch -exact [set $listname] $olditem]
    if {$idx < 0} {
        ::tycho::warn "Missing item in list $listname: $olditem"
    } {
        set $listname [lreplace [set $listname] $idx $idx]
    }
    lappend $listname $newitem
}
