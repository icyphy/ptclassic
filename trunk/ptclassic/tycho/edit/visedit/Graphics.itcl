# A base class viewer and editor window based on the Tk canvas.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME: known bugs
# -- need to call undoBoundary after reading an input file. Promote?

#######################################################################
#### Graphics
# <p>
# The contents of the display are saved to a file in the form of a list
# of method invocations of the contained graphical editor, which must
# be derived from <code>GraphicsWidget</code>.  In the base class,
# the size, title, and other annotations are saved.
# <p>
# Here is an example of how to use the Graphics:
# <tcl><pre>
#     catch {delete object .f}
#     ::tycho::Graphics .f
#     .f centerOnScreen
# </pre></tcl>
#
class ::tycho::Graphics {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Clear the display, discarding the current items.
    method clear {}

    # Give the canvas the focus.
    method focusin {}
 
    # Open a help window.
    method help {}

    # Insert the specified data into the canvas.
    method insertData {data}

    # Query the user for the type of scrollbars to use.
    method scrollQuery {}

    # Set the scrolling style (use with scrollQuery).
    method scrollSet {dialog}

    # Find the item identified by "name".
    # FIXME: Implement this.
    # method seePoint {point}

    # Specify whether or not modifications are allowed in the displayed text.
    method setReadOnly {bool}

    ###################################################################
    ####                   protected methods                       ####

    # Add or configure a textual display at the bottom.
    protected method addInfo {tag label value {width {}} {description {}}}

    # Add a button to the toolbar.
    protected method addTool {name args}

    # Disable a tool button.
    protected method disableTool {name}

    # Enable a tool button.
    protected method enableTool {name}    

    # Return the text to be saved.
    protected method saveText {}

    # Return the name of the class of graphics widget to use.
    protected method graphicsWidget {} {return ::tycho::GraphicsWidget}
}

#######################################################################
#### constructor
#
body ::tycho::Graphics::constructor {args} {

    # A tool bar sitting above the canvas
    itk_component add tools {
	frame $itk_component(childsite).tools -relief sunken
    } {
	keep -background -cursor
    }
    pack $itk_component(tools) -expand no -fill x

    itk_component add graphics {
       [graphicsWidget] $itk_component(childsite).graphics \
               -top $this
    } {
        keep -readonly -canvascolor -cursor 
        # NOTE:  Cannot keep -canvasheight -canvaswidth, -title, -subtitle, etc.
        # Overrides saved width and height with the defaults.
    }

    pack $itk_component(graphics) -expand yes -fill both
    
    # Add a widget at the bottom for displaying info
    itk_component add info {
	frame $itk_component(childsite).info -relief sunken
    } {
	keep -background -cursor
    }
    pack $itk_component(info) -expand no -fill x

    addMenu Edit left Window -underline 0

    addMenuItem {Undo} Edit -underline 0 -accelerator "z" \
	    -command "$this component graphics undo"

    addMenuItem {Redo} Edit -underline 0 -accelerator "d" \
	    -command "$this component graphics redo"

    addMenuSeparator Edit

    addMenuItem Cut Edit -underline 0 -accelerator "x" \
	    -command "$this component graphics modify cut"
    
    addMenuItem Copy Edit -underline 1 -accelerator "c" \
	    -command "$this component graphics copy"
    
    addMenuItem Paste Edit -underline 0 -accelerator "v" \
	    -command "$this component graphics modify paste"
    
    addMenuSeparator Edit

    addMenuItem {Title...} Edit -underline 0 -accelerator "T" \
            -command "$this component graphics titleAdd"

    addMenuItem {Edit Item} Edit -underline 0 -accelerator "e" \
	    -command "$this component graphics edit"

    addMenu Format left {} -underline 1

    addMenuItem {Scrollbars...} Format -underline 0 \
            -command "$this scrollQuery"

    eval itk_initialize $args

    # Undo and Redo menu start out disabled
    disableMenuItem Undo Edit
    disableMenuItem Redo Edit
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### clear
# Clear the display, discarding the current graphics.
#
body ::tycho::Graphics::clear {} {
    if [getReadOnly] {bell; return}
    [component graphics canvasName] delete all
}

###################################################################
#### focusin
# Hand the focus to the canvas window.
#
body ::tycho::Graphics::focusin {} {
    catch {$itk_component(graphics) focusin}
}
 
#######################################################################
#### help
# Open a help window.
#
body ::tycho::Graphics::help {} {
    hyperJump "\$TYCHO/editors/visedit/doc/usersGuides/GraphicsHelp.html" {}
}

#######################################################################
#### insertData
# Append the specified data to the existing display.
# The data should be a list of items of the form <i>methodname args</i>,
# where <i>methodname</i> is a method of the class contained (which must
# be derived from <code>GraphicsWidget</code>), and <i>args</i> is the
# set of arguments appropriate for that method.
#
body ::tycho::Graphics::insertData {data} {
    if [getReadOnly] {bell; return}
    foreach command $data {
        if [catch {
            eval $itk_component(graphics) $command
        } msg] {
            global ::errorInfo
            set saveErr $errorInfo
            error "Invalid item: $data\n$msg" $saveErr
        }
    }
}

#####################################################################
#### scrollQuery
# Query the user for the type of scrollbars to use.
#
body ::tycho::Graphics::scrollQuery {} {
    set name [::tycho::autoName .query]
    ::tycho::EntryQuery $name -okcommand "$this scrollSet $name"
    switch -exact [component graphics cget -scrolling] {
        bars {set default {Always use scrollbars}}
        auto {set default {Automatic scrollbars}}
        default {set default {Never use scrollbars}}
    }
    $name addRadioQuery scrolling {} [list \
            {Always use scrollbars} \
            {Automatic scrollbars} \
            {Never use scrollbars}] $default
    $name centerOnScreen
}

#####################################################################
#### scrollSet
# Set the scrolling style of the child widget depending on the user's
# response in the specified dialog box.
#
body ::tycho::Graphics::scrollSet {dialog} {
    set prevoption [component graphics cget -scrolling]
    switch -exact [$dialog get scrolling] {
        {Always use scrollbars} {set option bars}
        {Automatic scrollbars} {set option auto}
        default {set option none}
    }
    if {$option != $prevoption} {
        component graphics configure -scrolling $option
        component graphics updateScrollbars
        markModified
    }
}

#####################################################################
#### setReadOnly
# Specify whether or not modifications are allowed in the displayed text.
# Note that this is independent of whether the associated file is readonly.
# It merely determines whether the buffer can be modified, not whether the
# file can be modified.  To control the file, use <code>toggleReadOnly</code>.
#
body ::tycho::Graphics::setReadOnly {bool} {
    ::tycho::File::setReadOnly $bool
    if [winfo exists $prefix] {
	if {$bool} {
            disableMenuItem {Edit Item} Edit
            disableMenuItem {Cut} Edit
            disableMenuItem {Paste} Edit
	} {
            enableMenuItem {Edit Item} Edit
            enableMenuItem {Cut} Edit
            enableMenuItem {Paste} Edit
	}
    }
}

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#####################################################################
#### addInfo
# Add or configure textual information displayed at the bottom.
# The arguments are: a name for the widget, the label to be displayed,
# the value to be displayed, an optional width field and an optional
# textual description
# If the description argument is non-empty, then when the user moves
# the mouse over the widget, the status line will have the description
# displayed in it.
# For example:
# <pre>
#    addInfo foo {Value of foobar} $foobar 3 {foobar is a variable}
# </pre>
# will create a widget with a label 'Value of foobar', a value that
# is the value of the foobar variable and displayed with a width of 3
# characters.
body ::tycho::Graphics::addInfo {tag label value {width {}} \
        {description {}}} {

    if [info exists itk_component($tag)] {
        # Display already exists.  Configure it.
        component label_$tag configure -text $label
        component value_$tag configure -text $value
        if {$description != {} } {
            bind $itk_component($tag) <Enter> \
                    "$this putStatus \"$description\" "
            bind $itk_component($tag) <Leave> \
                    "$this putStatus \"\" "
        }

    } {
        # Display does not exist. Create it.
	itk_component add $tag {
	    frame $itk_component(info).$tag
	} {
	    keep -background -cursor
	}
	pack $itk_component($tag) -side right -padx 5

        if {$description != {} } {
            bind $itk_component($tag) <Enter> \
                    "$this putStatus \"$description\" "
            bind $itk_component($tag) <Leave> \
                    "$this putStatus \"\" "
        }

        itk_component add label_$tag {
            label $itk_component($tag).label -text $label -relief flat
        } {
            keep -font -background -foreground
        }
        pack $itk_component(label_$tag) -side left

        itk_component add value_$tag {
            label $itk_component($tag).value -text $value -relief ridge
        } {
            keep -font -background -foreground
        }
        if {$width != {}} {
            component value_$tag configure -width $width
        }
        pack $itk_component(value_$tag) -side left
    }
}

#####################################################################
#### addTool
# Add a button to the toolbar at the top.
# The arguments are: a name for the button followed by
# any set of arguments to pass on to the Tk button command.
# For example:
# <pre>
#    addTool foo -text PushMe -command {puts pushed}
# </pre>
# will create a button labeled "PushMe" with a command that prints
# a message on the standard output.
#
body ::tycho::Graphics::addTool {name args} {
    itk_component add $name {
	eval button $itk_component(tools).$name $args
    } {
	keep -background -font -activebackground -cursor \
		-highlightthickness -activeforeground \
		-foreground -highlightcolor -highlightbackground
    }
    pack $itk_component($name) -side left

    #if {$description != {} } {
    #    bind $itk_component($name) <Enter> \
    #            "$this putStatus \"$description\" "
    #    bind $itk_component($name) <Leave> \
    #            "$this putStatus \"\" "
    #}
}

#####################################################################
#### disableTool
# Disable a tool added with <code>addTool</code, graying out the tool button.
#
body ::tycho::Graphics::disableTool {name} {
    component $name configure -state disabled
}

#####################################################################
#### enableTool
# Enable a tool added with <code>addTool</code, restoring the tool button.
#
body ::tycho::Graphics::enableTool {name} {
    component $name configure -state normal    
}

#######################################################################
#### saveText
# Return the text to be saved.
#
body ::tycho::Graphics::saveText {} {
    # Insert carriage returns between list elements.
    set dsc {}
    foreach cmd [component graphics describe] {
        append dsc "{$cmd}"
        append dsc "\n"
    }
    return $dsc
}
