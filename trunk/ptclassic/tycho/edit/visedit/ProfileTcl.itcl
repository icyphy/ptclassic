# A code profiler for Tcl and Itcl code, using the TclX extension.
#
# @Author: Edward A. Lee
# @Contributor: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### options
#

######## Options repeated from base class

# Canvas background color.
option add *ProfileTcl.canvasColor \
        [ptkColor antiqueWhite3 white] widgetDefault

# Default canvas foreground color.
option add *ProfileTcl.canvasForeground black widgetDefault

# Default height of the canvas widget, in pixels.
option add *ProfileTcl.canvasHeight 500 widgetDefault

# Default width of the canvas widget, in pixels.
option add *ProfileTcl.canvasWidth 600 widgetDefault

# Specify types of titles in the order in which they appear on the screen.
option add *ProfileTcl.titleTypes {title subtitle author version copyright}

# Default font list
option add *ProfileTcl.defaultFont {{helvetica 14 medium r}} widgetDefault

# Title fonts lists
option add *ProfileTcl.authorFont {{times 16 bold r} {helvetica 16 bold r}} widgetDefault
option add *ProfileTcl.copyrightFont {{times 16 bold r} {helvetica 16 bold r}} widgetDefault
option add *ProfileTcl.versionFont {{times 16 bold r} {helvetica 16 bold r}} widgetDefault
option add *ProfileTcl.subtitleFont {{times 16 bold r} {helvetica 16 bold r}} widgetDefault
option add *ProfileTcl.titleFont {{times 24 bold i} {helvetica 24 bold i}} widgetDefault

# Colors for title text
option add *ProfileTcl.authorColor red widgetDefault
option add *ProfileTcl.copyrightColor black widgetDefault
option add *ProfileTcl.subtitleColor blue widgetDefault
option add *ProfileTcl.titleColor black widgetDefault
option add *ProfileTcl.versionColor black widgetDefault

#### linkColor option
option add *ProfileTcl.linkColor [ptkColor blue black] widgetDefault
option add *ProfileTcl.lineColor [ptkColor gray40 black] widgetDefault

# Default start position in the horizontal direction (in pixels).
option add *ProfileTcl.startx 10 widgetDefault

# Default start position (below title) in the vertical direction (in pixels).
option add *ProfileTcl.starty 5 widgetDefault

# Default vertical spacing (as a fraction of a nominal default)
option add *ProfileTcl.spacingy 1.0 widgetDefault

# Default horizontal spacing (as a fraction of a nominal default)
option add *ProfileTcl.spacingx 1.0 widgetDefault

#######################################################################
#### ProfileTcl
# A code profiler for Tcl and Itcl code, using the TclX extension.
# To start profiling a section of code, hit the "Start Profiling" button.
# To display the call tree of the current profile, hit the "Display Profile"
# button.  To cancel profiling without displaying the call tree,
# hit the "Cancel Profile" button.
# <p>
# Here is an example of how to use the ProfileTcl:
# <tcl><pre>
#     ::tycho::ProfileTcl .p
#     .p centerOnScreen   
# </pre></tcl>
#
class ::tycho::ProfileTcl {
    inherit ::tycho::EditForest

    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Open a help window.
    method help {}

    # Cancel ongoing profiling.
    method profileCancel {}

    # Turn profiling off and report the results
    method profileDisplay {}

    # Turn profiling on
    method profileStart {}

    # Update the times displayed at the bottom.
    method updateTimes {}
}

#######################################################################
#### constructor
#
body ::tycho::ProfileTcl::constructor {args} {
    toolbar addButton on {Start collecting profiling data} \
            -text "Start" -command "$this profileStart"
    toolbar addButton off {Display profile as a call tree} \
            -text Display -command "$this profileDisplay"
    toolbar addButton cancel {Cancel profile, discarding collected data} \
            -text Cancel -command "$this profileCancel"

    toolbar disableButton off
    toolbar disableButton cancel

    # Add a display at the bottom for the profile stats.
    addInfo count {Call count} 0 10 \
            "Number of times the function under the cursor was called."
    addInfo real {Real time} 0 10 \
            "Amount of Real time in milliseconds the function under the \
            cursor consumed."
    addInfo realPercent {Real %} 0 8 \
            "Percentage of the total Real time in milliseconds the function \
            under the cursor"
    addInfo cpu {CPU time} 0 10 \
            "Amount of CPU time in milliseconds the function under the \
            cursor consumed"
    addInfo cpuPercent {CPU %} 0 8 \
            "Percentage of the total CPU time in milliseconds the function \
            under the cursor"
    eval itk_initialize $args

    ::tycho::loadIfNotPresent profile tclx

    # Set up bindings to update the times.
    set cvs [canvasName]
    $cvs bind node <Enter> "$this updateTimes"
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### help
# Open a help window.
#
body ::tycho::ProfileTcl::help {} {
    hyperJump [file join \$TYCHO editors visedit doc \
	    usersGuides ProfileTclHelp.html] {}
}

#######################################################################
#### profileCancel.
# Turn profiling off and do not report the results.
#
body ::tycho::ProfileTcl::profileCancel {} {
    profile off results
    toolbar disableButton off
    toolbar disableButton cancel
    toolbar enableButton on
}

#######################################################################
#### profileDisplay.
# Turn profiling off and report the results.
#
body ::tycho::ProfileTcl::profileDisplay {} {
    clear
    profile off results
    set depth 1
    set maxdepth 1
    while {$depth <= $maxdepth} {
        set id [array startsearch results]
        while {[set entry [array nextelement results $id]] != {}} {
            set len [llength $entry]
            if {$len > $maxdepth} {set maxdepth $len}
            if {$len == $depth} {
                # Since we have to have TclX here anyway, use lassign
                lassign $results($entry) count real cpu
                set parent [join [lrange $entry 1 end] +]
                if {$parent == {}} {
                    set color white
                } {
                    set fst [graph]
                    array set parcontents [$fst contents $parent]
                    set partime $parcontents(cpu)
                    if {$partime > 0} {
                        set fraction [expr $cpu*10/$partime]
                        # FIXME: Handle colors better.
                        set colors [list black navyblue blue cyan purple magenta red orange yellow white white]
                        set color [lindex $colors $fraction]
                    } {
                        set color black
                    }
                }
                if {$depth >= 2} {
                    set open 0
                } {
                    set open 1
                }
                set contents [list \
                        label [list [lindex $entry 0]] \
                        color $color \
                        count $count \
                        real $real \
                        cpu $cpu \
                        open $open]
                add [join $entry +] $contents $parent
            }
        }
        array donesearch results $id
        incr depth
    }
    toolbar disableButton off
    toolbar disableButton cancel
    toolbar enableButton on
    redrawGraph
}

#######################################################################
#### profileStart
# Turn profiling on.
#
body ::tycho::ProfileTcl::profileStart {} {
    toolbar enableButton off
    toolbar enableButton cancel
    toolbar disableButton on
    profile -commands on
}

#######################################################################
#### updateTimes
# Update the times displayed at the bottom to those of the node closest
# to the current position of the mouse.
#
body ::tycho::ProfileTcl::updateTimes {} {
    set node [current]
    if {$node == {}} {return}
    set root [[graph] roots]
    set fst [graph]

    # Determine the total about of Real and CPU time 
    array set contents [$fst contents $root]
    set totalReal $contents(real)
    set totalCPU $contents(cpu)

    array set contents [$fst contents $node]

    addInfo count {Call count} $contents(count) 
    addInfo real {Real time} $contents(real) 
    if {$totalReal != 0.0} {
        addInfo realPercent {Real %} \
                [format "%5.3f" \
                [expr {$contents(real) / ($totalReal + 0.0) *100}]]
    }
    addInfo cpu {CPU time} $contents(cpu) 
    if {$totalCPU != 0.0} {
        addInfo cpuPercent {CPU %} \
                [format "%5.3f" \
                [expr {$contents(cpu) / ($totalCPU + 0.0) *100}]]
    }
}
