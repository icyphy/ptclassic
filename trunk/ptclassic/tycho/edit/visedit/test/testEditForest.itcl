# Test suite for tycho/editors/visedit/EditForest
#
# @Author: Edward A. Lee,  Christopher Hylands
#
# @Version: @(#)testEditForest.itcl	1.9 03/25/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# A number of windows will be created, and then some time after, destroyed.
# You should just watch.  Do not push any buttons, or you could trigger
# spurious errors.  If no errors occur during the test, there will be no
# windows left at the end.  Currently, windows are left open for 4 seconds.
# Run from within tycho (can just source this file and execute it).

# Make sure that the required packages are loaded
package require tycho.util.tytest
package require tycho.edit.visedit

test EditForest-1.1 {Create a Forest, then display it} {
    catch {delete object ff}
    ::tycho::Forest ff
    ff add a {label {A Node} color red font {times 16 bold r}}
    ff add b {label {B Node} color green}
    ff add c {label {C Node} font {times 40 bold r}}
    ff add d {label {D Node}}
    ff roots
    ff add e {e e} b
    set descr [ff describe]
    set view [::tycho::view EditForest -graph ff]
    set win [$view displayer windowName]
    wm deiconify $win
    after $duration removeobj $win
    list $descr
} {{{d {label {D Node}} {}} {e {e e} b} {a {label {A Node} color red font {times 16 bold r}} {}} {b {label {B Node} color green} {}} {c {label {C Node} font {times 40 bold r}} {}}}}

proc makechildren {rootname deep} {
    global depth numchildren
    if {$deep >= $depth} {return}
    for {set child 1} {$child <= $numchildren} {incr child} {
        set childname "$rootname child $child"
        fst add $childname {} [list $rootname]
        makechildren $childname [expr $deep+1]
    }
}

test EditForest-1.2 {Create a Large Forest, then display it.  This could take time.} {
    set numroots 2
    set numchildren 2
    set depth 5

    catch {delete object fst}

    # FIXME: If the forest below is named "forest", all hell breaks loose.
    ::tycho::Forest fst

    for {set root 1} {$root <= $numroots} {incr root} {
	set rootname "root $root"
	fst add $rootname {}
	makechildren $rootname 1
    }
    set view [::tycho::view EditForest -graph fst]
    set win [$view displayer windowName]

    update
    $view transpose
    update
    $view toggleLayout
    update 
    $view transpose

    after $duration removeobj $win

    list {}
} {{}}

test EditForest-1.3 {Open a forest file and do a reload} {
    set view [::tycho::File::openContext sample.fst]
    set win [$view displayer windowName]
    
    update
    $view reload
    update
    $view redrawGraph
    update
    after $duration removeobj $win
    list {}
} {{}}

