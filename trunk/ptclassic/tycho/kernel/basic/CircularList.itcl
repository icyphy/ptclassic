# A circular list data structure.
#
# @Author: Edward A. Lee
#
# @Version: @(#)CircularList.itcl	1.9	11/12/96
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

##########################################################################
#### CircularList class.
# This is a circular list with methods for adding elements at any point.
# Each element must be a distinct string.  The elements of the list can
# converted to an ordinary Tcl list starting with any specified element.
#
class ::tycho::CircularList {
    inherit ::tycho::Object

    constructor {args} {}

    # Append an element, at the end or after the given element.
    method append {element {after {}}}

    # Reinitialize the list.
    method clear {}

    # Return the elements as a list, optionally starting at the given element.
    method elements {{start {}}}

    # Insert an element in the list.
    method insert {element {before {}}}

    # Remove an element from the list.
    method remove {element}

    # The array used to store the list.
    private variable forward
    private variable backward
    private variable first {}
    private variable last {}
}

#####################################################################
#### constructor
#
body ::tycho::CircularList::constructor {args} {}

#####################################################################
#### append
# Append an element, at the end or after the given element.
# If only one argument is given, the element is appended at the end.
# Otherwise, it is appended after the element given by the second argument.
# If the second argument gives an invalid element, an error is reported.
# If the element already exists in the list, it is first removed.
#
body ::tycho::CircularList::append {element {after {}}} {
    if {$after == {}} {
	if {$last == {}} {
	    set last $element
	    set first $element
	    set forward($element) $element
	    set backward($element) $element
	} {
	    if [info exists forward($element)] {
		remove $element
	    }
	    set forward($element) $first
	    set forward($last) $element
	    set backward($element) $last
	    set backward($first) $element
	    set last $element
	}
    } {
	if {![info exists forward($after)]} {
	    error "CircularList::append: Can't find element: $after"
	} {
	    if [info exists forward($element)] {
		remove $element
	    }
	    if {$last == $after} {set last $element}
	    set forward($element) $forward($after)
	    set forward($after) $element
	    set backward($element) $after
	    set backward($forward($element)) $element
	}
    }
}

#####################################################################
#### clear
# Reinitialize the list.
#
body ::tycho::CircularList::clear {} {
    # If clear is run on a newly constructed CircularList, then
    # forward and backward might not be set
    catch {unset forward}
    catch {unset backward}
    set first {}
    set last {}
}

#####################################################################
#### elements
# Return the elements as a list, optionally starting at the given element.
# If no argument is given, then we start at the first element appended.
#
body ::tycho::CircularList::elements {{start {}}} {
    if {$last == {}} {
	return {}
    }
    if {$start == {}} {
	set start $first
    }
    if {![info exists forward($start)]} {
	error "CircularList::elements: Can't find element: $start"
    } {
	set result $start
	set el $forward($start)
	if {$el != $start} {lappend result $el}
	while {$forward($el) != $start} {
	    set el $forward($el)
	    lappend result $el
	}
	return $result
    }
}

#####################################################################
#### insert
# Insert an element in the list.
# If only one argument is given, the element is prepended at the beginning.
# Otherwise, it is inserted before the element given by the second argument.
# If the second argument gives an invalid element, an error is reported.
# If the element already exists in the list, it is first removed.
#
body ::tycho::CircularList::insert {element {before {}}} {

    if {$before == {}} {
	if {$last == {}} {
	    set last $element
	    set first $element
	    set forward($element) $element
	    set backward($element) $element
	} {
	    if [info exists forward($element)] {
		remove $element
	    }
	    set forward($element) $first
	    set forward($last) $element
	    set backward($element) $last
	    set backward($first) $element
	    set first $element
	}
    } {
	if {![info exists forward($before)]} {
	    error "CircularList::insert: Can't find element: $before"
	} {
	    if [info exists forward($element)] {
		remove $element
	    }
	    if {$first == $before} {set first $element}
	    set forward($element) $before
	    set backward($element) $backward($before)
	    set forward($backward($before)) $element
	    set backward($before) $element
	}
    }
}

#####################################################################
#### remove
# Remove an element from the list.
#
body ::tycho::CircularList::remove {element} {
    if {![info exists forward($element)]} {
	error "CircularList::remove: Can't find element: $element"
    } {
	if {$first == $element && $last == $element} {
	    set first {}
	    set last {}
	} elseif {$first == $element} {
	    set first $forward($element)
	} elseif {$last == $element} {
	    set last $backward($element)
	}
	set forward($backward($element)) $forward($element)
	set backward($forward($element)) $backward($element)
	unset forward($element)
	unset backward($element)
    }
}
