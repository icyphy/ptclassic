# The abstract superclass of file-like "resources"
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#####################################################################
#### openResource
# Open a new resource. Returns the new resource object if successful,
# or null if it failed. Note that some errors in opening the resource
# may cause a stack trace, but others (like time-outs) will just
# cause a null string to be returned.
#
proc ::tycho::openResource {path {mode "r"}} {
    if { [regexp {^http://} $path] } {
	set new [::tycho::ResourceHTTP [::tycho::autoName http]]
    } else {
	set new [::tycho::ResourceFile [::tycho::autoName file]]
    }
    if { ! [$new open $path $mode] } {
	delete object $new
	return ""
    }
    return $new
}

#######################################################################
#### ::tycho::resource
#
ensemble ::tycho::resource {
    # Test if a resource path is relative
    option isrelative {path} {
	if [regexp {^http://} $path] {
	    return 0
	}
	return [::tycho::isRelative $path]
    }
    # Test if a resource exists.
    option exists {path} {
	set resource [::tycho::openResource $path]
	set result [$resource exists $path]
	$resource close
	delete object $resource
	return $result
    }
    # Read from a resource.
    option read {path} {
	set resource [::tycho::openResource $path]
	set result [$resource read]
	$resource close
	delete object $resource
	return $result
    }
    # Test if a resource is readable
    option readable {path} {
	set resource [::tycho::openResource $path]
	set result [$resource readable $path]
	$resource close
	delete object $resource
	return $result
    }
    # Source a file as Tcl, from anywhere on the network.
    option source {path} {
	set resource [::tycho::openResource $path]
	set result [$resource source $path]
	$resource close
	delete object $resource
	return $result
    }
    # Test if a resource is writable
    option writable {path} {
	set resource [::tycho::openResource $path]
	set result [$resource writable $path]
	$resource close
	delete object $resource
	return $result
    }
    # Write data to a resource file.
    option write {path data} {
	set resource [::tycho::openResource $path "w+"]
	$resource write $data
	$resource close
	delete object $resource
    }
}

#######################################################################
#### Resource
#
# The Resource class abstracts the notion of files and (t some extent)
# a file system. A given Resource object can be used as a directory
# or as a file, making it very convenient for both moving around
# file systems and accessing files within it. The data accessed by a
# resource could be a local file system, an HTTP server, a database,
# or anywhere else. Streamable resources act like regular files;
# non-streamable resource act like data repositories. In all cases,
# file and directory paths use a URL-like naming scheme.
#
class ::tycho::Resource {
    inherit ::tycho::Object

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Change the permissions
    method chmod {permissions {path {}}}

    # Close the resource
    method close {}

    # Return the content type of the current file
    method contenttype {}

    # Make a duplicate of the contents of this resource
    method copy {source target args}

    # Delete a resource
    method delete {path}

    # Test if a file is executable
    method executable {path}

    # Test if a given resource exists
    method exists {path}

    # Return the current file type 
    method filetype {}

    # Flush buffered output to a streamable resource 
    method flush {}

    # Read a string from a streamable resource 
    method gets {}

    # Return files at a given path
    method glob {pattern}

    # Return true if a given path is a file
    method isfile {path}

    # Create a new directory
    method mkdir {path}

    # Open a new resource
    method new {{path {}}}

    # Open the resource
    method open {path {mode "r"}}

    # Get the current full resource path
    method path {}

    # Write a string to a streamable resource 
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return true if a given resource is readable
    method readable {path}

    # Source a streamable resource as a Tcl script
    method source {{path {}}}

    # Get the status of a resource
    method stat {path varName}

    # Return 1 if this resource is streamable
    method streamable {}

    # Return true if a resource is writable
    method writable {{path {}}}

    # Write a string to a streamable resource
    method write {data}

    ###################################################################
    ####                           public procs                    ####

    # Create and open a new resource
    proc openResource {path {mode "r"}}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected variables                ####

    # The full name of the current file (or directory)
    protected variable currentFile ""

    # True if a file is open
    protected variable fileIsOpen 0

    ###################################################################
    ####                         private variables               ####
}


#######################################################################
#### constructor
#
body ::tycho::Resource::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::Resource::destructor {} {
    close
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### chmod
body ::tycho::Resource::chmod {permissions {path {}}} {
    ::tycho::abstractMethod chmod
}

#####################################################################
#### close
body ::tycho::Resource::close {} {
    ::tycho::abstractMethod close
}

#####################################################################
#### contenttype
body ::tycho::Resource::contenttype {} {
    ::tycho::abstractMethod contenttype
}

#####################################################################
#### copy
body ::tycho::Resource::copy {source target args} {
    ::tycho::abstractMethod copy
}

#####################################################################
#### delete
body ::tycho::Resource::delete {path} {
    ::tycho::abstractMethod delete
}

#####################################################################
#### executable
body ::tycho::Resource::executable {path} {
    return 0
}

#####################################################################
#### exists
body ::tycho::Resource::exists {path} {
    ::tycho::abstractMethod exists
}

#####################################################################
#### filetype
body ::tycho::Resource::filetype {} {
    ::tycho::abstractMethod filetype
}

#####################################################################
#### flush
body ::tycho::Resource::flush {} {
    ::tycho::abstractMethod flush
}

#####################################################################
#### gets
body ::tycho::Resource::gets {} {
    ::tycho::abstractMethod gets
}

#####################################################################
#### glob
body ::tycho::Resource::glob {pattern} {
    ::tycho::abstractMethod glob
}

#####################################################################
#### isfile
body ::tycho::Resource::isfile {path} {
    ::tycho::abstractMethod isfile
}

#####################################################################
#### mkdir
body ::tycho::Resource::mkdir {path} {
    ::tycho::abstractMethod mkdir
}

#####################################################################
#### new
body ::tycho::Resource::new {{path {}}} {
    set new [[info class] [::tycho::autoName resource]]
    if { $path == "" } {
	$new open $currentFile
    } else {
	$new open $path
    }
    return $new
}

#####################################################################
#### open
body ::tycho::Resource::open {path {mode "r"}} {
    ::tycho::abstractMethod open
}

#####################################################################
#### path
body ::tycho::Resource::path {} {
    return $currentFile
}

#####################################################################
#### puts
body ::tycho::Resource::puts {string} {
    ::tycho::abstractMethod puts
}

#####################################################################
#### read
body ::tycho::Resource::read {} {
    ::tycho::abstractMethod read
}

#####################################################################
#### readable
body ::tycho::Resource::readable {{path {}}} {
    return 1
}

#####################################################################
#### source
body ::tycho::Resource::source {{path {}}} {
    ::tycho::abstractMethod source
}

#####################################################################
#### stat
body ::tycho::Resource::stat {path varName} {
    ::tycho::abstractMethod stat
}

#####################################################################
#### streamable
body ::tycho::Resource::streamable {} {
    return 1
}

#####################################################################
#### writable
body ::tycho::Resource::writable {{path {}}} {
    return 0
}

#####################################################################
#### write
body ::tycho::Resource::write {data} {
    ::tycho::abstractMethod write
}

#########################################################################
#########################################################################
####                        public procs                             ####

#########################################################################
#########################################################################
####                     protected methods                           ####

