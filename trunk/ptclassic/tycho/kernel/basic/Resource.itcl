# The abstract superclass of file-like "resources"
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#####################################################################
#### resourceClass
# Get the class that deals with a resource.
# With just the path argument, return the name of the
# class that deals with resources with that path. If the
# second argument is supplied, call the proc with that name
# in the resource class, passing any additional arguments
# to it, and return the proc's result.
#
# FIXME: This needs to be extended to use a registration mechanism
# as we have for file suffixes and the like.
#
proc ::tycho::resourceClass {path {procname {}} args} {
    # ::puts $path
    # ::puts [regexp {^([a-z]+:/+)} $path protocol]
    if { ! [regexp {^([a-z]+:/+)} $path protocol] } {
	# puts $path
	set rclass ::tycho::ResourceFile
    } else {
	switch -exact -- $protocol {
	    http:// {
		set rclass ::tycho::ResourceHTTP
	    }
	    file:// {
		error "Ftp access not supported yet"
	    }
	    file:/ {
		set rclass ::tycho::ResourceFile
	    }
	    default {
		error "Unknown protocol \"$protocol\""
	    }
	}
    }
    if { $procname == "" } {
	return $rclass
    } else {
	# ::puts -nonewline "$rclass::$procname $path $args -> "
	set result [eval $rclass::$procname $path $args]
	# ::puts $result
	return $result
    }
}

#####################################################################
#### openResource
# Open a new resource. Returns the new resource object if successful,
# or null if it failed. (Some errors in opening the resource
# may cause a stack trace.)
#
proc ::tycho::openResource {path {mode "r"}} {
    if { [regexp {^http://} $path] } {
	set new [::tycho::ResourceHTTP [::tycho::autoName http]]
    } else {
	set new [::tycho::ResourceFile [::tycho::autoName file]]
    }
    if { ! [$new open $path $mode] } {
	delete object $new
	return ""
    }
    return $new
}

#######################################################################
#### ::tycho::resource
#
# Access a resource by URL-like name.
#
ensemble ::tycho::resource {
    # Change access permissions of a resource
    option chmod {path mode} {
	::tycho::resourceClass $path chmod $mode
    }
    # Get a directory listing in ls -F style format
    option dirlist {path} {
	::tycho::resourceClass $path dirlist
    }
    # Get the directory name -- needed because Tcl's <code>file 
    # dirname</code> trashes the second slash after http:/
    option dirname {path} {
	if [regexp {^([a-z]+://)(.*)$} $path dummy protocol filename] {
	    return $protocol[::file dirname $filename]
	} else {
	    ::file dirname $path
	}
    }
    # Test if a resource path is executable
    option executable {path} {
	::tycho::resourceClass $path exists
    }
    # Test if a resource exists.
    option exists {path} {
	::tycho::resourceClass $path exists
    }
    # Test if a resource path is a directory
    option isdirectory {path} {
	::tycho::resourceClass $path query isdirectory
    }
    # Test if a resource path is a file
    option isfile {path} {
	::tycho::resourceClass $path query isfile
    }
    # Test if a resource path is relative
    option isrelative {path} {
	# FIXME: Won't work on Macintosh
	if [regexp {^[a-z]+:} $path] {
	    return 0
	}
	regsub {^file:} $path {} path
	return [::tycho::isRelative $path]
    }
    # Get the last-modified time
    option mtime {path} {
	::tycho::resourceClass stat results
	return $results(mtime)
    }
    # Get a new resource object
    option new {path args} {
	eval ::tycho::resourceClass [list $path] new $args
    }
    # Read from a resource.
    option read {path} {
	set resource [::tycho::resourceClass $path new]
	$resource open $path "r"
	set result [$resource read]
	$resource close
	delete object $resource
	return $result
    }
    # Test if a resource is readable
    option readable {path} {
	::tycho::resourceClass $path query readable
    }
    # Test if a resource is remote
    option remote {path} {
	::tycho::resourceClass $path query remote
    }
    # Source a file as Tcl, from anywhere on the network.
    option source {path} {
	set resource [::tycho::resourceClass $path new]
	$resource open $path "r"
	set result [$resource source]
	$resource close
	delete object $resource
	return $result
    }
    # Get the size
    option size {path} {
	::tycho::resourceClass $path stat results
	return $results(size)
    }
    # Test if a resource is writable
    option writable {path} {
	::tycho::resourceClass $path query writable
    }
    # Write data to a resource file.
    option write {path data} {
	set resource [::tycho::resourceClass $path new]
	$resource open $path "w+"
	set result [$resource write $data]
	$resource close
	delete object $resource
	return $result
    }
}

#######################################################################
#### Resource
#
# The Resource class abstracts the notion of files and (t some extent)
# a file system. A given Resource object can be used as a directory
# or as a file, making it very convenient for both moving around
# file systems and accessing files within it. The data accessed by a
# resource could be a local file system, an HTTP server, a database,
# or anywhere else. Streamable resources act like regular files;
# non-streamable resource act like data repositories. In all cases,
# file and directory paths use a URL-like naming scheme.
#
class ::tycho::Resource {
    inherit ::tycho::Object

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Close the resource
    method close {}

    # Return the content type of the resource
    method contenttype {}

    # Flush buffered output to a streamable resource 
    method flush {}

    # Read a string from a streamable resource 
    method gets {{varName {}}}

    # Open the resource
    method open {path {mode "r"}}

    # Get the current full resource path
    method path {}

    # Write a string to a streamable resource 
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Source the resource as Tcl
    method source {}

    # Return 1 if this resource is streamable
    method streamable {}

    # Write a string to a streamable resource
    method write {data}

    ###################################################################
    ####                           public procs                    ####

    # Change the permissions of a resource
    proc chmod {permissions path}

    # Delete a resource
    proc delete {path}

    # Get a directory listing
    proc dirlist {pattern}

    # Test if a given resource exists
    proc exists {path}

    # Create a new directory
    proc mkdir {path}

    # Create a new resource object
    proc new {path args}

    # Query properties of a file
    proc query {path option}

    # Test if a given resource is remote
    proc remote {path}

    # Get the status of a resource
    proc stat {path varName}

    # Return the type of a given file
    proc type {path}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected variables                ####

    # The full name of the current file (or directory)
    protected variable currentFile ""

    # True if a file is open
    protected variable fileIsOpen 0

    ###################################################################
    ####                         private variables               ####
}


#######################################################################
#### constructor
#
body ::tycho::Resource::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::Resource::destructor {} {
    close
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::Resource::close {} {
    ::tycho::abstractMethod close
}

#####################################################################
#### contenttype
# Return the content type of the open file.
body ::tycho::Resource::contenttype {} {
    ::tycho::abstractMethod contenttype
}

#####################################################################
#### flush
body ::tycho::Resource::flush {} {
    ::tycho::abstractMethod flush
}

#####################################################################
#### gets
body ::tycho::Resource::gets {{varName {}}} {
    ::tycho::abstractMethod gets
}

#####################################################################
#### open
body ::tycho::Resource::open {path {mode "r"}} {
    ::tycho::abstractMethod open
}

#####################################################################
#### path
# Return the path most-recently opened by this object.
body ::tycho::Resource::path {} {
    return $currentFile
}

#####################################################################
#### puts
# FIXME: Support -nonewline option.
body ::tycho::Resource::puts {string} {
    ::tycho::abstractMethod puts
}

#####################################################################
#### read
body ::tycho::Resource::read {} {
    ::tycho::abstractMethod read
}

#####################################################################
#### source
# Source the resource as Tcl. It must be streamable and already
# open. Subclasses only need to override this method if they
# have a better way of doing it.
body ::tycho::Resource::source {} {
    if !$fileIsOpen {
    	error "File [path] is not open"
    }
    uplevel [read]
}

#####################################################################
#### streamable
body ::tycho::Resource::streamable {} {
    return 1
}

#####################################################################
#### write
body ::tycho::Resource::write {data} {
    ::tycho::abstractMethod write
}


#########################################################################
#########################################################################
####                          public procedures                      ####

#####################################################################
#### chmod
body ::tycho::Resource::chmod {permissions path} {
    ::tycho::abstractProc mkdir
}

#####################################################################
#### delete
body ::tycho::Resource::delete {path} {
    ::tycho::abstractProc delete
}

#####################################################################
#### dirlist
body ::tycho::Resource::dirlist {path} {
    ::tycho::abstractProc dirlist
}

#####################################################################
#### exists
body ::tycho::Resource::exists {path} {
    ::tycho::abstractProc exists
}

#####################################################################
#### mkdir
body ::tycho::Resource::mkdir {path} {
    ::tycho::abstractProc mkdir
}

#####################################################################
#### new
body ::tycho::Resource::new {path args} {
    ::tycho::abstractProc new
}

#####################################################################
#### query
body ::tycho::Resource::query {path option} {
    ::tycho::abstractProc query
}

#####################################################################
#### stat
body ::tycho::Resource::stat {path varName} {
    ::tycho::abstractProc stat
}

