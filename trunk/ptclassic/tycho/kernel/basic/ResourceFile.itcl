# The class representing files on a local file system
# 
# @Author: John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceFile
#
# The ResourceFile class abstracts the notion of files and (t some extent)
# a file system. A given ResourceFile object can be used as a directory
# or as a file, making it very convenient for both moving around
# file systems and accessing files within it. The data accessed by a
# resource could be a local file system, an HTTP server, a database,
# or anywhere else. Streamable resources act like regular files;
# non-streamable resource act like data repositories. In all cases,
# file and directory paths use a URL-like naming scheme.
#
class ::tycho::ResourceFile {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Close the resource
    method close {}

    # Return the content type of the resource
    method contenttype {}

    # Flush buffered output to a streamable resource 
    method flush {}

    # Read a string from a streamable resource 
    method gets {}

    # Open the resource
    method open {path {mode "r"}}

    # Write a string to a streamable resource 
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return 1 if this resource is streamable
    method streamable {}

    # Write a string to a streamable resource
    method write {data}

    ###################################################################
    ####                           public procs                    ####

    # Change the permissions of a resource
    proc chmod {permissions path}

    # Delete a resource
    proc delete {path}

    # Test if a given resource exists
    proc exists {path}

    # Return files at a given path
    proc glob {pattern}

    # Create a new directory
    proc mkdir {path}

    # Create a new resource object
    proc new {path}

    # Query properties of a file
    proc query {path option}

    # Source the file as Tcl
    proc source {path}

    # Get the status of a resource
    proc stat {path varName}

    # Return the type of a given file
    proc type {path}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected variables                ####

    ###################################################################
    ####                          private variables                ####
    
    # The current access mode
    private variable accessMode ""
    
    # The current channel (file) ID
    private variable fileid ""
}


#######################################################################
#### constructor
#
body ::tycho::ResourceFile::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::ResourceFile::destructor {} {
    $this close
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::ResourceFile::close {} {
    if { $fileid != "" } {
	::close $fileid
    }
    set fileid ""
    set fileIsOpen 0
}

#####################################################################
#### contenttype
# Return the content type of the open file.
body ::tycho::ResourceFile::contenttype {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    # For now, just return "text/plain". Later on, look at the
    # file extension and/or contents.
    return "text/plain"
}

#####################################################################
#### flush
body ::tycho::ResourceFile::flush {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::flush $fileid
}

#####################################################################
#### gets
body ::tycho::ResourceFile::gets {} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::gets $fileid
}

#####################################################################
#### open
body ::tycho::ResourceFile::open {path {mode "r"}} {
    if $fileIsOpen {
	$this close
    }
    regsub {^file:} $path {} path
    set currentFile $path
    set accessMode $mode
    set fileid [::open $path $mode]
    set fileIsOpen 1
    return 1
}

#####################################################################
#### puts
body ::tycho::ResourceFile::puts {string} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::puts $fileid $string
}

#####################################################################
#### read
body ::tycho::ResourceFile::read {} {
    if !$fileIsOpen {
	$this open
	set data [::read $fileid]
	$this close
	return $data
    } else {
	::read $fileid
    }
}

#####################################################################
#### streamable
body ::tycho::ResourceFile::streamable {} {
    return 1
}

#####################################################################
#### write
body ::tycho::ResourceFile::write {data} {
    if !$fileIsOpen {
	error "File \"$this\" is not open"
    }
    ::puts $fileid $data
}


#########################################################################
#########################################################################
####                          public procedures                      ####

#####################################################################
#### chmod
body ::tycho::ResourceFile::chmod {permissions path} {
    # NOTE: Unix-dependent implementation
    regsub {^file:} $path {} path
    exec chmod $permission $path
}

#####################################################################
#### delete
body ::tycho::ResourceFile::delete {path} {
    # FIXME: Check if file is open?
    regsub {^file:} $path {} path
    ::file delete $path
}

#####################################################################
#### exists
body ::tycho::ResourceFile::exists {path} {
    regsub {^file:} $path {} path
    ::file exists $path
}

#####################################################################
#### glob
body ::tycho::ResourceFile::glob {path} {
    regsub {^file:} $path {} path
    ::glob $path
}

#####################################################################
#### mkdir
body ::tycho::ResourceFile::mkdir {path} {
    regsub {^file:} $path {} path
    ::file mkdir $path
}

#####################################################################
#### new
body ::tycho::ResourceFile::new {path} {
    uplevel #0 ::tycho::ResourceFile [::tycho::autoName resourcefile]
}

#####################################################################
#### query
body ::tycho::ResourceFile::query {path option} {
    # Check for "remote"
    if { $option == "remote" } {
	return 0
    }
    # Check for valid option
    if { [lsearch {executable exists isdirectory \
	    isfile readable writable} $option] >= 0 } {
	regsub {^file:} $path {} path
	::file $option $path
    }
}

#####################################################################
#### source
body ::tycho::ResourceFile::source {path} {
    regsub {^file:} $path {} path
    ::source $path
}

#####################################################################
#### stat
body ::tycho::ResourceFile::stat {path varName} {
    # FIXME: Need to do uplevel?
    regsub {^file:} $path {} path
    ::stat $path $varName
}

