# Dialog Box to build derived files in Tycho, such as HTML documentation
#
# @Author: Christopher Hylands
#
# @Version: @(#)BuilderDialog.itcl	1.29 01/27/99
#
# @Copyright (c) 1997-1999 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### BuilderDialog
# The BuilderDialog brings up a Dialog box that allows the user to
# build Tycho documentation files and indexes.
#
# FIXME: There should be a way to stop a build.
#
# <tcl><pre>
# ::tycho::view BuilderDialog -toolbar 1
# </pre></tcl>
#
# BuilderDialog is a graphical front end for the Builder class.
#
class ::tycho::BuilderDialog {
    inherit ::tycho::View

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Bring up the help file for this widget.
    method help {}

    # Enable the stop button, run the Build operation, disable the stop button
    method runBuilder {args}

    # Stop the Build operation that is running.
    method stopBuilder {}

    ###################################################################
    ####                         public procs                      ####

    # Check to see what files need to be built and bring up a dialog
    proc checkFiles { {displayOKMessage 0}}

    ####################################################################
    ####                  protected methods                         ####

    # Initialize the menu/status/tool bars associated with this widget.
    protected method _initializeBars {menubar statusbar toolbar}

    ####################################################################
    ####                  private methods                           ####

    private method _initializeMenubar {menubar}
    
    # Initialize a test menu submenu will all the .itcl files in that dir.
    private method initializeTestSubmenu {menubar menuname dir}

    # Initialize the toolbar.
    private method _initializeToolbar {toolbar}
}

#######################################################################
#### constructor
#
body ::tycho::BuilderDialog::constructor {args} {
}

#######################################################################
#### destructor
#
body ::tycho::BuilderDialog::destructor {args} {

    # Deregister this window and menubar if inside a displayer
    if { [displayer] != "" } {
        ::tycho::deregister window BuilderDialog $this
        ::tycho::deregister menubar [menubar]
    }
}

#########################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::BuilderDialog::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
            [file join \$TYCHO kernel gui doc usersGuides BuilderDialogHelp.html]

}

#########################################################################
#### runBuilder
# Enable the Stop button, run the command, disable the Stop button
#
body ::tycho::BuilderDialog::runBuilder {args} {
    toolbar enable stop
    if [catch {eval $args}  errMsg] {
        toolbar disable stop
        error $errMsg
    }
    toolbar disable stop
}

#########################################################################
#### stopBuilder
# Stop the Builder by setting a global variable
#
body ::tycho::BuilderDialog::stopBuilder {} {
    uplevel #0 set ::gStop 1
    putStatus "Stop Scheduled, please wait"
}


    ###################################################################
    ###################################################################
    ####                      public procs                       ####

#######################################################################
#### checkFiles
# Check to see what files need to be built and bring up a dialog asking
# the user if they want to build.
# If the optional displayOKMessage argument is 1, then if all the files
# are OK, a message is displayed that says everything is OK. 
#
body ::tycho::BuilderDialog::checkFiles { {displayOKMessage 0}} {
    global TYCHO
    set origmsg "The following Tycho files do not exist:" 
    set msg $origmsg
    if ![file exists [file join $TYCHO kernel gui doc codeDoc File.html]] {
	set msg "$msg\n The Tycho Itcl HTML documentation might not be \
		built, for example the file:\n\
		[file join $TYCHO kernel gui doc codeDoc File.html] \
		does not exist."
    } 
    if ![file exists [file join $TYCHO doc tychoClasses.dag]] {
	set msg "$msg\n The Tycho Class Diagram at \
		[file join $TYCHO doc tychoClasses.dag]"
    } 
    if ![file exists [file join $TYCHO lib idx tycho.idx]] {
	set msg "$msg\n The Tycho Concept Index at \
		[file join $TYCHO lib idx tycho.idx]"
    }
    if ![file exists [file join $TYCHO lib idx codeDoc.idx]] {
	set msg "$msg\n The Tycho Code Index at \
		[file join $TYCHO lib idx codeDoc.idx]"
    } 

    if {$msg != $origmsg} {
	# Something is missing, so bring up the dialog
	set msg "$msg\n\nBring up Build Dialog to build these files?"

	if [::tycho::askuser $msg] {
	    set bd [::tycho::view BuilderDialog -toolbar 1]
	    # Return the name of the window so the test suite can get at it.
	    return $bd
	}
    } else {
	if $displayOKMessage { 
	    ::tycho::inform "The Tycho installation is OK, there is no\
		    need to regenerate any files."
	}
    }
}



#########################################################################
#########################################################################
####                         protected methods                       ####

#####################################################################
#### _initializeBars
# Initialize the menu, status, and toolbars associated with this widget.
# If any of these arguments is null, the associated bar does not
# exist and must be ignored. This method is called from within
# the attachDisplayer{} method.
#
body ::tycho::BuilderDialog::_initializeBars {menubar statusbar toolbar} {
    chain $menubar $statusbar $toolbar

    if {$toolbar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::BuilderDialog::_initializeToolbar $toolbar
    }
    toolbar disable stop

    # Insert items in the menu bar. This is faster in a seperate
    # method.
    if {$menubar != {}} {
        # We have to qualify the call to this supposed-ly private
        # method because Itcl (2.2) has virtual private methods!
        ::tycho::BuilderDialog::_initializeMenubar $menubar
    }

}

#########################################################################
#########################################################################
####                          private methods                        ####

#####################################################################
#### _initializeMenubar
# Initialize the menu bar.  Adds entries specific to this class.
#
body ::tycho::BuilderDialog::_initializeMenubar {menubar} {
    global TYCHO tcl_platform

    displayer configure -title "Tycho Build Manager" \
	    -menupadx 10

    $menubar addMenu build -label Build -underline 0

    $menubar command check build \
	    -label {Check} -underline 0 \
	    -command "$this busy ::tycho::BuilderDialog::checkFiles 1"

    $menubar command full build \
	    -label {Full (10 Minutes)} -underline 0 \
	    -command "$this busy ::tycho::Builder::build"

    $menubar separator buildsep1 build

    $menubar command makeall build \
	    -label {'make all'} -underline 0 \
	    -command "$this busy ::tycho::Builder::all"

    $menubar separator buildsep2 build

    $menubar command buildclassdiagram build \
	    -label {Class Diagram Only} -underline 0 \
	    -command "$this busy ::tycho::Builder::classDiagram"

    $menubar command buildglimpse build \
	    -label {Glimpse} -underline 0 \
	    -command "$this busy ::tycho::Builder::glimpse"

    $menubar command builditclhtml build \
	    -label {Itcl HTML Only (4 Minutes)} -underline 5 \
	    -command "$this runBuilder ::tycho::Builder::itcldocs"

    $menubar command builditclidocs build \
	    -label {Itcl IDocs Only} -underline 6 \
            -command "$this runBuilder ::tycho::Builder::idocs"

    $menubar command buildindices build \
	    -label {Indices Only} -underline 0 \
	    -command "$this busy ::tycho::Builder::indices"

    $menubar command tclextensions build \
	    -label {Tcl Extensions} -underline 0 \
	    -command "$this busy ::tycho::Builder::tclexts"

    global PTOLEMY
    if [ file writable [file join $PTOLEMY src domains] ] { 
        $menubar separator buildsep3 build
	$menubar command domainindex build \
		-label {Domain Index} -underline 0 \
		-command "$this busy ::tycho::Builder::ptDomainIndex"
	$menubar command ptfacets build \
		-label {Ptolemy Facets Forest} -underline 0 \
		-command "$this busy ::tycho::Builder::ptolemyFacetsForest"
    }

    $menubar addMenu test -label Test -underline 0

    $menubar command runalltests test \
	    -label {Run All Tests} -underline 0 \
	    -command "$this busy ::tycho::Builder::testAll"

    $menubar command testinghelp test \
	    -label {Testing Help} -underline 0 \
	    -command "::tycho::File::openContext \
            [file join $TYCHO doc coding testing.html] html"

    $menubar separator testsep1 test

    initializeTestSubmenu $menubar {Kernel Tests} \
            [file join $TYCHO kernel gui test]

    initializeTestSubmenu $menubar {Text Editor Tests} \
            [file join $TYCHO edit textedit test]

    initializeTestSubmenu $menubar {Slate Tests} \
            [file join $TYCHO edit slate test]

    initializeTestSubmenu $menubar {Visual Editor Tests} \
            [file join $TYCHO edit visedit test]

    # If Ptolemy is present, then we can run some tests.
    global ptolemyfeature
    if { $ptolemyfeature(pitcl) || $ptolemyfeature(ptcl) } {
        $menubar separator testsep2 test
        $menubar command kerneltests test \
		-label {Tycho/Ptolemy Kernel Tests} -underline 0 \
                -command "$this busy ::tycho::Builder::testDir \
                [file join $TYCHO typt kernel test]"

        $menubar command editortests test \
		-label {Tycho/Ptolemy Editor Tests} -underline 0 \
                -command "$this busy ::tycho::Builder::testDir \
                [file join $TYCHO typt edit test]"

    }

    if [file writable [::tycho::Builder::getDistBuildDir]] {
        $menubar addMenu distribute -label Distribute -underline 0

        $menubar command fulldist distribute \
		-label {Full Distribution} -underline 0 \
                -command "$this busy ::tycho::Builder::distFull"
    }

    if { $tcl_platform(platform) == "macintosh" } {
	$menubar disable tclextensions
    }

    # Register this window so it appears in menubars
    ::tycho::register window BuilderDialog $this \
	    -label "Tycho Build Manager" \
	    -category tool

    # Register my menubar so I get a help menu
    ::tycho::register menubar $menubar $this
}

#####################################################################
#### initializeTestSubmenu
# Initialize a test menu submenu with all the .itcl files in that dir.
#
body ::tycho::BuilderDialog::initializeTestSubmenu {menubar menuname dir} {
    set menutag [string tolower [join $menuname _]]
    $menubar add cascade $menutag test -label $menuname -underline 0
    $menubar command runall$menutag $menutag \
	    -label "Run All $menuname" -underline 0 \
	    -command "$this busy ::tycho::Builder::testDir $dir"
    $menubar separator sep$menutag $menutag
    foreach file [glob -nocomplain [file join $dir *.tcl] \
	    [file join $dir *.itcl]] {
	set path [::tycho::simplifyPath $file {TYCHO}]
	$menubar command $menutag$path $menutag \
		-label $path \
                -command "::tycho::File::openContext $file"
    }
}

#####################################################################
#### _initializeToolbar
# Initialize the tool bar.  Adds entries specific to this class.
#
body ::tycho::BuilderDialog::_initializeToolbar {toolbar} {
    # Add buttons to the toolbar, if it exists.
    # FIXME: should the user be allowed to change the home window?
    
    $toolbar button stop \
	    -description {stop the Build operation in progress} \
            -text Stop -command "$this stopBuilder"

}
