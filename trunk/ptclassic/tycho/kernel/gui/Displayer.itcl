# Definition of a display manager
# 
# @Author: Farhana Sheikh
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME:
# FEATURES TO BE ADDED:
# (1) Add the remove menu method so that a menu can be removed


#######################################################################
#### Displayer
# This class defines a generic view manager that manages a view.  A view
# may contain other views which display different kinds of visual or 
# textual data.  The display manager provides a mechanism for
# a view to incorporate a customized menu in the display window.  The 
# displayer displays a superset of all possible menus that the view 
# requests and the view indicates to the displayer which menus and menu
# items need to be disabled depending on which subview has the current
# focus.  
# The Displayer inherits from the Dismiss class within Tycho.  This 
# provides the Displayer with basic window functionality.
#
# FIXME: Fill in the documentation here
#
# A Help menu contains pointers to key Tycho documentation
# <p>
# Here is an example:
# <tcl><pre>
# ::tycho::Displayer .dm
# .dm centerOnScreen
# </pre></tcl>
#
class ::tycho::Displayer {
    inherit ::tycho::Dismiss

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # Name of displayer; appears as title of window
    itk_option define -name name Name ""

    ###################################################################
    ####                         public methods                    ####

    # Add a menu to the displayer
    method addMenu {name leftOrRight args}

    # Add a menu item to a menu in the displayer 
    method addMenuItem {itemName inMenu args}
    
    # Add a separator to a menu
    method addSeparator {inMenu}

    # Disable an entire menu 
    method disableMenu {name}

    # Disable a menu item in a menu
    method disableMenuItem {itemName inMenu}

    # Enable an entire menu
    method enableMenu {name}

    # Enable a menu item in a menu
    method enableMenuItem {itemName inMenu}

    # Query the state of a menu item in a menu
    method queryMenuItemState {itemName inMenu} {return $state}
    
    # Query the state of an entire menu
    method queryMenuState {name} {return $state}

    # Remove a menu from the displayer
    method removeMenu {name}

    # Display the given view inside the displayer
    method setView {viewName}

    ###################################################################
    ####                   private variables                       ####

    # need a variable to keep track of number of menus added
    private variable index 0

    # need a variable to keep track of menus
    private variable validMenus
}

#######################################################################
#### -name configuration
# Name of the display.  
# 
configbody ::tycho::Displayer::name {

    wm title $itk_component(hull) $itk_option(-name)
    wm iconname $itk_component(hull) $itk_option(-name)
}

#######################################################################
#### constructor
#
body ::tycho::Displayer::constructor {args} {

    # Setup the standard menu bar for a generic view
    itk_component add menuFrame {
	frame $itk_component(childsite).menuFrame \
		-relief raised \
		-bd 2
    } {
	keep -background -cursor
    }
    pack $itk_component(menuFrame) -side top -fill x

    # Setup the childsite for the incorporation of the view
    itk_component add viewFrame {
	frame $itk_component(childsite).viewFrame 
    } {
	keep -background -cursor
    }
    pack $itk_component(viewFrame) -side top -expand true -fill both

    # Add the File menu which is probably going to be required for
    # all displays
    $this addMenu File left -underline 0

    # reset the text of the dismiss button
    $itk_component(dismiss) configure -text "DISMISS"

    # Undo the binding in the base class, where Return dismisses
    # the window.
    bind $prefix <Return> {}

    eval itk_initialize $args
}

#######################################################################
#### destructor
#
body ::tycho::Displayer::destructor {} {
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####


#######################################################################
#### addMenu
# Allows a view to add a menu to its displayer.  The arguments to the
# method are the name of the menu to be added and the specification of
# extra options for the menu buttom besides the text and menu options.
# An argument to pack menus on the left or right is also required.
#
body ::tycho::Displayer::addMenu {name leftOrRight args} {
    
    # check if name is already used 
    foreach i [array names validMenus] {
	if {$validMenus($i) == $name} {
	    error "Menu $name already exists."
	}
    }
	    
    # if not used, add to list of current menus
    set validMenus($index) $name
    incr index

    # create the new menu
    itk_component add menu_$name {
	eval menubutton $itk_component(menuFrame).menu_$name \
		-text "$name" \
		-menu $itk_component(menuFrame).menu_$name.menu \
		$args
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    pack $itk_component(menu_$name) -side "$leftOrRight"

    # New menu contents
    itk_component add menuList_$name {
	menu $itk_component(menu_$name).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

}

#####################################################################
#### addMenuItem
# Add a menu item to the end of a menu.
# The method takes the name of the menu item, the name of the menu
# in which the menu item is to be added and other menu item options
# including the command option.
#
body ::tycho::Displayer::addMenuItem {itemName inMenu args} {
    
    set found 0

    # check for valid inMenu
    foreach i [array names validMenus] {
	if {$validMenus($i) == $inMenu} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $inMenu does not exist."
    }
    
    # check if itemName does not already exists
    if [catch {set check [$itk_component(menuList_$inMenu) \
	    index "$itemName"] } ] {
	
	# create a new menu item 
	eval $itk_component(menuList_$inMenu) add command \
		[list -label "$itemName"] \
		$args
	
    } {
	# if it does then link it to cmd
	eval $itk_component(menuList_$inMenu) entryconfigure "$itemName" \
		$args
    }
}


#####################################################################
#### addSeparator
# Add a separator to a menu.
# The method takes the name of the menu as an argument.
#
body ::tycho::Displayer::addSeparator {inMenu} {

    set found 0

    # check for valid inMenu
    foreach i [array names validMenus] {
	if {$validMenus($i) == $inMenu} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $inMenu does not exist."
    }

    $itk_component(menuList_$inMenu) add separator
}

#######################################################################
#### disableMenu
# This method provides a way for the view to disable an entire menu in
# its displayer.  The name of the menu to be disabled is the only
# argument.
#
body ::tycho::Displayer::disableMenu {name} {
    
    set found 0

    # check for valid menu name
    foreach i [array names validMenus] {
	if {$validMenus($i) == $name} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $name does not exist."
    }
    
    # Get the index of the last entry in the menu
    set lastEntryIndex [$itk_component(menuList_$name) index last]
   
    # disable all menu entries
    set i 0
    while {$i <= $lastEntryIndex} {
	$itk_component(menuList_$name) entryconfigure $i -state disabled
	incr i
    }
}

#####################################################################
#### disableMenuItem
# Disable the menu item in the specified menu.  The menu item name 
# and the name of the menu that contains the item are the required
# arguments.
#
body ::tycho::Displayer::disableMenuItem {itemName inMenu} {
    set found 0

    # check for valid inMenu
    foreach i [array names validMenus] {
	if {$validMenus($i) == $inMenu} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $inMenu does not exist."
    }
    
    # check if itemName exists
    if [catch {set check [$itk_component(menuList_$inMenu) \
	    index "$itemName"] } ] {
	error "Menu item $itemName does not exist."
    } {
	$itk_component(menuList_$inMenu) entryconfigure "$itemName" \
		-state disabled
    }
}

#####################################################################
#### enableMenu
# Enable an entire menu that has been previously disabled.  The name
# of the menu of the menu to be enabled is the only argument.
#
body ::tycho::Displayer::enableMenu {name} {

    set found 0

    # check for valid menu name
    foreach i [array names validMenus] {
	if {$validMenus($i) == $name} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $name does not exist."
    }
    
    # Get the index of the last entry in the menu
    set lastEntryIndex [$itk_component(menuList_$name) index last]
    
    # enable all menu entries
    set i 0
    while {$i <= $lastEntryIndex} {
	$itk_component(menuList_$name) entryconfigure $i -state normal
	incr i
    }
}

#####################################################################
#### enableMenuItem
# Enable the menu item in the specified menu. Required arguments are
# the name of the menu item and the name of the menu that contains
# the item.
#
body ::tycho::Displayer::enableMenuItem {itemName inMenu} {

    set found 0

    # check for valid inMenu
    foreach i [array names validMenus] {
	if {$validMenus($i) == $inMenu} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $inMenu does not exist."
    }
    
    # check if itemName exists
    if [catch {set check [$itk_component(menuList_$inMenu) \
	    index "$itemName"] } ] {
	error "Menu item $itemName does not exist."
    } {
	$itk_component(menuList_$inMenu) entryconfigure "$itemName" \
		-state normal
    }
}

######################################################################
#### queryMenuItemState
# This method allows a view to query the state of a menu item.
# The required arguments are the name of the menu item and the name
# of the menu that contains it.  The method returns the state of the
# menu item: normal, disabled, or active.
#
body ::tycho::Displayer::queryMenuItemState {itemName inMenu} {

    set found 0

    # check for valid inMenu
    foreach i [array names validMenus] {
	if {$validMenus($i) == $inMenu} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $inMenu does not exist."
    }
    
    # check if itemName exists
    if [catch {set check [$itk_component(menuList_$inMenu) \
	    index "$itemName"] } ] {
	error "Menu item $itemName does not exist."
    } {
	set currentState [$itk_component(menuList_$inMenu) \
		entrycget "$itemName" -state]
    }

    return $currentState
}

#####################################################################
#### queryMenuState
# Query the current state of the menu. The only required argument is
# the name of the menu.  The method returns 0 if all the items in
# the menu are disabled, 1 if all the entries are enabled, and 
# 2 otherwise.
#
body ::tycho::Displayer::queryMenuState {name} {
    set found 0

    # check for valid menu name
    foreach i [array names validMenus] {
	if {$validMenus($i) == $name} {
	    set found 1
	}
    }
    if {$found == 0} {
	error "Menu $name does not exist."
    }

    # Get the index of the last entry in the menu
    set lastEntryIndex [$itk_component(menuList_$name) index last]
    
    # query all entries and count the number of disabled and enabled
    # entries
    set i 0
    set enabledCount 0
    set disabledCount 0
    while {$i <= $lastEntryIndex} {
	set currentState [$itk_component(menuList_$name) entrycget $i -state]
	if {$currentState == "normal"} {
	    incr enabledCount
	}
	if {$currentState == "disabled"} {
	    incr disabledCount
	}
	incr i
    }

    # if the total enabled entries equals the total number of entries then
    # state of the menu is enabled, else if the total number of disabled
    # entries equals the total number of entries then the state is disabled
    # else it is neither.
    if {$enabledCount == [expr $lastEntryIndex + 1]} {
	return 1
    } {
	if {$disabledCount == [expr $lastEntryIndex +1]} {
	    return 0
	} {
 	    return 2
	}
    }
}

#######################################################################
#### removeMenu
# Allows a view to remove a menu from its displayer.  It takes the
# the name of the menu to be removed as an argument.
#
body ::tycho::Displayer::removeMenu {name} {
}


#######################################################################
#### setView
# Display the given view inside the displayer.  The required argument
# is the name of the view widget.
#
body ::tycho::Displayer::setView {viewName} {

    # install view menus
    $viewName addMyMenus
    # pack into the view frame in the window childsite
    pack $viewName -in $itk_component(viewFrame) -expand true -fill both
}


