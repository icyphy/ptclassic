# Definition of a display manager
# 
# @Author: Farhana Sheikh
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Displayer
# This class defines a generic view manager that manages a view.  A view
# may contain other views which display different kinds of visual or 
# textual data.  The display manager provides a mechanism for
# a view to incorporate a customized menu in the display window.  The 
# displayer displays a superset of all possible menus that the view 
# requests and the view indicates to the displayer which menus and menu
# items need to be disabled depending on which subview has the current
# focus.  
# The Displayer inherits from the Dismiss class within Tycho.  This 
# provides the Displayer with basic window functionality.
#
# FIXME: Fill in the documentation here
#
# A Help menu contains pointers to key Tycho documentation
# <p>
# Here is an example:
# <tcl><pre>
# ::tycho::Displayer .dm
# .dm centerOnScreen
# </pre></tcl>
#
class ::tycho::Displayer {
    inherit ::tycho::Dismiss

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    # Name of the menu bar widget for Displayer
    itk_option define -menubar menubar Menubar ""

    # Name of displayer; appears as title of window
    itk_option define -name name Name ""

    ###################################################################
    ####                         public methods                    ####

    # Deregister a view
    method deregisterView {viewLabel}

    # Get the displayer menubar
    method menubar {viewLabel} {return $menubar}

    # Register the given view with the displayer
    method registerView {viewName viewLabel} {return $menubar}

    # Remove the given view from the displayer
    method removeView {viewLabel}

    # Display the given view inside the displayer
    method setView {viewLabel}
    
    ###################################################################
    ####                       private variables                   ####

    # keep the previous menubar so that it can be unpacked
    private variable prevMenubar ""

    # keep a list of all views currently registered with the display
    # indexed by their labels
    private variable viewList 

    # keep a list of inserted views
    private variable insertedViews {}
}

#######################################################################
#### -menubar configuration
# Name of menubar for displayer  
# 
configbody ::tycho::Displayer::menubar {

    # Only pack new menubar if different from previous
    if {$itk_option(-menubar) != $prevMenubar} {

	# If there is already a menubar then unpack it
	# Leave deletion to creator of the menubar widget
	# FIXME: this will not be needed once Tk 4.3 is available
	if {$prevMenubar != ""} {
	    pack forget $prevMenubar
	}

	# Pack the menu bar into the window
	if {$itk_option(-menubar) != ""} {
	    pack $itk_option(-menubar) \
		    -in $itk_component(menuFrame) \
		    -side left \
		    -fill x
	}

	# Remember the menu bar for the next time
	set prevMenubar $itk_option(-menubar)
    }
}

#######################################################################
#### -name configuration
# Name of the display.  
# 
configbody ::tycho::Displayer::name {

    wm title $itk_component(hull) $itk_option(-name)
    wm iconname $itk_component(hull) $itk_option(-name)
}

#######################################################################
#### constructor
#
body ::tycho::Displayer::constructor {args} {

    # Setup a frame for the menu bar
    itk_component add menuFrame {
	frame $itk_component(childsite).menuFrame \
		-relief raised \
		-bd 2
    } {
	keep -background -cursor
    }
    pack $itk_component(menuFrame) -side top -fill x

    # Setup the childsite for the incorporation of views
    itk_component add viewFrame {
	frame $itk_component(childsite).viewFrame 
    } {
	keep -background -cursor
    }
    pack $itk_component(viewFrame) -side top -expand true -fill both

    # Create the default menubar
    # FIXME: remove once upgraded to Tk 4.3
    itk_component add menubar {
	::tycho::Menubar $itk_component(menuFrame).menubar
    } {
	keep -background -cursor
    }

    # Add  a File menu with a quit menu option so that when there are 
    # no views, the display doesn't look weird with only a single Dismiss
    # button.
    $itk_component(menubar) addMenu File left {} -underline 0
    $itk_component(menubar) addMenuItem Quit File \
	    -command "$this nextWindow; delete object $this"

    pack $itk_component(menubar) \
	    -in $itk_component(menuFrame) \
	    -side left \
	    -fill x

    # reset the text of the dismiss button
    $itk_component(dismiss) configure -text "DISMISS"

    # Undo the binding in the base class, where Return dismisses
    # the window.
    bind $prefix <Return> {}

    eval itk_initialize $args

    # For some odd reason, if this is moved to before the itk_initialize, the
    # standard Display menubar does not appear when the window is
    # put up on the screen.
    set prevMenubar $itk_component(menubar)
}

#######################################################################
#### destructor
#
body ::tycho::Displayer::destructor {} {
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####


#######################################################################
#### deregisterView
# De-register a view.  After calling this method, the view and the view's menubar
# will be no longer exist.  They will have to be constructed again.
#
body ::tycho::Displayer::deregisterView {viewLabel} {

    # Check if view is registered
    if [catch {set view $viewList($viewLabel)}] {
	error "View with label $viewLabel not registered with display"
    }
   
    # If it is inserted in the display then first remove it and
    # and then de-register it.
    set index [lsearch -exact $insertedViews $viewLabel]
    if {$index >= 0} {
	$this removeView $viewLabel
    }

    # Destroy the view and its menubar
    destroy $itk_component(menubar$viewLabel)
    destroy $view

    # De-register the view
    unset viewList($viewLabel)
}

#######################################################################
#### menubar
# Get the menubar associated with a specific view
# If viewName is left empty, then the default menubar is returned.
#
body ::tycho::Displayer::menubar {viewLabel} {

    if {$viewLabel == ""} {
	return $itk_component(menubar)
    }

    # Check to make sure view has been registered.
    if [catch {set view $viewList($viewLabel)}] {
	error "View with label $viewLabel not registered with display"
    }

    return $itk_component(menubar$viewLabel)
}

#######################################################################
#### registerView
# Register view with viewName and viewLabel with the Displayer.  A call to this method
# is typically made in the constructor of views.  A menubar associated with the view
# is returned.
#
body ::tycho::Displayer::registerView {viewName viewLabel} {

    # Add the view to the list of views
    set viewList($viewLabel) $viewName

    # Create the menubar for the menu and return the name
    itk_component add menubar$viewLabel {
	::tycho::Menubar $itk_component(menuFrame).menubar$viewLabel
    } {
	keep -background -cursor
    }
    
    return $itk_component(menubar$viewLabel) 
}

#######################################################################
#### removeView
# Remove view with the viewLabel from the Displayer but do not deregister the view
# The view and its menubar are not destroyed.  A call to setView with the view's label
# as the argument will re-insert the view into the Displayer.
#
body ::tycho::Displayer::removeView {viewLabel} {

    # Check if viewName is registered
    if [catch {set view $viewList($viewLabel)}] {
	error "View $viewLabel not registered with display"
    }
   
    # Check if view is inserted
    set index [lsearch -exact $insertedViews $viewLabel]
    if {$index < 0} {
	error "View $view has not been inserted in Displayer"
    }

    # Remove menubar associated with view
    pack forget $itk_component(menubar$viewLabel)
    
    # Remove view from display
    pack forget $view
    
    # Remove view from list of inserted views
    set insertedViews [lreplace $insertedViews $index $index]
    
    # Give focus to first view in the list of inserted views; if list is
    # empty then insert the default menubar
    if {[llength $insertedViews] <= 0} {
	configure -menubar $itk_component(menubar)
    } else {
	set newViewLabel [lindex $insertedViews 0]
	$this setView $newViewLabel
    }
}

#######################################################################
#### setView
# Display the given view inside the displayer.  The required argument
# is the label associated with the view.  The view must have registered itself with the
# Displayer before it can be inserted into the Displayer
# FIXME: might want to add another argument to determine whether view gets packed
#             vertically or horizontally, ie like the -side option on the packer.
#
body ::tycho::Displayer::setView {viewLabel} {

    # Check if view is registered
    if [catch {set view $viewList($viewLabel)}] {
	error "View with label $viewLabel not registered with display"
    }

    # Check if view is inserted; if yes then just return
    set index [lsearch -exact $insertedViews $viewLabel]
    if {$index >= 0} {
	return
    }

    # pack into the view frame in the window childsite
    pack $view -in $itk_component(viewFrame) -expand true -fill both

    # Install the appropriate menubar
    configure -menubar $itk_component(menubar$viewLabel)

    # Add to list of inserted views
    lappend insertedViews $viewLabel

    # Give the view the focus
    $view focusin
}


