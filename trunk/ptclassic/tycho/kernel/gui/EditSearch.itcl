# Query box that prompts the user for one or more text entries.
#
# $Id$
# Authors: Edward A. Lee, Joel R. King
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

# Default width (in characters) of the entry boxes.
option add *EditSearch.entryWidth 30 widgetDefault

# Color of the entry box background
option add *EditSearch.entryBackground \
	[ptkColor antiqueWhite white] widgetDefault

##########################################################################
#### EditSearch class.
# Create a dialog box for searching for text in a Edit object.
# This dialog box should be child window of the Edit object so that it
# is removed when the parent is removed.  To do this, just give it a
# name that is the name of the Edit window with an additional field
# appended after a period. For example, if the name of the Edit object
# is ".file0", the search object could be ".file0.search".
#
class ::tycho::EditSearch {
    inherit ::tycho::EntryQuery

    constructor {args} {}

    #################################################################
    ####                        options                          ####

    #### -backwards option
    # The option to specify backwards search.
    itk_option define -backwards backwards Backwards 0

    #### -chfindcommand option
    # The command to execute on a change and find command.
    itk_option define -chfindcommand chfindcommand ChangeAndFindCommand ""

    #### -edittext option
    # The associated EditText object.
    itk_option define -edittext edittext EditText ""

    #### -findcommand option
    # The command to execute on a find command.
    itk_option define -findcommand findcommand FindCommand ""

    #### -nochange option
    # If this option value is non-zero, do not permit changes.
    itk_option define -nochange nochange NoChange 0

    ##################################################################
    ####                     public methods                       ####

    #### change
    # Change the selection, replacing it with the replacement string.
    method change {}

    #### changeAndFind
    # Change the text in the selection to the value in the Change To box.
    method changeAndFind {}

    #### clearFindMatch
    # Clear the find-match marks on the associated text window.
    method clearFindMatch

    #### find
    # Find the specified pattern. Return 1 if it is found, 0 otherwise.
    method find {}

    ###################################################################
    ####                      protected variables                  ####

    # Remember the last search pattern and change string
    protected common lastSearchPattern ""
    protected common lastChangeString ""

    # Keep common configuration information
    protected common casesw 0
    protected common backwardssw 0
    protected common regexpsw 0
    protected common changeallsw 0

    # Identify "find again" as distinct from the first find of a
    # a particular string.  This is used to avoid repeatedly finding
    # the same string.
    protected variable myLastSearchPattern ""
}

#####################################################################
#### -backwards option
# Set or change the configuration for forwards or backwards search.
# 
configbody ::tycho::EditSearch::backwards {
    if {$itk_option(-backwards)} \
	    {$itk_component(backwards) select} \
	    {$itk_component(backwards) deselect}
}

#####################################################################
#### -edittext option
# Verify that the specified edittext option is valid.
# 
configbody ::tycho::EditSearch::edittext {
    if {$itk_option(-edittext) == {} || \
	    [::info objects $itk_option(-edittext)] == {} || \
	    ![$itk_option(-edittext) isa ::tycho::EditText]} {
	error "EditSearch::find: Invalid -edittext option: \
		$itk_option(-edittext)"
    }
}

#####################################################################
#### constructor
#
body ::tycho::EditSearch::constructor {args} {

    # Define the switches that configure the search
    itk_component add switches {
	frame $itk_component(childsite).switches
    } {
	keep -cursor -background
    }
    pack $itk_component(switches)

    itk_component add case {
	checkbutton $itk_component(switches).case -text "Consider Case" \
		-variable [scope casesw] \
		-relief flat
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(case) -side left

    itk_component add backwards {
	checkbutton $itk_component(switches).backwards -text "Find Backwards" \
		-variable [scope backwardssw] \
		-relief flat
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(backwards) -side left
    
    itk_component add regexp {
	checkbutton $itk_component(switches).regexp -text "Regular Expression" \
		-variable [scope regexpsw] \
		-relief flat
    } {
	keep -cursor -font -background -foreground
    }
    pack $itk_component(regexp) -side left

    configure -queries {
	{pattern {Search pattern:} {}}
	{change {Change to:} {}}
    }

    eval itk_initialize $args

    bind $itk_component(hull) <Control-s> \
	    "$this configure -backwards 0; $this find"
    bind $itk_component(hull) <Control-r> \
	    "$this configure -backwards 1; $this find"

    # If the findcommand option has not been set, set the default now.
    # This has to be done in the constructor rather than in the class
    # definition (as a default) because "$this" is known here.
    if {$itk_option(-findcommand) == {}} {
	configure -findcommand "$this find"
    }

    $itk_component(bbox) buttonconfigure ok \
	    -text {Find <Ret>} \
	    -command "$this execCommand -findcommand"

    addButton clearfind -text {Clear Marks} \
	    -command "$this clearFindMatch"

    if {$itk_option(-nochange) == 0} {

	if {$itk_option(-chfindcommand) == {}} {
	    configure -chfindcommand "$this changeAndFind"
	}

	addButton change -text {Change<M-%>} \
		-command "$this change"
	addButton changeandfind -text {Change&Find} \
		-command "$this execCommand -chfindcommand"

	bind $itk_component(hull) <Meta-percent> "$this change"

	# Add an option to change all matches
	itk_component add changeall {
	    checkbutton $itk_component(switches).changeall -text "Change All" \
		    -variable [scope changeallsw] \
		    -relief flat
	} {
	    keep -cursor -font -background -foreground
	}
	pack $itk_component(changeall) -side left
    } {
	removeQuery change
    }

    # Insert defaults into the entry boxes, if appropriate.
    if [info exists lastSearchPattern] {
	insert pattern $lastSearchPattern
    }
    if {$itk_option(-nochange) == 0 && [info exists lastChangeString]} {
	insert change $lastChangeString
    }
}

##################################################################
####                     public methods                       ####

#####################################################################
#### change
# Change the text in the selection to the value in the "Change To" box.
# 
body ::tycho::EditSearch::change {} {
    set editWindow $itk_option(-edittext)

    set changeto [get change]
    if {$changeallsw} {
	# Change all tagged text.  Note that we have to have done
	# a search, or we will get an error message.
	$editWindow replaceAll $changeto
    } {
	# Change only one
	$editWindow deleteRange sel.first sel.last
	$editWindow insertString insert $changeto
    }
    set lastChangeString $changeto
}

#####################################################################
#### changeAndFind
# Change the text in the selection to the value in the "Change To" box
# and find the next instance that matches the pattern.
# 
body ::tycho::EditSearch::changeAndFind {} {
    change
    find
}

#####################################################################
#### clearFindMatch
# Clear the highlighting in the search window due to a search.
# 
body ::tycho::EditSearch::clearFindMatch {} {
    set tw $itk_option(-edittext)
    $tw clearFindMatch
}

#####################################################################
#### find
# Find the specified pattern in the associated EditText object.
# Return 1 if it is found, 0 otherwise.
# 
body ::tycho::EditSearch::find {} {

    set tw $itk_option(-edittext)
    set pattern [get pattern]
    if {$pattern == ""} {
	error "A search requires text in the Search Pattern box"
    }

    set lastSearchPattern $pattern
    
    # To avoid finding the same string over and over again ...
    if {$myLastSearchPattern == $pattern && !$backwardssw} {
	set start {insert +1 char}
    } else {
	set start insert
    }
    set myLastSearchPattern $pattern
    
    if {$casesw} \
	    {set case "--"} \
	    {set case "-nocase"}
    if {$backwardssw} \
	    {set direction -backwards} \
	    {set direction -forwards}
    if {$regexpsw} \
	    {set regexp -regexp} \
	    {set regexp -exact}

    # This is ugly, but we have to have a "--" before the pattern
    # to keep the command from getting confused if the pattern
    # starts with --.
    if {$case == "--"} {
	set result [$tw find $start $direction $regexp $case $pattern]
    } {
	set result [$tw find $start $direction $regexp $case -- $pattern]
    }

    if {$result == {}} {
	warn "Not found."
	return 0
    } {
	return 1
    }
}

