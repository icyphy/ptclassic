# Error message window.
#
# $Id$
# Author: Edward A. Lee
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### tkerror
# Inform the user of an error, and return only after the user has
# acknowledged.  This is a procedure in the global scope that will
# handle all background errors in Tk.  Therefore, within the tycho
# namespace and within classes it should be sufficient to simply
# call the Tcl command "error".
#
proc ::tkerror {msg} {
    # Handle the blank message case
    if {$msg == ""} {set msg "Tcl reports an error"}

    ::tycho::DialogWindow::newModal ErrorMessage [::tycho::autoName .error] \
	    -text $msg -bitmap error
}

##########################################################################
#### showStack
# This utility displays the stack in a window. Insert it in code for
# debugging. The argument is displayed on the first line, and can be
# used to give additional information or distinguish between distinct
# instances of the procedure.
#
proc ::tycho::showStack {args} {
    # From Ousterhout
    append trace "Stack: $args"
    set level [info level]
    for {set i 1} {$i < $level} {incr i} {
	append trace "\n"
        append trace "$level $i: [info level $i]"
    }
    post $trace
}

# COMPATIBILITY procedures.  The following procedures emulate the behavior
# of similarly named procedures in pigi, the predecessor to Tycho.
# The window names in these arguments are ignored (since they bring
# up modal dialogs, the window names are not important anyway).
#
proc ptkImportantMessage {win msg} {::tkerror $msg}
proc ptkDisplayErrorInfo {} {
    global errorInfo
    ::tycho::post $errorInfo
}

##########################################################################
#### ErrorMessage
# Issue an error message to the user. To issue an error message, simply call
# the Tcl command "error". If the error occured in processing a
# background Tk command, then "tkerror" will be invoked, which in turn
# will create an instance of this class and pop up a modal dialog to
# inform the user. "Modal" means that nothing further will happen until
# the window is destroyed.  Here is an example:
# <tcl><pre>
# ::tycho::ErrorMessage .xx -text {An error message}
# wm deiconify .xx
# </pre></tcl>
#
class ::tycho::ErrorMessage {
    inherit ::tycho::Message

    constructor {args} {}

    # Show the stack trace in a window, if there is one.
    method stackTrace {} {}
}

##########################################################################
#### constructor
#
body ::tycho::ErrorMessage::constructor {args} {
    # Pack the stack trace button, if there is error info.
    global errorInfo
    if {$errorInfo != ""} {
	addButton trace -text "Stack Trace" -command "$this stackTrace"
    }

    # In case there is a Ptolemy system running, halt it.
    # This is put in catch so that this code can be used outside of Ptolemy.
    # To avoid losing information in the stack trace, we have to save it.
    set savestack $errorInfo
    catch {::tycho::halt}
    set errorInfo $savestack

    # Process any unevaluated arguments.
    eval itk_initialize $args
}

##########################################################################
#### stackTrace
# Show the stack trace in a window, if there is one.
#
body ::tycho::ErrorMessage::stackTrace {} {
    global errorInfo
    if {$errorInfo != ""} {
	post "The most recent stack trace found is:\n$errorInfo"
    } {
	warn "No stack trace found"
    }
    nextWindow
    delete object $this
}
