# File browser.
#
# @Author: Edward A. Lee
# @Contributors: Based on a Tcl/Tk version by Wei-Jen Huang and
# 	Mario Jorge Silva.
#
# Version: $Id$
#
# @Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# NOTE:  I considered using the file browser in the iwidgets library,
# which is more like the standard Motif file browser.  I rejected it for
# aesthetic reasons, settling on this simpler browser.  This one is
# fashioned after the file browser in FrameMaker.


##########################################################################
#### filename
# Query the user for a filename and return it.  This procedure brings up
# a file browser, and returns only when that file browser is dismissed.
#
proc ::tycho::filename {} {
    return [::tycho::DialogWindow::newModal FileBrower [autoName .file]]
}

##########################################################################
#### FileBrowser
# This file browser displays a list of the files in the current
# directory, permitting the user to select a file or directory by
# clicking or by typing the name in an entry box. File completion (only
# in the current directory) is supported via the Tab key, as is
# glob-style pattern matching. The file browser has a "Help" button and
# a "New Directory" button. When the user selects a directory, the
# listbox is normally updated to reflect the contents of that
# directory. However, if a Tycho editor has been registered by
# contents, extension, or name, then that editor is invoked instead
# (see the register commands in the File class). When the user has
# selected a file, the file browser self-destructs. If the -command
# option is specified, then the value of the option is taken as a
# command to execute before self destructing. The filename selected by
# the user (with the complete path, and which may represent a file that
# does not exist) is appended to the command as an argument.
# <p>
# For example, the following command will query the user for a file name,
# and then post that filename in top-level window:
# <tcl><pre>
# ::tycho::FileBrowser .w -command ::tycho::post
# .w centerOnScreen
# </pre></tcl>
# <p>
# The <code>FileBrowser</code> class maintains its own notion of the
# current working directory that is not necessarily the same as the
# current working directory of the Tcl interpreter. Each instance of
# the <code>FileBrowser</code> updates this when the user selects a new
# directory. If multiple file browsers are open at once, they navigate
# the file system independently. But the most recently selected
# directory will then be the default directory of any newly created
# file browser.
#
class ::tycho::FileBrowser {
    inherit ::tycho::ListBrowser

    constructor {args} {}
    destructor {}

    ##################################################################
    ####                     public methods                       ####

    # Open a help window.
    method help {}

    # Make a new directory and go to it.
    method mkdir {}

    ##################################################################
    ####                     public procs                         ####

    # Set the global current working directory.
    proc setCWD {cwd} {set CWD $cwd}

    ##################################################################
    ####                   protected methods                      ####

    # Process a file or directory selection.
    protected method processItem {filename}

    # Fill the listbox with file and directory names.
    protected method updateListbox {}

    ##################################################################
    ####                   protected variables                    ####

    # The last file opened.
    protected common fileLastOpened {}
    # The directory last visited.
    protected common CWD

    # A local version of the CWD is kept in case multiple file browsers
    # are open at once (each has to have its own notion of the current
    # working directory).
    protected variable localCWD
}

######################################################################
#
body ::tycho::FileBrowser::constructor {args} {
    
    # The text to insert at the top of the file browser
    configure -text "Select File:"
    
    global ::env
    
    if {! [info exists CWD]} {
	# First FileBrowser window constructed.
	# If the environment variable PTPWD exists, it gives the directory.
	# Otherwise, we issue the Tcl command pwd.
	if [info exists env(PTPWD)] {
	    set CWD $env(PTPWD)
	} {
	    set CWD [pwd]
	}
    }

    set localCWD $CWD

    # Current directory display.
    itk_component add dir {
	label $itk_component(childsite).dir -text $localCWD -width 35 -anchor e
    } {
	keep -background -cursor -foreground -font
    }
    pack $itk_component(dir) -side top -fill x -after $itk_component(listscroll)
    
    # Create directory button.
    $itk_component(buttons) add mkdir -text "New Directory" \
	    -command "$this mkdir"

    # Process any unevaluated arguments.
    eval itk_initialize $args

    # Subscribe to the preference set
    preference subscribe filebrowser $this \
	    -width width \
	    -height height

    # In case updateListbox inserts into the entry; to avoid repetition
    clear entry
    insert entry $fileLastOpened
}


###################################################################
#### destructor
# Unsubscribe from all preferences
#
body ::tycho::FileBrowser::destructor {} {
    # Unsubscribe from all preferences
    preference unsubscribe filebrowser $this
}

    ##################################################################
    ##################################################################
    ####                     public methods                       ####

######################################################################
#### help
# Open a help window.
#
body ::tycho::FileBrowser::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO kernel doc usersGuides FileBrowserHelp.html]
}

######################################################################
#### mkdir
# Make a new directory and list its contents in the list box.
# Also, make this new directory the common working directory.
#
body ::tycho::FileBrowser::mkdir {} {
    set dirname [::tycho::queryinfo "Directory name" "$localCWD/" 80]
    if {$dirname != {}} {
	# FIXME: Unix command built in
	exec mkdir $dirname
	processItem $dirname
    }
}

    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

######################################################################
#### processItem
# Check and process the user selection. If the argument is the name of a
# file, then the command specified with the -command option is invoked
# with that filename as an argument, and a 1 is returned. If the argument
# is a directory name, then the listbox is updated with the contents
# of the directory and a 0 is returned. If the argument is an
# empty string, then nothing is done and a zero is returned. If the
# specified filename exists but is not readable, an error is triggered.
# If the filename does not exist as either a file or a directory, then
# the command given by the -command option is invoked on that file. If
# the entry is invalid for some reason, the user is warned and the
# method returns 0.
#
body ::tycho::FileBrowser::processItem {filename} {
    global tcl_platform
    if {$filename == ""} {return 0}
   
    if { "$tcl_platform(platform)" == "windows" } {
	if ![regexp {^[A-Za-z]:} $filename] {
	    set file $localCWD/$filename
	} {
	    set file $filename
	}
    } else {
	# If the name is relative, prepend with current path.
	set char [string index $filename 0]
	if {$char != "/" && $char != "~" && $char != "\$"} {
	    set file $localCWD/$filename
	} {
	    set file $filename
	}
    }

    # Expand to absolute path.
    set file [::tycho::expandPath $file]

    # If expansion failed, trigger an error
    if { "$tcl_platform(platform)" == "windows" } {
	if ![regexp {^[A-Za-z]:} $file] {
	    error "Cannot expand $filename"
	}
    } else {
	if {[string index $file 0] != "/"} {
	    error "Cannot expand $filename"
	}
    }
    # If the file does not exist, check to see whether the
    # directory exists.  If it does, execute the command given by -command
    # (which will probably create the file).  Otherwise, trigger an error.
    if {! [file exist $file]} {
	set dir [file dirname $file]
	if {[file exist $dir] && [file isdir $dir]} {
	    execCommand -command $file
	    set fileLastOpened $filename
	    return 1
	} {
	    ::tycho::warn "Directory does not exist: $dir"
	    return 0
	}
    } 
    
    # If the file does exist, and is a directory
    if {[file isdir $file] && [::tycho::File::registeredCommands $file] == {}} {
	if {[file readable $file] && [file executable $file]} {
	    
            set CWD [::tycho::expandPath $file]
            $itk_component(dir) config -text $CWD
            set localCWD $CWD
            set fileLastOpened ""
            updateListbox
            return 0
	} else {
	    ::tycho::warn \
		    "Directory \"[string trimright $file /]\" is unreadable"
	    return 0
	}
    } else {
	# It's a plain file or a directory with a registered editor
	if {[file readable $file]} {
	    execCommand -command $file
	    # Store last file opened
	    set fileLastOpened $filename
	    return 1
	} {
	    ::tycho::warn "\"$file\" is unreadable"
	    return 0
	}
    }
}

######################################################################
#### updateListbox
# Fill the listbox with filenames. Classify directories and files.
# Directories are inserted at the top and are arranged alphabetically.
# Files are listed next, also alphabetically.
#
body ::tycho::FileBrowser::updateListbox {} {
    
    # clear the list box
    $itk_component(listbox) delete 0 end
    
    # Get a list of filenames in the current working directory
    set files [glob -nocomplain $localCWD/*]
    
    # Split the filename list into directories and plain files
    set dirList ""
    set fileList ""
    foreach file $files {
	set tail [file tail $file]
	if [file isdirectory $file] {
	    lappend dirList $tail
	} {
	    lappend fileList $tail
	}
    }
    
    set dirList [lsort $dirList]
    set fileList [lsort $fileList]
    
    # Insert directories, then files into the listbox
    foreach dir $dirList {
	$itk_component(listbox) insert end "$dir/"
    }
    foreach fname $fileList {
	$itk_component(listbox) insert end "$fname"
    }
    
    clear entry
    
    set dirLength [llength $dirList]
    set fileLength [llength $fileList]
    
    if {$localCWD != "/"} {
	$itk_component(listbox) insert 0 "../"
    }
    
    # Choose intelligently which default file or directory
    # to put in the entry box.
    if {($dirLength == 1) && ($fileLength == 0)} {
	insert entry [lindex $dirList 0]
    } elseif {($dirLength == 0) && ($fileLength == 1)} {
	insert entry [lindex $fileList 0]
    } elseif {($dirLength == 0) && ($fileLength == 0)} {
	if {$localCWD != "/"} {
	    insert entry "../"
	}
    }
}
