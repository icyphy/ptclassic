# A Dialog box for selecting a font.
#
# @Author: Edward A. Lee
# @Version: @(#)FontDialog.itcl	1.10 12/10/97
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
###########################################################################

##########################################################################
#### queryfont
# Query the user for a font and return it as a three-element list:
# {_family_ _size_ _style_} . This procedure brings up a
# font dialog, and returns only when it is dismissed. The
# returned string is the name of a font. If any arguments are
# given, then they are taken to be the font family, size, and style
# respectively: see ::tycho::FontManager::getFont. If the dialog
# is cancelled, then this procedure returns the original arguments.
# <p>
# This procedure indirectly calls <code>update</code>, a Tk utility
# that processes pending events, including mouse events. If this
# procedure is called from within an Itcl object, directly or
# indirectly, it may be necessary to take precautions to prevent the
# calling object from being deleted during the call. Because of a
# defect in at least some versions of Itcl, failure to do so can result
# in catastrophic failure of the application (a core dump). In Tycho
# objects, the <code>safeEval</code> method should be used to evaluate
# this procedure or any method or procedure that in turn calls this
# procedure. If the procedure is called from the top level or from a
# Tcl procedure that is not itself called from within an Itcl object,
# then there is no cause for worry.
#
proc ::tycho::queryfont {args} {
    set name [autoName .font]
    uplevel #0 ::tycho::FontDialog $name [list -initialfont $args]
    set fontname [::tycho::Dialog::wait $name 0]
    if { $fontname != "" } {
	return [list [lindex $fontname 1] \
		[lindex $fontname 3] [lindex $fontname 5]]
    } else {
	return $args
    }
}

#########################################################################
#### FontDialog
# Manage font selection. Instances of this class are dialog windows
# that permit the user to select a font. If the creator makes the font
# manager modal using the <code>::tycho::Dialog::wait</code> procedure,
# then that procedure will return either a valid font name selected by
# the user or the null string (if the user cancels).
#
# <i>Do not instantiate the class directly, but call the
# *::tycho::fontdialog* procedure instead.</i>
#
class ::tycho::FontDialog {
    inherit ::tycho::Query

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                            options                               ####

    # Specify the initial font displayed in the window.
    itk_option define -initialfont initialFont InitialFont {Helvetica 12 Roman}


    ##########################################################################
    ####                         public methods                           ####

    # Update the font display
    method updateDisplay {}

    # Disable some pack propagation to prevent size changes
    method freeze {}
}

#########################################################################
#### -initialfont option configuration
# Specify the initial font. If the font is not valid, trigger an error.
# If it is valid, the text sample in the window will be displayed in
# the specified font. If the specified font can be parsed so that the
# family, size, weight, and style are recognized, then the radio
# buttons in the menus will be set to match. Otherwise, they remain in
# their previous state.
# 
configbody ::tycho::FontDialog::initialfont {
    set spec $itk_option(-initialfont)
    if { [llength $spec] >= 1 } {
	insert family [lindex $itk_option(-initialfont) 0]
    }
    if { [llength $spec] >= 2 } {
	insert size [lindex $itk_option(-initialfont) 1]
    }
    if { [llength $spec] >= 3 } {
	insert style [lindex $itk_option(-initialfont) 2]
    }

    updateDisplay
}

#####################################################################
#
body ::tycho::FontDialog::constructor {args} {

    # The font family menu
    choice family {Font family:} [lsort [::tycho::FontManager::family]] \
	    Helvetica \
            -command "$this updateDisplay"

    # The font size menu
    choice size {Font size:} [::tycho::FontManager::size] 12 \
            -command "$this updateDisplay"

    # The font style menu
    choice style {Font style:} {Roman Italic Bold {Bold Italic}} Roman \
            -command "$this updateDisplay"

    # Here we add a sample of the font.

    set sample \
"
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
0123456789
!@#$%^&*()_+-=[]{};:'\"`~,.<>/?\\|
"

    # The font sample frame
    itk_component add sampleframe {
	frame $itk_component(childsite).sampleframe
    } {
	keep -background
    }
    pack $itk_component(sampleframe) -fill x -expand on \
	    -after $itk_component(top)

    # Make the sample frame (as a grid) expand to fill its container
    grid columnconfigure $itk_component(sampleframe) 0 -weight 1
    grid rowconfigure $itk_component(sampleframe) 0 -weight 1

    # The font sample
    itk_component add sampler {
	label $itk_component(childsite).sampler -text $sample \
		-relief raised -bd 2
    } {
	keep -highlightthickness -background \
		-foreground -highlightbackground
    }
    grid $itk_component(sampler) -sticky nsew \
	    -in $itk_component(sampleframe)

    # The font name
    itk_component add fontname {
	label $itk_component(childsite).label \
		-font $itk_option(-messagefont) -relief raised -bd 2
    } {
	keep -highlightthickness -background \
		-foreground -highlightbackground
    }
    grid $itk_component(fontname) -sticky ew \
	    -in $itk_component(sampleframe)

    $itk_component(fontname) configure -text \
	    [$itk_component(fontname) cget -font]

    eval itk_initialize $args

    # If no -okcommand option is specified, use a reasonable default.
    if {$itk_option(-okcommand) == {}} {
	configure -okcommand "$this get"
    }

    # Wait until the window is mapped (thus allowing it to be
    # the right size for the initial font), then freeze its size
    whenMapped sampler "$this freeze"
}

#########################################################################
#########################################################################
####                       public methods                            ####


########################################################################
#### freeze
# Prevent the window from changing size when different fonts are selected.
# This should be called after the window has been deiconified. Note that
# it is _not_ done automatically because a) it must be done after
# the window is mapped to the screen and b) you may wish to add
# extra buttons to the window after creating it. For the same reason,
# you should not use <code>::tycho::Dialog::new</code> to create the
# window, but just instantiate it.
#
body ::tycho::FontDialog::freeze {} {
    grid propagate $itk_component(sampleframe) 0
}

########################################################################
#### updateDisplay
# Update the display of the current font. This is a public method
# mainly so it can be called by the font options menus; however,
# if any subclass or client changes the font selection by using the
# insert{} method, then they should call this to update the font
# display.
#
body ::tycho::FontDialog::updateDisplay {} {
    set spec [$this get]
    set family [lindex $spec 1]
    set size [lindex $spec 3]
    set style [lindex $spec 5]

    set systemFont [::tycho::font $family $size $style]
    $itk_component(sampler) configure -font $systemFont
    $itk_component(fontname) configure -text $systemFont
}
