# Index browser.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################


##########################################################################
#### IndexBrowser
# A browser for an index.  The index is retrieved from a file
# that can be loaded by the <a href="HyperlinkIndex.html">
# HyperlinkIndex</a> class. Briefly, it contains a set of
# entities of type *hyperlink*, each of which has a name,
# a value (being the file the link references, and an
# optional attribute called *-point*, being the point in the file
# reference by the hyperlink. See the <a href="HyperlinkIndex.html">
# HyperlinkIndex</a> class for more details.
#
# The name of each hyperlink is displayed in the list browser.
# When selected, the corresponding file is opened at the point
# indicated by the *-point* attribute. The file point can have 
# any syntax supported by the <code>seeFragment</code>
# method of the target editor indicated the the referenced file.
# If it is a null string, {}, the file is simply opened.
# In the reference file is an HTML file, it can be the name
# associated with any named anchor.
# In a text file it could be a string of the form {line linenumber}
# or {range start end}, where start and end are of the form line.character.
#
# A hyperlink entity can also contain an attribute called
# *-contents*, in which case selecting the entry will cause
# the browser to display the hyperlinks in the contents
# attribute. (<b>Note</b>: This is currently broken.)
# This allows for recursive indexes in a single file. When the user
# clicks on one of these two-item entries, the contents of the list box
# are replaced by the new index list.
# <p>
# If a hyperjump is taken into an index file, and a point is specified,
# then the index is searched for a matching entry.  If a single matching
# entry is found, then the link is followed for that entry.  Otherwise,
# the index is displayed with all matching entries shown.
# <p>
# If the -file option is given, that file is read for the contents of
# the listbox.  Moreover, the directory of that file is used for relative
# filenames referenced by the index.  Otherwise, the current working directory
# is used for relative file names.
# <p>
#
# The example below opens up the tycho index
# <tcl><pre> 
# set win [::tycho::IndexBrowser [::tycho::autoName .ib] &#92
#	    -file [file join \$TYCHO lib idx tycho.idx]]
# $win centerOnScreen
# </pre></tcl>
#
# Note: The IndexBrowser uses the <a href="HyperlinkIndex.html">
# HyperlinkIndex</a> class to load its data. The hyperlink index
# file should always be generated by creating one of these classes,
# using its methods to add data to it, and then using its save{}
# method to generate the index files. However, the IndexBrowser
# alsoi supports an older format in which the file is a nested
# Tcl list -- that is, the *-file* option can be a file in this
# old format and (apart from speed) the IndexBrowser will
# work. The format of the file is that of a list of two items.
# It can contain comment lines, which begin with a pound sign (#).
# These are ignored. The remaining test is a two-element list,
# containing:
# <ul>
# <li> A title.
# <li> An index list.
# </ul>
# An index list is a list of entries, where each entry is a list
# with two or three items.  If the entry has three items, they should be
# <ul>
# <li> The string to display in the list box.
# <li> The name of a file to jump to when the user clicks on the item.
# <li> The point within the file to jump to.
# </ul>
# The third item has any syntax supported by the <code>seeFragment</code>
# method of the target editor.  It may be a null string, {}, in which case
# the file is simply opened.
# In an HTML file, it can be the name associated with any named anchor.
# In a text file it could be a string of the form {line linenumber}
# or {range start end}, where start and end are of the form line.character.
# <p>
# If an entry in the index has only two items, then they are:
# <ul>
# <li> A title.
# <li> An index list.
# </ul>
# This is treated as a recursive index, as explained above.
#
class ::tycho::IndexBrowser {
    inherit ::tycho::ListBrowser

    constructor {args} {}
    destructor {}

    #################################################################
    ####                        options                          ####

    # Specify the name of the file that contains the index.
    itk_option define -file file File {}

    ##################################################################
    ####                     public procs                         ####

    # Make an index file in TIM format
    proc makeIndexFile {name filename prependTYCHO nested args}

    ##################################################################
    ####                     public methods                       ####

    # Go back up to the top-level display of hyperlinks
    method up {}

    # Return the current point in a form usable by seeFragment.
    method currentPoint {}

    # Open a help window.
    method help {}

    # Open a file and go to its internal point identified by name.
    method hyperJump {filename {point {}}}

    # Find a match in the list, and open that entry.
    method seeFragment {point}

    ##################################################################
    ####                   protected methods                      ####

    # Process a file or directory selection.
    protected method processItem {filename}

    # Fill the listbox with items.
    protected method updateListbox {}

    ##################################################################
    ####                   private variables                      ####

    # The directory of the index file.
    private variable CWD {}

    # The model we use to load the hyperlink index
    private variable indexModel

    # Set if using a HyperlinkIndex model
    private variable useHyperlinkIndex 0

    # A private variable we use to indicate "compatible" mode
    private variable compatible 0

    # The index current list, if loaded from an index list
    private variable indexList

    # The entries in the index, if loading from an index list
    private variable indexEntries
}

#########################################################################
#### -file configuration
# Set or change the name of the file that specifies the contents of the
# listbox.  This also specifies the directory relative to which file
# references are understood. After setting the option, call the reload{}
# method to cause the listbox to reload the data from the new file.
#
configbody ::tycho::IndexBrowser::file {
    set file [::tycho::expandPath $itk_option(-file)]
    if [ file readable $file.fst ] {
        # Add a button that will bring up a forest browser.
	$itk_component(bbox) add browse \
		-text "    Browse    " \
                -command "::tycho::File::openContext $file.fst" \
		-row 1 -column 0
    }

    # Read the first non-blank line of the model.
    set fd [open $file r]
    set firstline [gets $fd]
    while { [regexp {^[ \t]*$} $firstline] && ! [eof $fd] } {
	set firstline [gets $fd]
    }
    close $fd

    # See if the first non-blankline indicates a TIM. If not, read the file
    # as a string and convert from the old index file format
    if { [regexp {#*[ \t]*@Tycho[ \t]*TIM} $firstline] } {
        set useHyperlinkIndex 1

        # Create the index model
        set indexModel [::tycho::HyperlinkIndex [::tycho::autoName index] \
                -datafile $file \
                -statefile [file rootname $file].snapshot]

        # Load it
        $indexModel load

        # If the index is nested, add a "Back up" button
        if { [$indexModel modelcget -nested] } {
            if { ! [$itk_component(bbox) exists up] } {
                $itk_component(bbox) add up -text "   Back up   " \
                        -command "$this up" \
                        -row 1 -column 0 -state disabled
            }
        }
    } else {
        # Otherwise, Open the file and read the contents
        set fd [open $file r]
        set contents [read $fd]
        close $fd

        # Remove comments and store resulting list in indexList
        regsub -all "(^|\n)\[ \t\]*#\[^\n\]*(\n|$)" $contents {} indexList
    }
    
    # Remember the directory of the file because the
    # files in the hyperlink index might be relative to this
    # directory.
    set CWD [file dirname $file]
}

######################################################################
#
body ::tycho::IndexBrowser::constructor {args} {
    # Process any unevaluated arguments.
    eval itk_initialize $args

    # Subscribe to the preference set
    preference subscribeoptions $this \
	    -width  indexBrowserWidth \
	    -height indexBrowserHeight

    # Load the hyperlinks
    updateListbox
}

body ::tycho::IndexBrowser::destructor {} {
    # Delete the index model if there is on
    if [::info exists indexModel] {
        delete object $indexModel
    }
}


    ##################################################################
    ##################################################################
    ####                     public procs                         ####

######################################################################
#### makeIndexFile
# Make an index file in TIM format. This can also be read by the
# Tycho IndexBrowser class.
# The first argument is the name of the index.
# The second argument is the name of the index file to create.
# The third argument causes "$TYCHO/" to be prepended to the file name.
# The fourth argument generates a one-level hierarchy if true.
# The rest of the arguments are any number of file names
# from which the index should be created.  If any of these files
# is missing or is not readable, then that file is ignored.
#
proc ::tycho::IndexBrowser::makeIndexFile \
        {name filename prependTYCHO nested args} {
    set index [::tycho::HyperlinkIndex [::tycho::autoName index] \
	    -datafile $filename \
	    -statefile [file rootname $filename].snapshot]
    $index modelconfigure -title $name
    $index modelconfigure -directory [file dirname $filename]

    foreach file $args {
	if $prependTYCHO {
	    $index parseFile [file join \$TYCHO $file]
	} else {
	    $index parseFile $file
	}
    }
    # Sort the index, case-insensitive
    $index sort -command tychoCompareNocase

    # Make it nested if asked to
    if { $nested } {
        $index nest
    }

    # Write to its files
    $index save

    delete object $index
}

    ##################################################################
    ##################################################################
    ####                     public methods                       ####

#####################################################################
#### currentPoint
# Return the text of the current entry.
#
body ::tycho::IndexBrowser::currentPoint {} {
    return [get entry]
}

######################################################################
#### help
# Open a help window.
#
body ::tycho::IndexBrowser::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    [file join $TYCHO kernel doc usersGuides IndexBrowserHelp.html]
}

#####################################################################
#### hyperJump
# Open a file and go to its internal point identified by name. If the
# filename is relative (it does not begin with "/"(unix), "~", or "$"), then
# prepend the directory of the file currently being edited or viewed.
# Then, expand the filename using <code>::tycho::expandPath</code> and
# open the resulting file with <code>::tycho::File::openContext</code>,
# which will choose an editor based on the filename extension. Finally,
# invoke <code>seeFragment</code> to view the specified point within the
# file. The format for the <i>point</i> argument depends on the type of
# file being opened. For HTML files, it will normally be the name of an
# anchor in the file. For text files, it will normally be either "{line
# <i>linenumber</i>}" or "{range <i>start</i> <i>end</i>}", where
# <i>start</i> and <i>end</i> have the form
# <i>linenumber.characternumber</i>.
#
body ::tycho::IndexBrowser::hyperJump {filename {point {}}} {
    if { [::tycho::isRelative $filename] && $CWD != {}} {
	set filename [file join $CWD $filename]
    }
    ::tycho::TopLevel::hyperJump $filename $point
}

#####################################################################
#### seeFragment
# If a hyperjump is taken into an index file, and a point is specified,
# then the index is searched for a matching entry.  If a single matching
# entry is found, then the link is followed for that entry.  Otherwise,
# the index is displayed with all matching entries shown.
#
body ::tycho::IndexBrowser::seeFragment {point} {
    insert entry $point
    set match [complete 1]
    if {$match == 1} {
        ok
    } elseif {$match == 0} {
        safeEval ::tycho::warn "No matching entry found in the domain index"
    } else {
        safeEval ::tycho::warn \
                "Multiple matching entries found in the domain index. \
                Use <Tab> to scroll through."
    }
}

######################################################################
#### up
# Display the top-level groups and hyperlinks in the model
#
body ::tycho::IndexBrowser::up {} {
    $itk_component(bbox) disable up
    $indexModel root
    reload
}

    ##################################################################
    ##################################################################
    ####                   protected methods                      ####

######################################################################
#### processItem
# This procedure processes a user selection by performing a hyperjump
# to the specified file and point.
#
body ::tycho::IndexBrowser::processItem {id} {

    if {$id == {}} {return 0}

    if $useHyperlinkIndex  {
        # The data is in an index model. Check it.
        if {![$indexModel exists $id]} {
            safeEval ::tycho::warn "No such item in index: $id"
            return 0
        }
        # Process it
        if { [$indexModel isgroup $id] } {
            # Process a hierarchical entry
            $itk_component(bbox) enable up
            $indexModel enter $id
            reload
            return 0
        } else {
            hyperJump [$indexModel filename $id] [$indexModel point $id]
        }
    } else {
        # The data was loaded from an index list. Check it
        if {![info exists indexEntries($id)]} {
            safeEval ::tycho::warn "No such item in index: $id"
            return 0
        }
        # Process it
        set entry $indexEntries($id)
        if {[llength $entry] == 2} {
            # Entry is another index.
            loadIndexList [lindex $entry 1]
            return 0
        } {
            set filename [lindex $entry 1]
            set point [lindex $entry 2]
            hyperJump $filename $point
        }
    }
    return 1
}

######################################################################
#### updateListbox
# Get the hyperlink names from the index model and load the listbox.
#
body ::tycho::IndexBrowser::updateListbox {} {
    if $useHyperlinkIndex {
        # Get the title from the model
        configure -text [$indexModel modelcget -title]

        # Clear the listbox and load the links into it
        clearListbox
        appendItems [$indexModel groups]
        appendItems [$indexModel hyperlinks]

    } else {
        # Load from index list
        if {[llength $indexList] != 2} {
            error "Syntax error in index file $itk_option(-file) \
                    Should contain the form: name { items }"
        }
        configure -text [lindex $indexList 0]
        set items {}
        set count 1
        foreach item [lindex $indexList 1] {
            set len [llength $item]
            if {$len != 3 && $len != 2} {
                error "Syntax error in index item: $item \n\
                        Should contain the form { id filename point } \
                        or { id indexlist }"
            }
            set name [lindex $item 0]
            # Special action to deal with duplicate entries.
            if [::info exists indexEntries($name)] {
                incr count
                set name "$name $count"
            } {
                set count 1
            }
            set indexEntries($name) $item
            lappend items $name
        }
        # We assume the items are already sorted alphabetically.
        clearListbox
        appendItems $items
    }
}
