# Definition of a menu bar widget
# 
# @Author: Farhana Sheikh
# @Contributors: Edward A. Lee
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### MenuBar
# This class defines a menu bar widget. The widget is intended to
# make it easier to manage a complete menu bar, and provides
# simple access to menu, menu entries, and hierarchical menus.
# It may become obsolete once Tk 4.3 is out.
# <p>
# Here is an example:
# <tcl><pre>
# ::tycho::TopLevel .f
# ::tycho::MenuBar .f.mb
# pack .f.mb
# .f.mb addMenu File
# .f.mb add Close File -command {delete object .f}
# .f centerOnScreen
# </pre></tcl>
#
class ::tycho::MenuBar {
    inherit ::tycho::MenuSupport

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Add a menu to the menu bar
    method addMenu {name args}

    # Delete a menu or menu entry
    method delete {menu}

    # Disable an entry or an entire menu
    method disable {name}

    # Enable an entry or an entire menu
    method enable {name}
}


#######################################################################
#### constructor
#
body ::tycho::MenuBar::constructor {args} {
    eval itk_initialize $args
    eval preference exclude $this $args
}

#######################################################################
#### destructor
#
body ::tycho::MenuBar::destructor {} {
}

###################################################################
###################################################################
####                      public methods                       ####


#######################################################################
#### addMenu
# Add a menu to the menu bar.  The first argument is the name of the
# menu, and can be any arbitrary string. Remaining arguments control
# the appearance and layout of the menu. Options include the following:
#
# <ul>
# <li>*-side* _side_: Specify the side to pack in. Must be either _left_
# (the default) or _right_.
# <li>*-before* _menu_: Pack before the specified menu.
# <li>*-after* _menu_: Pack after the specified menu.
# <li>*-underline* _index_: Underline the specified character of the label.
# </ul>
#
# Other options are supported: the whole set of options supported
# by the Tk menubutton widget are supported, except for the *-text_
# and *-menu* options.
#
# The above options cannot be changed once the menu has been created.
# If the specified menu already exists, then this method does
# nothing.
#
# To specify options of the menu itself,
# use the *menuconfigure* method. Note that the menu is created with
# the menu's *-tearoff* option set false.
#
body ::tycho::MenuBar::addMenu {name args} {

    # Do nothing at all if the menu already exists
    if { [::info exists entrypath($name)] } {
	return
	# error "menu $name already exists"
    }

    # Get special options
    array set temp [concat {-side left -before {} -after {}} $args]
    set side   $temp(-side)
    set before $temp(-before)
    set after  $temp(-after)
    unset temp(-side)
    unset temp(-before)
    unset temp(-after)
    set args [array get temp]

    # Create the menu button
    itk_component add menuButton$name {
	eval menubutton $itk_interior.menuButton$name \
		$args \
		-text [list $name] \
		-menu $itk_interior.menuButton$name.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
 		-highlightcolor -padx -pady
    }

    # Create the new menu. This is done at the global scope so
    # that adding menu entries in the superclass (MenuSupport)
    # do not invoke unknown{}.
    itk_component add menu$name {
	uplevel #0 menu $itk_component(menuButton$name).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    # Pack it
    if { $before != "" } {
	pack $itk_component(menuButton$name) -side $side \
		-before $itk_component(menuButton$before)
    } elseif { $after != "" } {
	pack $itk_component(menuButton$name) -side $side \
		-after $itk_component(menuButton$after)
    } else {
	pack $itk_component(menuButton$name) -side $side
    }

    # Record its "path"
    set menupath($name) $itk_component(menuButton$name).menu
}

#####################################################################
#### delete
# Delete a menu or a menu entry. If the specified menu or entry
# does not exist, nothing happens.
#
body ::tycho::MenuBar::delete {name} {
    # See if it's a top-level menu
    if { [::info exists itk_component(menu$name)] } {
	# Delete a top-level menu
	clear $name

	destroy $itk_component(menu$name)
	destroy $itk_component(menuButton$name)
	unset itk_component(menu$name)
	unset itk_component(menuButton$name)
	unset menupath($name)
    } else {
	# If not, perform default removal
	::tycho::MenuSupport::delete $name
    }
}

#####################################################################
#### disable
# Disable a menu or a menu entry. Signal an error if the menu or entry
# does not exist.
#
body ::tycho::MenuBar::disable {name} {
    if { [::info exists itk_component(menuButton$name)] } {
	# Disable a menu button
	$itk_component(menuButton$name) configure -state disabled
    } else {
	::tycho::MenuSupport::disable $name
    }
}


#####################################################################
#### enable
# Enable a menu or a menu entry. Signal an error if the menu or entry
# does not exist.
#
body ::tycho::MenuBar::enable {name} {
    if { [::info exists itk_component(menuButton$name)] } {
	# Disable a menu button
	$itk_component(menuButton$name) configure -state normal
    } else {
	::tycho::MenuSupport::enable $name
    }
}
