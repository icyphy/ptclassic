# Definition of a menu bar widget
# 
# @Author: Farhana Sheikh
# @Contributors: Edward A. Lee, John Reekie
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### MenuSupport
# This class defines functionality that supports a simple interface
# for creating, deleting, enabling, and disabling menus. Do not
# instantiate this class: use its subclasses, such as <i>MenuBar</i>
# and <i>PopupMenu</i>.
#
# The MenuSupport code is designed to simplify access to menus.
# All menus and entries are accessed by a tag, provided when the
# menu or entry was created. The tag is independent of where
# the menu or entry is located -- for example, you can disable
# the menu entry "Undo"
# without knowing which menu the entry is contained in. This makes
# it easier for different widgets to manipulate a common set of menus,
# as well as requiring only one change rather than several if an entry
# needs to be moved. Third, the methods are somewhat forgiving about "errors":
# for example, if you try and disable a
# menu entry that does not exist, then the method silently does
# absolutely nothing, on the assumption that one piece of code somewhere
# deleted that entry and it's just easier for you not to have to
# know this (this is very easy to do with a class hierarchy in which
# menus are manipulated at different levels of the hierarchy.)
# What this means is that if you _do_ make an error, such as disabling
# a non-existent menu entry, you will not be notified of the mistake,
# so be careful.
# Some errors, however, such as attempting to create a menu with a tag
# that already exists, do generate an error{} call, since not
# doing so is simply too likely to lead to mysterious errors
# in the user interface.
#
class ::tycho::MenuSupport {
    inherit ::tycho::TWidget

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                            options                               ####

    # The font to use for displaying menus
    itk_option define -font font Font [::tycho::font helvetica]

    # The horizontal menu button padding
    itk_option define -padx padX Pad 5

    # The vertical menu button padding
    itk_option define -pady padY Pad 4

    ###################################################################
    ####                         public methods                    ####

    # Add a menu entry to a menu
    method add {type tag inMenu args}

    # Clear all entries from a menu (but don't delete the menu)
    method clear {menu}

    # Add a command menu entry to a menu
    method command {tag inMenu args}

    # Delete a menu or menu entry
    method delete {tag}

    # Disable an entry or an entire menu
    method disable {tag}

    # Test if a menu is empty
    method empty {tag}

    # Enable an entry or an entire menu
    method enable {tag}

    # Get an option of a menu entry
    method entrycget {tag option}

    # Set options of a menu entry
    method entryconfigure {tag args}

    # Insert a menu entry before the specified entry
    method insert {type tag before args}

    # Return the menu tag in which an entry is contained
    method inmenu {tag}

    # Invoke the action for the menu entry
    method invoke {tag}

    # Get an option of a menu
    method menucget {tag option}

    # Set options of a menu
    method menuconfigure {tag args}

    # Add a separator to a menu
    method separator {tag inMenu}

    ##########################################################################
    ####                         protected variables                      ####

    # Each menu has a list of tags of its entries
    protected variable menuentries

    # Each menu has an access path
    protected variable menupath

    # Each entry is contained in a menu
    protected variable parentmenu
}

#######################################################################
#### constructor
#
body ::tycho::MenuSupport::constructor {args} {
    eval itk_initialize $args
}

###################################################################
###################################################################
####                      public methods                       ####


#####################################################################
#### add
#
# Add a menu entry to the end of a menu. The *type* command is the type of
# entry, and can be *command*, *separator*, *cascade*, *radiobutton*,
# *checkbutton*. The *tag* argument is the tag
# used to refer to the menu entry. *inMenu* is the tag of the menu in which
# the menu entry is to be added. Remaining argument are other menu
# entry options, which can be any options valid for the given *type*.
# Some common options are:
#
# <ul>
# <li>*-label* _type_: The string to display as the entry label.
# <li>*-command* _command_: The command to be executed when the entry is
# selected.
# <li>*-underline* _index_: Underline the character of the entry label
# specified by _index_.
# <li>*-accelerator* _string_: Display _string_ next to the entry label.
# </ul>
#
# If there is already
# an entry with the specified tag, an error is generated.
#
body ::tycho::MenuSupport::add {type tag inMenu args} {
    # Check if the menu exists
    if { ! [::info exists menupath($inMenu)] } {
	error "Menu $inMenu does not exist"
    }

    # If the entry already exists, complain
    if { [::info exists parentmenu($tag)] } {
	error "Menu entry $tag already exists"
    }

    # Create the entry
    if { $type == "cascade" } {
    # Create a sub-menu
	set parentmenu($tag) $menupath($inMenu)
	set menupath($tag) $menupath($inMenu).menu$tag
	itk_component add $menupath($tag) {
	    menu $menupath($tag) -tearoff 0
	} {
	    keep -background -cursor -font
	}
	eval $menupath($inMenu) add cascade $args -menu $menupath($tag)
    } else {
	# Create some other type of menu entry
	set parentmenu($tag) $menupath($inMenu)
	eval $menupath($inMenu) add $type $args
    }
    # Remember the entry in its menu
    lappend menuentries($menupath($inMenu)) $tag
    return $tag
}

#####################################################################
#### clear
# Clear all entries from a menu. If the menu does not exist, then assume
# that it was already deleted, and just return.
#
body ::tycho::MenuSupport::clear {menu} {
    # Check validity
    if { ! [::info exists menupath($menu)] } {
	return
    }

    # Delete the menu entries
    set i 0
    foreach tag $menuentries($menupath($menu)) {
	if { [$menupath($menu) type $i] == "cascade" } {
	    $this delete [$menupath($menu) entrycget $i -label]
	} else {
	    $menupath($menu) delete $i
	    unset parentmenu($tag)
	}
	incr i
    }
    set menuentries($menupath($menu)) {}
}

#####################################################################
#### command
#
# Add a "command" menu entry to the end of a menu. This is a version
# of the add{} method that is streamlined for the most common type
# of menu entry: command entries.
#
body ::tycho::MenuSupport::command {tag inMenu args} {
    # Check if the menu exists
    if { ! [::info exists menupath($inMenu)] } {
	error "Menu $inMenu does not exist"
    }
    # If the entry already exists, complain
    if { [::info exists parentmenu($tag)] } {
	error "Menu $tag already exists"
    }
    # Create the menu entry
    set parentmenu($tag) $menupath($inMenu)
    eval $menupath($inMenu) add command $args
    lappend menuentries($menupath($inMenu)) $tag
    return $tag
}

#####################################################################
#### delete
# Delete a menu or a menu entry. If the specified menu or entry
# does not exist, assume that it was already deleted and just return.
#
body ::tycho::MenuSupport::delete {tag} {
    # Check validity
    if { ! [::info exists parentmenu($tag)] } {
	return
    }

    # If it's a submenu, delete it
    if { [::info exists menupath($tag)] } {
	# Delete nested submenus
	clear $menupath($tag)

	# Delete and forget the menu
	destroy $menupath($tag)
	unset menupath($tag)
    }

    # Remove the entry from the menu
    $parentmenu($tag) delete \
	    [lsearch -exact $menuentries($parentmenu($tag)) $tag]

    # Remove it from the entry list of its parent
    set menuentries($parentmenu($tag)) \
    	[::tycho::ldelete $menuentries($parentmenu($tag)) $tag]

	# Finally, just forget it!
    unset parentmenu($tag)
}

#####################################################################
#### disable
# Disable a menu or a menu entry. Do nothing if the menu or entry
# does not exist.
#
body ::tycho::MenuSupport::disable {tag} {
    # Check validity
    if { ! [::info exists parentmenu($tag)] } {
	return
    }
    # Disable the menu entry
    $parentmenu($tag) entryconfigure \
	    [lsearch -exact $menuentries($parentmenu($tag)) $tag] \
	    -state disabled
}

#####################################################################
#### enable
# Enable a menu or a menu entry. Do nothing if the menu or entry
# does not exist.
#
body ::tycho::MenuSupport::enable {tag} {
    # Check validity
    if { ! [::info exists parentmenu($tag)] } {
	return
    }
    # Enable the menu entry
    $parentmenu($tag) entryconfigure \
	    [lsearch -exact $menuentries($parentmenu($tag)) $tag] \
	    -state normal
}

#####################################################################
#### empty
# Test if a menu is empty. Flag an error if the menu does not exist.
#
body ::tycho::MenuSupport::empty {tag} {
    # Check validity
    if { ! [::info exists menupath($tag)] } {
	error "Menu $tag does not exist"
    }
    expr { $menuentries($parentmenu($tag)) == "" }
}

#####################################################################
#### entrycget
# Get a configuration option of a menu entry. Flag an error if the entry
# does not exist.
#
body ::tycho::MenuSupport::entrycget {tag option} {
    # Check validity
    if { ! [::info exists parentmenu($tag)] } {
	error "$tag is not a menu entry"
    }
    # Get the option
    $parentmenu($tag) entrycget  \
	    [lsearch -exact $menuentries($parentmenu($tag)) $tag] \
	    $option
}

#####################################################################
#### entryconfigure
# Get or configure options of a menu entry. Flag an error if the entry
# does not exist.
#
body ::tycho::MenuSupport::entryconfigure {tag args} {
    # Check validity
    if { ! [::info exists parentmenu($tag)] } {
	error "$tag is not a menu entry"
    }
    # Get or set the option(s)
    eval $parentmenu($tag) entryconfigure \
	    [lsearch -exact $menuentries($parentmenu($tag)) $tag] \
	    $args
}

#####################################################################
#### insert
# Insert an entry before the specified entry. An error is flagged
# if the entry to insert before does not exist. If the new entry
# already exists, flag an error.
#
body ::tycho::MenuSupport::insert {type tag before args} {
    # Check if the entry to insert before exists
    if { ! [::info exists parentmenu($before)] } {
	error "Menu entry $before does not exist"
    }
    # If the entry already exists, complain
    if { [::info exists parentmenu($tag)] } {
	error "Menu $tag already exists"
    }
    # Get the index of the menu to insert before
    set idx [lsearch $menuentries($parentmenu($before)) $before]
	
    # Create a sub-menu
    if { $type == "cascade" } {
	set parentmenu($tag) $parentmenu($before)
	set menupath($tag) $menupath($before).menu$tag
	itk_component add $menupath($tag) {
	    menu $menupath($tag) -tearoff 0
	} {
	    keep -background -cursor -font
	}
	eval $parentmenu($before) insert $idx cascade \
		$args \
		-menu $menupath($tag)
    } else {
	# Create some other type of menu entry
	set parentmenu($tag) $parentmenu($before)
	eval $parentmenu($before) insert $idx \
		$type $args
    }
    # Remember the entry in its menu
    set menuentries($parentmenu($before)) \
    	[linsert $menuentries($parentmenu($before)) $idx $tag]
}

#####################################################################
#### inmenu
# Return the tag of the menu containing the given menu. This
# may occasionally be needed.
#
body ::tycho::MenuSupport::inmenu {tag} {
    # Check if the entry exists
    if { ! [::info exists parentmenu($tag)] } {
	error "Menu entry $tag does not exist"
    }
    set parent [lindex [split $parentmenu($tag) "."] end]
    regsub {^menu} $parent parent
    return $parent
}

#####################################################################
#### invoke
# Invoke the action of a menu entry. The single argument is
# the tag given when the entry was created.
#
body ::tycho::MenuSupport::invoke {tag} {
    # Check if the menu exists
    if { ! [::info exists parentmenu($tag)] } {
	error "Menu entry $tag does not exist"
    }
    $parentmenu($tag) invoke \
	    [lsearch -exact $menuentries($parentmenu($tag)) $tag]
}

#####################################################################
#### menucget
# Get a configuration option of a menu. Flag an error if the
# menu does not exist. (FIXME: Should it just exit silently?)
#
body ::tycho::MenuSupport::menucget {tag option} {
    # Check validity
    if { ! [::info exists menupath($tag)] } {
	error "$tag is not a menu"
    }
    # Get the option
    $menupath($tag) cget $option
}

#####################################################################
#### menuconfigure
# Get or configure options of a menu. Flag an error if the
# menu does not exist. (FIXME: Should it just exit silently?)
#
body ::tycho::MenuSupport::menuconfigure {tag args} {
    # Check validity
    if { ! [::info exists menupath($tag)] } {
	error "$tag is not a menu"
    }
    # Get or set the option(s)
    eval $menupath($tag) configure $args
}

#####################################################################
#### separator
#
# Add a "separator" menu entry to the end of a menu. This is a version
# of the add{} method that is streamlined for separators.
#
body ::tycho::MenuSupport::separator {tag inMenu} {
    # Check if the menu exists
    if { ! [::info exists menupath($inMenu)] } {
	error "Menu $inMenu does not exist"
    }
    # If the entry already exists, complain
    if { [::info exists parentmenu($tag)] } {
	error "Menu entry $tag already exists"
    }
    # Create the menu entry
    set parentmenu($tag) $menupath($inMenu)
    eval $menupath($inMenu) add separator
    lappend menuentries($menupath($inMenu)) $tag
    return $tag
}
