# Message window.
#
# @Author: Edward A. Lee
#
# @Version: @(#)Message.itcl	1.22 12/05/97
#
# @Copyright (c) 1995-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### warn
# Post a warning message, and return only after the user has acknowledged.
# <p>
# This procedure indirectly calls <code>update</code>, a Tk utility
# that processes pending events, including mouse events. If this
# procedure is called from within an Itcl object, directly or
# indirectly, it may be necessary to take precautions to prevent the
# calling object from being deleted during the call. Because of a
# defect in at least some versions of Itcl, failure to do so can result
# in catastrophic failure of the application (a core dump). In Tycho
# objects, the <code>safeEval</code> method should be used to evaluate
# this procedure or any method or procedure that in turn calls this
# procedure. If the procedure is called from the top level or from a
# Tcl procedure that is not itself called from within an Itcl object,
# then there is no cause for worry.
#
proc ::tycho::warn {msg} {
    set name [autoName .message]
    uplevel #0 [list ::tycho::Message $name -text $msg -bitmap warning]
    return [::tycho::Dialog::wait $name]
}

##########################################################################
#### inform
# Issue an informational message to the user and return only after
# the user has acknowledged.
# <p>
# This procedure indirectly calls <code>update</code>, a Tk utility
# that processes pending events, including mouse events. If this
# procedure is called from within an Itcl object, directly or
# indirectly, it may be necessary to take precautions to prevent the
# calling object from being deleted during the call. Because of a
# defect in at least some versions of Itcl, failure to do so can result
# in catastrophic failure of the application (a core dump). In Tycho
# objects, the <code>safeEval</code> method should be used to evaluate
# this procedure or any method or procedure that in turn calls this
# procedure. If the procedure is called from the top level or from a
# Tcl procedure that is not itself called from within an Itcl object,
# then there is no cause for worry.
#
proc ::tycho::inform {msg} {
    set name [autoName .message]
    uplevel #0 [list ::tycho::Message $name -text $msg -bitmap info]
    return [::tycho::Dialog::wait $name]
}

##########################################################################
#### post
# Post an informational message to the user in a window and return
# immediately.  The name of the window is returned.
#
proc ::tycho::post {msg {title ""}} {
    return [::tycho::Dialog::new Message \
	    [::tycho::autoName .message] -text $msg -title $title]
}

# COMPATIBILITY procedures.  The following procedures emulate the behavior
# of similarly named procedures in pigi, the predecessor to Tycho.
# The window names in these arguments are ignored (since they bring
# up modal dialogs, the window names are not important anyway).

# COMPATIBILITY procedure.  Post a message.
proc ::ptkMessage {text} {::tycho::inform $text}
# COMPATIBILITY procedure.  Post a message.
proc ::ptkInform {win text} {::tycho::inform $text}

##########################################################################
#### Message
# A message window with space for text, a bitmap, an image, and HTML.
# An OK button causes the object (and its window) to be destroyed.
# <p>
# For convenience, the procedures
# <code>::tycho::post</code>,
# <code>::tycho::inform</code>, and
# <code>::tycho::warn</code>
# offer a slightly simpler interface to this class.
#
class ::tycho::Message {
    inherit ::tycho::Dialog

    constructor {args} {}
    destructor {}
}

##########################################################################
#### constructor
#
body ::tycho::Message::constructor {args} {

    # Pack the OK button.
    addButton ok -text "OK" -underline 0 -command "delete object $this"
    default ok
    # For consistency, escape also dismisses dialog.
    # (now supported in the base class)
    # bind $itk_component(hull) <Escape> "$this invoke ok; break"

    # Explicitly handle configs that may have been ignored earlier.
    eval itk_initialize $args
}

##########################################################################
#### destructor
#
body ::tycho::Message::destructor {} {
    # This causes strange losses of focus.  Instead, call prevWindow
    # before destroying an object when appropriate.
    # catch {prevWindow}
}
