# Message window.
#
# $Id$
# Author: Edward A. Lee
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### warn
# Warn the user, and return only after the user has acknowledged.
#
proc ::tycho::warn {msg} {
    DialogWindow::newModal Message [autoName .message] \
	    -text $msg -bitmap warning
}

##########################################################################
#### inform
# Issue an informational message to the user and return only after
# the user has acknowledged.
#
proc ::tycho::inform {msg} {
    DialogWindow::newModal Message [autoName .message] \
	    -text $msg -bitmap info
}

##########################################################################
#### post
# Post an informational message to the user in a window and return.
# The name of the window is returned.
#
proc ::tycho::post {msg {title ""}} {
    return [DialogWindow::new Message [autoName .message] -text $msg \
	    -title $title]
}

##########################################################################
#### postLong
# Post a long informational message to the user in a window and return.
# The name of the window is returned.
#
proc ::tycho::postLong {msg {title ""}} {
    return [DialogWindow::new Message [autoName .message] -scrolltext $msg \
	    -title $title]
}

# COMPATIBILITY procedures.  The following procedures emulate the behavior
# of similarly named procedures in pigi, the predecessor to Tycho.
# The window names in these arguments are ignored (since they bring
# up modal dialogs, the window names are not important anyway).
#
proc ptkMessage {text} {::tycho::inform $text}
proc ptkInform {win text} {::tycho::inform $text}

##########################################################################
#### Message
# Issue a message to the user. To warn the user about something in a
# modal way, use the procedure "::tycho::warn". "Modal" means that
# nothing further will happen until the window is destroyed. To inform
# the user of the something in a modal way, use "::tycho::inform".
# Otherwise, for non-modal uses, create an instance of this class
# directly.  If you create an instance of the class directly,
# you must map it explicitly by either calling "wm deiconify $name" or
# "$name centerOnScreen", where "$name" is the name of the object.
#
class ::tycho::Message {
    inherit ::tycho::DialogWindow

    constructor {args} {}
}

##########################################################################
#### constructor
#
body ::tycho::Message::constructor {args} {

    # Pack the OK button.
    # For some reason I don't understand, if instead of the "destroy"
    # call below I do "delete object $this", then a tkwait on this
    # window never returns.  Perhaps "delete object" does not fully
    # inform tk that the window is gone?
    addButton ok -text "OK <Ret>" -command \
	    "$this nextWindow; delete object $this"
    default ok

    # Explicitly handle configs that may have been ignored earlier.
    eval itk_initialize $args
}
