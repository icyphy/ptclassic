# Definition of the class which handles revision control.
#
# Authors: Joel King and Edward A. Lee
#
# Version: $Id$
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Types of revision control software, in order of preference.
# It is assumed that for each type listed, there is a class defined
# called RevControl$type, where $type is the type, and that this
# class is derived from RevControl.
option add *revisionControlTypes {SCCS RCS} widgetDefault

#######################################################################
#### RevControl
# Base class for revision control objects. The main entry point is is
# the procedure "setup", which will create a revision control window of
# the appropriate type. The list of revision control types is given by
# the option "revisionControlTypes", which lists them in order of
# preference (e.g. "SCCS RCS", which is the default value). It is
# assumed that for each type listed, there is a class defined called
# RevControl$type, where $type is the type, and that this class is
# derived from RevControl.
#
class ::tycho::RevControl {
    inherit ::tycho::DialogWindow

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         options                           ####

    #### -object option
    # The object under version control.
    itk_option define -object object Object ""

    ###################################################################
    ####                      public methods                       ####

    #### checkIn
    # Check in the file associated with this class.
    method checkIn {} 

    #### checkOut
    # Check out the file associated with this class.
    method checkOut {} 

    #### initializeRevControl
    # Put the file under revision control.
    method initializeRevControl {} 

    #### unedit
    # Unedit the file associated with this class.
    method unedit {}

    #### viewHistory
    # View the version control history.
    method viewHistory {} {error "Sorry, not implemented yet"}

    ###################################################################
    ####                      public procs                         ####

    #### isUnderRevControl
    # Return 1 if the given file is under revision control, 0 otherwise.
    proc isUnderRevControl {file} {return 0}

    #### makeRev
    # Make a revision control of the specified type.
    proc makeRev {type editorWin editorObj} {}

    #### setup
    # Setup revision control for an editor.
    proc setup {editorWin editorObj} {}

    ###################################################################
    ####                   protected methods                       ####

    #### enableButton
    # Enable one of "checkin" or "checkout" buttons and make it the default.
    method enableButton {button}

    #### isCheckedOut
    # Return 1 if the file is checked out, 0 otherwise.
    method isCheckedOut {} {return 0}

    #### cdDir
    # Change to the given directory with appropriate error checks.
    protected method cdDir {dir}

    ###################################################################
    ####                  protected variables                      ####

    # The text widget object that we are associated with.
    protected variable textobject {}

    # The object that we are associated with.
    protected variable object {}

    # The file that we are associated with.
    protected variable file {}

}

#########################################################################
#### -object configuration
# 
configbody ::tycho::RevControl::object {
    set object $itk_option(-object)
    # NOTE: It would be nice to check:
    #     [uplevel #0 info objects $object] == {}
    # However, "info" in itcl is basically broken.  It does not
    # understand scoping annotations like a prefix "::".
    if {$object == {} || ![$object isa ::tycho::File]} {
	error "You must specify a File object with the -object option"
    }
    set file [$object cget -file]
    configure -title "Revision control for $file"
    set retval [isUnderRevControl $file]
    initializeRevControl
    if [isCheckedOut] {
	enableButton checkin
    } {
	enableButton checkout
    }
}
    
###################################################################
#### constructor
#
body ::tycho::RevControl::constructor {args} {
    eval itk_initialize $args

    addButton checkin -text "Checkin" -command [code $this checkIn]
    addButton checkout -text "Checkout" -command [code $this checkOut]
    addButton history -text "History" -command [code $this viewHistory]
    addButton unedit -text "Unedit" -command [code $this unedit]
    addButton cancel -text "Close <Esc>" -command \
	   [code "$this nextWindow; delete object $this"]

    bind $itk_component(hull) <Escape> [code $this invoke cancel]
}

###################################################################
#### checkIn
# Check in the file associated with this class.
#
body ::tycho::RevControl::checkIn {} {
    if {$file == {}} {
	error "Revision control: no file specified"
    }
    if [$object isModified] {
	if [askuser "Save modifications before checking in?"] {
	    $object save 
	}
    }
}

###################################################################
#### checkOut
# Check out the file associated with this class.
#
body ::tycho::RevControl::checkOut {} {
    if {$file == {}} {
	error "Revision control: no file specified"
    }
}

###################################################################
#### unedit
# Query the user for confirmation, then unedit.  This base class method
# only does the query.
#
body ::tycho::RevControl::unedit {} {
    if {$file == {}} {
	error "Revision control: no file specified"
    }
    if [askuser "Are you sure you want to discard your changes (if any)?"] {
	enableButton checkout
    } {
	error "Unedit cancelled"
    }
}

###################################################################
#### makeRev
# Make a revision control.  The first argument is the type (SCCS, RCS, ...),
# the second argument is the window name for the editor, and the third
# argument is the editor object.
#
body ::tycho::RevControl::makeRev {type editorWin editorObj} {
    # Create a revision control window
    uplevel #0 " \
	    ::tycho::RevControl$type $editorWin.revcontrol \
	    -object $editorObj \
	    -geometry +0+0 \
	    -before $editorWin"
    wm deiconify $editorWin.revcontrol
}

###################################################################
#### setup
# Setup revision control for an editor.  The arguments are the name
# of the top-level editor window and the name of the editor object.
#
body ::tycho::RevControl::setup {editorWin editorObj} {

    # If a rev control window is already open, use it.
    if [winfo exists $editorWin.revcontrol] {
	wm deiconify $editorWin.revcontrol
	raise $editorWin.revcontrol
	$editorWin.revcontrol focusin
	return
    }

    set pref [option get . revisionControlTypes Tycho]
    set currentFile [$editorObj filename]
    set revclass {}

    # Step through possible revision control systems and determine
    # whether they control the file.
    foreach type $pref {
	if [RevControl$type::isUnderRevControl $currentFile] {
	    set revclass "$type"
	    break
	}
    }
    # If the file is not under revision control, query the user
    # for permission to put it under revision control.
    if {$revclass == {}} {
	set dlg [::tycho::autoName .rev]
	::tycho::DialogWindow $dlg -text \
		"This file is not currently under revision control.\
		Do you want it placed under revision control?"

	set default {}
	foreach type $pref {
	    $dlg addButton $type -text "Yes ($type)" -command \
		    "::tycho::RevControl::makeRev $type $editorWin $editorObj; \
		    destroy $dlg"
	    if {$default == {}} {
		$dlg default $type
		set default $type
	    }
	}
	$dlg addButton no -text "No <Esc>" -command "destroy $dlg"
	bind $dlg <Escape> "destroy $dlg"
	$dlg centerOnScreen
    } else {
	::tycho::RevControl::makeRev $revclass $editorWin $editorObj
    }
}

###################################################################
#### enableButton
# Enable one of "checkin" or "checkout" buttons.
# The argument must be one of "checkin" or "checkout".
# The other button is disabled.
#
body ::tycho::RevControl::enableButton {button} {
    if {$button == {checkin}} {
	$itk_component(bbox) buttonconfigure checkin -state normal
	default checkin
	$itk_component(bbox) buttonconfigure checkout -state disabled
    } {
	$itk_component(bbox) buttonconfigure checkout -state normal
	default checkout
	$itk_component(bbox) buttonconfigure checkin -state disabled
    }
}

###################################################################
#### initializeRevControl 
# Do various checks before placing file under revision control. 
#
body ::tycho::RevControl::initializeRevControl {} {
    if {$file == {}} {
	error "Revision control: no file specified"
    }
}

    ###################################################################
    ####                   protected methods                       ####

#####################################################################
#### cdDir
# Change to the appropriate file directory, with error checks.
# 
body ::tycho::RevControl::cdDir {dir} {
    if {[file isdirectory $dir] && [file executable $dir]} {
	cd $dir
    } else {
	error "The directory \"$dir\" is not writable."
    }
}

