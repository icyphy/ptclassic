# Status bar for the bottom of windows.
#
# @Version: $Id$
# @Author: H. John Reekie
#
# @Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#######################################################################
#### StatusBar
#
# A very simple prototype status bar display, for putting at the
# bottom of windows.
#
class ::tycho::StatusBar {
    inherit ::tycho::TWidget

    constructor {args} {}
    destructor {}


    ###################################################################
    ####                            options                        ####

    # The command to call when the Close button is pressed
    itk_option define -closecommand closeCommand CloseCommand {}

    # The text to display in the Close button ("Close" by default)
    itk_option define -closetext closeText CloseText "Close"

    # The current file status: none, readonly, readwrite, modified
    itk_option define -filestatus fileStatus FileStatus "none"

    # Flag to indicate whether to leave space for a scroll bar
    itk_option define -scrollbarpad scrollbarPad ScrollbarPad 0

    # The font to use for the close button
    itk_option define -font font Font [::tycho::font screen]

    ###################################################################
    ####                         public methods                    ####

    # Get the most recent string written to the status bar
    method get {}

    # Display the file status help
    method helpFileStatus {} {}

    # Put a string to the status bar
    method puts {string}

    # Set the line and column display, and clear the status string
    method lineColumn {line column}

    # Start or update progress display
    method progress {{label {}} {command {}}}
    
    ###################################################################
    ####                       private methods                     ####

    # Draw the progress bar
    private method drawProgress {progress}

    # Set the current display mode
    private method setMode {mode}

    ###################################################################
    ####                       private variables                   ####

    # The current file status setting
    private variable filestatus "readwrite"

    # The current mode: "status" or "progress"
    private variable currentMode ""

    # The command to get the current progress
    private variable progressCommand ""
}


#######################################################################
#### -closecommand configuration
#
configbody ::tycho::StatusBar::closecommand {
    $itk_component(closeButton) configure -command $itk_option(-closecommand)
}


#######################################################################
#### -closetext configuration
#
configbody ::tycho::StatusBar::closetext {
    $itk_component(closeButton) configure -text $itk_option(-closetext)
}


#######################################################################
#### filestatus configuration
#
# The file status display. Valid values
# are ``readonly,'' ``readwrite,'' and ``modified.''
#
# <b>Note</b>: Currently the display consists simply of the letters
# ``R'' (readonly) or ``M'' (modified). This needs to be replaced
# with some meaningful icons.
#
configbody ::tycho::StatusBar::filestatus {
    if { $itk_option(-filestatus) == "none" } {
	# Delete the file status if there is one
	if { [::info exists itk_component(fileStatus)] } {
	    destroy $itk_component(fileStatus)
	    unset itk_component(fileStatus)
	}
    } else {
	# Create the file status if there isn't one
	if { ! [::info exists itk_component(fileStatus)] } {
	    itk_component add fileStatus {
		label $itk_interior.fileStatus -width 3 \
			-borderwidth 1 \
			-relief raised
	    } {
		keep -background -cursor -font
	    }
	    pack $itk_component(fileStatus) \
		    -side left -fill y \
		    -padx 0 -pady 2 \
		    -side left \
		    -before $itk_component(mainStatus)
	}
	
	# Bind help to the file status display
	bind $itk_component(fileStatus) <Enter> [code "%Q helpFileStatus"]
	bind $itk_component(fileStatus) <Leave> [code "%Q puts {}"]

	# Set the status display
	switch -exact $itk_option(-filestatus) {
	    "readonly" {
		$itk_component(fileStatus) configure -text "R"
	    }
	    "readwrite" {
		$itk_component(fileStatus) configure -text ""
	    }
	    "modified" {
		$itk_component(fileStatus) configure -text "M"
	    }
	    default {
		error "StatusBar::filestatus: Invalid option $status"
	    }
	}
    }
}


#######################################################################
#### -scrollbarpad configuration
#
configbody ::tycho::StatusBar::scrollbarpad {
    if { $itk_option(-scrollbarpad) } {
	if { ! [::info exists itk_component(packing)] } {
	    # Create the empty space under the scroll bar
	    # FIXME: Need a better way of getting the scroll bar width
	    itk_component add packing {
		frame $itk_interior.packing -width 23
	    } {
		keep -background -cursor
	    }
	    pack $itk_component(packing) -fill y -side right \
		    -before $itk_component(closeButton)
	}
    } else {
	if { [::info exists itk_component(packing)] } {
	    destroy $itk_component(packing)
	    unset itk_component(packing)
	}
    }
}

#######################################################################
#### constructor
#
body ::tycho::StatusBar::constructor {args} {

    # A tiny bit of padding to the left of the status bar.
    itk_component add leftpacking {
	frame $itk_interior.leftpacking -width 2
    } {
	keep -background -cursor
    }
    pack $itk_component(leftpacking) -side left

    # Create the close button
    itk_component add closeButton {
	button $itk_interior.closeButton -text Close -pady 2
    } {
	keep -background -font -activebackground -cursor \
		-highlightthickness -activeforeground \
		-foreground -highlightcolor -highlightbackground \
		-padx -pady
    }
    pack $itk_component(closeButton) -side right

    # Create the status output display (but don't pack it yet)
    itk_component add mainStatus {
	label $itk_interior.mainStatus \
		-anchor w -justify left \
		-borderwidth 1 \
		-relief raised
    } {
	keep -background -cursor
	rename -font -messagefont messageFont MessageFont
    }
    
    # Set up the display
    setMode "status"

    # Initialise options
    eval itk_initialize $args

    ::tycho::preference subscribeoptions fonts $this \
	    -messagefont messageFont
}

#######################################################################
#### get
#
# Get the most recent string written to the statusbar.
#
body ::tycho::StatusBar::get {} {
    $itk_component(mainStatus) cget -text
}

#######################################################################
#### helpFileStatus
#
body ::tycho::StatusBar::helpFileStatus {} {
    switch -exact $itk_option(-filestatus) {
	"readonly" {
	    puts "File is read-only"
	}
	"readwrite" {
	    puts "File is writable"
	}
	"modified" {
	    puts "File has been modified"
	}
    }
}

#######################################################################
#### lineColumn
#
body ::tycho::StatusBar::lineColumn {line column} {
    $itk_component(mainStatus) configure -text \
	"  $line : $column"
}

#######################################################################
#### progress
#
# Start or update the progress bar. If the command argument
# is supplied, then the progress bar is set to zero,
# the command remembered, and an after{} callback set up
# to this method with no argument. If the _command_ argument
# is not supplied, then the remembered command is evaluated
# at the global scope and the return value used to set the
# status bar display. The returned value is expected to be
# between 0.0 and 1.0. Another callback is generated if
# the command does not throw an error and the returned
# value is less than 1.0. The update rate of
# the progress bar is set to about 5 times per second.
#
body ::tycho::StatusBar::progress {{label {}} {command {}}} {
    setMode "progress"
    if { $command == "" } {
	if { $progressCommand != "" } {
	    if ![catch {uplevel #0 $progressCommand} progress] {
		# Redraw the progress bar
		drawProgress $progress
		if { $progress < 1.0 } {
		    after 200 "$this progress"
		}
	    } else {
		# FIXME: For now, keep goign even if failed,
		# because of a bug in RresourceHTTP::progress{}
		after 200 "$this progress"
	    }
	}
    } else {
	$itk_component(progressLabel) configure -text $label:
	set progressCommand $command
	drawProgress 0
	after 200 "$this progress"
    }
}

#######################################################################
#### puts
#
# Put an arbitrary string to the status bar. To enforce
# wrap-around, set the wrap-length of the label to its current width.
#
body ::tycho::StatusBar::puts {string} {
    setMode "status"
    $itk_component(mainStatus) configure -wraplength \
	    [expr [winfo width $itk_component(mainStatus)] - 4]
    $itk_component(mainStatus) configure -text "$string"
}

#######################################################################
#### drawProgress
#
# Draw or update the progress bar.
#
body ::tycho::StatusBar::drawProgress {progress} {
    if { $progress < 0 } {
	set progress 0
    } elseif { $progress > 1.0 } {
	set progress 1.0
    }
    # First get/create an item
    if { [$itk_component(progressDisplay) find withtag foo] == "" } {
	$itk_component(progressDisplay) create rectangle \
		0 0 0 0 \
		-outline "" \
		-fill blue \
		-tags foo
    }
    set width  [winfo width $itk_component(progressDisplay)]
    set height [winfo height $itk_component(progressDisplay)]
    set width  [expr $width * $progress]
    $itk_component(progressDisplay) coords foo 0 0 $width $height
}

#######################################################################
#### setMode
#
# Set up the display according to the current mode
#
body ::tycho::StatusBar::setMode {mode} {
    if { $mode == $currentMode } {
	return
    }
    set currentMode $mode
    switch $mode {
	"progress" {
	    if ![::info exists itk_component(progress)] {
		# Create the progress output display
		itk_component add progress {
		    frame $itk_interior.progress
		} {
		    keep -background -cursor
		}
		itk_component add progressLabel {
		    label $itk_interior.progress.label
		} {
		    keep -background -cursor
		    rename -font -messagefont messageFont MessageFont
		}
		pack $itk_component(progressLabel) -side left
		itk_component add progressDisplay {
		    canvas $itk_interior.progress.display \
			    -height [expr [winfo height [component hull]]/3] \
			    -borderwidth 2 \
			    -relief sunken
		} {
		    keep -background -cursor
		}
		pack $itk_component(progressDisplay) \
			-side left -fill x -expand on
	    }
	    # Unpack the status display and pack the progress display
	    pack forget $itk_component(mainStatus)
	    pack $itk_component(progress) \
		    -fill both -expand on \
		    -padx 0 -pady 2 \
		    -side left
	}
	"status" {
	    catch {pack forget $itk_component(progress)}
	    pack $itk_component(mainStatus) \
		    -fill both -expand on \
		    -padx 0 -pady 2 \
		    -side left
	}
	default {
	    error "Unknown mode $mode"
	}
    }
}
