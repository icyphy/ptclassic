# Create a dialog box for the user to edit preferences with.
#
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################

#######################################################################
## preferencedialog
#
# Open a preferences dialog box. If there already is one, bring it
# to the top.
#
proc ::tycho::preferencedialog {} {
    if { [::info which -command .tychoPreferences] != "" } {
	raise .tychoPreferences
    } else {
	uplevel #0 [list ::tycho::PreferenceDialog .tychoPreferences \
		-title {Tycho preferences}]
	wm deiconify .tychoPreferences
    }
}


#######################################################################
#### PreferenceDialog
#
# A window that controls a set of preference editors.
#
class ::tycho::PreferenceDialog {
    inherit ::tycho::Query

    constructor {args} {}
    destructor {}


    ###################################################################
    ####                            options                        ####



    ###################################################################
    ####                         public methods                    ####

    # Open an editor for the specified preference set
    method edit {set}

    # Redo the last undone change
    method redo {}

    # Undo the last change
    method undo {}

    # Notify (from preference editor) that preferences have been edited
    method notify {args}

    # Revert to system defaults
    method revert {}

    # Update changed preferences
    method update {args}

    ###################################################################
    ####                         private procs                     ####

    # Compare two lists by element 1
    private proc cmp {a b} {
	string compare [lindex $a 1] [lindex $b 1]
    }

    ###################################################################
    ####                       private variables                   ####

    # Open preferences editors
    private variable editors {}

    # Changed preferences that I have to update -- group, preference
    private variable changed {}
}


#######################################################################
#### constructor
#
body ::tycho::PreferenceDialog::constructor {args} {
    # Collect groups and their labels
    set groups {}
    foreach tag [::tycho::preference group] {
	set label [::tycho::preference cget $tag -label]
	if { $label != "" } {
	    lappend groups [list $tag $label]
	}
    }
    # Sort the groups by label
    set groups [eval concat [lsort -command ::tycho::PreferenceDialog::cmp \
	    $groups]]

    # Create a button for each group
    foreach {tag label} $groups {
	itk_component add $tag {
	    button $itk_component(childsite).$tag -text $label \
		    -command "$this edit $tag" \
		    -highlightthickness 0
	} {
	    keep -background -cursor -font
	}
	pack $itk_component(childsite).$tag -fill x -expand on
    }

    # Add an apply button
    addButton apply -row 1 -column 0 \
	    -text "Apply <M-a>" -command "$this update"
    configure -okcommand "$this update"

    # Meta-a performs update
    bind $itk_component(hull) <Meta-a> \
	    "$this update; break"

    # Add a help button
    addButton help -text "Help" -row 1 -column 1 \
	    -command { \
	    ::tycho::File::openContext \
	    [file join $TYCHO kernel doc usersGuides PreferencesHelp.html] }

    # Add undo and redo commands
    addButton undo -text "Undo" -row 2 -column 0 -command "$this undo"
    addButton redo -text "Redo" -row 2 -column 1 -command "$this redo"

    # Disable the buttons if there is no history.
    if { [::tycho::preference model compareMarks "first" == "current"] } {
	component bbox buttonconfigure undo -state disabled
    }
    if { [::tycho::preference model compareMarks "last" == "current"] } {
	component bbox buttonconfigure redo -state disabled
    }

    # Add a button to revert to defaults
    addButton defaults -text "Defaults" -row 3 -column 0 \
	    -command "$this revert"

    # Register this window so it appears on the menus
    ::tycho::register window Preferences $this \
            -label "Tycho Preferences" \
            -category tool

    # Initialise options
    eval itk_initialize $args
}

#######################################################################
#### destructor
#
body ::tycho::PreferenceDialog::destructor {} {
    # Delete open preference editors
    foreach e $editors {
	catch {delete object $e}
    }

    # Save the whole bag of preferences
    ::tycho::preference model save

    # Save preferences that are different from the default
    # in ~/.Tycho/preferences
    set fd [open [::tycho::expandPath \
	    [file join [::tycho::tychoDir] preferences]] "w"]
    if { $fd != "" } {
	puts $fd "# User preference settings\n"
	foreach {group preference value} \
		[::tycho::preference model different] {
	    set string "catch \{::tycho::preference model assign"
	    lappend string $group $preference $value
	    append string "\}"
	    puts $fd $string
	}
	close $fd
    }
    # Deregister this window
    ::tycho::deregister window Preferences $this
}

#######################################################################
#### edit
#
body ::tycho::PreferenceDialog::edit {set} {
    if { [::info which -command .$set] != "" } {
	raise .$set
    } else {
	set ed [uplevel #0 \
		::tycho::PreferenceEditor .$set \
		-preferences $set \
		-parentdialog $this]
	wm deiconify $ed
	lappend editors $ed
    }
}

#######################################################################
#### notify
#
body ::tycho::PreferenceDialog::notify {args} {
    # Enable the undo button and disable the redo button
    component bbox buttonconfigure undo -state normal
    component bbox buttonconfigure redo -state disabled

    # Remember changed preferences for saving later
    eval lappend changed $args
}

#######################################################################
#### redo
#
body ::tycho::PreferenceDialog::redo {} {
    # Call preferences manager to redo
    ::tycho::preference model redo

    # If there's no more redo, disable the redo button
    if { [::tycho::preference model compareMarks "last" == "current"] } {
	component bbox buttonconfigure redo -state disabled
    }

    # Enable the undo button
    component bbox buttonconfigure undo -state normal
}

#######################################################################
#### revert
#
body ::tycho::PreferenceDialog::revert {} {
    foreach group [::tycho::preference groups] {
	foreach preference [::tycho::preference preferences $group] {
	    set current [::tycho::preference get $group $preference]
	    set default [::tycho::preference cget $group $preference -default]
	    if { $current != $default } {
		::tycho::preference model publish assign $group $preference $default
	    }
	}
    }
    # Clear the undo history
    ::tycho::preference model clearHistory

    # Disable the undo and redo buttons
    component bbox buttonconfigure undo -state disabled
    component bbox buttonconfigure redo -state disabled
}

#######################################################################
#### undo
#
body ::tycho::PreferenceDialog::undo {} {
    # Call preferences manager to undo
    ::tycho::preference model undo

    # If there's no more undo, disable the undo button
    # If there's no more redo, disable the redo button
    if { [::tycho::preference model compareMarks "first" == "current"] } {
	component bbox buttonconfigure undo -state disabled
    }

    # Enable the redo button
    component bbox buttonconfigure redo -state normal
}

#######################################################################
#### update
#
body ::tycho::PreferenceDialog::update {} {
    # Update each open editor
    foreach e $editors {
	if { [::info which -command $e] != "" } {
	    $e update
	} else {
	    set editors [::tycho::ldelete $editors $e]
	}
    }

    # Enable the undo button
    component bbox buttonconfigure undo -state normal
}
