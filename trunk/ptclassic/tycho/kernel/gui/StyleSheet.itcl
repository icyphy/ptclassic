#########################################################################
# Version: $Id$
# Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


#####################################################################
#### stylesheet
# Perform operations on stylesheets. This procedure provides
# access to style-sheets by name (rather than by file name),
# and provides a better naming scheme than that implemented
# directly by StyleSheet. The procedure has several forms:
#
# <dl>
# <dt><b>access</b> _stylesheet_ ?_method_? ?_arg_ _arg_...?
# <dd>
# Get direct access to a stylesheet. If no arguments are provided,
# return the StyleSheet object named _stylesheet_. If arguments
# are present, call _method_ with _args_ on the stylesheet and
# return the result.
#
# <dt><b>get</b> _stylesheet_ _style_ _param_
# <dd>
# Get the value of a stylesheet parameter. _stylesheet_ is the
# style-sheet, _style_ the style_, and _param_ is the parameter
# to be returned, in the same format as for the <b>subscribe</b>
# option. Color and font values are always converted into X values.
#
# <dt><b>register</b> _stylesheet_ _basefile_ _userfile_
# <dd>
# Register a stylesheet. _stylesheet_ is the name which will be used
# to refer to the stylesheet in future calls. _basefile_ is
# the file containing the base style-sheet in TIM format, and
# _userfile_ is the file containing user-specified styles,
# also in TIM format. The two files are first checked for existence,
# and if _userfile_ does not exist, then _basefile_
# is copied to _userfile_. The first time _stylesheet_
# is accessed, _userfile_ is loaded into memory to create an
# object that can be edited and modified. At that time, the modification
# dates of _basefile_ and _userfile_ are compared, and
# if _basefile_ is more recent than _userfile_, the loaded
# model is updated to add or remove any parameters present in
# _basefile_ but not in _userfile_, or vice versa.
#
#
# <dt><b>set</b> _stylesheet_ _style_ _param_ _value_
# <dd>
# Set the value of a stylesheet parameter. _stylesheet_ is the
# style-sheet, _style_ the style_, and _param_ is the parameter
# to be returned, in the same format as for the <b>subscribe</b>
# option. The parameter is set using the <b>publish</b> method
# of the stylesheet model, so any subscribers to the style will
# be notified of the new value.
#
# <dt><b>style</b> _subscriber_ _stylesheet_ ?_style_?
# <dd>
# Select or get the style used to give value to a widget's options.
# _subscriber_ is the widget, _stylesheet_ is the name of
# a stylesheet (as given to the <b>register</b> option), and
# _style_ is the name of the style that will be used to update
# the options of _subscriber_. If no style is ever specified
# for a particular widget, then the style named "default" will
# be used. If _style_ is not specified, return the current style
# of _subscriber_; if it is, change the style of _subscriber_ to
# _style_.
#
# <dt><b>stylesheets</b>
# <dd>
# Return a list of registered stylesheet.
#
# <dt><b>subscribe</b> _subscriber_ _stylesheet_ ?_option_ _param_ ...?
# <dd>
# Subscribe a widget's options to parameters of a style-sheet.
# The _subscriber_ is the widget, _stylesheet_ is the name of
# a stylesheet (as given to the <b>register</b> option), each
# _option_ is the name of an itk_option or a public variable
# of _subscriber_, and _param_ is the name of the parameter.
# The parameter name is different to the actual item name of
# the StyleSheet model: it is the dot-separated parameter name
# relative to a particular style (as specified by the <b>select</b>
# option). For example, the name <b>colors.textColor</b> is
# the <b>textColor</b> parameter of the <b>colors</b> group. 
#
# <dt><b>unsubscribe</b> _subscriber_ ?_option_ ...?
# <dd>
# Unsubscribe a widget's options. Each _option_ is an option
# of _subscriber_ that was previously subscribed with
# <b>subscribe</b>. If no options are supplied, unsubscribe
# all options of _subscriber_.
#
# </dl>
#
ensemble ::tycho::stylesheet {
    # Get direct access to a stylesheet
    option access {stylesheet {method {}} args} {
	# Make sure it's loaded
	set model [::tycho::StyleSheet::_load $stylesheet]
	
	# Call or return it
	if { $method == "" } {
	    return $model
	} else {
	    eval $model $method $args
	}
    }

    # Get a style parameter
    option get {stylesheet style param} {
	# Make sure it's loaded
	set model [::tycho::StyleSheet::_load $stylesheet]
	
	# Get it
	$model value [$model namebystyle $style $param] 1
    }

    # Register a stylesheet
    option register {stylesheet basefile userfile} {
	if [@scope ::tycho::StyleSheet ::info exists _stylefile($stylesheet)] {
	    error "Style sheet \"$stylesheet\" is already registered"
	}
	@scope ::tycho::StyleSheet set _basefile($stylesheet) $basefile
	@scope ::tycho::StyleSheet set _userfile($stylesheet) $userfile
    }

    # Set a style parameter
    option set {stylesheet style param value} {
	# Make sure it's loaded
	set model [::tycho::StyleSheet::_load $stylesheet]
	
	# Set it and publish
	$model publish itemconfigure \
                [$model namebystyle $style $param] -value $value
    }

    # Select or get the style to which a widget is subscribed
    option style {subscriber stylesheet {style {}}} {
	# Make sure it's loaded
	set model [::tycho::StyleSheet::_load $stylesheet]
	
	# Call it
	if { $style == "" } {
	    @scope ::tycho::StyleSheet set _widgetstyle($subscriber)
	} else {
	    $model subscribe style $subscriber $style
	}
    }

    # Return a list of registered stylesheets
    option stylesheets {} {
	@scope ::tycho::StyleSheet array names _userfile
    }

    # Subscribe options
    option subscribe {subscriber stylesheet args} {
	# Make sure it's loaded
	set model [::tycho::StyleSheet::_load $stylesheet]
	
	# Call it
	eval $model subscribe options $subscriber $args
    }

    # Unsubscribe options
    option unsubscribe {subscriber stylesheet args} {
	# Make sure it's loaded
	set model [::tycho::StyleSheet::_load $stylesheet]
	
	# Call it
	eval $model unsubscribe options $subscriber $args
    }
}

##########################################################################
#### StyleSheet
#
# The <i>StyleSheet</i> model provides a mechanism for widgets
# to have configuration options controlled by a central
# database. Each style-sheet contains one or more _styles_,
# which is a collection of parameters with arbitrary values.
# All styles within a sheet have exactly the same set of
# parameters, but with differing values. Widgets can subscribe
# an option to a parameter, and that option is then kep in sync
# with the value of that parameter instance within the particular
# style currently selected for that widget.
# A style sheet has three types:
#
# <dl>
#
# <dt><b>style</b> _name_:
# <dd>
# A StyleSheet model contains multiple styles. One of them must be
# named "default," while the others can have any arbitrary name.
# Styles have the following attributes:
#   <dl>
#   <dt><b>-description</b> <i>description</i>
#   <dd>
#   An HTML description of the style in HTML which will
#   be displayed in help windows.
#
#   <dt><b>-label</b> <i>label</i>
#   <dd>
#   A brief string describing the stylesheet. By convention, styles
#   are only made available in user interfaces if they have a label.
#   </dl>
#
# <dt><b>group</b> _name_:
# <dd>
# Parameters within a style can be divided into groups.
# Groups are just a structuring mechanism for parameters, and
# can be arbitrarily nested. Groups cannot appear at the
# top level of a model. Groups have the following attributes:
#   <dl>
#   <dt><b>-description</b> <i>description</i>
#   <dd>
#   An HTML description of the group in HTML which will
#   be displayed in help windows.
#
#   <dt><b>-label</b> <i>label</i>
#   <dd>
#   A brief string describing the group. By convention, groups
#   are only made available in user interfaces if they have a label.
#   </dl>
# 
# <dt><b>parameter</b> _name_:
# <dd>
# A parameter. Parameters cannot appear at the top level, and
# cannot contain other items. They have the following attributes:
#   <dl>
#   <dt><b>-description</b> <i>description</i>
#   <dd>
#   An HTML description of the parameter in HTML which will
#   be displayed in help windows.
#
#   <dt><b>-label</b> <i>label</i>
#   <dd>
#   A brief string describing the parameter. By convention, parameters
#   are only made available in user interfaces if they have a label.
#
#   <dt><b>-type</b> <i>type</i>
#   <dd>
#   The "type" of the parameter. This will be used by the parameter
#   editor to decide how to display and edit the parameter. Legal types are:
#   <ul>
#   <li><b>string</b>: Can be any arbitrary value. This is the default.
#   <li><b>number</b>: A number.
#   <li><b>integer</b>: An integer.
#   <li><b>boolean</b>: A boolean value.
#   <li><b>choice</b>: A small set of (arbitrary) possible values. These
#   are intended for display by radiobuttons.
#   <li><b>set</b>: A larger set of (arbitrary) possible values. These
#   are intended for display by an option menu.
#   <li><b>font</b>: A font value, specified as a list {_family_ _size_
#   _style_}. The second and third elements can be omitted -- see FontManager
#   for details.
#   <li><b>color</b>: A symbolic color value.
#   </ul>
#  
#   <dt><b>-values</b> <i>list</i>
#   <dd>
#   A list representing the set of legal values of
#   the parameter. Valid for the _choice_ and _set_ types.
# </dl>
# </dl>
#
class ::tycho::StyleSheet {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}

    #################################################################
    ####                     public methods                      ####

    # Notify on parameter update
    method _notify {widget command name args}

    # Convert a style and parameter name into an item name
    method namebystyle {style param}

    # Convert a subscriber and parameter name into an item name
    method namebysubscriber {subscriber param}

    # Subscribe to this model
    method subscribe {type {subscriber {}} args}

    # Synchronize this model with a "master" model
    method synchronize {master style {context {}}}

    # Unsubscribe from this model
    method unsubscribe {type subscriber args}

    # Get a preference value, converting if necessary
    method value {name {convert 0}}

   #################################################################
    ####                   public procedures                     ####

    # Load a stylesheet if it isn't already and return the object
    public proc _load {stylesheet}

    #################################################################
    ####                   protected methods                     ####

    # Add an edge
    protected method _addparameter {name value args}

    # Return a description of an edge
    protected method _describeparameter {name {prefix {}}}

    #################################################################
    ####                   private variables                     ####

    # Mapping from widget name to subscribed style
    private common _widgetstyle

    # Mapping from widget name to a list of option-parameter pairs
    private common _widgetoptions
    
    #################################################################
    ####               private common variables                  ####

    # Mapping from sheet name to base file name
    private common _basefile

    # Mapping from sheet name to StyleSheet object
    private common _stylemodel

    # Mapping from sheet name to user file name
    private common _userfile
}


########################################################################
#### constructor
#
body ::tycho::StyleSheet::constructor {args} {
    # Define the style entity
    type define style \
	    -label {} \
	    -description {}

    # Define the group entity
    type define group \
	    -label {} \
	    -description {}

    # Define the parameter entity
    type define parameter \
            :override 1 \
	    :leafonly 1 \
	    -label {} \
	    -description {} \
	    -type string \
	    -values {}

    # Evaluate options
    eval configure $args
}


#########################################################################
#########################################################################
####                          public methods                         ####

########################################################################
#### _notify
#
# Callback for notification when a parameter is changed. Here, we
# reconfigure the gvein _option_ of _widget_ only if a) _command_
# is <b>itemconfigure</b>; b) _args_ contains a <b>-value</b>
# attribute.
#
body ::tycho::StyleSheet::_notify {widget option command name args} {
    if { $command == "itemconfigure" } {
        array set attrs $args
        if [::info exists attrs(-value)] {
            # Update the option. Note that we go directly to the
            # ::itk::Archetype method in order to bypass the overridden
            # configure{} method. Also note that we use value{}
            # to get the converted value of the parameter, not the
            # set value.
            uplevel \#0 $widget ::itk::Archetype::configure \
		    $option [list [value $name 1]]
        }
    }
}

########################################################################
#### namebystyle
#
# Convert a style and parameter name into a full item name.
#
body ::tycho::StyleSheet::namebystyle {style param} {
    set name "style:$style"
    set splat [split $param .]
    foreach g [lreplace $param end end] {
	lappend name "group:$g"
    }
    lappend name "parameter:[lindex $splat end]"
    return $name
}

########################################################################
#### namebysubscriber
#
# Convert a subscriber and parameter name into a full item name. The
# name will include the name of the style to which _subscriber_ is
# currently subscribed.
#
body ::tycho::StyleSheet::namebysubscriber {subscriber param} {
    # Get subscriber command
    set s [::info which -command $subscriber]
    if { $s != "" } {
        set subscriber $s
    }

    set name "style:$_widgetstyle($subscriber)"
    set splat [split $param .]
    foreach g [lreplace $splat end end] {
	lappend name "group:$g"
    }
    lappend name "parameter:[lindex $splat end]"
    return $name
}

########################################################################
#### subscribe
#
# Subscribe to this model. This command has four forms, depending
# on the value of the _mode_ argument. The _subscriber_ is
# usually the name of the widget that is subscribing to this model,
# but remaining arguments differ according to the mode. If
# _subscriber_ is an object or Tk window, then is is converted 
# into its access command (for example, <code>.foo</code> will be
# converted into <code>::.foo</code>. If it is not, then the given
# string will be used as-is -- this string is arbitrary, but care
# should be taken to avoid clashing with object or widget names.
#
# <dl>
# <dt><b>data</b> _subscriber_ ?_name_? ?_command_?
# <dd>
# Subscribe to a change in data. This is the same as for 
# <a href="Model.html">Model</a>.
#
# <dt><b>event</b> _subscriber_ _event_ ?_command_?
# <dd>
# Subscribe to a an "event" on the model. This is the same as for 
# <a href="Model.html">Model</a>.
#
# <dt><b>options</b> _subscriber_ ?_option_ _name_ ...?
# <dd>
# Subscribe a widget option to a change in data. Each _option_ is
# the name of an itk_option or a public variable of _subscriber_, and
# _name_ is the item of this model that will be used to give
# a value to _option_. _name_ is a dot-separated name relative to
# the style that _subscriber_ has subscribed to. If _subscriber has not
# subscribed to a style, then the <b>default</b> style is used.
# Each _option_ of _subscriber_ is updated immediately with the
# current value of item _name_. Furthermore, any change to _name_
# will cause _subscriber_ to be updated again.
#
# <dt><b>style</b> _subscriber_ _stylename_
# <dd>
# Subscribe a widget to a style. If the widget has already
# subscribed options (with <b>subscribe option</b>), then all
# of the widgets subscribed options are updated with the same
# parameters, but in _stylename_ instead of the previous style.
# If the widget has not yet subscribed to any styles, then
# _stylename_ will be used as the style from which to set options
# in later calls to <b>subscribe option</b>.
#
# </dl>
#
body ::tycho::StyleSheet::subscribe {mode {subscriber {}} args} {
    switch -exact $mode {
        "options" {
            # Get subscriber command if it exists
            set s [::info which -command $subscriber]
            if { $s != "" } {
                set subscriber $s
            }
            # Make sure we have at least the default style
	    if ![::info exists _widgetstyle($subscriber)] {
                set _widgetstyle($subscriber) "default"
            }

	    # Remember the options and parameters
	    eval lappend _widgetoptions($subscriber) $args

	    set updatelist {}
	    foreach {option param} $args {
		# Get the item name
		set name [namebysubscriber $subscriber $param]

		# Subscribe to the item, and supply a notify command
		# that calls myself back.
		chain data $subscriber $name \
			"$this _notify $subscriber $option"

		# Build the list to update the widget now
		lappend updatelist $option [value $name 1]
	    }
	    # Update the widget now
	    eval $subscriber ::itk::Archetype::configure $updatelist
        }
        "style" {
            # Get subscriber command if it exists
            set s [::info which -command $subscriber]
            if { $s != "" } {
                set subscriber $s
            }
            # Check style
	    set style [lindex $args 0]
	    if ![exists style:$style] {
		error "Unknown style \"$style\" in style-sheet \"$modelname\""
	    }
	    # If the subscriber has already subscribed options, we
	    # have to unsubscribe it first
	    chain unsubscribe data $subscriber

	    # Change the style for this widget
	    set _widgetstyle($subscriber) $style

	    # Resubscribe all preferences
	    eval subscribe options $subscriber $_widgetoptions($subscriber)

    	}
    	default {
	    eval chain $mode $subscriber $args
    	}
    }
}

########################################################################
#### synchronize
#
# "Synchronize" this model with a "master" model. _master_ is the
# reference to the master model. The _context_ argument is the
# context within which the synchronization takes place and is only
# used by recursive calls. The synchronization process is as follows:
# <ul>
# <li>Add any style present in master but not here.
# <li>Change the parameters of each style to match that of
# the corresponding style in master, if there is one.
# <li>Compare each style in this model with the "default"
# style of the master. While doing so:
#    <ul>
#    <li>Add each parameter and group in master not present here.
#    <li>Delete each parameter and group here that is not in master.
#    <li>For all other groups, change the group's attributes to
#    match the master.
#    <li>For all other parameters, change the parameter's attributes
#    to be the same as the master, with the exception of the
#    parameter value, which is changed only if it is the same
#    as the previous default.
#   </ul>
# </ul>
#
body ::tycho::StyleSheet::synchronize {master mstyle {context {}}} {
    set styles [match style]
    set rstyle [lindex $styles 0]

    # If this style sheet has no styles, just copy the data
    # from the master
    if { $styles == "" } {
	parse [$master describe]
	return
    }

    # Update styles
    foreach s [$master match style] {
        if ![exists style:$s] {
            # Add new style
            parse [$master describe style:$s]
        } else {
            # Update style parameters
            eval itemconfigure style:$s [$master assign style:$s]
        }
    }

    # Recursively process groups
    set rgroups [match group [concat style:$rstyle $context]]
    set mgroups [$master match group [concat style:$mstyle $context]]

    # Add groups
    foreach g [::tycho::lsubtract $mgroups $rgroups] {
        set data [$master describe [concat style:$mstyle $context group:$g]]
        foreach s $styles {
	    # FIXME: this is wrong
            parse [concat style:$s $context group:$g]
        }
    }
    # Delete groups
    foreach g [::tycho::lsubtract $rgroups $mgroups] {
        foreach s $styles {
            delete [concat style:$s $context group:$g]
        }
    }
    # Synchronize groups
    foreach g [::tycho::lintersection $rgroups $mgroups] {
        synchronize $master $mstyle [concat $context group:$g]
    }

    # Process parameters
    set rparams [match parameter [concat style:$rstyle $context]]
    set mparams [$master match parameter [concat style:$mstyle $context]]

    # Add parameters
    foreach p [::tycho::lsubtract $mparams $rparams] {
        set data [$master assign [concat style:$mstyle $context parameter:$p]]
        foreach s $styles {
            eval [list add [concat style:$s $context parameter:$p]] $data
        }
    }
    # Delete parameters
    foreach p [::tycho::lsubtract $rparams $mparams] {
        foreach s $styles {
            delete [concat style:$s $context parameter:$p]
        }
    }
    # Synchronize parameters
    foreach p [::tycho::lintersection $rparams $mparams] {
        set mdata [$master assign [concat style:$mstyle $context parameter:$p]]


        foreach s $styles {
            set rdata [assign [concat style:$s $context parameter:$p]]
	    
            # Remember the data if it's not default
            set protect 0
            array set rattrs $rdata
            if { $rattrs(-value) != $rattrs(-default) } {
                set protect 1
                set value $rattrs(-value)
            }
            # Merge master data
            array set rattrs $mdata
	    
            # Restore value
            if $protect {
                set rattrs(-value) $value
            }
            # Modify the data
            assign [concat style:$s $context parameter:$p] [array get rattrs]
        }
    }
}

########################################################################
#### unsubscribe
#
# Unsubscribe from this model. This command has three forms, depending
# on the value of the _mode_ argument. The _subscriber_ is
# always the name of the widget that is subscribing to this model,
# but remaining arguments differ according to the mode.
#
# <dl>
# <dt><b>data</b> _subscriber_ ?_name_?
# <dd>
# Unsubscribe from data changes. This is the same as for 
# <a href="Model.html">Model</a>.
#
# <dt><b>event</b> _subscriber_ ?_event_?
# <dd>
# Unsubscribe from an "event" on the model. This is the same as for 
# <a href="Model.html">Model</a>.
#
# <dt><b>options</b> _subscriber_ ?_option_ ...?
# <dd>
# Unsubscribe widget options from data. Each _option_ is
# the name of an itk_option or a public variable of _subscriber_, that
# has previously been subscribed with <b>subscribe option</b>.
# If no options are given, then the widget is unsubscribed from all
# options.
#
# </dl>
#
body ::tycho::StyleSheet::unsubscribe {mode subscriber args} {
    switch -exact $mode {
        "options" {
            # Get subscriber command if it exists
            set s [::info which -command $subscriber]
            if { $s != "" } {
                set subscriber $s
            }
            if { $args == "" } {
                # Unsubscribe from everything
		chain unsubscribe data $subscriber
		catch {unset _widgetstyle($subscriber)}
		catch {unset _widgetoptions($subscriber)}
	    } else {
		# Unsubscribe from selected options
		array set opts $_widgetoptions($subscriber)
		set unsubs {}
		foreach option $args {
		    set name [namebysubscriber $subscriber $opts($option)]
		    lappend unsubs $name
		    unset opts($option)
		}
		eval chain data $subscriber $unsubs
		set _widgetoptions($subscriber) [array get opts]
	    }
    	}
    	default {
	    eval chain $mode $subscriber $args
    	}
    }
}

########################################################################
#### value
#
# Get the value of a parameter. If _convert_ is set, translate fonts
# and colors from symbolic into raw X values.
#
body ::tycho::StyleSheet::value {name {convert 0}} {
    set value [itemcget $name -value]
    if { $convert } {
	switch -exact [itemcget $name -type] {
	    "font" {
		set value [eval ::tycho::font $value]
	    }
	    "color" {
		set value [eval ::tycho::color $value]
	    }
	}
    }
    return $value
}
   

#########################################################################
#########################################################################
####                         public procedures                       ####


########################################################################
#### _load
#
body ::tycho::StyleSheet::_load {stylesheet} {
    # Check it
    if ![::info exists _userfile($stylesheet)] {
	error "Unknown stylesheet \"$stylesheet\""
    }
    # If it's not loaded, load it
    if ![::info exists _stylemodel($stylesheet)] {
	set userfile [::tycho::expandPath $_userfile($stylesheet)]
	set basefile [::tycho::expandPath $_basefile($stylesheet)]

	# Create the model
	set model [::tycho::StyleSheet \
		[::tycho::autoName stylesheet] -modelname $stylesheet]
	set _stylemodel($stylesheet) $model

	# Check user and base files. If the user file doesn't exist,
	# or the base file is more recent than the user file,
	# update the model with the additional base file info.
        # FIXME: Based on experience with the earlier preferences manager
        # (WidgetPreferences), the date comparison is not likely to be
	# very robust. We need to use version numbers.
        if { ![::file exists $userfile] \
		|| [::file mtime $basefile] > [::file mtime $userfile] } {
	    # If the user file exists, load it
	    if [::file exists $userfile] {
		# Load from the user file
		set fd [open $userfile]
		$model parse [read $fd]
		close $fd
	    }
            # Load from base file
            set base [::tycho::StyleSheet [::tycho::autoName stylesheet]]
            set fd [open $basefile]
	    $base parse [read $fd]
            close $fd

	    # Synchronize the model with the updated base file data
            $model synchronize $base "default"
            ::delete object $base

            # Rewrite user file
            set fd [open $userfile "w"]
            puts $fd [$model describe]
            close $fd
        } else {
	    # The user file is most recent. Just load it.
	    set fd [open $userfile]
	    $model parse [read $fd]
	    close $fd
	}
    } else {
	set model $_stylemodel($stylesheet)
    }
    # Return full namespace path so it can be passed around
    return ::tycho::StyleSheet::$model
}

#####################################################################
#####################################################################
####                     protected methods                       ####

########################################################################
#### _addparameter
#
# Add an parameter. If no default is provided, the _value_ argument is
# used as the default.
#
body ::tycho::StyleSheet::_addparameter {tail value args} {
    global _context_
 
    # Get the full name of the item
    set name [concat $_context_ parameter:$tail]
    
    # Add it. (Any _default in $args will override the first one.)
    eval [list add $name -value $value -default $value] $args
}

########################################################################
#### _describeparameter
#
# Return a string describing an parameter.
#
body ::tycho::StyleSheet::_describeparameter {name {prefix {}}} {
    regexp {(.+):(.+)} [lindex $name end] _ type tail

    # Start string with type followed by local name
    set string "${prefix}parameter $tail"

    # Print value
    array set attrs [assign $name]
    lappend string $attrs(-value)
    unset attrs(-value)

    # Print remaining attributes
    foreach attr [lsort [array names attrs]] {
        append string " \\\n$prefix        "
        lappend string $attr $attrs($attr)
    }
    return $string\n
}

