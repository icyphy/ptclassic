# Subpanel widget which mimics opening and closing of a drawer. 
# 
# Author: Farhana Sheikh
# Version: $Id$
# 
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Options from the derived class
option add *Subpanel.relief sunken widgetDefault
option add *Subpanel.labelPos w widgetDefault
option add *Subpanel.labelMargin 2 widgetDefault

#######################################################################
#### Subpanel
# This class defines a Subpanel widget that can be used within windows.
# It mimics opening and closing a drawer.  It allows a user to create a
# custom laid out panel and then embed it into the subpanel widget which
# provides capabilities to open and close the panel.  
# The Subpanel can be initially in an open or closed state.  The closed
# state hides all of the widgets that are inside the panel, whereas the
# open state displays the entire panel.  If the -childwidget option is
# is specified then the user-specified widget is packed into the 
# subpanel.  Note that one childwidget cannnot be packed into two 
# different subpanels.  The -text option specifies the text that is to 
# be inserted into the label portion of the subpanel.  The -opencallback 
# option specifies a command (a name of a procedure) that is to be executed 
# when the subpanel is opened. This should return the name of a widget to 
# be packed into the subpanel.  The -closecallback option specifies the 
# command (name of a procedure) that is executed when a subpanel is closed.  
# The -state option specifies the state that the user would like the 
# subpanel to have: either closed or open.  One can query the current state 
# of the subpanel by using [cget -state].
# NOTE: If both the childwidget and the opencallback options are
#       are used then the one that is specified last will be used.
#       
#
# <p>
# Here is an example of how to use the Subpanel:
# <tcl><pre>
# tycho::Dismiss .w
# frame .w.options
# frame .w.options.left
# frame .w.options.right
# pack .w.options.left -side left -anchor nw
# pack .w.options.right -side left -anchor nw
# checkbutton .w.options.left.debug -text "Debug mode" -relief flat
# checkbutton .w.options.right.script -text "Use Script" -relief flat
# pack .w.options.left.debug -side top -anchor nw
# pack .w.options.right.script -side top -anchor nw
# proc closePanel {} {
# puts "close"
# }
# tycho::Subpanel .w.s -text "Options" -childwidget .w.options
# pack .w.s -side top -anchor nw
# wm deiconify .w
# .w.s configure -closecallback "closePanel"
# frame .w.new
# frame .w.new.bframe
# pack .w.new.bframe
# button .w.new.bframe.button -text "push me"
# pack .w.new.bframe.button
# proc openPanel {} {
# set widget .w.new
# puts "open"
# return $widget
# }
# .w.s configure -opencallback "openPanel"
# </pre></tcl>

class ::tycho::Subpanel { 
    inherit itk::Widget

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    #### -childwidget option
    # Specify the name of a widget to be packed into the subpanel
    itk_option define -childwidget childWidget ChildWidget ""

    #### -closecallback option
    # Specify the name of the procedure to execute when closing subpanel
    itk_option define -closecallback closeCallback CloseCallback ""

    #### -opencallback option
    # Specify the name of the procedure to execute when opening subpanel;
    # The procedure should return the name of a widget to pack into the panel
    itk_option define -opencallback openCallback OpenCallback ""
   
    #### -state option
    # Specify the state of the subpanel, either open or closed
    itk_option define -state state State closed

    #### -text option
    # Specify the text to be inserted in the subpanel label
    itk_option define -text subpanelTitle SubpanelTitle ""

    ###################################################################
    ####                        public methods                     ####

    #### close
    # Close a subpanel
    method close {}

    #### open
    # Open a subpanel
    method open {}

    ###################################################################
    ####                       private variables                   ####
     
    private variable closecmd ""
    private variable opencmd ""
    private variable previousChildwidget ""
}

#######################################################################
#### -childwidget configuration
# Name of the custom childwidget that user wants to embed in a 
# subpanel
# 
configbody ::tycho::Subpanel::childwidget {

    # If there's already a child widget, unpack and delete it
    # If one needs to use the same childwidget somewhere else, it
    # can't be done.  That is if want to use the same childwidget
    # in two Subpanels, the childwidget in the first Subpanel gets erased.
    if { $previousChildwidget != "" } {
	pack forget $previousChildwidget
	# Leave deletion of object to user of Subpanel widget
    }

    if { $itk_option(-childwidget) != ""} {
	# Pack the new widget into the user frame
	pack $itk_option(-childwidget) -in $itk_component(widgetFrame)
    
	# Why do I need this???
	raise $itk_option(-childwidget) $itk_component(widgetFrame)
    }

    # Remember the widget for the next time...
    set previousChildwidget $itk_option(-childwidget)

    # Override the opencallback command.  We need in case 
    # user wants to only embed a widget and not execute
    # a command upon opening
    set opencmd ""
}

#######################################################################
#### -closecallback configuration
# Set the command to execute when subpanel is closed
# 
configbody ::tycho::Subpanel::closecallback {
    set closecmd $itk_option(-closecallback)
}

#######################################################################
#### -opencallback configuration
# Set the command to execute when subpanel is opened
# 
configbody ::tycho::Subpanel::opencallback {
    set opencmd $itk_option(-opencallback)
}

#######################################################################
#### -state configuration
# Set state of subpanel to either open or closed
#
configbody ::tycho::Subpanel::state {
    # Need the following to use bitmaps
    global TYCHO
    
    # The meaning of open and closed here is a bit tricky.  When the 
    # Subpanel is in the closed state then pressing the button places
    # places the Subpanel in the open state and similarly for the open
    # state of the Subpanel
    switch $itk_option(-state) {
	closed {
	    $itk_component(arrow) configure \
		    -bitmap @$TYCHO/kernel/img/arrowclose.xbm \
		    -justify center \
		    -command [code "$this open"]
	}
	open {
	    $itk_component(arrow) configure \
		    -bitmap @$TYCHO/kernel/img/arrowopen.xbm \
		    -justify center \
		    -command [code "$this close"]

	    pack $itk_component(spaceFrame) -side left -anchor nw
	    pack $itk_component(panelFrame) \
		    -side left \
		    -anchor nw \
		    -after $itk_component(spaceFrame) 

	}
    }
}

#######################################################################
#### -text configuration
# Title of subpanel
#
configbody ::tycho::Subpanel::text {

    $itk_component(title) configure -text $itk_option(-text)
}

#######################################################################
#### constructor
#
body ::tycho::Subpanel::constructor {args} {

    # create the frame that contains everything
    itk_component add mainFrame {
	frame $itk_interior.mainFrame
    } {
    }
    pack $itk_component(mainFrame) -side left

    # create frame for title and open/close button
    itk_component add titleFrame {
	frame $itk_component(mainFrame).titleFrame
    } {
    }
    pack $itk_component(titleFrame) -side top -anchor nw -expand yes

    # create space holder frame so that buttons, etc. are lined up
    # underneath the title and not the open/close button
    itk_component add spaceFrame {
	frame $itk_component(mainFrame).spaceFrame -width 25
    } {
    }
    pack propagate $itk_component(spaceFrame) off

    # create frame for buttons, buttons, entry fields, etc.
    itk_component add panelFrame {
	frame $itk_component(mainFrame).panelFrame
    } {
    }

    # create frame for label
    itk_component add labelFrame {
	frame $itk_component(titleFrame).labelFrame 
    } {
    }
    pack $itk_component(labelFrame) -side right -anchor ne  

    # Create arrow frame.
    itk_component add arrowFrame {
	frame $itk_component(titleFrame).arrowFrame
    } {
    }
    pack $itk_component(arrowFrame) -side right -padx 2 -anchor nw
    
    # create the arrow up or down button
    itk_component add arrow {
	button $itk_component(arrowFrame).arrow -height 13 -width 13
    } {
	keep -cursor
    }
    pack $itk_component(arrow)

    # create the accompanying label
    itk_component add title {
	label $itk_component(labelFrame).title \
		-justify right
    } {
	keep -background -font
    }
    pack $itk_component(title) -side left

    # create frame for user miscellaneous items
    itk_component add widgetFrame {
	frame $itk_component(panelFrame).widgetFrame
    } {
    }
    pack $itk_component(widgetFrame) -side top -anchor nw

    eval itk_initialize $args
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####


#######################################################################
#### close
# Close the subpanel and hide the widgets inside.  
# If a command exists that is to be executed upon closing then execute
# it before hiding the widgets.
#
body ::tycho::Subpanel::close {} {

    # If a command exists that is to be executed upon closing the panel
    # then execute it, otherwise just hide the custom panel.
    if {$closecmd != ""} {
	[code $closecmd]
    }

    pack forget $itk_component(panelFrame)
    pack forget $itk_component(spaceFrame)
    $this configure -state closed
}

#######################################################################
#### open
# Open the subpanel and displays the widgets  
# If a command exists that is to be executed upon opening then execute
# it and pack the returned widget into the subpanel so it is displayed
# when subpanel is opened.
#
body ::tycho::Subpanel::open {} {

    # If a command exists that is to be executed upon opening the panel
    # then execute and pack the returned widget into the subpanel.  Flag
    # an error if the command does not return a widget.
    set currentChildwidget ""
    if {$opencmd != ""} {
	set currentChildwidget [$opencmd]
	if {$currentChildwidget != ""} {
	    # Because the childwidget option overrides the opencallback
	    # option, we need to remember the command
	    set temp $opencmd
	    $this configure -childwidget $currentChildwidget
	    set opencmd $temp
	} else {
	    set opencmd ""
	    error "Opencallback command did not return widget"
	}
    }
    
    # Open the panel and display the custom widget inside.
    pack $itk_component(spaceFrame) -side left -anchor nw
    pack $itk_component(panelFrame) \
	    -side left \
	    -anchor nw \
	    -after $itk_component(spaceFrame) 

    $this configure -state open
}












