##########################################################################
# Definition of a Subpanel mega-widget. 
# 
# Author: Farhana Sheikh
# Version: $Id$
# 
# Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
#
#                                                COPYRIGHTENDKEY

# KNOWN BUGS:
#
# (1) If one needs to use the same childwidget somewhere else, 
#     it can't be done.  That is if you want to use the same childwidget
#     in two Subpanels, the childwidget in the first Subpanel gets erased.

# LIST OF FEATURES TO BE ADDED:
#
# (1) methods for creating standard layout subpanels
#     This means that we would like to control the way we layout subpanels
#     in windows that contain widgets such as buttons, checkboxes, entry
#     fields, etc. The new version of Tk will have a grid layout capabilities
#     so may wait until then to implement this feature.

if {[info class ::tycho::Subpanel] != ""} {
    delete class ::tycho::Subpanel
}

##########################################################################
#### Subpanel
# This class defines a Subpanel widget that can be used within windows.
# The Subpanel can be initially in an open or closed state.  The closed
# state hides all of the widgets that are inside the panel, whereas the
# open state displays the entire panel.  
#
# <p>
# Here is an example of how to use the Subpanel:
# <tcl><pre>
# tycho::Dismiss .w
# frame .w.options
# frame .w.options.left
# frame .w.options.right
# pack .w.options.left -side left -anchor nw
# pack .w.options.right -side left -anchor nw
# checkbutton .w.options.left.debug -text "Debug mode" -relief flat
# checkbutton .w.options.right.script -text "Use Script" -relief flat
# pack .w.options.left.debug -side top -anchor nw
# pack .w.options.right.script -side top -anchor nw
# tycho::Subpanel .w.s -text "Options" -childwidget .w.options
# pack .w.s -side top -anchor nw
# wm deiconify .w
# </pre></tcl>

#
# DEFAULT RESOURCES:
#
option add *Subpanel.relief sunken widgetDefault
option add *Subpanel.labelPos w widgetDefault
option add *Subpanel.labelMargin 2 widgetDefault

class ::tycho::Subpanel { 
    inherit itk::Widget

    constructor {args} {}

    #####################################################################
    ####                          options                            ####

    itk_option define -state state State closed

    itk_option define -text subpanelTitle SubpanelTitle ""

    itk_option define -childwidget childWidget ChildWidget ""


    #####################################################################
    ####                        public methods                       ####

    public method close {}
    public method open {}


    #####################################################################
    ####                       private variables                     ####
     
    private variable previousChildwidget ""
}
    
# ------------------------------------------------------------------
#                        CONSTRUCTOR
# ------------------------------------------------------------------
body ::tycho::Subpanel::constructor {args} {


    # create the frame that contains everything
    itk_component add mainFrame {
	frame $itk_interior.mainFrame
    } {
    }
    pack $itk_component(mainFrame) -side left

    # create frame for title and open/close button
    itk_component add titleFrame {
	frame $itk_component(mainFrame).titleFrame
    } {
    }
    pack $itk_component(titleFrame) -side top -anchor nw -expand yes

    # create space holder frame so that buttons, etc. are lined up
    # underneath the title and not the open/close button
    itk_component add spaceFrame {
	frame $itk_component(mainFrame).spaceFrame -width 25
    } {
    }
    pack propagate $itk_component(spaceFrame) off

    # create frame for buttons, buttons, entry fields, etc.
    itk_component add panelFrame {
	frame $itk_component(mainFrame).panelFrame
    } {
    }

    # FIXME: The label and arrow frames may not be necessary.  Check.
    # create frame for label
    itk_component add labelFrame {
	frame $itk_component(titleFrame).labelFrame 
    } {
    }
    pack $itk_component(labelFrame) -side right -anchor ne  

    # Create arrow frame.
    itk_component add arrowFrame {
	frame $itk_component(titleFrame).arrowFrame
    } {
    }
    pack $itk_component(arrowFrame) -side right -padx 2 -anchor nw
    
    # create the arrow up or down button
    itk_component add arrow {
	button $itk_component(arrowFrame).arrow -height 13 -width 13
    } {
	keep -cursor
    }
    pack $itk_component(arrow)

    # create the accompanying label
    itk_component add title {
	label $itk_component(labelFrame).title \
		-justify right
    } {
	keep -background -font
    }
    pack $itk_component(title) -side left

    # create frame to hold checkbuttons
    itk_component add checkFrame {
	frame $itk_component(panelFrame).checkFrame
    } {
    }
    pack $itk_component(checkFrame) -side top -anchor nw

    # create frame to hold radiobuttons
    itk_component add radioFrame {
	frame $itk_component(panelFrame).radioFrame
    } {
    }
    pack $itk_component(radioFrame) -side top -anchor nw
    
    # create frame to hold entry fields
    itk_component add entryFrame {
	frame $itk_component(panelFrame).entryFrame
    } {
    }
    pack $itk_component(entryFrame) -side top -anchor nw
    
    # create frame to hold spinners and lists
    itk_component add listFrame {
	frame $itk_component(panelFrame).listFrame
    } {
    }
    pack $itk_component(listFrame) -side top -anchor nw

    # create frame to hold text widgets
    itk_component add textFrame {
	frame $itk_component(panelFrame).textFrame
    } {
    }
    pack $itk_component(textFrame) -side top -anchor nw

    # create frame for user miscellaneous items
    itk_component add miscFrame {
	frame $itk_component(panelFrame).miscFrame
    } {
    }
    pack $itk_component(miscFrame) -side top -anchor nw

    # create frame to hold buttons
    itk_component add buttonFrame {
	frame $itk_component(panelFrame).buttonFrame
    } {
    }
    pack $itk_component(buttonFrame) -side top -anchor nw

    eval itk_initialize $args

}


# ------------------------------------------------------------------
#                             OPTIONS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# OPTION: -text
#
# Title of Subpanel
# ------------------------------------------------------------------
configbody ::tycho::Subpanel::text {

    $itk_component(title) configure -text $itk_option(-text)
}

# ------------------------------------------------------------------
# OPTION: -state
#
# Place subpanel in closed or open state.
# ------------------------------------------------------------------
configbody ::tycho::Subpanel::state {
    # Need the following to use bitmaps
    global TYCHO
    
    # The meaning of open and closed here is a bit tricky.  When the 
    # Subpanel is in the closed state then pressing the button places
    # places the Subpanel in the open state and similarly for the open
    # state of the Subpanel
    switch $itk_option(-state) {
	closed {
	    $itk_component(arrow) configure \
		    -bitmap @$TYCHO/kernel/img/arrowclose.xbm \
		    -justify center \
		    -command "$this open"
	}
	open {
	    $itk_component(arrow) configure \
		    -bitmap @$TYCHO/kernel/img/arrowopen.xbm \
		    -justify center \
		    -command "$this close"

	    pack $itk_component(spaceFrame) -side left -anchor nw
	    pack $itk_component(panelFrame) \
		    -side left \
		    -anchor nw \
		    -after $itk_component(spaceFrame) 

	}
    }
}

# ------------------------------------------------------------------
# OPTION: -childwidget
#
# Name of the custom childwidget that callee wants to embed in a 
# subpanel
# ------------------------------------------------------------------
configbody ::tycho::Subpanel::childwidget {

    # If there's already a child widget, unpack and delete it
    # FIXME: this causes the following bug.  If one needs to use the
    #        same childwidget somewhere else, it can't be done.  That is
    #        if want to use the same childwidget in two Subpanels, the 
    #        childwidget in the first Subpanel gets erased.
    if { $previousChildwidget != "" } {
	pack forget $previousChildwidget
	# Leave deletion of object to user of Subpanel widget
    }

    # Pack the new widget into the user frame
    pack $itk_option(-childwidget) -in $itk_component(miscFrame)
    
    # Why do I need this???
    raise $itk_option(-childwidget) $itk_component(miscFrame)
    
    # Remember the widget for the next time...
    set previousChildwidget $itk_option(-childwidget)
}


# ------------------------------------------------------------------
#                            METHODS
# ------------------------------------------------------------------

# ------------------------------------------------------------------
# METHOD: close
#
# close command which closes the subpanel and hides the widgets 
# inside.  
# ------------------------------------------------------------------
body ::tycho::Subpanel::close {} {

    pack forget $itk_component(panelFrame)
    pack forget $itk_component(spaceFrame)
    $this configure -state closed
}

# ------------------------------------------------------------------
# METHOD: open 
#
# open command which opens the subpanel and displays the widgets  
# ------------------------------------------------------------------
body ::tycho::Subpanel::open {} {

    pack $itk_component(spaceFrame) -side left -anchor nw
    pack $itk_component(panelFrame) \
	    -side left \
	    -anchor nw \
	    -after $itk_component(spaceFrame) 

    $this configure -state open
}












