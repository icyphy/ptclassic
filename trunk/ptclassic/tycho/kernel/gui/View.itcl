# Base class for widgets that view and/or edit data or text.
# 
# @Author: Farhana Sheikh and Edward A. Lee
#
# @Version: @(#)View.itcl	1.21 01/29/97
# 
# @Copyright (c) 1995-1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# FIXME:
# FEATURES TO BE ADDED:
# (1) Add subview functionality


#######################################################################
#### View
# This class is the base class for most graphical and textual widgets
# in Tycho. It is designed to be inserted into a <a href="Displayer.html">
# Displayer</a> # window, although it can be used alone as an ordinary widget.
# Subclasses of the View class display text or graphics, and may
# choose to contain "subviews" within themselves. (The protocols
# and functionality needed to properly implemented nested views
# has not yet been developed.)
#
# The displayer of a view is specified with the -displayer option:
# if this is set in the constructor, the view attaches itself to
# its displayer. <i>Note that the displayer should be specified
# before other arguments.</i>
#
# The displayer of a view provides it with a menu bar, a status bar,`
# and a tool bar. The View class provides methods that issue commands
# to these bars; if a view widget is used without a displayer, then
# commands issued via these methods to the bars are ignored. A view
# that has been attached to a displayer must only be destroyed by
# calling the <code>destroyView</code> method of the displayer, or
# otherwise the displayer will be unaware that the view is gone.
# <p>
# Here is an example:
# <tcl><pre>
# ::tycho::Displayer .d
# ::tycho::View .d.v
# wm deiconify .d
# </pre></tcl>
#
class ::tycho::View {
    inherit ::tycho::TWidget

    constructor {args} {}
    destructor {}

  
    ###################################################################
    ####                            options                        ####

    # Specify whether modifications will be permitted on the data.
    itk_option define -readonly readonly ReadOnly 0

    ###################################################################
    ####                         public methods                    ####

    # In derived classes, return the current point for use by seeFragment.
    method currentPoint {} {return {}}

    # Invoke a command on the Displayer, if it exists.
    method displayer {{method {}} args}
    
    # Give the window or a subwindow the focus and set the menu bar (if any).
    method focusin {}

    # Return 1 if the data is read-only, 0 otherwise.
    method getReadOnly {} 

    # Insert this view into its Displayer.
    method insertInDisplay {}

    # Invoke a command on the menu bar, if it exists.
    method menubar {args}

    # Print a status message, if possible.
    method putStatus {string}

    # Invoke a command on the status bar, if it exists.
    method statusbar {args}

    # Invoke a command on the tool bar, if it exists.
    method toolbar {args}

    ###################################################################
    ####                         protected methods                 ####

    # Indicate whether or not modifications are allowed in the
    # displayed text.
    protected method indicateReadOnly {bool}

    ###################################################################
    ####                         protected variables               ####

    # Indicate whether modifying the text is allowed.
    protected variable readOnly 0

    # "Type" of this view, used for placing windows in the Window menu
    protected variable viewType {}

    ###################################################################
    ####                         protected variables               ####

    # Name of my displayer
    protected variable myDisplayer {}

    # Name of my menubar
    protected variable myMenubar {}

    # Name of my status bar
    protected variable myStatusbar {}

    # Name of my toolbar
    protected variable myToolbar {}
}

#########################################################################
#### -readonly option configuration
# Set whether the data can be modified.  A value of 1 means "no", whereas
# a value of 0 means "yes".  Note that this is independent of whether the
# associated file is read-only.  This determines whether the buffer can
# be modified, not whether the file can be modified.
# 
configbody ::tycho::View::readonly {
    set readOnly $itk_option(-readonly)
    # Delay to ensure that all constructors (including derived class
    # constructors) have completed.
    after idle [code catch "$this indicateReadOnly $itk_option(-readonly)"]
}

#######################################################################
#### constructor
#
body ::tycho::View::constructor {args} {
    # Figure out whether I'm in a displayer, and if so, set myDisplayer.
    set top [winfo toplevel $prefix]
    set cmd [winfo command $top]
    if ![catch {set disp [$cmd isa ::tycho::Displayer]}] {
        if $disp {
            set myDisplayer $cmd
        }
    }

    eval itk_initialize $args

    # Attach myself to the displayer and get back my menu bar, status
    # bar, and tool bar. The view won't
    # actually be displayed: the caller must do that later with
    # the Displayer method showView.
    set bars [displayer attachView $this]
    set myMenubar [lindex $bars 0]
    set myStatusbar [lindex $bars 1]
    set myToolbar [lindex $bars 2]
}

#######################################################################
#### destructor
#
body ::tycho::View::destructor {} {
    # Cannot do this because then destruction cannot be cancelled
    # in derived classes.
    # displayer hideView $viewName
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#########################################################################
#### displayer
# If no arguments are given, return the displayer; if there is none,
# return null. If arguments are given and there is a Displayer, execute
# ths command on the displayer and return the result. If there are args
# but no displayer, do nothing and return null.
#
body ::tycho::View::displayer {{method {}} args} {
    if { $method != "" } {
	if {$myDisplayer != {}} {
	    return [eval $myDisplayer $method $args]
	} {
	    return {}
	}
    } else {
	if {$myDisplayer != {}} {
	    return $myDisplayer
	} {
	    return {}
	}
    }
}

#########################################################################
#### focusin
# Grab the focus and change the Displayer menu, if necessary. This
# should be redefined in derived classes to give the focus to the
# appropriate subwindow.
#
body ::tycho::View::focusin {} {
    ::tycho::TWidget::focusin
    displayer setCurrentView $viewName
}

#####################################################################
#### getReadOnly
# Return 1 if the data is read-only, 0 otherwise.
#
body ::tycho::View::getReadOnly {} {
    return $readOnly
}

#########################################################################
#### menubar
# If there is a menu bar associated with this view, use the arguments
# as a command to issue to the Menubar, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::menubar {args} {
    if {$myMenubar != {}} {
        return [eval $myMenubar $args]
    } {
        return {}
    }
}

###################################################################
#### putStatus
# Print a status message to the view's status bar.
#
body ::tycho::View::putStatus {string} {
    statusbar puts $string
}

#########################################################################
#### statusbar
# If there is a status bar associated with this view, use the arguments
# as a command to issue to the StatusBar, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::statusbar {args} {
    if {$myStatusbar != {}} {
        return [eval $myStatusbar $args]
    } {
        return {}
    }
}

#########################################################################
#### toolbar
# If there is a tool bar associated with this view, use the arguments
# as a command to issue to the toolbar, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::toolbar {args} {
    if {$myToolbar != {}} {
        return [eval $myToolbar $args]
    } {
        return {}
    }
}

#####################################################################
#####################################################################
####                   protected methods                         ####

#####################################################################
#### indicateReadOnly
# Indicate in the status bar (and in derived classes, in the menus)
# whether modifications are allowed on the buffer.
#
body ::tycho::View::indicateReadOnly {bool} {
    if {$bool} {
        statusbar configure -filestatus "readonly"
    } {
        statusbar configure -filestatus "readwrite"
    }
}
