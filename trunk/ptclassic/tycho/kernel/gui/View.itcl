# Definition of the abstract view class
# 
# @Author: Farhana Sheikh and Edward A. Lee
#
# @Version: $Id$
# 
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

# For easier debugging.
catch {delete class ::tycho::View}

# FIXME:
# FEATURES TO BE ADDED:
# (1) Add subview functionality


#######################################################################
#### View
# This class is the base class for most graphical and textual widgets
# in Tycho.  It is designed to be inserted into a Displayer, although
# it can be used alone as an ordinary widget.  A Displayer can contain
# multiple views.  The Displayer provides a menu bar.
#
# FIXME: Fill in the documentation here
#
# A <code>View</code> object that has been attached to a
# <code>Displayer</code> should only be destroyed by calling the
# <code>destroyView</code> method of the displayer. Otherwise the
# displayer will be unaware that the view is gone.
# <p>
# Here is an example:
# <tcl><pre>
# ::tycho::Displayer .d
# ::tycho::View .d.v
# wm deiconify .d
# </pre></tcl>
#
class ::tycho::View {
    inherit itk::Widget

    constructor {args} {}
    destructor {}

  
    ###################################################################
    ####                            options                        ####

    # A symbolic name to use for the view in its Displayer.
    itk_option define -name name Name {}

    # Specify whether modifications will be permitted on the data.
    itk_option define -readonly readonly ReadOnly 0

    ###################################################################
    ####                         public methods                    ####

    # Add a subview to the view.  NOTE: Not implemented yet.
    method addSubview {subviewName type side args}

    # Change the cursor to the "watch" and execute the arguments.
    method busy {args}

    # In derived classes, return the current point in a form usable by seePoint.
    method currentPoint {} {return {}}

    # Invoke a command on the Displayer, if it exists.
    method displayer {args}
    
    # Give the window or a subwindow the focus and set the menu bar (if any).
    method focusin {}

    # Return 1 if the data is read-only, 0 otherwise.
    method getReadOnly {} 

    # Open a file and go to its internal point identified by name.
    method hyperJump {file {point {}}}

    # Insert this view into its Displayer.
    method insertInDisplay {}

    # Invoke a command on the menu bar, if it exists.
    method menubar {args}

    # Invoke a command on the context-sensitive popup menu.
    method contextmenu {args}

    # Print a status message, if possible.
    method putStatus {string}

    # Raise the top-level (displayer) window.
    method raiseWindow {}

    # Remove a subview from the view. NOTE: Not implemented yet.
    method removeSubview {subviewName}

    # Find and make visible a point in the display.
    method seePoint {point}

    # Invoke a command on the status bar, if it exists.
    method statusbar {args}

    # Invoke a command on the tool bar, if it exists.
    method toolbar {args}

    # Return the name of my view window.
    method windowName {} {return $itk_component(hull)}

    ###################################################################
    ####                         public procs                      ####

    # Get the current contents of the local clipboard.
    proc getClipboard {} {return $clipboard}

    # Set the current contents of the local and Tk clipboards.
    proc setClipboard {text} {set clipboard $text}

    ###################################################################
    ####                         protected methods                 ####

    # Indicate whether or not modifications are allowed in the displayed text.
    protected method indicateReadOnly {bool}

    ###################################################################
    ####                         protected variables               ####

    # A local Tycho clipboard that is mirrored in the Tk clipboard.
    protected common clipboard {}

    # Name of my context-sensitive popup menu
    protected variable myContextmenu {}

    # Name of this view's Displayer
    protected variable myDisplayer {}

    # Name of my menubar
    protected variable myMenubar {}

    # Name of my status bar
    protected variable myStatusbar {}

    # Name of my toolbar
    protected variable myToolbar {}

    # The prefix is just a shorthand for $itk_component(hull).
    protected variable prefix

    # Indicate whether modifying the text is allowed.
    protected variable readOnly 0

    # List of subviews
    protected variable subviewList {} 

    # Name of this view; unique for each view in a displayer.
    protected variable viewName {}

    # "Type" of this view, used for placing windows in the Window menu
    protected variable viewType {}

    ###################################################################
    ####                         private variables                 ####

    # Used to create unique view names.
    private common count 0
}

#########################################################################
#### -readonly option configuration
# Set whether the data can be modified.  A value of 1 means "no", whereas
# a value of 0 means "yes".  Note that this is independent of whether the
# associated file is read-only.  This determines whether the buffer can
# be modified, not whether the file can be modified.
# 
configbody ::tycho::View::readonly {
    set readOnly $itk_option(-readonly)
    # Delay to ensure that all constructors (including derived class
    # constructors) have completed.
    after idle [code $this indicateReadOnly $itk_option(-readonly)]
}

#######################################################################
#### constructor
#
body ::tycho::View::constructor {args} {
    # Create a childsite for the contents of the widget
    itk_component add childsite {
	frame $itk_interior.childsite
    } {
	keep -background -cursor
    }
    pack $itk_component(childsite) -fill both -expand yes
    
    set prefix $itk_component(hull)

    # Figure out whether I'm in a displayer, and if so, set myDisplayer.
    set top [winfo toplevel $prefix]
    set cmd [winfo command $top]
    if ![catch {set disp [$cmd isa ::tycho::Displayer]}] {
        if $disp {
            set myDisplayer $cmd
        }
    }

    eval itk_initialize $args

    # Create a unique name, if none was specified.
    if {$itk_option(-name) == {}} {
        set viewName "view[incr count]"
    } {
        set viewName $itk_option(-name)
    }

    # Identify my menu bar, if there is one.
    set bars [displayer attachView $prefix $viewName]
    # The "code" prevents triggering "unknown".
    set myMenubar [lindex $bars 0]
    set myStatusbar [lindex $bars 1]
    set myToolbar [lindex $bars 2]
    insertInDisplay

    ::bind $itk_component(hull) <Enter> "$this focusin"
}

#######################################################################
#### destructor
#
body ::tycho::View::destructor {} {
    # Cannot do this because then destruction cannot be cancelled
    # in derived classes.
    # displayer hideView $viewName
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### addSubview
# Add a subview to this view.  The name of the subview that is to be
# added is the first argument.  Also required are the type of view
# that needs to be inserted: slateView, ganttView, textView,
# position of insertion (top, bottom, left, right) in the case
# of simple packing.  For derived views that require different
# positioning elements such as coordinates or insertion points as
# would be the case for slateView or textView then this method
# should be redefined for those views.  The last argument are
# args that are options to the view being inserted.
# NOTE: Not fully implemented.
#
body ::tycho::View::addSubview {subviewName type side args} {

    itk_component add $subviewName {
	eval "::tycho::$type $itk_interior.$subviewName $args"
    } {
	keep -cursor -background
    }

    # Packing may not necessarily be the thing to use in derived
    # classes; for instance, inserting views into a text widget
    # is different - one needs to use "create window" in that case.
    pack $itk_component($subviewName) -expand true -fill both -side $side

    # Add to subview list
    set subviewList($subviewName) $itk_component($subviewName)
}

#####################################################################
#### busy
# Change the cursor in the interior of this widget to the "watch"
# cursor (to indicate that the object is busy), execute the arguments
# as a method invocation this object, and change the cursor back to
# whatever it was before. In order for the cursor to actually change,
# the method calls "update", during which time the object may be deleted.
# If the object is deleted, this method never returns (it unwinds the stack
# by triggering a silent error).
# A typical invocation is as follows:
# <pre>
#     busy methodname arg1 arg2]
# </pre>
#
body ::tycho::View::busy {args} {
    set oldCursor [lindex [config -cursor] end]
    config -cursor {watch}
    ::tycho::safeUpdate $prefix
    # If we get here, then the object $this still exists.
    # Catch errors so that we can reset the cursor.
    if {[catch [code [concat $this $args]] msg] != 0} {
        config -cursor $oldCursor
        global ::errorInfo
        set saveInfo $errorInfo
	error $msg $saveInfo
    }
    config -cursor $oldCursor
    return 1
}

#########################################################################
#### contextmenu
# If there is a context-sensitive popup menu associated with this view,
# use the arguments as a command to issue to the PopupMenu widget,
# Menubar, and return whatever is returned by the command.  Otherwise,
# return an empty string.
#
body ::tycho::View::contextmenu {args} {
    if {$myContextmenu != {}} {
        return [eval $myContextmenu $args]
    } {
        return {}
    }
}

#########################################################################
#### displayer
# If there is a Displayer associated with this view, use the arguments
# as a command to issue to the Displayer, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::displayer {args} {
    if {$myDisplayer != {}} {
        return [eval $myDisplayer $args]
    } {
        return {}
    }
}

#########################################################################
#### focusin
# Grab the focus and change the Displayer menu, if necessary. This
# should be redefined in derived classes to give the focus to the
# appropriate subwindow.
#
body ::tycho::View::focusin {} {
    focus $itk_component(hull)
    displayer setCurrentView $viewName
}

#####################################################################
#### getReadOnly
# Return 1 if the data is read-only, 0 otherwise.
#
body ::tycho::View::getReadOnly {} {
    return $readOnly
}

#####################################################################
#### hyperJump
# Open a file and go to its internal point identified by name. If the
# filename is the empty string, just call <code>seePoint</code>,
# passing it the second argument. Otherwise, the
# file is opened  with <code>::tycho::File::openContext</code>,
# which will choose an editor based on the filename extension.
# Invoke <code>seePoint</code> to view the specified point within the
# file. The format for the <i>point</i> argument depends on the type of
# file being opened. For HTML files, it will normally be the name of an
# anchor in the file. For text files, it will normally be either "{line
# <i>linenumber</i>}" or "{range <i>start</i> <i>end</i>}", where
# <i>start</i> and <i>end</i> have the form
# <i>linenumber.characternumber</i>.
# 
body ::tycho::View::hyperJump {file {point {}}} {
    if {$file != {}} {
        set obj [uplevel #0 [list ::tycho::File::openContext $file]]
        if {$point != {}} {
            # The seePoint call is postponed to give time for the widget
            # to be created. The catch is in case it is immediately deleted.
            after 200 [list catch [list $obj seePoint $point]]
        }
    } {
        seePoint $point
    }
}

#######################################################################
#### insertInDisplay
# Insert view in the display.  This method can be redefined in
# derived classes to get different positioning of the view.
# 
body ::tycho::View::insertInDisplay {} {
    displayer showView $viewName -fill both -expand true -side bottom
}

#########################################################################
#### menubar
# If there is a menu bar associated with this view, use the arguments
# as a command to issue to the Menubar, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::menubar {args} {
    if {$myMenubar != {}} {
        return [eval $myMenubar $args]
    } {
        return {}
    }
}

###################################################################
#### putStatus
# Print a status message
#
body ::tycho::View::putStatus {string} {
    statusbar puts $string
}

#####################################################################
#### raiseWindow
# Bring the corresponding top-level window to the foreground, and
# make sure it is deiconified.
#
body ::tycho::View::raiseWindow {} {
    set tl [winfo toplevel $itk_component(hull)]
    wm deiconify $tl
    raise $tl
    focusin
}

#######################################################################
#### removeSubview
# This method removes a subview from parent view.  It requires the 
# name of the subview as an argument.
# NOTE: Not implemented yet.
# 
body ::tycho::View::removeSubview {subviewName} {
}

#####################################################################
#### seePoint
# In derived classes, this method will go to the point in the display
# identified by the name argument.  What this means depends on what
# type of data being displayed.  In this base class, do
# nothing.
#
body ::tycho::View::seePoint {point} {
}

#####################################################################
#### setClipboard
# Set the current contents of the local and Tk clipboards.
#
body ::tycho::View::setClipboard {text} {
    set clipboard $text
    clipboard clear
    clipboard append -- $text
}

#########################################################################
#### statusbar
# If there is a status bar associated with this view, use the arguments
# as a command to issue to the StatusBar, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::statusbar {args} {
    if {$myStatusbar != {}} {
        return [eval $myStatusbar $args]
    } {
        return {}
    }
}

#########################################################################
#### toolbar
# If there is a tool bar associated with this view, use the arguments
# as a command to issue to the toolbar, and return whatever is returned
# by the command.  Otherwise, return an empty string.
#
body ::tycho::View::toolbar {args} {
    if {$myToolbar != {}} {
        return [eval $myToolbar $args]
    } {
        return {}
    }
}

#####################################################################
#####################################################################
####                   protected methods                         ####

#####################################################################
#### indicateReadOnly
# Indicate in the status bar (and in derived classes, in the menus)
# whether modifications are allowed on the buffer.
#
body ::tycho::View::indicateReadOnly {bool} {
    if {$bool} {
        statusbar configure -filestatus "readonly"
    } {
        statusbar configure -filestatus "readwrite"
    }
}
