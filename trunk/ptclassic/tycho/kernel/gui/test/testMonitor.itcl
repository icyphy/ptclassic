# Test suite for Monitor class. 
# This uses graphics, so it must be run with tycho -e
#
# @Author: Kevin Chang
#
# @Version: @(#)testMonitor.itcl	1.5 03/16/98
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# Make sure that the required packages are loaded
package require tycho.util.tytest
package require tycho.kernel.gui

############################################################################
#### Define a proc that can be used to create a test Monitor widget
#
# Create a monitor widget, wait for the $timewait, and then
# return the name of the monitor widget
proc _createMonitor {timewait args} {
    set monitor [eval ::tycho::view Monitor $args]
    _blockwait $timewait
    return $monitor
}

proc _blockwait {timewait} {
    set ok $timewait
    after $timewait "set ok 1"
    tkwait variable ok
}


# NOTE: All of the Monitor tests are very dependent on the machine
# that is being run. Currently, we are assuming to be on UNIX system
# where common commands like "ls" exists.
test Monitor-1.1 {Example on creating monitor, make sure closing is correct} {
    set monitor [_createMonitor 2000 -toolbar 1 -command {} -autostart 0]

    after 2000 [$monitor statusbar cget -closecommand]

    _blockwait 2500
    update idletasks

    # This should be killed!
    winfo exists $monitor
} {0}


# Test if autodestroy works
test Monitor-1.2 {Example on auto closing monitor} {
    set monitor [_createMonitor 500 \
            -toolbar 1 -command {ls} -autostart 1 -autodestroy 1]

    # Set blocking wait until execution is done
    $monitor getStatusWait

    # Wait, and this thing is destroys itself
    _blockwait 2000

    update idletasks
    winfo exists $monitor
} {0}


# Test if it exists normally
test Monitor-1.3 {Autostart on ls, make sure output of monitor=history} {
    set monitor [_createMonitor 500 -toolbar 1 -command {ls} -autostart 1]

    # set blocking wait
    $monitor getStatusWait

    update idletasks
    # << Exited Normally... >>
    # This is equivalent to [$monitor getHistory], in the Exec class
    regexp -nocase {(Normally)} [$monitor.history get 0.0 end] ret

    after 500 [$monitor statusbar cget -closecommand]
    set ret
} {Normally}


# Test manual start, but close automatically if status is normal
test Monitor-1.4 {Manual start, but close automatically} {
    set monitor [_createMonitor 500 \
            -toolbar 1 -command {ls} -autostart 0 -autodestroy 2]
    
    update idletasks
    $monitor execProcess
    $monitor getStatusWait

    # Wait for automatic closing
    _blockwait 2500

    winfo exists $monitor
} {0}


# Test auto start and auto close, but execute illegal instruction.
# The monitor should not exit automatically.
test Monitor-1.5 {Auto close, but illegal command to halt auto close.} {
    set monitor [_createMonitor 500 \
            -toolbar 1 -command {make NO_WAY_MAN} -autostart 1 -autodestroy 1]
    
    update idletasks
    $monitor getStatusWait

    # After this time, monitor should still not exit
    _blockwait 1500

    set ret [winfo exists $monitor]
    catch [$monitor statusbar cget -closecommand]
    set ret
} {1}






