# The cache management system to keep local/remote files synchronized.
# 
# @Author: Kevin Chang
#
# @Version: $Id$
# 
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ::tycho::cache
# A shortcut to use ::tycho::CacheManager::<method>.
#
ensemble ::tycho::cache {
    # The following returns information regarding the path (url).
    # If exists, return the physical file name associated with this path.
    option cachefile {path} {
    }
    option contenttype {path} {
    }
    option date {path} {
    }
    # Get the size
    option size {path} {
    }

    # The following are used directly by Resource<protocol>
    # Test if a resource exists.
    option exists {path} {
    }
    # True if path still has the same information
    option same {path date size contenttype} {
    }
    option update {path newphysicalfile} {
    }
}

#######################################################################
#### CacheManager
#
#
class ::tycho::CacheManager {
    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    ###################################################################
    ####                           public procs                    ####

    # Return the full path and name of the cache associated with $path
    proc cachefile   {path}     {}

    # Return the contenttype associated with $path
    proc contenttype {path}     {returninfo $path 2}

    # Return the size associated with $path
    proc size        {path}     {returninfo $path 1}

    # Return the date associated with $path
    proc date        {path}     {returninfo $path 0}

    # Return the information in the common array, used by cachefile,
    # contenttype, size, and date.
    proc returninfo  {path idx}

    # The following are used directly by Resource<protocol>
    # Test if a resource exists.
    proc exists {path} {[info exists _stat($path)]}

    # Initialization routine, called to reset the common variable,
    # then read from the database file if it exists. Also, create
    # appropriate cache file, etc...
    proc initialize {}

    # True if path still has the same information
    proc same {path date size contenttype}

    # Update in the database the new file
    proc update {path date size contenttype newphysicalfile}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected commons                  ####

    # Array which returns cache file name, contenttype, date, and size.
    protected common _stat

    # The directory name of the cache
    protected common cachedir

    # The index file name
    protected common indexfile

    ###################################################################
    ####                        protected variables                ####

    ###################################################################
    ####                         private variables               ####
}

#######################################################################
#### constructor
#
body ::tycho::CacheManager::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::CacheManager::destructor {} {

}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### cachefile
# Return the cache file name (with it's full path) that's associated
# with $path
#
body ::tycho::CacheManager::cachefile {path} {
    set returnstring [returninfo $path 3]
    if {$returnstring!={}} {
        return [file join $cachedir $returnstring]
    }
    return $returnstring
}    

#####################################################################
#### returninfo
# Helper function for cachefile, contenttype, date, and size. 
body ::tycho::CacheManager::returninfo {path idx} {
    if [info exists _stat($path)] {
        return [lindex $_stat($path) $idx]
    }
}

#####################################################################
#### initialize
# Make sure that the cache directory exists. Also make sure that
# the index.db (database) exists.
#
# Read back from the database.
#
# Compact the database if necessary
#
body ::tycho::CacheManager::initialize {} {
    global TYCHO
    # Reset the variable in memory.
    catch {unset _stat}

    # Cache directory is in ~/.Tycho/cache
    set cachedir [file join [::tycho::tychoDir] cache]
    set indexfile [file join $cachedir index.db]
    if {![file exists $cachedir]} {
        file mkdir $cachedir
    }
    if {![file exists $indexfile]} {
        set fd [open $indexfile "w+"]
        close $fd
    }

    # Open up the index file, remember the association in memory.
    # Each line in index.db has the format:
    #                0                      1     2            3
    # link name      date modified          size  contenttype  file name
    # http://ptolemy {{11/15/95 Mon 1:51PM} 1152  text/html    cache5.html}
    set fd [open $indexfile]
    while {![eof $fd]} {
        set line [gets $fd]
        set link         [lindex $line 0]
        set _stat($link) [lindex $line 1]
    }
    close $fd
}


#####################################################################
#### same
# True if path still has the same information
body ::tycho::CacheManager::same {path date size contenttype} {
    if {    [date $path]==$date && [size $path]==$path && \
            [contenttype $path]==$contenttype} {
        return 1
    }
    return 0
}


#####################################################################
#### update
# Update in the database the new file
proc ::tycho::CacheManager::update {path date size contenttype newfile} {
    set info [list [list $date $size $contenttype $newfile]]
    set _stat($path) $info
    # append it to the index
    set fd [open $indexfile a]
    puts $fd "$path $info"
    close $fd
}






::tycho::CacheManager::initialize
