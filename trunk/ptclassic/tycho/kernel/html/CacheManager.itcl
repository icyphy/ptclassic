# The cache management system to keep local/remote files synchronized.
# 
# @Author: Kevin Chang
#
# @Version: $Id$
# 
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ::tycho::cache
# A shortcut to use ::tycho::CacheManager::<method>.
#
ensemble ::tycho::cache {
    # The following returns information regarding the path (url).
    # If exists, return the physical file name associated with this url.
    option getcachefile {url}   {::tycho::CacheManager::getcachefile $url}
    option getcontenttype {url} {::tycho::CacheManager::getcontenttype $url}
    option getdate {url}        {::tycho::CacheManager::getdate $url}
    option getsize {url}        {::tycho::CacheManager::getsize $url}

    # The following are used directly by Resource<protocol>
    # Test if a resource exists.
    option exists {url} {::tycho::CacheManager::exists $url}
    # True if url still has the same information
    option same {url date size contenttype} {
        ::tycho::CacheManager::same $url $date $size $contenttype
    }
    option tmpCacheName {url}   {::tycho::CacheManager::tmpCacheName $url}
    option update {url date size contenttype newphysicalfile} {
        ::tycho::CacheManager::update \
                $url $date $size $contenttype $newphysicalfile
    }
    option debugprint {} {::tycho::CacheManager::debugprint}
}

#######################################################################
#### CacheManager
#
#
class ::tycho::CacheManager {
    inherit ::tycho::Uninstantiable

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    ###################################################################
    ####                           public procs                    ####

    # Return the full url and name of the cache associated with $url
    proc getcachefile   {url}     {}

    # Return the contenttype associated with $url
    proc getcontenttype {url}     {returninfo $url 2}

    # Return the size associated with $url
    proc getsize        {url}     {returninfo $url 1}

    # Return the date associated with $url
    proc getdate        {url}     {returninfo $url 0}

    # Return the information in the common array, used by getcachefile,
    # getcontenttype, getsize, and getdate.
    proc returninfo  {url idx}

    # The following are used directly by Resource<protocol>
    # Test if a physical file exists.
    proc exists {url}

    # Initialization routine, called to reset the common variable,
    # then read from the database file if it exists. Also, create
    # appropriate cache file, etc...
    proc initialize {}

    # True if url still has the same information
    proc same {url date size contenttype}

    # Return the full url and name of the next cache file, along with
    # the correct file extension. Similar to ::tycho::tmpFileName.
    proc tmpCacheName {filename}

    # Update in the database the new file
    proc update {url date size contenttype physicalfile}

    # Debugging purpose only, print out the memory
    proc debugprint {}

    ###################################################################
    ####                         protected methods                 ####

    ###################################################################
    ####                        protected commons                  ####

    # Array which returns cache file name, contenttype, date, and size.
    protected common _URL

    # The directory name of the cache
    protected common CACHEDIR

    # The cache index, will keep incrementing
    protected common INDEX

    # The index file name
    protected common INDEXFILE

    ###################################################################
    ####                        protected variables                ####

    ###################################################################
    ####                         private variables               ####
}

#######################################################################
#### constructor
#
body ::tycho::CacheManager::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::CacheManager::destructor {} {

}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### exists
# If the cache exists in database (index.db), and exists physically,
# return true. 
body ::tycho::CacheManager::exists {url} {
    return [expr [::info exists _URL($url)] && \
            [::file exists [::tycho::cache getcachefile $url]]]
}

#####################################################################
#### getcachefile
# Return the cache file name (with it's full url) that's associated
# with $url
#
body ::tycho::CacheManager::getcachefile {url} {
    set returnstring [returninfo $url 3]
    if {$returnstring!={}} {
        return [::tycho::url join $CACHEDIR $returnstring]
    }
}

#####################################################################
#### returninfo
# Helper function for cachefile, contenttype, date, and size. 
body ::tycho::CacheManager::returninfo {url idx} {
    if [info exists _URL($url)] {
        return [lindex $_URL($url) $idx]
    }
}

#####################################################################
#### initialize
# Make sure that the cache directory exists. Also make sure that
# the index.db (database) exists.
#
# Read back from the database.
#
# Compact the database if necessary
#
body ::tycho::CacheManager::initialize {} {
    global TYCHO
    # Reset the variable in memory.
    catch {unset _URL}

    # Cache directory is in ~/.Tycho/cache
    set TYCHODIR [::tycho::url expand [::tycho::tychoDir]]
    set INDEXFILE [::tycho::url join $TYCHODIR index.db]
    set CACHEDIR [::tycho::url  join $TYCHODIR cache]
    set INDEX 0

    # Make sure the directory and database file exist.
    if {![file exists $CACHEDIR]} {file mkdir $CACHEDIR}
    if {![file exists $INDEXFILE]} {set fd [open $INDEXFILE "w+"];close $fd}

    set newidx 0
    # Open up the index file, associate link name with other info.
    # Each line in index.db has the format:
    #                0                1     2            3           (4)?
    # link name      date modified    size  contenttype  file name   (isdir)?
    # http://ptolemy {{11/15/95 1:50} 1152  text/html    [0-9]+.html          }
    set fd [open $INDEXFILE]
    while {![eof $fd]} {
        set line [gets $fd]
        if {$line!={}} {
            set link [lindex $line 0]
            # Associate URL with other information
            set _URL($link) [lindex $line 1]
            
            # Associate filename (if it exists)
            set _fname([lindex $_URL($link) 3]) 1
            
            # Retrieve the index by the name of the cache file
            regexp {^([0-9]+).*$} [lindex $_URL($link) 3] _ newidx
            if {$newidx > $INDEX} {set INDEX $newidx}
        }
    }
    close $fd

    # Clean up cache directory (cache files not in index.db)
    foreach filename [glob -nocomplain [file join $CACHEDIR *]] {
        set filename [file tail $filename]
        if {![info exists _fname($filename)]} {
            ::puts "Deleting $filename"
            file delete [file join $CACHEDIR $filename]
        }
    }

    # Clean up index.db (files in index.db not exist in cache directory)
    set dirtyIndex 0
    foreach url [array names _URL] {
        set file [lindex $_URL($url) 3]
        if {![file exists [file join $CACHEDIR $file]]} {
            ::puts "deleting: $file"
            catch {unset _URL($url)}
            set dirtyIndex 1
        }
    }

    # Rewrite index.db to compact the database list.
    set fd [open [file join $CACHEDIR index.bak] w+]
    foreach url [array names _URL] {
        puts $fd [list $url $_URL($url)]
    }
    close $fd
    file copy -force [file join $CACHEDIR index.bak] $INDEXFILE
}

#####################################################################
#### same
# True if url still has the same information
body ::tycho::CacheManager::same {url date size contenttype} {
    # If a field is empty, then the file cannot be cached! Must
    # update frequently.
    if {[getdate $url]=={} || [getsize $url]=={} || [getcontenttype $url]=={}} {
        return 0
    }

    # If anything is different, then it's a different file.
    return [expr \
            [string match [getdate $url] $date] && \
            [string match [getsize $url] $size] && \
            [string match [getcontenttype $url] $contenttype]]
}

#####################################################################
#### tmpCacheName
# Return the full url and name of the next cache file.
# Similar to ::tycho::tmpFileName.
# 
body ::tycho::CacheManager::tmpCacheName {filename} {
    incr INDEX
    return [file join $CACHEDIR $INDEX][::tycho::url extension $filename]
}

#####################################################################
#### update
# Update in the database the new file. The new file must conform
# to the regular expression [0-9]+.* to keep track of indices.
#
body ::tycho::CacheManager::update {url date size contenttype newfile} {
    # Make sure that the filename is inside the cache's url
    if {![regexp "\^$CACHEDIR" $newfile]} {
        error "Cache file is not located in the right directory: $CACHEDIR
        return
    }

    # Parse newfile so that it will only contain file name
    # (no directory name)
    set newfile [file tail $newfile]
    set _URL($url) [list $date $size $contenttype $newfile]
    # append it to the index database
    set fd [::open $INDEXFILE a]
    ::puts $fd "$url [list $_URL($url)]"
    ::close $fd
}

#####################################################################
#### debugprint
# debugging purpose only, dump the memory content
body ::tycho::CacheManager::debugprint {} {
    ::puts "Current index: $INDEX"
    foreach i [lsort [array names _URL]] {
        puts "\t$i"
        puts "\t\t$_URL($i)"
    }
}

catch {::tycho::ResourceHTTP::initialize}
::tycho::CacheManager::initialize
