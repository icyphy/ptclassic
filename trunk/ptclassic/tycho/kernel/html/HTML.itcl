# Definition of a window that displays HTML.
# This uses the HTML library by Stephen Uhler.
#
# Author: Edward A. Lee
#
# Version: $Id$
#
# Copyright (c) 1990-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### HTML
# This window contains a text widget that displays HTML using the
# library by Stephen Uhler.
# 
class ::tycho::HTML {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                       options                             ####

    #### -sizeadjustment option
    # Offset from 14 points for the font sizes.
    itk_option define -sizeadjustment sizeAdjustment SizeAdjustment 2

    ###################################################################
    ####                       public methods                      ####

    #### altFile
    # Prompt the user for a file name and load in place of the current file.
    method altFile {}

    #### focusin
    # Call this to give the text subwindow the focus.
    method focusin {}

    #### help
    # Open a help window.
    method help {}

    #### openSource
    # Open the HTML source
    method openSource {}

    #### raiseWindow
    # raise the HTML broswer window and the source window (if any).
    method raiseWindow {}

    #### reload
    # Clear the current text and reload from the source file.
    method reload {}

    #### seeName
    # Goto a named point within the file.
    method seeName {name}

    #### switchFile
    # Switch to a different HTML file.
    method switchFile {filename}

    #########################################################################
    ####                   protected methods                             ####

    #### addTool
    # Add a button to the toolbar.
    method addTool {name label command}

    #### textWidget
    # Return the name of the type of text widget to use.
    protected method textWidget {} {return ::tycho::HTMLText}

    #########################################################################
    ####              private methods and variables                      ####

    # Keep track of the requested size adjustment.
    private common sizeName

    # Keep track of the current source window for the current file.
    private variable sourcewin

    #### sourcewinIsMine
    # Return 1 if the sourcewin window is a valid source window.
    private method sourcewinIsMine {}
}

#########################################################################
#### -sizeadjustment configuration
# The size of normal text will be 14 points plus the size adjustment
# set with this option.  Note that this does not affect the selected
# size name in the Format menu.
#
configbody ::tycho::HTML::sizeadjustment {
    HMset_state [$itk_component(text) textWinName] \
	    -size $itk_option(-sizeadjustment)
}

###################################################################
#
body ::tycho::HTML::constructor {args} {

    # A frame for accelerator buttons
    itk_component add acc {
	frame $itk_component(childsite).acc -relief sunken
    } {
	keep -background -cursor
    }
    pack $itk_component(acc) -expand no -fill x

    # The text widget.
    itk_component add text {
	[textWidget] $itk_component(childsite).text
    } {
	keep -text -readonly -textfont -width -height -background \
		-highlightbackground -highlightcolor -selectforeground \
		-cursor -insertbackground -textfont \
		-textbackground -textforeground
    }
    pack $itk_component(text) -expand yes -fill both

    # A toolbar for frequently used functions.
    addTool back Back [code $itk_component(text) back]
    # FIXME: need a forward command.
    # FIXME: should the user be allowed to change the home window?
    global TYCHO
    addTool home Home \
	    [code $itk_component(text) switchFile \
	    $TYCHO/kernel/doc/introduction.html]
    addTool reload Reload [code $this reload]
    addTool open Open [code $this altFile]
    addTool find Find [code $itk_component(text) search]
    addTool stop Stop [code $itk_component(text) stopRendering]

    itk_component add formatMenuButton {
	menubutton $itk_component(menuFrame).format \
		-text Format \
		-underline 1 \
		-menu $itk_component(menuFrame).format.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    pack $itk_component(formatMenuButton) -side left

    itk_component add formatMenu {
	menu $itk_component(formatMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    eval itk_initialize $args

    foreach size {{tiny -2} {small 0} {medium 2} {large 4} {huge 8}} {
	$itk_component(formatMenu) add radio \
		-label [lindex $size 0] \
		-variable [scope sizeName($this)] \
		-command [code \
		"$this configure -sizeadjustment [lindex $size 1]; \
		HTMLText::render ::tycho::HTML::$itk_component(text)"]
	# FIXME: Is the scoping on the previous line correct?
	# I couldn't find anything else that would work (EAL).
    }
    set sizeName($this) medium

    # Modify the menu commands appropriately.
    $itk_component(fileMenu) entryconfigure 2 \
	    -label "Open Source" \
	    -underline 1 \
	    -accelerator {C-x s} \
	    -command "$this openSource"

    $itk_component(fileMenu) delete "Save"
    $itk_component(fileMenu) delete "SaveAs..."
    $itk_component(fileMenu) delete "Evaluate"
    $itk_component(fileMenu) delete "Revision Control..."

    if {$itk_option(-file) != "NoName"} {
	# In order to get reasonably interactive response, this is delayed.
	# Not doing this seems to send the program into an infinite wait.
	after 1 $itk_component(text) readFile $itk_option(-file)
    }

    bind $prefix <Control-x><Key-s> [code "$this openSource; break"]
    # disable save bindings
    bind $prefix <Control-x><Control-s> { }
    bind $prefix <Control-x><Control-w> { }

    $itk_component(text) configure -readonly 1
    focusin
}

###################################################################
# The destructor needs to ensure that after this object is gone, if the
# corresponding source file is still open, that it will appear in the
# Window menu.
#
body ::tycho::HTML::destructor {} {
    if [sourcewinIsMine] {
	windowMenuRemoveAll $file
	windowMenuAddAll $sourcewin $file
	set filesOpen($file) $sourcewin
    }
    catch {unset sizeName($this)}
}

    ###################################################################
    ###################################################################
    ####                       public methods                      ####

###################################################################
#### altFile
# Query the user for a filename, insert it in place of the current file.
#
body ::tycho::HTML::altFile {} {
    set filename [DialogWindow::newModal FileBrowser [autoName .fileBrowser] \
	    -text "Alternate file to load:"]
    if {$filename != {}} {
	switchFile $filename
    }
}

###################################################################
#### focusin
# Hand the focus to the text window.
#
body ::tycho::HTML::focusin {} {
    focus [$itk_component(text) textWinName]
}

#########################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::HTML::help {} {
    global TYCHO
    ::tycho::File::openContext $TYCHO/kernel/doc/usersGuides/HTMLHelp.html
}

#####################################################################
#### openSource
# Clear the current text and reload from the source file.
#
body ::tycho::HTML::openSource {} {
    # If a source window already exists, just raise it.
    if [sourcewinIsMine] {
	$sourcewin raiseWindow
	return
    }
    set win [autoName .edit]
    set obj [uplevel #0 ::tycho::EditHTML $win -file $file]
    wm deiconify $win
    set sourcewin "$obj"
}

#####################################################################
#### raiseWindow
# Overload the base class raiseWindow to raise the source window also,
# if it is open.
#
body ::tycho::HTML::raiseWindow {} {
    if [sourcewinIsMine] {
	$sourcewin raiseWindow
    }
    ::tycho::TopLevel::raiseWindow
}

#####################################################################
#### reload
# Clear the current text and reload from the source file.
#
body ::tycho::HTML::reload {} {
    HMreset_win [$itk_component(text) textWinName]
    $itk_component(text) deleteRange 1.0 end
    $itk_component(text) readFile $file
}

#####################################################################
#### seeName
# Go to a named point within the file.
#
body ::tycho::HTML::seeName {name} {
    $itk_component(text) seeName $name
}

#####################################################################
#### switchFile
# Switch to displaying another HTML file.  Special care is required
# here because there might be a source file open for either the old
# or the new file. If there is a source file for the old HTML file,
# it should now appear in the Window menu.  If there is one for the
# new file, it should now be removed from the Window menu (the HTML
# browser widget will take its place).  This method essentially
# accomplishes the same functions as configuring the -file option,
# but specialized to this circustance.
#
body ::tycho::HTML::switchFile {filename} {

    # If the destination file is already open, raise it.
    if {[info exists filesOpen($filename)] && \
	    [$filesOpen($filename) isa ::tycho::HTML]} {
	$filesOpen($filename) raiseWindow
	return
    }

    # Remove the old file from the list of open files, and
    # add its source file, if open, to the Window menu.
    if [info exists filesOpen($file)] {
	windowMenuRemoveAll $file
	if [sourcewinIsMine] {
	    windowMenuAddAll $sourcewin $file
	    set filesOpen($file) $sourcewin
	} {
	    unset filesOpen($file)
	}
    }
    if [info exists sourcewin] {
	unset sourcewin
    }

    # Reclaim the source window, if it is open.
    if {[info exists filesOpen($filename)]} {
	windowMenuRemoveAll $filename
	set sourcewin $filesOpen($filename)
    }

    # Record the new filename in various places.
    set file $filename
    set filesOpen($file) $this
    set previousfile $file
    wm iconname $prefix [file tail $file]
    windowMenuAddAll $this $filename

    # Render the HTML file.
    $itk_component(text) readFile $file
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#####################################################################
#### addTool
# Add a button to the toolbar at the top.
# The arguments are: a name for the button and itk_component,
# the text label to use for the button, and the command associated with
# the button.
#
body ::tycho::HTML::addTool {name label command} {
    itk_component add $name {
	button $itk_component(acc).$name \
		-text $label \
		-command $command
    } {
	keep -background -font -activebackground -cursor \
		-highlightthickness -activeforeground \
		-foreground -highlightcolor -highlightbackground
    }
    # To use a bitmap instead, we need before the button command:
    #       global TYCHO
    # and as one of the button options:
    #		-bitmap @$TYCHO/kernel/img/back.xbm

    pack $itk_component($name) -side left
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### sourcewinIsMine
# Return 1 if the sourcewin window is the source window for the
# currently open HTML text. Otherwise, return 0.
#
body ::tycho::HTML::sourcewinIsMine {} {
    if {[info exists sourcewin] && \
	    [uplevel #0 info objects $sourcewin] != {} && \
	    [$sourcewin isa ::tycho::File] && \
	    [$sourcewin filename] == $file} {
	return 1
    } {
	return 0
    }
}
