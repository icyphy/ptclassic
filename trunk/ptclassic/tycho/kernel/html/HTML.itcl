# Definition of a window that displays HTML.
# 
# @Author: Edward A. Lee
# @Contributor: This uses the HTML library by Stephen Uhler.
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

# FIXME: Many features are missing.
# Perhaps the most important and relatively easy to support:
# - forms
# - a forward button
# - hotlist support

#######################################################################
#### HTML
# A window containing a text widget that displays HTML using the
# HTML library by Stephen Uhler.  The HTML may be specified directly
# using the -data option or indirectly using the -file option, or
# may be inserted using any of a number of methods.
# An interface to an HTML editor is provided through the "Open Source"
# menu command.  Buttons are provided for frequently executed commands.
# <p>
# This class is meant to provide an integrated documentation system,
# not to replace standard Web browsers.  In fact, it does not at this
# time have HTTP capability, so it will not read files off the Web.
# <p>
# This HTML parser is a bit slow,
# and does not include most features of HTML beyond version 2.0.
# Nonetheless, it is small, simple, and easily extended, so it serves
# our purposes well.
# 
class ::tycho::HTML {
    inherit ::tycho::File

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                       options                             ####

    # Offset from the nominal 14 points for the font sizes.
    itk_option define -sizeadjustment sizeAdjustment SizeAdjustment 2

    ###################################################################
    ####                       public methods                      ####

    # Prompt the user for a file name and load in place of the current file.
    method altFile {}

    # Return the current insertion point in a form usable by seePoint.
    method currentPoint {}

    # Give the text subwindow the focus.
    method focusin {}

    # Open a help window.
    method help {}

    # Insert the specified data.
    method insertData {data}

    # Open the source file using an HTML editor.
    method openSource {}

    # Raise the HTML browser window and the source window (if any).
    method raiseWindow {}

    # Clear the current text and reload from the source file.
    method reload {}

    # Go to a specified point within the file.
    method seePoint {point}

    # Switch to a different HTML file.
    method switchFile {filename}

    #########################################################################
    ####                   protected methods                             ####

    # Add a button to the toolbar.
    protected method addTool {name label command}

    # Return the name of the type of text widget to use.
    protected method textWidget {} {return ::tycho::HTMLText}

    #########################################################################
    ####              private methods and variables                      ####

    # Keep track of the requested size adjustment.
    private common sizeName

    # Keep track of the current source window for the current file.
    private variable sourcewin {}

    # Return 1 if the sourcewin window is a valid source window.
    private method sourcewinIsMine {}
}

#########################################################################
#### -sizeadjustment configuration
# The size of normal text will be 14 points plus the size adjustment
# set with this option.  Note that this does not affect the selected
# size name in the Format menu.
#
configbody ::tycho::HTML::sizeadjustment {
    HMset_state [$itk_component(text) textWinName] \
	    -size $itk_option(-sizeadjustment)
}

###################################################################
#
body ::tycho::HTML::constructor {args} {

    # A frame for accelerator buttons
    itk_component add acc {
	frame $itk_component(childsite).acc -relief sunken
    } {
	keep -background -cursor
    }
    pack $itk_component(acc) -expand no -fill x

    # The text widget.
    itk_component add text {
	[textWidget] $itk_component(childsite).text -top $this
    } {
	keep -text -readonly -textfont \
		-highlightbackground -highlightcolor -selectforeground \
		-cursor -insertbackground -textfont \
		-textbackground -textforeground
        rename -width -textwidth textWidth TextWidth
        rename -height -textheight textHeight TextHeight
    }
    pack $itk_component(text) -expand yes -fill both

    # FIXME: The HTML object comes up different sizes on different
    # machines.  Below is an attempt to fix this, but unfortunately, it
    # this attempt merely demonstrates that the "wm grid" command
    # does not work.
    #     set grid [wm grid $prefix]
    #     if {$grid != {}} {
    #         set width [lindex $grid 0]
    #         set height [lindex $grid 1]
    #         wm grid $prefix $width $height 7 13
    #     }

    # A toolbar for frequently used functions.
    addTool back Back "$this component text back"
    # FIXME: need a forward command.
    # FIXME: should the user be allowed to change the home window?
    global ::TYCHO
    addTool home Home \
	    "$this component text switchFile $TYCHO/doc/index.html"
    addTool reload Reload "$this reload"
    addTool open Open "$this altFile"
    addTool find Find "$itk_component(text) search"
    addTool stop Stop "$itk_component(text) stopRendering"

    itk_component add formatMenuButton {
	menubutton $itk_component(menuFrame).format \
		-text Format \
		-underline 1 \
		-menu $itk_component(menuFrame).format.menu
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground -highlightbackground \
		-highlightcolor
    }

    pack $itk_component(formatMenuButton) -side left

    itk_component add formatMenu {
	menu $itk_component(formatMenuButton).menu -tearoff 0
    } {
	keep -font -activebackground -cursor -activeforeground \
		-background -foreground
    }

    eval itk_initialize $args

    foreach size {{tiny -2} {small 0} {medium 2} {large 4} {huge 8}} {
	$itk_component(formatMenu) add radio \
		-label [lindex $size 0] \
		-variable [scope sizeName($this)] \
		-command \
		"$this configure -sizeadjustment [lindex $size 1]; \
		::tycho::HTMLText::render [winfo command $itk_component(text)]"
    }
    set sizeName($this) medium

    # Modify the menu commands appropriately.
    $itk_component(fileMenu) entryconfigure 2 \
	    -label "Open Source" \
	    -underline 1 \
	    -accelerator {C-x s} \
	    -command "$this openSource"

    $itk_component(fileMenu) delete "Save"
    $itk_component(fileMenu) delete "SaveAs..."
    $itk_component(fileMenu) delete "Evaluate"
    $itk_component(fileMenu) delete "Revision Control..."

    if {$itk_option(-file) != "NoName"} {
	# In order to get reasonably interactive response, this is delayed.
	# Not doing this seems to send the program into an infinite wait.
	# Note also that "after idle" doesn't work here.  The window
	# does not get mapped until parsing is complete.
	after 1 "$this component text readFile $itk_option(-file)"
    }

    bind $prefix <Control-x><Key-s> "$this openSource; break"
    # disable certain bindings
    bind $prefix <Control-x><Control-s> { }
    bind $prefix <Control-x><Control-w> { }
    bind $prefix <Control-x><Key-v> { }
    bind $prefix <Control-x><Key-i> { }

    $itk_component(text) configure -readonly 1
    focusin
}

###################################################################
# Ensure that after this object is gone, if the
# corresponding source file is still open, it will appear in the
# "Window" menu.
#
body ::tycho::HTML::destructor {} {
    if [sourcewinIsMine] {
	# Schedule this for after destruction is complete because the
	# base class destructor removes the menu entry.
	after idle [code windowMenuAddAll $sourcewin $file]
    }
    catch {unset sizeName($this)}
}

    ###################################################################
    ###################################################################
    ####                       public methods                      ####

###################################################################
#### altFile
# Query the user for a filename, insert its contents in place of the
# currently displayed HTML.
#
body ::tycho::HTML::altFile {} {
    set filename [::tycho::DialogWindow::newModal FileBrowser \
	    [::tycho::autoName .fileBrowser] -text "Alternate file to load:"]
    if {$filename != {}} {
	switchFile $filename
    }
}

###################################################################
#### currentPoint
# Return the current insertion point in a form usable by seePoint.
#
body ::tycho::HTML::currentPoint {} {
    set idx [[component text textWinName] index insert]
    return [list range $idx $idx]
}

###################################################################
#### focusin
# Hand the focus to the text window.
#
body ::tycho::HTML::focusin {} {
    focus [$itk_component(text) textWinName]
}

#########################################################################
#### help
# Open a help window.
#
body ::tycho::HTML::help {} {
    global ::TYCHO
    ::tycho::File::openContext $TYCHO/kernel/doc/usersGuides/HTMLHelp.html
}

#####################################################################
#### insertData
# Insert the specified data, which should be HTML.
#
body ::tycho::HTML::insertData {data} {
    component text configure -html $data
}

#####################################################################
#### openSource
# Open the source file using an editor specialized for editing HTML.
#
body ::tycho::HTML::openSource {} {
    # If a source window already exists, just raise it.
    if [sourcewinIsMine] {
	$sourcewin raiseWindow
	return
    }
    set win [::tycho::autoName .edit]
    set obj [uplevel #0 ::tycho::EditHTML $win -file $file]
    wm deiconify $win
    set sourcewin $obj
}

#####################################################################
#### raiseWindow
# Raise this window and also the source window, if it is open.
#
body ::tycho::HTML::raiseWindow {} {
    if [sourcewinIsMine] {
	$sourcewin raiseWindow
    }
    ::tycho::TopLevel::raiseWindow
}

#####################################################################
#### reload
# Clear the current text and reload from the source file.
#
body ::tycho::HTML::reload {} {
    HMreset_win [$itk_component(text) textWinName]
    $itk_component(text) deleteRange 1.0 end
    $itk_component(text) readFile $file
}

#####################################################################
#### seePoint
# Go to a specified point within the file.
#
body ::tycho::HTML::seePoint {point} {
    $itk_component(text) seePoint $point
}

#####################################################################
#### switchFile
# Switch to a different HTML file. Special care is required
# here because there might be a source file open for either the old
# or the new file. If there is a source file for the old HTML file,
# it will now appear in the "Window" menu.  If there is one for the
# new file, it should now be removed from the Window menu (the HTML
# browser widget will take its place).  This method essentially
# accomplishes the same functions as configuring the -file option,
# but specialized to this circumstance.
#
body ::tycho::HTML::switchFile {filename} {

    # If the destination file is already open, raise it.
    if {[info exists filesOpen($filename)] && \
	    [eval $filesOpen($filename) isa ::tycho::HTML]} {
	eval $filesOpen($filename) raiseWindow
	return
    }

    # Remove the old file from the list of open files, and
    # add its source file, if open, to the Window menu.
    windowMenuRemoveAll $file
    if [sourcewinIsMine] {
	windowMenuAddAll $sourcewin $file
    }

    # Reclaim the source window, if it is open.
    if {[info exists filesOpen($filename)]} {
	set sourcewin $filesOpen($filename)
	windowMenuRemoveAll $filename
    } {
	set sourcewin {}
    }

    # Record the new filename in various places.
    set file $filename
    set previousfile $file
    wm iconname $prefix [file tail $file]
    windowMenuAddAll $this $filename

    # Render the HTML file.
    $itk_component(text) readFile $file
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#####################################################################
#### addTool
# Add a button to the toolbar at the top.
# The arguments are: a name for the button and itk_component,
# the text label to use for the button, and the command associated with
# the button.
#
body ::tycho::HTML::addTool {name label command} {
    itk_component add $name {
	button $itk_component(acc).$name \
		-text $label \
		-command $command
    } {
	keep -background -font -activebackground -cursor \
		-highlightthickness -activeforeground \
		-foreground -highlightcolor -highlightbackground
    }
    # To use a bitmap instead, we need before the button command:
    #       global ::TYCHO
    # and as one of the button options:
    #		-bitmap @$TYCHO/kernel/img/back.xbm

    pack $itk_component($name) -side left
}

#########################################################################
#########################################################################
####                     private methods                             ####

#####################################################################
#### sourcewinIsMine
# Return 1 if the sourcewin window is the source window for the
# currently open HTML text. Otherwise, return 0.
#
body ::tycho::HTML::sourcewinIsMine {} {
    if {$sourcewin != {} && \
	    [uplevel #0 info objects $sourcewin] != {} && \
	    [$sourcewin isa ::tycho::File] && \
	    [$sourcewin filename] == $file} {
	return 1
    } {
	return 0
    }
}
