# The abstract superclass of file-like "resources"
# 
# @Author: Kevin Chang
#
# @Version: $Id$
# 
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceHTTP
#
#
class ::tycho::ResourceHTTP {
    inherit ::tycho::Object

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    ###################################################################
    ####                         public methods                    ####

    # Close the resource
    method close {}

    # Return the content type of the current file
    method contenttype {}

    # Test if a given resource exists
    method exists {path}

    # Return the current file type 
    method filetype {}

    # Read a string from a streamable resource 
    method gets {}

    # Return files at a given path
    method glob {path}

    # Return true if a given path is a file
    method isfile {path}

    # Open a new resource
    method new {{path {}}}

    # Open the resource
    method open {path {mode "r"}}

    # Get the current full resource path
    method path {}

    # Write a string to a streamable resource 
    method puts {}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return true if a given resource is readable
    method readable {path}

    # Source a streamable resource as a Tcl script
    method source {{path {}}}

    # Get the status of a resource
    method stat {path varName}

    # Return 1 if this resource is streamable
    method streamable {}

    # Return true if a resource is writable
    method writeable {{path {}}}

    ###################################################################
    ####                        public procs                       ####

    # Get the status of getting HTTP
    proc httpStatus {}

    ###################################################################
    ####                      public variables                     ####

    # Used with httpget
    public variable statusVariableName {}

    ###################################################################
    ####                         protected methods                 ####

    # Opening an HTTP connection. This returns the file name of the HTTP file.
    method httpget {url}

    # This is called by file event handler, from httpget.
    method httpread {fd tmpfd}

    # Set the global http status to "running" or "normal" or "abnormal"
    method httpsetstatus {status}

    # Wait until httpget is done.
    method httpwait {}

    ###################################################################
    ####                        protected variables                ####

    # The name of the host name
    protected variable hostname
    
    # The full name of the current file (or directory)
    protected variable currentFile

    # The name of the HTTP port. Default is 80
    protected variable port 80

    # The index of the get
    protected variable idx

    ###################################################################
    ####                         private variables               ####
}


#######################################################################
#### constructor
#
body ::tycho::ResourceHTTP::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::ResourceHTTP::destructor {} {
    close
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::ResourceHTTP::close {} {
    ::tycho::abstractMethod close
}

#####################################################################
#### contenttype
body ::tycho::ResourceHTTP::contenttype {} {
    ::tycho::abstractMethod contenttype
}

#####################################################################
#### exists
body ::tycho::ResourceHTTP::exists {[ath} {
    ::tycho::abstractMethod exists
}

#####################################################################
#### filetype
body ::tycho::ResourceHTTP::filetype {} {
    return "http"
}

#####################################################################
#### flush
body ::tycho::ResourceHTTP::flush {} {
    ::tycho::abstractMethod flush
}

#####################################################################
#### gets
body ::tycho::ResourceHTTP::gets {} {
    ::tycho::abstractMethod gets
}

#####################################################################
#### glob
body ::tycho::ResourceHTTP::glob {path} {
    ::tycho::abstractMethod glob
}

#####################################################################
#### isfile
body ::tycho::ResourceHTTP::isfile {path} {
    return 0
}

#####################################################################
#### new
body ::tycho::ResourceHTTP::new {{path {}}} {
    set new [[info class] [::tycho::autoName resource]]
    if { $path == "" } {
	$new open $currentFile
    } else {
	$new open $path
    }
    return $new
}

#####################################################################
#### open
body ::tycho::ResourceHTTP::open {path {mode "r"}} {
    if {$mode!="r"} {
        return 0
    }

}





#####################################################################
#### path
body ::tycho::ResourceHTTP::path {} {
    if {$port!={}} {
        return "HTTP://$hostname$currentPath:$port"
    } else {
        return "HTTP://$hostname$currentPath"
    }
}

#####################################################################
#### read
body ::tycho::ResourceHTTP::read {} {
    ::tycho::abstractMethod read
}

#####################################################################
#### readable
body ::tycho::ResourceHTTP::readable {{path {}}} {
    return 1
}

#####################################################################
#### source
body ::tycho::ResourceHTTP::source {{path {}}} {
    ::tycho::abstractMethod source
}

#####################################################################
#### stat
body ::tycho::ResourceHTTP::stat {path varName} {
    ::tycho::abstractMethod stat
}

#####################################################################
#### streamable
body ::tycho::ResourceHTTP::streamable {} {
    return 1
}

#####################################################################
#### writable
body ::tycho::ResourceHTTP::writable {{path {}}} {
    return 0
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#########################################################################
#### httpget
# Opening an HTTP connection. This returns the file name of the HTTP file.
#
body ::tycho::ResourceHTTP::httpget {url} {
    # FIXME: need to find out where to collect protocols that Tycho
    # understands:
    set accept {text/*}

    #puts "Going to get url: $url"
    # 
    # The following is verbatim from Surfit: vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    if {[regexp -nocase {^http://([^/:]*)(:([^/]+))?(.*)} $url match \
            host optport port path]} {
        if {$host == {}} {set host $localhost}	;# Supply reasonable default
        if {$port == {}} {set port 80}		;# HTTP default service
        if {$path == {}} {set path /}
    } else {
        # Recover from malformed URL
        if {![string match */* $var(path)]} {
            # Assume only the hostname:port has been given
            regexp {([^:]*)(:(.*))?} $var(path) all host optport port
            if {$host == {}} {set host localhost}
            if {$port == {}} {set port 80}
            set path /
        } else {
            error "no hostname given in URL \"$url\""
        }
    }
    puts "$host:$port, GET $path HTTP/1.0"
    if {[catch {socket -async $host $port} fd]} {
        unset $fd
        error "Can't open $host, $port"
    }
    # Surfit ends here ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    # Wait until finished reading HTTP file
    set tmpFile [::tycho::tmpFileName cache].html
    set tmpfd [open $tmpFile "w"]
    set statusVariableName [::tycho::autoName httpgetStatus]
    httpStatus $statusVariableName "running"

    # connect now!
    fconfigure $fd -blocking no -translation crlf
    puts $fd "GET $path HTTP/1.0\
            User-Agent: Tycho Jr. Beta\
            Accept-Encoding: $accept"
    puts $fd ""
    flush $fd
    fconfigure $fd -translation auto

    ::tycho::safeUpdate $this
    fileevent $fd w {}
    fileevent $fd r "$this httpread $fd $tmpfd"

    # Wait until the entire http file is here!
    httpwait

    return $tmpFile
}

#########################################################################
#### httpwait
# Wait until the variable name has been changed.
body ::tycho::ResourceHTTP::httpwait {} {
    global $statusVariableName
    puts "status: $statusVariableName"
    if {[uplevel #0 "set $statusVariableName"]=="running"} {
        tkwait variable $statusVariableName
    }
    return [uplevel #0 "set $statusVariableName"]
}


    ###################################################################
    ####                        public procs                       ####

#########################################################################
#### httpsetstatus
# Helper function to set the global variable
# This is used so that tkwait can wait for
# the global variable to change from "running" to either
# "normal" or "abnormal"

proc httpStatus {name value} {
    global $name
    set $name $value
}
