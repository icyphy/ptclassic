# A Resource for sending out mail using mail daemon on port 25
# 
# @Author: Kevin Chang
#
# @Version: $Id$
# 
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceMail
#
class ::tycho::ResourceMail {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    # Command to execute on each line received. It need not invoke
    # any kind of updates to keep the user interface "live", but
    # it doesn't matter if it does.
    public variable notifycommand ""

    ###################################################################
    ####                         public methods                    ####

    # Close the resource.
    method close {}

    # Return the end of file status
    method eof {}

    # Read a string from a streamable resource
    method gets {{varName {}}}

    # Test if the file is currently open
    method isopen {} {return 0}

    # Open the resource.
    method open {{path {}}}

    # Write a string to a streamable resource.
    # Can't write into HTTP file! Read permission of off
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return 1 if this resource is streamable
    method streamable {}

    # Write to the file
    method write {data}

    ###################################################################
    ####                           public procs                    ####

    # Get a cached copy of the data
    method cachefile {}

    # Change the permissions of a resource
    proc chmod {permissions path}

    # Return the content type of the current file
    proc contenttype {path}

    # See if the server or hostname exists
    proc exists {path}

    # Create a new resource object
    proc new {path args}

    # Split up URL
    proc splitURL {path}

    # Return the type of a given file
    proc type {path}

    ###################################################################
    ####                         protected methods                 ####

    # Puts a string to console of the debug option is set
    protected method debugputs {string}

    # Initiate a connection on the mail server
    method mailinitiate {url}

    # File event handler for mail server.
    method mailhandler {}


    ###################################################################
    ####                        protected commons                  ####

    ###################################################################
    ####                        protected variables                ####

    # The url this object is accessing
    protected variable currentURL {}

    # The socket id used to open the mail port
    protected variable socketid {}

    # The state of transfer during the upload connection on port 25.
    # The variable could be any of the following:
    # <tt>DISCONNECTED, HELO, MAILFROM, RCPTTO, DATA1, DATA2 and QUIT.</tt>
    #
    # The names are derived from mail daemon (ESMTP Sendmail 8.8.5)
    protected variable state {DISCONNECTED}


    ###################################################################
    ####                         private variables               ####
    
    # True if the file is open
    private variable fileIsOpen 0
}


#######################################################################
#### constructor
#
# For each HTTP GET, an object is created and destroyed.
#
body ::tycho::ResourceMail::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::ResourceMail::destructor {} {
    # If we're still loading, forget it
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::ResourceMail::close {} {
    if !$fileIsOpen {
	openerror "File \"$this\" is not open (close)"
    }
    set fileIsOpen 0
    if { $fileid != "" } {
        ::close $fileid
        set fileid ""
    }
}

#####################################################################
#### open
# Open a connection for mail on port 25.
#
body ::tycho::ResourceMail::open {{path {}}} {
    set url [path]

    ::puts "URL: $url"

    if { ! [exists $url] } {
	error "File $url does not exist"
    }

    # Open the cache file
    set fileIsOpen 1
}

#####################################################################
#### puts
body ::tycho::ResourceMail::puts {string} {

}

#####################################################################
#### streamable
body ::tycho::ResourceMail::streamable {} {
    return 1
}

#####################################################################
#### write
body ::tycho::ResourceMail::write {string} {

}

#########################################################################
#########################################################################
####                          public procedures                      ####

#####################################################################
#### exists
# Check if the given URL exists. If the URL has already been
# accessed before, use the data obtained from the earlier
# load. Otherwise open the URL and download just the header.
# Returns 0 if the server cannot be accessed or if the file
# does not exist on the server.
#
body ::tycho::ResourceMail::exists {url} {
    # Do we already know if it exists?
    return 1
}

#####################################################################
#### new
# Create a new HTTP object.
#
body ::tycho::ResourceMail::new {path args} {
    #::puts "::tycho::ResourceMail::new $path $args"
    uplevel #0 ::tycho::ResourceMail [::tycho::autoName ResourceMail] \
	    $args
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#########################################################################
#### debugputs
# Puts a string to the console if the *-debug* option is set.
#
body ::tycho::ResourceMail::debugputs {string} {
    if $debug {
	::puts $string
    }
}

#########################################################################
#### mailinitiate
# Opening a mail connection, and set the fileevent.
#
body ::tycho::ResourceMail::mailinitiate {url} {
    # Parse URL into hostname, port, and path
    set currentURL $url
    ::tycho::assign username hostname port [splitURL $url]

    if {[catch {socket -async $hostname $port} socketid]} {
	catch {unset $socketid}
	error "Can't open $hostname, $port"
    }

    # <tt>DISCONNECTED, HELO, MAILFROM, RCPTTO, DATA1, DATA2 and QUIT.</tt>
    set state HELO

    # Set up the file events for incoming data
    ::fileevent $socketid w {}
    ::fileevent $socketid readable \
	    "@scope ::tycho::ResourceMail [list $this mailhandler]"

    # Request the URL
    # FIXME: Need to figure out how to set the Accept-Encoding field
    ::fconfigure $socketid -blocking no    ;#-translation crlf
    ::fconfigure $socketid -translation auto
}



#########################################################################
#### mailhandler
# The following is the handshake protocol between the client and
# the server. When the mailhandler gets the expected state from
# the server, it'll send out the right data.
#
# <pre>
# State          Expect from Server             Send/"Action"
# -----          ------------------             -----------
#
# 220-hofmann.CS.Berkeley.EDU Sendmail 8.6.11/8.6.6.Beta11 \
#        ready at Mon, 2 Jun 1997 18:15:06 -0700
# 220 ESMTP spoken here
# DISCONNECTED                                  "THIS IS AN ERROR HERE!"
# HELO           220 <hostname> ESMTP ...       HELO <hostname>
# MAILFROM       250 <host> Hello <host>        MAIL FROM: <username@hostname>
# RCPTTO         250 <username> Recipient ok    DATA
# DATA1          354 Enter mail...              <subject, body, .>
# DATA2          250 ...Message accepted        QUIT
# QUIT           221 Accepted for delivery      "Close status is okay"
# </pre>
body ::tycho::ResourceMail::mailhandler {} {
    if {[::eof $socketid] && $state!="DISCONNECTED"} {
        error "Handshaking failed"
	return
    }
    # Line will contain the status
    ::gets $socketid line
    ::puts "LINE: $line"


}



#########################################################################
#### splitURL
# Parse a url into the hostname, port, and return them
# as a three-element list.
#
body ::tycho::ResourceMail::splitURL {url} {
    set _username {}
    set _hostname {}
    set _port 25

    # The following parses the url into hostname, port, and username
    # The following is verbatim from Surfit: vvvvvvvvvvvvvvvvvvvvvvvvvvvv
    if {[regexp -nocase {^mailto:(/+)?([a-z]+)@([a-z0-9\.]+)(:([0-9]+))?} \
            $url _ _ \
	    usertmp hosttmp _ porttmp]} {
	if {$hosttmp!={}} {set _hostname $hosttmp}
	if {$porttmp!={}} {set _port $porttmp}
	if {$usertmp!={}} {set _username $usertmp}
    }
    return [list $_username $_hostname $_port]
}





