# A Resource for sending out mail using mail daemon on port 25
# 
# @Author: Kevin Chang
#
# @Version: $Id$
# 
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### ResourceMail
#
class ::tycho::ResourceMail {
    inherit ::tycho::Resource

    constructor {args} {}
    destructor {}

    #####################################################################
    ####                          options                            ####

    # Command to execute on each line received. It need not invoke
    # any kind of updates to keep the user interface "live", but
    # it doesn't matter if it does.
    public variable notifycommand ""

    ###################################################################
    ####                         public methods                    ####

    # Close the resource.
    method close {}

    # Return the end of file status
    method eof {}

    # Read a string from a streamable resource
    method gets {{varName {}}}

    # Test if the file is currently open
    method isopen {}

    # Open the resource
    method open {{mode "r"}}

    # Write a string to a streamable resource.
    # Can't write into HTTP file! Read permission of off
    method puts {string}

    # Return a string containing the data in a streamable resource 
    method read {}

    # Return 1 if this resource is streamable
    method streamable {}

    # Return the progess indicator, as a decimal number. 1.0 is full.
    method progress {}

    # Write to the file
    method write {data}

    ###################################################################
    ####                           public procs                    ####

    # Get a cached copy of the data
    method cachefile {}

    # Change the permissions of a resource
    proc chmod {permissions path}

    # Return the content type of the current file
    proc contenttype {path}

    # Create a new resource object
    proc new {path args}

    # Return the type of a given file
    proc type {path}

    ###################################################################
    ####                         protected methods                 ####

    # Puts a string to console of the debug option is set
    protected method debugputs {string}

    ###################################################################
    ####                        protected commons                  ####

    ###################################################################
    ####                        protected variables                ####

    # The url this object is accessing
    protected variable currentURL {}

    ###################################################################
    ####                         private variables               ####
    
    # True if the file is open
    private variable fileIsOpen 0
}


#######################################################################
#### constructor
#
# For each HTTP GET, an object is created and destroyed.
#
body ::tycho::ResourceMail::constructor {args} {
    eval configure $args
}

#######################################################################
#### destructor
#
body ::tycho::ResourceMail::destructor {} {
    # If we're still loading, forget it
}

#########################################################################
#########################################################################
####                      public methods                             ####

#####################################################################
#### close
body ::tycho::ResourceMail::close {} {
    if !$fileIsOpen {
	openerror "File \"$this\" is not open (close)"
    }
    set fileIsOpen 0
    if { $fileid != "" } {
        ::close $fileid
        set fileid ""
    }
}

#####################################################################
#### open
# Open an HTTP file. If it's already been downloaded into
# a local temporary file, just use that file; otherwise
# download it into a temporary file and then download it.
#
body ::tycho::ResourceMail::open {{mode "r"}} {
    set url [path]

    if { $mode != "r" } {
	error "File $url is not writable"
    }
    if { ! [exists $url] } {
	error "File $url does not exist"
    }
    if { ! [httpcached $url] } {
	# Get it if not already
	httpget $url file
	httpwait
    }
    # Check again in case something went wrong
    if { ! [httpcached $url] } {
	error "File $url is not accessible"
    }
    # Go through forwarding locations
    while { [::info exists _forwarding($url)] } {
	set url $_forwarding($url)
    }
    # Open the cache file
    set fileid [::open $_cachefile($url) "r"]
    set fileIsOpen 1
}

#####################################################################
#### puts
body ::tycho::ResourceMail::puts {string} {

}

#####################################################################
#### streamable
body ::tycho::ResourceMail::streamable {} {
    return 1
}

#####################################################################
#### write
body ::tycho::ResourceMail::write {string} {

}

#########################################################################
#########################################################################
####                          public procedures                      ####

#####################################################################
#### exists
# Check if the given URL exists. If the URL has already been
# accessed before, use the data obtained from the earlier
# load. Otherwise open the URL and download just the header.
# Returns 0 if the server cannot be accessed or if the file
# does not exist on the server.
#
body ::tycho::ResourceMail::exists {url} {
    # Do we already know if it exists?
    return 1
}

#####################################################################
#### new
# Create a new HTTP object.
#
body ::tycho::ResourceMail::new {path args} {
    #::puts "::tycho::ResourceMail::new $path $args"
    uplevel #0 ::tycho::ResourceMail [::tycho::autoName ResourceMail] \
	    $args
}

#########################################################################
#########################################################################
####                     protected methods                           ####

#########################################################################
#### debugputs
# Puts a string to the console if the *-debug* option is set.
#
body ::tycho::ResourceMail::debugputs {string} {
    if $debug {
	::puts $string
    }
}

#########################################################################
#### splitURL
# Parse a url into the hostname, port, and return them
# as a three-element list.
#
body ::tycho::ResourceMail::splitURL {url} {
    set _port 25
    set _hostname {}
    set _username {}

    # The following parses the url into hostname, port, and username
    # The following is verbatim from Surfit: vvvvvvvvvvvvvvvvvvvvvvvvvvvv
    if {[regexp -nocase {^http://([^/:]*)(:([^/]+))?(.*)} $url match \
	    hosttmp optport porttmp usertmp]} {
	if {$hosttmp!={}} {set _hostname $hosttmp} ;# Supply reasonable default
	if {$porttmp!={}} {set _path $porttmp}
	if {$usertmp!={}} {set _port $usertmp}
    } else {
	# Recover from malformed URL
	if {![string match */* $url]} {
	    # Assume only the hostname:port has been given
	    regexp {([^:]*)(:(.*))?} $url match \
		    hosttmp optport porttmp
	    if {$hosttmp != {}} {set _hostname $hosttmp}
	    if {$porttmp != {}} {set _port $porttmp}
	    set _path /
	} else {
	    error "no hostname given in URL \"$url\""
	}
    }
    return [list $_hostname $_port $_username]
}





