# Test suite for Exec class, this uses graphics, so it must be run with tycho -e
#
# @Authors: Kevin Chang
#
# @Version: $Id$
#
# @Copyright (c) %Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source [file join $TYCHO kernel test testDefs.tcl]
} {}

#NOTE: You cannot test the functionality without using ResourceFTP
#      or ResourceHTTP's open in order to open up a cachefile.
#The following tests will only test the "interface" to the method,
#to make sure that the behavior of the methods/procs are what they
#are suppose to be (ie. return error, return okay, etc...
#
test remote-method {Make sure that the interface to methods are intact!} {
    set remoteobj [::tycho::autoName .remote]
    ::tycho::ResourceRemote $remoteobj
    set status {}

    set methods {\
            {cachefile {(should be redefined)}}\
            {close {(is not open)}}\
            {eof {(is not open)}}\
            {gets {(is not open)}}\
            {isopen {(0)}}\
            {{puts HELLO} {(should be redefined)}}\
            {read {(is not open)}}\
            {streamable {(1)}} \
            {progress {(should be redefined)}}\
            {{write HELLO} {(should be redefined)}}}

    foreach method $methods {
        catch "$remoteobj [lindex $method 0]" msg
        # Match the regular expression to check the output of message
        set reg {}
        regexp -nocase [lindex $method 1] $msg _ reg
        if {$reg=={}} {
            lappend status $msg
        } else {
            lappend status $reg
        }
    }
    delete object $remoteobj
    list $status
} {{{should be redefined} {is not open} {is not open} {is not open} 0 {should be redefined} {is not open} 1 {should be redefined} {should be redefined}}}

test remote-procs {Make sure that the interface to procs are intact!} {
    set status {}

    # The exceptions are "initialize" and "new"
    set procs {\
            {{chmod a+r non} {(should be redefined)}} \
            {{contenttype non} {(should be redefined)}} \
            {{delete non} {(should be redefined)}} \
            {{dirlist non} {(should be redefined)}} \
            {{exists non} {(should be redefined)}} \
            {{forward non} {(should be redefined)}} \
            {{mkdir non} {(should be redefined)}} \
            {{query non option} {(should be redefined)}} \
            {{stat non vars} {(should be redefined)}}}
            
    foreach procname $procs {
        catch "::tycho::ResourceRemote::[lindex $procname 0]" msg
        # Match the regular expression to check the output of message
        set reg {}
        regexp -nocase [lindex $procname 1] $msg _ reg
        if {$reg=={}} {
            lappend status $msg
        } else {
            lappend status $reg
        }
    }
    list $status
} {{{should be redefined} {should be redefined} {should be redefined} {should be redefined} {should be redefined} non {should be redefined} {should be redefined} {should be redefined}}}

