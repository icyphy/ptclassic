##########################################################################
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1996-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### Model
#
# This class is the abstract superclass of Tycho's implementation of 
# the _model_ component of the model-view user interface architecture.  
# (The corresponding view class in Tycho is named _View_.) Sub-classes 
# of Model implement application-specific (or application-related, at 
# least), information models.  Model-view is a derivation of the 
# well-known model-view-controller (MVC) architecture of Smalltalk; 
# the model-view derivation combines MVC's view and controller into a 
# single abstraction.  The key forces driving this change are the 
# increased control functionality provided these days by widgets in UI 
# frameworks (including Tk) and the increased amount of direct 
# manipulation and feedback, making the functionality of the view and 
# controller more tightly coupled -- see the book <i>Designing 
# Object-oriented User Interfaces</i> by Dave Collins, 1995.
#
# _Model_ supports multiple views using a "publish-and-subscribe" 
# mechanism (known as the "Observer" pattern in books such as Gamma 
# _et al's_ <i>Design Patterns</i>). Multiple views can subscribe
# to the same model; when any view changes the data in the model,
# the other subscribed views are notified of the change. Views can 
# specify whether they are interested in data with a particular name,
# or in changes to all data. Notification uses what is known as 
# the "push" model: when data is changed, the subscribers are informed 
# of the type of the change _and_ the changed data. The subscribe{}, 
# <b>unsubscribe</b>, <b>publish</b>, and <b>notify</b> methods
# implement this mechanism.
#
# Because user interfaces typically allow a user to undo and redo 
# operations, _Model_ implements a reasonably flexible, unbounded, 
# undo and redo mechanism.  The command history is linear -- an 
# interesting extension of the history mechanism would to make it 
# tree-structured.  To implement undo and redo correctly, every 
# method that changes model data must return an undo command, which
# is recorded in the command history. Once recorded, commands can
# be undone and redone, and subscribers will be notified as the model
# changes. The history mechanism is implemented by the <b>history</b>,
# <b>mark</b>, <b>record</b>, <b>redo</b>, and <b>undo</b> methods.
#
class ::tycho::Model {
    inherit ::tycho::Object

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####

    # The name of this model
    public variable modelname ""

    #################################################################
    ####                     public methods                      ####

    # Manipulate the undo/redo history
    method history {mode args}

    # Manipulate a history mark
    method mark {mode args}

    # Notify subscribers of a data change or an event
    method notify {type command args}

    # Change model data, record, and publish it
    method publish {command index args}

    # Record a change in data
    method record {command index args}

    # Execute redo commands
    method redo {{distance 1}}

    # Subscribe to this model
    method subscribe {type subscriber args}

    # Execute undo commands
    method undo {{distance 1}}

    # Unsubscribe from this model
    method unsubscribe {type subscriber args}

    #################################################################
    ####                protected methods                        ####

    # Execute a sequence of commands in a list
    protected method sequence {cmdlist}

    #################################################################
    ####               protected variables                       ####

    #################################################################
    ####                  private methods                        ####

    # Append a command to the command history
    private method _appendhistory {redo undo}
    
    # Clear the command history
    private method _clearhistory {args}
    
    # Compact a portion of the command history
    private method _compacthistory {from to {command {}} {inverse {}}}
    
    #################################################################
    ####                  private variables                      ####

    # The marks in the redo/command history
    private variable _mark
    
    # The array of subscriptions. Each array index is a triple
    # of the type (event or data), data or event name, and the
    # notification script.
    private variable _subs
    
    # A flag saying whether commands are being recorded (usually true)
    private variable _recording 1

    # The array of redo commands
    private variable _redo

    # The array of undo commands
    private variable _undo

    # Debugging only
    method debug {args} {
	eval $args
    }
}

#########################################################################
#########################################################################
####                          option configure                       ####

#########################################################################
#### -modelname configuration
# Set the name of the model. This name can be used to provide models
# with meaningful names. If no name is supplied when the model
# is create, the name will be set to the tail of the object name.
# Model names must be unique. The name should not be changed after the
# model has been constructed.
#
configbody ::tycho::Model::modelname {
    ;#
}

########################################################################
#### constructor
#
body ::tycho::Model::constructor {args} {
    # Initialize history marks
    set _mark(current) 0
    set _mark(first) 0
    set _mark(last) 0
    set _mark(loaded) 0
    set _mark(published) 0
    set _mark(saved) 0

    # Initialize the first node of the history
    set _undo(0) {}
    set _redo(0) {}

    # Evaluate options
    eval configure $args

    # If there is no modelname, supply a default
    if { $modelname == "" } {
	set modelname [::info namespace tail $this]
    }
}

########################################################################
#### history
#
# Manipulate the model's command history. This command has several forms,
# depending on the _mode_ argument:
# 
# <dl>
# <dt><b>append</b> _redo_ _undo_
# <dd>
# Append a redo and undo command to the command history.
# The <b>current</b> mark will be moved to point to the
# new commands. Any commands in the "future" will be deleted.
#
# <dt><b>clear</b> ?_from_? ?_to_?
# <dd>
# Clear the command history from the mark _from_ to the mark
# _to_. If these arguments are omitted, they default to
# <b>first</b> and <b>last</b> respectively. The commands in
# the history are deleted from the one _after_ the _from_ mark up
# to and including the _to_ mark. (The command marked by
# <b>first</b> command is a null command, so it doesn't matter
# that it cannot be deleted.)
#
# If the _from_ mark is not earlier than the _to_ mark, no erro
# will be reaised, but no commands will be cleared either.
# If either mark does not exist, then an error will be raised.
# Any other marks that point to a deleted command will be changed to point
# to the _from_ mark. _from_ and _to_ can also be raw integer
# indexes into the command history, but this is intended for internal
# use only.
#
# <dt><b>compact</b> _from_ _to_ ?_redo_? ?_undo_?
# <dd>
# Compact a portion of the command history. All commands from the
# one after the mark _from_ up to and including the mark _to_
# are compacted into a single command. By default, this method
# constructs a compound command from individual commands. If,
# however, the _redo_ and _undo_ arguments are supplied, the
# compacted commands are replaced with the supplied commands.
# An error will be raised if _from_ is not earlier than _to_,
# or if either mark does not exist.
#
# <dt><b>get</b>
# <dd>
# Return a representation of the command history, so that it
# can be saved to file. Do not assume anything about the format
# of the returned string.
#
# <dt><b>set</b> _data_
# <dd>Reconstruct the command history, presumably from data saved
# to a file. The _data_ must be a string returned by the <b>get</b>
# option.
#
# <dt><b>at</b> _mark_
# <dd>
# Return the redo and undo commands at the given mark. This
# option should be used very carefully. An error is raised if
# _mark_ does not exist.
#
# <dt><b>replace</b> _mark_ _redo_ _undo_
# <dd>
# Replace the redo and undo commands at the given mark with the
# supplied commands.  This option should be used very carefully.
# An error is raised if _mark_ does not exist.
#
# </dl>
#
body ::tycho::Model::history {mode args} {
    switch -exact $mode {
	"append" {
	    if { [llength $args] != 2 } {
		error "wrong # args: should be \"history append redo undo\""
	    }
	    eval _appendhistory $args
	}
	"at" {
	    if { [llength $args] != 1 } {
		error "wrong # args: should be \"history at mark\""
	    }
	    set mark [lindex $args 0]
	    if ![::info exists _mark($mark)] {
		error "Unknown mark: $mark"
	    }
	    list $_redo($_mark($mark)) $_undo($_mark($mark))
	}
	"clear" {
	    if { [llength $args] > 2 } {
		error "wrong # args: should be \"history clear ?from? ?to?\""
	    }
	    eval _clearhistory $args
	}
	"compact" {
	    if { [llength $args] < 2 || [llength $args] > 4 } {
		error "wrong # args: should be \"history compact \
			from to ?redo ?undo?\""
	    }
	    eval _compacthistory $args
	}
	"get" {
	    if { [llength $args] != 0 } {
		error "wrong # args: should be \"history get\""
	    }
	    list [array get _redo] [array get _undo]
	}
	"set" {
	    if { [llength $args] != 1 } {
		error "wrong # args: should be \"history set data\""
	    }
	    set data [lindex $args 0]
	    if { [llength $data] != 2 \
		    || [llength [lindex $data 0]] & 1 \
		    || [llength [lindex $data 1]] & 1 } {
		error "Invalid data: $data"
	    }
	    array set _redo [lindex $data 0]
	    array set _undo [lindex $data 1]
	}
	"replace" {
	    if { [llength $args] != 3 } {
		error "wrong # args: should be \"history replace \
			mark redo undo\""
	    }
	    foreach {mark redo undo} $args {}
	    if ![::info exists _mark($mark)] {
		error "Unknown mark: $mark"
	    }
	    set _redo($_mark($mark)) $redo
	    set _undo($_mark($mark)) $undo

	}
	default {
	    error "bad option \"$mode\": should be append, at, clear, \
		    compact, get, set, or replace"
	}
    }
}

########################################################################
#### mark
#
# Place a mark in the command history. Each model maintains a set
# of marks that can be placed into the undo-redo history. By
# default, a model maintains these marks:
#
# <ul>
# <li><b>current</b>: The most recent command executed.
# <li><b>first</b>: The first command in the history.
# <li><b>last</b>: The last command in the history.
# <li><b>published</b>: The most recently published command.
# </ul>
#
# Other marks can be defined by clients, and subclasses of Model
# may also add additional marks. A mark marks exectly one position
# in the history: it is last one executed to get to the state
# represented by the given mark. Thus, the "current" mark marks
# the most recently-executed command.
#
# This command has several forms, depending on the _mode_ argument:
#
# <dl>
# <dt><b>compare</b> _mark_ _operator_ _mark_
# <dd>Compare two marks, where _operator_ is a relational operator such
# as &amp;. This is most often used to compare a mark with _current_.
# For example, to test whether the model has been modified since
# it was last saved, execute
# <pre>
#     $model mark compare current > saved
# </pre>
# <dt><b>delete</b> _mark_
# <dd>Delete the given mark. Raise an error if the mark does not
# exist.
# <dt><b>names</b>
# <dd>Return a list containing the names of all marks.
# <dt><b>set</b> _mark_ ?_mark_?
# <dd>Set a mark to some other mark. The first argument is the name
# of the mark to set; if the mark doesn't exist, create it. The
# second argument is the name of the mark to set it to. An error
# is flagged if this mark does not exist. If omitted, the new mark
# is set to the "current" mark.
# </dl>
#
# Marks are a powerful and general mechanism for manipulating the undo
# history. For example, if a client wishes to makes a series of
# incremental changes but have the undo mechanism treat all those
# changes as a single change, it can set a mark before the incremental
# changes, and compact the history from that mark into a single command.
# 
body ::tycho::Model::mark {mode args} {
    switch -exact $mode {
	"compare" {
	    if { [llength $args] != 3 } {
		error "wrong # args: should be \"mark compare mark op mark\""
	    }
	    foreach {m1 op m2} $args {}
	    if ![::info exists _mark($m1)] {
		error "Unknown mark: $m1"
	    }
	    if ![::info exists _mark($m2)] {
		error "Unknown mark: $m2"
	    }
	    # FIXME: Will this work with the Tcl8.0 byte-compiler?
	    expr $_mark($m1) $op $_mark($m2)
	}
	"delete" {
	    # Delete a mark
	    if { [llength $args] != 1 } {
		error "wrong # args: should be \"mark delete mark\"" 
	    }
	    set mark [lindex $args 0]
	    if ![::info exists _mark($mark)] {
		error "Unknown mark: $mark"
	    }
	    set _mark($mark)
	}
	"names" {
	    # Return all mark names
	    array names _mark
	}
	"set" {
	    # Set or create a mark
	    if { [llength $args] != 1 &&  [llength $args] != 2 } {
		error "wrong # args: should be \"mark set mark ?mark?\""
	    }
	    if { [llength $args] == 2 } {
		set position [lindex $args 1]
	    }
	    if ![::info exists _mark($position)] {
		error "Unknown mark: $position"
	    }
	    set _mark([lindex $args 0]) $_mark($position)
	}
	default {
	    error "bad option \"$mode\": should be compare, \
		    delete, names, or set"
	}
    }
}

########################################################################
#### notify
#
# Notify subscribers of a change to the model. This command has two
# forms, according to the _mode_ argument:
#
# <dl>
# <dt><b>data</b> ?<b>-except</b> widget? _command_ _name_ ?_arg_ ...?
# <dd>
# Notify the subscribers of a change in named data. Any subscriber
# that has subscribed to the data named _name_ will be notified
# as will any subscribers that are subscribed to all data changes.
# The default notification mechanism is to call the subscribers'
# <b>notify</b> method with _command_, _name_, and remaining arguments
# appended. If the subscriber supplied a command when subscribing,
# then these arguments are appended to that command and the
# result evaluated in the global scope. If the <b>-except</b>
# option is specified, then _widget_ will not be notified -- this is
# generally used when a view needs to update views other than itself.
# If _command_ is <b>sequence</b>, then all following arguments
# are taken to be conmmands themselves and this method is
# called recursively on each -- this is needed for compound
# commands built by the history mechanism.
#
# <dt><b>event</b> ?<b>-except</b> widget? _event_ ?_arg_ ...?
# <dd>
# Notify the subscribers of an event. Any subscriber that has
# subscribed to the event named _event_ will be notified,
# as will any subscribers that are subscribed to all events.
# The default notification mechanism is to call the subscribers'
# <b>notify</b> method with _event_ and remaining arguments
# appended. If the subscriber supplied a command when subscribing,
# then these arguments are appended to that command and the
# result evaluated in the global scope. If the <b>-except</b>
# option is specified, then _widget_ will not be notified -- this is
# generally used when a view needs to update views other than itself.
#
# </dl>
#
# Although subscribers are supposed to unsubscribe themselves before
# dying, this doesn't always happen. So, this method checks that
# each subscriber still exists before notifying it, and if it
# doesn't, unsubscribes it.
#
body ::tycho::Model::notify {mode args} {
    # Extract the -except option
    if ![regexp "^-except (\[^ \t\n\]+) (.*)$" $args _ except args] {
        set except {}
    }
    # Switch on the mode to perform error-checking
    switch -exact $mode {
        "data" {
            if { [llength $args] < 2 } {
                error "wrong # args: should be "notify \
                        data command name ?arg ...?\""
            }
            set command [lindex $args 0]

            # Test for the command "sequence", and recursively call if so
            if { $command == "sequence" } {
                foreach cmd [lreplace $args 0 0] {
                    if { $except == "" } {
                        eval notify data $cmd
                    } else {
                        eval notify -except $except data $cmd
                    }
                }
                return
            }
            set name [lindex $args 1]

          }
        "event" {
            if { [llength $args] == 0 } {
                error "wrong # args: should be "notify event event ?arg ...?\""
            }
            set name [lindex $args 0]
        }
        default {
            error "bad option \"$mode\": should be data or event"
        }
    }
    # Now perform common operations. First find the subscribers.
    # Note that if a subscriber matches for "all" and for the
    # data or event name, and has different scripts for both, only
    # the one for the data name will be executed.
    foreach {ix cmd} [array get _subs [list $mode all *]] {
        set subs([lindex $ix 2]) $cmd
    }
    foreach {ix cmd} [array get _subs [list $mode $name *]] {
        set subs([lindex $ix 2]) $cmd
    }

    # Process each subscriber
    foreach {sub cmd} [array get subs] {
        # Don't notify the -except subscriber
        if { $sub == $except } {
            continue
        }
        # Unsubscribe the subscriber if it no longer exists
        if { [::info which -command $sub] == "" } {
            unsubscribe $sub
            continue
        }
        if { $cmd != "" } {
            # Override default notification
            uplevel \#0 $cmd $args
        } else {
            # By default, call the subscriber's notify{} method
            uplevel \#0 $sub notify $args
        }
    }
}

########################################################################
#### publish
#
# Change data and publish the change. This is equivalent to
# calling <b>record</b>, followed by <b>notify data</b>. It is
# provided as a separate method because it is the most common
# (and recommended, unless doing something tricky) way in
# in which commands are recorded and published. The _command_
# argument must be the name of a method present in the most
# specific class, which must return the corresponding undo
# command. The command and args and undo command will be
# recorded in the command history, and all relevent subscribers
# will be notified of the data change.
#
body ::tycho::Model::publish {command index args} {
    eval [list record $command $index] $args
    eval [list notify data $command $index] $args
}

########################################################################
#### record
#
# Execute a method on this data object. The _method_ argument
# is the name of the method to call, and remaining arguments are
# passed directly to the method. The method is called in the scope
# of the most specific class. The method must return a non-null value
# or an error is raised. This value is recorded in the command
# history, along with the method and its
# arguments, which are recorded as the redo command. Any commands
# in the "future" are cleared from the history.
#
body ::tycho::Model::record {method args} {
    # Clear the redo future if needed
    if { $_mark(current) < $_mark(last) } {
	_clearhistory current last
    }

    # Execute the command and remember its result (the undo command).
    # If the command causes an error, this method will abort,
    # and neither the command nor its undo command will be recorded.
    set undo [@scope [info class] eval $this $method $args]

    # If the method returned null, raise an error.
    if { $undo == "" } {
    	error "The recorded command \"$method $args\" returned no undo command"
    }
    # Record the command and the undo command
    _appendhistory [concat $method $args] $undo
}

########################################################################
#### redo
#
# Execute redo commands. If an argument is given and it is an integer,
# redo that many steps, or until the end of the command history if the
# number of steps goes that far. If not an integer, the argument must be
# a mark, and commands are undone up to and including the
# command with that mark. If the mark is not later in the history
# than the current position, do nothing. If the mark does not exist,
# flag an error. If the argument is not supplied, redo one step, or
# do nothing if already at the end of the history. As each command
# is redone, the change is published to all subscribers.
# The returned result is the number of commands redone.
#
body ::tycho::Model::redo {{distance 1}} {
    # If a mark is given, figure out the distance
    if { ! [string match {[0-9]*} $distance] } {
	# Check that the mark exists
	if { ! [::info exists _mark($distance)] } {
	    error "Unknown mark $distance in $modelname"
	}
	set distance [expr $_mark($distance) - $_mark($current)]
    }
    # Go forward only as far as the last command
    if { $distance > $_mark(last) - $_mark(current) } {
	set distance [expr $_mark(last) - $_mark(current)]
    }

    # Redo the commands
    set count 0
    while { $count < $distance } {
	# Adjust indexes
	incr _mark(current)
	incr count

	# Execute the command.
        # Note that here we reset the "recording" flag, so that
        # any methods that usually write to the history know not to.
        set recording 0
        @scope [info class] eval $this $_redo($_mark(current))
        set recording 1

	# Publish
	eval notify data $_redo($_mark(current))
    }
    # Return the number of commands redone
    return $distance
}

########################################################################
#### subscribe
#
# Subscribe to this model. This command has two forms, depending
# on the value of the _mode_ argument. The _subscriber_ is
# always the name of the widget that is subscribing to this model,
# but remaining arguments differ according to the mode.
#
# <dl>
# <dt><b>data</b> _subscriber_ ?_name_? ?_command_?
# <dd>
# Subscribe to a change in data. This mode assumes that changes in
# data as recorded or published by a model always access the data
# via a name, which is specified by the _name_ argument. The subscriber
# will be notified of any change to the data with that name. If _name_
# is omitted, the _name_ argument defaults to the special name "all",
# which specified that the subscriber be notified of changes to
# all data in the model. By default, the subscriber will be notified
# by a call to a method called <b>notify</b> (see the notify{}
# method). This default behavior can be overridden by supplying
# the _command_ argument.
#
# <dt><b>event</b> _subscriber_ _event_ ?_command_?
# <dd>
# Subscribe to a an "event" on the model. An event is something
# that happens to the model that is not simply manipulation of
# its data. Notification of events is generally activated
# by subclasses, and will typically include events such
# as <b>load</b>, <b>save</b>, <b>select</b>, and so on.
# The _event_ argument is the event name (as supplied to the
# notify{} method). By default, event notification will take
# place by calling the subscriber's <b>notify</b> method --
# this can be overridden by supplying the _command_ argument.
#
# </dl>
#
body ::tycho::Model::subscribe {mode subscriber {name {}} {command {}}} {
    switch -exact $mode {
	"data" {
	    if { $name == "" } {
		set name "all"
	    }
	    set _subs([list data $name $subscriber]) $command
	}
	"event" {
	    if { $name == "" } {
		error "Event argument must have a value"
	    }
	    set _subs([list event $name $subscriber]) $command
	}
	default {
	    error "bad option \"$mode\": should be data or event"
	}
    }
}

########################################################################
#### undo
#
# Execute undo commands. If an argument is given and it is an integer,
# undo that many steps, or until the start of the command history if the
# number of steps goes that far. If not an integer, the argument must be
# a mark, and commands are undone back to but not including the
# command with that mark. If the mark is not earlier in the history
# than the current position, do nothing. If the mark does not exist,
# flag an error. If the argument is not supplied, undo one step, or
# no nothing if already at the start of the history. As each command
# is undone, the change is published to all subscribers.
# The returned result is the number of commands undone.
#
body ::tycho::Model::undo {{distance 1}} {
    # If a mark is given, figure out the distance
    if { ! [string match {[0-9]*} $distance] } {
	# Check that the mark exists
	if { ! [::info exists _mark($distance)] } {
	    error "Unknown mark $distance in $modelname"
	}
	set distance [expr $_mark($current) - $_mark($distance)]
    }

    # Go back only as far as the first command (but don't actually
    # execute the first command, since it is a null command)
    if { $distance > $_mark(current) - $_mark(first) } {
	set distance [expr $_mark(current) - $_mark(first)]
    }

    # Undo the commands
    set count 0
    while { $count < $distance } {
        # Execute the command
        # Note that here we reset the "recording" flag, so that
        # any methods that usually write to the history know not to.
        set recording 0
        @scope [info class] eval $this $_undo($_mark(current))
        set recording 1

        # Publish
	eval notify data $_undo($_mark(current))

        # Adjust indexes
        incr _mark(current) -1
        incr count
    }

    # Return the number of commands undone
    return $distance
}

########################################################################
#### unsubscribe
#
# Unsubscribe from this model. This command has two forms, depending
# on the value of the _mode_ argument. The _subscriber_ is
# always the name of the widget that is being unsubscribed from this
# model, but remaining arguments differ according to the mode.
#
# <dl>
# <dt><b>data</b> _subscriber_ ?_name_?
# <dd>
# Unsubscribe from data changes. If _name_ is supplied, unsubscribe
# from all data to which the subscriber has subscribed; otherwise
# unsubscribe only from the named data. In this case, do nothing
# if the subscriber has not subscribed to the named data.
#
# <dt><b>event</b> _subscriber_ ?_event_?
# <dd>
# Unsubscribe from an "event" on the model. If _event_ is supplied,
# unsubscribe from all events to which this subscriber is
# subscribed; otherwise unsubscribe only from the named event.
# In this case, do nothing if the subscriber has not subscribed to
# the named event.
#
# </dl>
#
body ::tycho::Model::unsubscribe {mode subscriber {name {}}} {
    if ![regexp {^(data|event)$}] {
	error "bad option \"$mode\": should be data or event"
    }
    if { $name != "" } {
        if [::info exists _subs([list $mode $name $subscriber]) {
            unset _subs([list $mode $name $subscriber])
        }
    } else {
	foreach index [array names _subs [list $mode * $subscriber]] {
	    unset _subs($index)
	}
    }
}

########################################################################
########################################################################
####                       protected methods                        ####

########################################################################
#### sequence
#
# Execute a sequence of commands and return the inverse command.
# Each argument is a single command. This method's main purpose is
# for constructing complex commands for the undo and redo history.
#
body ::tycho::Model::sequence {args} {
    set undo [list sequence]
    foreach cmd $args {
        lappend undo [eval @scope [info class] $cmd]
    }
    return $undo
}

########################################################################
########################################################################
####                       private methods                        ####

########################################################################
#### _appendhistory
#
# Append an undo and redo command to the command history.
#
body ::tycho::Model::_appendhistory {redo undo} {
    # Clear the redo future if needed
    if { $_mark(current) < $_mark(last) } {
	_clearhistory current last
    }

    # Record the commands
    incr _mark(current)
    incr _mark(last)
    set _redo($_mark(current)) $redo
    set _undo($_mark(current)) $undo
}

########################################################################
#### _clearhistory
#
# Clear the command history from _from_ to _to_. _from_ and _to_
# can either be marks or integer indexes. See the history{}
# method for more information.
#
body ::tycho::Model::_clearhistory {{from first} {to last}} {
    # Get the indexes corresponding to the marks
    if { [string match {[0-9]*} $from] } {
	set fromindex $from
    } else {
	if { ! [info exists _mark($from)] } {
	    error "Unknown mark $from in $modelname"
	}
	set fromindex $_mark($from)
    }
    if { [string match {[0-9]*} $to] } {
	set toindex $to
    } else {
	if { ! [info exists _mark($to)] } {
	    error "Unknown mark $to in $modelname"
	}
	set toindex $_mark($to)
    }

    # Do nothing if from is not earlier than to
    if { $fromindex >= $toindex } {
	return
    }

    # Clear the commands
    set i [expr $fromindex + 1]
    while { $i <= $toindex } {
	unset _undo($i)
	unset _redo($i)
	incr i
    }

    # Because the history indexes are contiguous, we have to shift
    # any commands above "to" down to fill in the gap left by the
    # deleted commands. (Note: i is already set to "to + 1")
    set delta [expr $toindex - $fromindex] 
    while { $i <= $_mark(last) } {
	set _undo([expr $i - $delta]) $_undo($i)
	set _redo([expr $i - $delta]) $_redo($i)

	unset _undo($i)
	unset _redo($i)
	incr i
    }

    # If any marks got clobbered, set them to "from". Any marks
    # above "to" are shifted down the right amount.
    foreach {mark index} [array get _mark] {
	if { $index > $fromindex && $index < $toindex } {
	    set _mark($mark) $fromindex
	} elseif { $index >= $toindex } {
	    set _mark($mark) [expr $index - $delta]
	}
    }
}

########################################################################
#### _compacthistory
#
# Compact a portion of the command history.
# Commands from the one after "from" up to and including "to"
# are compacted into a single command. The third and fourth
# arguments, if supplied, are commands to replace the compacted
# commands -- if not supplied, a compound command is constructed.
#
body ::tycho::Model::_compacthistory {from to {redo {}} {undo {}}} {

    # Get the indexes corresponding to the marks
    if { [string match {[0-9]*} $from] } {
	set fromindex $from
    } else {
	if { ! [info exists _mark($from)] } {
	    error "Unknown mark $from in $modelname"
	}
	set fromindex $_mark($from)
    }
    if { [string match {[0-9]*} $to] } {
	set toindex $to
    } else {
	if { ! [info exists _mark($to)] } {
	    error "Unknown mark $to in $modelname"
	}
	set toindex   $_mark($to)
    }

    # Flag an error if from is not earlier than to
    if { $fromindex >= $toindex } {
	error "Cannot compact from $from ($fromindex) \
		to $to ($toindex) in $modelname"
    }

    # Build composite commands if not supplied
    if { $redo == "" && [expr $fromindex+1] < $toindex } {
	set i [expr $fromindex + 1]
	set redo [list sequence]
	set undo [list sequence]
	while { $i <= $toindex } {
	    lappend redo $_redo($i)
	    lappend undo $_undo($i)
	    incr i
	}
	# Put the new command into the history
	set _redo($toindex) $redo
	set _undo($toindex) $undo
	
	# Clear the compacted commands
	_clearhistory $fromindex [expr $toindex - 1]
    }
}
