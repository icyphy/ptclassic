# Definition of a Ptlang context-sensitive editor.
#
# @Author: Edward A. Lee
#
# @Version: $Id$
#
# @Copyright (c) 1995-%Q% The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### EditPtlang
# This class defines a window that provides an emacs-like editor
# specialized for editing ptlang files. Ptlang is the preprocessor
# language used to define stars in Ptolemy. This class colorizes the
# code, identifying comments and ptlang keywords, automatically indents
# the code, and fills blocks of comments.  It is derived from the C++
# editor, and hence inherits all its features.
#
class ::tycho::EditPtlang {
    inherit ::tycho::EditCpp

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                            options                        ####

    itk_option define -star star Star {}

    ###################################################################
    ####                         public methods                    ####

    # Open a help window.
    method help {}

    ###################################################################
    ####                         public procs                      ####

    # Given a source file (a .pl file) generate and display a doc file.
    proc gendoc {filename}

    ###################################################################
    ####                  protected methods                        ####

    # Return the name of the type of text widget to use (EditPtlangText).
    protected method textWidget {} {return ::tycho::EditPtlangText}
}

#######################################################################
#### -star configuration
# The argument to -star should be a two element list that consists
# of a domain name and a star name.  The domain name should be capitalized.
# for example, the following code will open up the SDF Cosine .pl file 
# <tcl><pre>
#  ::tycho::EditPtlang .e -star {SDF Cos}
#  .e centerOnScreen
# </pre><tcl>
configbody ::tycho::EditPtlang::star {
    global PTOLEMY
    set domainStarList $itk_option(-star)
    if {$domainStarList != {} } {
        set domain [lindex $domainStarList 0]
        set star [lindex $domainStarList 1]
        set file [file join $PTOLEMY src domains [string tolower $domain] \
                stars $domain$star.pl]
        puts $file
        if [file exists $file] {
            configure -file $file
        } else {
            # Ok, the star was not in domain/stars, so look elsewhere
            set file [ glob -nocomplain \
                    [file join $PTOLEMY src domains [string tolower $domain] \
                    * stars $domain$star.pl ]]
            puts $file
            switch [llength $file] {
                0 {error "Could not find a source file for $star in $domain"}
                1 {configure -file $file} 
                default {error "More than one possibility for $star in $domain\n
                $possibleFile"}
            }
        }
    }
}

###################################################################
#
body ::tycho::EditPtlang::constructor {args} {
    global PTOLEMY
    eval itk_initialize $args

    addMenu Special left {} -underline 0

    # Stuff for the special menu
    addMenuItem "Stars" Special -underline 0 \
            -command "::tycho::File::openContext \
	    [file join $PTOLEMY src domains starHTML.idx.fst]"

    addMenuItem "Universes" Special -underline 0 \
            -command "::tycho::File::openContext \
	    [file join $PTOLEMY tycho typt lib PtolemyFacets.fst]"

    addMenuItem "Xref, stars/demos" Special -underline 0 \
            -command "::tycho::File::openContext \
            [file join $PTOLEMY doc star-demo-index index.html]"

    addMenuSeparator Special

    addMenuItem "Generate doc" Special -underline 0 \
            -command "::tycho::EditPtlang::gendoc $file"
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditPtlang::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/editors/textedit/doc/usersGuides/EditPtlangHelp.html
}

    ###################################################################
    ###################################################################
    ####                      public procedures                    ####

###################################################################
#### gendoc
# Given a source file (a .pl file) generate and display a doc file.
# If the doc file already exists and is newer than the source file,
# then it is simply displayed, not regenerated.
# NOTE: This is a Unix-specific implementation, since "exec" is used
# to invoke "ptlang".
#
body ::tycho::EditPtlang::gendoc {filename} {
    set filename [::tycho::expandPath $filename]
    set dir [file dirname $filename]
    set tail [file tail $filename]
    set root [file rootname $tail]
    set docfile "$root.htm"
    set fulldoc [file join $dir $docfile]
    if {![file exists $fulldoc] || \
            [file mtime $filename] > [file mtime $fulldoc] } {
        # Need to regenerate the doc.  Check permissions first.
        # It is sufficient for the directory to be writable.
        if {[file writable $dir]} {
	    # Save the file if it has not been saved
#	    if {[isModified] == 1} {
#		if {[::tycho::askuser \
#			"File $filename has not been saved, Save it now?"]} {
#		    save
#		}
#	    }

            set savedir [pwd]
            cd $dir
            exec rm -f "$root.h" "$root.cc" "$root.htm" "$root.t"
            exec ptlang $tail
            cd $savedir
        } {
            ::tycho::warn "The documentation file is out of date, \
                    and you do not have permission to update it."
        }
    }
    if [file exists $fulldoc] {
        ::tycho::File::openContext $fulldoc
    }
}
