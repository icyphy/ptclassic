# Ptolemy Retargetting mechanism: Display information about domains
#
# @Author: Christopher Hylands
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### Retarget
# Display Ptolemy Retargetting information.
# The user can compare stars in two Ptolemy domains, and check
# to see if the current universe would have conflicts while
# being retargeted between domains.
# <p>
# Here is an example of how to use the Retarget
# <tcl><pre>
#	::tycho::Retarget .t
#	.t centerOnScreen
# </pre></tcl>
class ::tycho::Retarget {
    inherit ::tycho::EditForest
    constructor {args} {}
    destructor {}

    ###################################################################
    ####                         public methods                    ####

    # Generate data for new domains
    method compareDomains {}

    # Update domainA
    method changeDomainA {}

    # Update domainB
    method changeDomainB {}

    # Look for conflicts in the current universe
    method checkUniverse {}

    # Open a help window.
    method help {}

    ###################################################################
    ####                         public procedures                 ####

    # Print the same star from two different domains
    public proc printStars { starName relation domainA domainB}

    ###################################################################
    ####                         private methods                   ####

    # Initialize the counters at the bottom of the window
    private method modifyAfterDomainChange { {ports 0} {multiports 0} \
        {states 0} {aOnly 0} {bOnly 0} {bothAandB 0} {bTotal 0} {aTotal 0}} {}

    ###################################################################
    ####                         private variables                 ####
    private variable domainA {CG56}
    private variable domainB {C50}

    # If we need to run compareDomains, then set this variable to 1
    private variable dirtyCompareDomains 1

    # List of stars that clash, arranged by categories into sublists
    private variable clashList
}

#######################################################################
#### constructor
#
body ::tycho::Retarget::constructor {args} {
    addTool newDomains -text {Compare Domains} -command "$this compareDomains"
    addTool domainAButton -text "Change Domain A: $domainA" \
            -command "$this changeDomainA"
    addTool domainBButton -text "Change Domain B: $domainB" \
            -command "$this changeDomainB"

    addTool checkUniverse -text {Check Universe} \
	    -command "$this checkUniverse"

    eval itk_initialize $args
    modifyAfterDomainChange
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### changeDomainA
# Change the name of one of the domains that we are going to compare
#
body ::tycho::Retarget::changeDomainA {} {
   set arglist [DialogWindow::newModal EntryQuery .e2 -queries "
       {domainA {Domain A:} $domainA}" ]

    foreach arg $arglist {
        set [lindex $arg 0] [lindex $arg 1]
    }
    clear
    set dirtyCompareDomains 1
    catch {delete object component graphics}
    #addTool domainAButton -text "Change Domain A: $domainA" 
    #        -command "$this changeDomainA"
    modifyAfterDomainChange
}

#######################################################################
#### changeDomainB
# Change the name of one of the domains that we are going to compare
#
body ::tycho::Retarget::changeDomainB {} {
    set arglist [DialogWindow::newModal EntryQuery .e2 -queries "
       {domainB {Domain B:} $domainB}" ]

    foreach arg $arglist {
        set [lindex $arg 0] [lindex $arg 1]
    }
    clear
    set dirtyCompareDomains 1
    catch {delete object component graphics}
    #addTool domainBButton -text "Change Domain B: $domainB" \
    #        -command "$this changeDomainB"
    modifyAfterDomainChange
}

#######################################################################
#### checkUniverse
# Change the name of one of the domains that we are going to compare
#
body ::tycho::Retarget::checkUniverse {} {
    clear
    if {!$dirtyCompareDomains} {
	putStatus "Regenerating Domain Information, please wait."
	compareDomains
	putStatus ""
    }
    
}

#######################################################################
#### compareDomains
# Determine what stars are in two domains and compare them by plotting
# the information as a Forest.
#
body ::tycho::Retarget::compareDomains {} {
    set clashList [::tycho::DomainInfo::diffDomains $domainA $domainB]

    clear
    catch {delete object component graphics}

    # Cycle through the different types of clashes
    set headers [list {Common Stars} {Different Ports} \
            {Different MultiPorts} {Different States} \
            "${domainA} Only" "${domainB} Only"]
    set indexCount 0
    foreach header $headers {
        component graphics add $header {} {}
        set header [list $header]
        foreach star [lindex $clashList $indexCount] {
            set contents [list tcl \
                    "::tycho::Retarget::printStars $star \"$header\" \
                    $domainA $domainB" ]
            component graphics add $star $contents $header
        }
        incr indexCount
    }

    # ports multiports states aOnly bOnly bothAandB bTotal0 aTotal0
    modifyAfterDomainChange \
            [llength [lindex $clashList 1]] \
            [llength [lindex $clashList 2]] \
            [llength [lindex $clashList 3]] \
            [llength [lindex $clashList 4]] \
            [llength [lindex $clashList 5]] \
            [llength [lindex $clashList 0]] \
            [llength [knownlist $domainB]] \
            [llength [knownlist $domainA]]

    component graphics redrawGraph
    set dirtyCompareDomains 0
}

###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::Retarget::help {} {
    global ::TYCHO
    ::tycho::File::openContext \
	    $TYCHO/typt/editors/doc/usersGuides/RetargetHelp.html
}

    ###################################################################
    ###################################################################
    ####                      public procedures                    ####

#######################################################################
#### printStars
# Print the same star from two different domains
# This procedure is called when the user double clicks on a star name
body ::tycho::Retarget::printStars { starName relation domainA domainB} {
    domain $domainA
    if [catch {set domainAPrint [::print $starName]}] {
        set domainAPrint "Star $starName is not present in domain $domainA"
    }
    domain $domainB
    if [catch {set domainBPrint [::print $starName]}] {
        set domainBPrint "Star $starName is not present in domain $domainB"
    }
    
    switch $relation "
        {Common Stars} { 
            set relationMessage \
                    \"The $starName star has the same ports, multiports \
                    and states \
                    in $domainA and $domainB.\"
        }

        {Different Ports} {
            set relationMessage \
                    \"The $starName star does not have the same ports \
                    in $domainA and $domainB.\"
        }
        {Different Multiports} {
            set relationMessage \
                    \"The $starName star does not have the same multiports \
                    in $domainA and $domainB.\"
        }
        {Different States } {
            set relationMessage \
                    \"The $starName star does not have the same states \
                    in $domainA and $domainB.\"
        }
        \"${domainA} Only\" {
            set relationMessage \
                    \"The $starName star is only in $domainA, not in $domainB.\"
        } 
        \"${domainB} Only\" {
            set relationMessage \
                    \"The $starName star is only in $domainB, not in $domainA.\"
        }
        default {
            set relationMessage \
                    \"Internal Error: I don't know about: $relation\"
        }
    "

    set retargWin [::tycho::HTMLMessage .retarget#auto -html "
        <H1>$starName star in domains $domainA and $domainB</H1>
        $relationMessage

        <tcl><pre>
        ::tycho::EditPtlang .ptlangA -star {$domainA $starName}
        .ptlangA centerOnScreen
        </pre></tcl>
        <tcl><pre>
        ::tycho::EditPtlang .ptlangB -star {$domainB $starName}
        .ptlangB centerOnScreen
        </pre></tcl>
        <H2>$domainA Domain</H2>
        <pre>
        $domainAPrint
        </pre>
        <H2>$domainB Domain</H2>
        <pre>
        $domainBPrint
        </pre>
    "]

    $retargWin centerOnScreen
}
    ###################################################################
    ###################################################################
    ####                      private methods                      ####

#######################################################################
#### modifyAfterDomainChange
# Initialize the counters at the bottom of the window
body ::tycho::Retarget::modifyAfterDomainChange { {ports 0} {multiports 0} \
        {states 0} {aOnly 0} {bOnly 0} {bothAandB 0} {bTotal 0} {aTotal 0}} {
    addInfo diffPorts {Ports} $ports 3 \
            "Number of stars that have the same name, but different ports."
    addInfo diffMultiports {MultiPorts} $multiports 3 \
            "Number of stars that have the same name, but different multiports."
    addInfo diffStates {States} $states 3 \
            "Number of stars that have the same name, but different states."
    addInfo domainBOnly "$domainB Only" $aOnly 3 \
            "Number of stars that are only in $domainA."
    addInfo domainAOnly "$domainA Only" $bOnly 3 \
            "Number of stars that are only in $domainB."

    addInfo commonStars {Common} $bothAandB 3 \
            "Number of stars that are in both domains and have the same ports, multiports and states."

    addInfo domainBCount "$domainB" $aTotal 3 \
            "Total number of stars in $domainB."
    addInfo domainACount "$domainA" $bTotal 3 \
            "Total number of stars in $domainA."

    component graphics titleSet title \
            "Comparison of $domainA and $domainB domains"

}

