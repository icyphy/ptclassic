# Test suite for Tycho Ptolemy Domain Class in typt/kernel
#
# @Authors: Edward A. Lee, Christopher Hylands
#
# @Version: @(#)testDomainInfo.itcl	1.8 05/25/97
#
# @Copyright (c) 1996-1998 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

if {[string compare test [info procs test]] == 1} then { 
    source [file join $TYCHO kernel test testDefs.tcl]
} {}

# Uncomment this to get a full report, or set in your Tcl shell window.
# set VERBOSE 1

# If necessary load up the class definitions
if {[namespace ptolemy {info classes DomainInfo}] == {} } {
    uplevel #0 {
	set ::auto_path [linsert $auto_path 0 [file join $TYCHO typt kernel]] 
    }
    if {[namespace ptolemy {info classes Object}] == {} } {
	uplevel #0 {
	    set ::auto_path [linsert $auto_path 0 [file join $TYCHO kernel]] 
	}
    }
}

namespace ::tycho

######################################################################
#### domains
# Pretty much every binary has SDF in it.
#
test DomainInfo::domains-1.1 {Check out the domains command} {
    # Create a domainInfo object in each domain
    foreach domain [::tycho::DomainInfo::domains] {
	catch {delete object .domainInfo}
	::tycho::DomainInfo .domainInfo $domain
    }
    catch {delete object .domainInfo}
    lsearch [::tycho::DomainInfo::domains] SDF

} {1}

######################################################################
#### stars
# Pretty much every binary has SDF Ramp in it.
#
test DomainInfo::stars-1.1 {Get information about a star} {
    catch {delete object .sdf}
    ::tycho::DomainInfo .sdf SDF
    set retval1 [expr { [lsearch [.sdf stars] Ramp] != -1 }]
    list $retval1 \
	    [.sdf printStar Ramp] \
	    [.sdf descriptor Ramp] \
	    [.sdf multiports Ramp] \
	    [.sdf ports Ramp] \
	    [.sdf states Ramp]
} {1 {Ramp
	Descriptor { Generate a ramp signal, starting at "value" (default 0) and
incrementing by step size "step" (default 1) on each firing.}
	Ports {
	Output output
	ot connected.
}
	MultiPorts {}
	State
	{	step FLOAT A_DYNAMIC
} {	value FLOAT A_CONSTANT A_DYNAMIC
}
} {Descriptor { Generate a ramp signal, starting at "value" (default 0) and
incrementing by step size "step" (default 1) on each firing.}} {MultiPorts {}} {Ports {
	Output output
	ot connected.
}} {States {{step {FLOAT A_DYNAMIC}} {value {FLOAT A_CONSTANT A_DYNAMIC}}}}}

######################################################################
#### knownBlocks
# 
test DomainInfo::knownBlocks-1.1 {Check out the knownBlocks command} {
    set retval1 [expr { [lsearch [::tycho::DomainInfo::knownBlocks SDF] Ramp] \
	    != -1 }]
    list $retval1 [::tycho::DomainInfo::print Ramp SDF]
} {1 {Star: Ramp
Descriptor: Generate a ramp signal, starting at "value" (default 0) and
incrementing by step size "step" (default 1) on each firing.
Ports:
	Output output
	ot connected.

States:
	step type: FLOAT A_DYNAMIC
	value type: FLOAT A_CONSTANT A_DYNAMIC
______________________________________________________________________________

}}

######################################################################
#### printStars
test DomainInfo::printStars-1.1 {Check out the printStars command} {
    catch {delete object .hof}
    ::tycho::DomainInfo .hof HOF
    # Print out everything, but just check to see that the Chain star
    # exists
    expr { [lsearch -glob [.hof printStars] {*Chain*}]   != -1 }
} {1}

######################################################################
#### queryDomains
test DomainInfo::queryDomains-1.1 {Check out the queryDomains command} {
    set TY_TEST_MODAL {
	{
	    %0 clearSelection
	    %0 goto end
	    %0 select DE
	}
    }
    ::tycho::DomainInfo::queryDomain {Which domain is your favorite?} {SDF}

} {DE}

######################################################################
#### queryDomains
test DomainInfo::diffDomains-1.1 {Check out the diffDomains proc} {
    set diffresults [::tycho::DomainInfo::diffDomains HOF SDF]
    list [lrange $diffresults 0 3] [llength $diffresults]
} {{{} {} {} {}} 6}
catch {delete object .sdf}
catch {delete object .hof}
catch {delete object .domainInfo}
