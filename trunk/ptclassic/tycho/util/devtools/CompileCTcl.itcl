# Compile a C file and load it into Tcl
#
# @Author: Christopher Hylands
#
# @Version: @(#)CompileCTcl.itcl	1.9	05/05/98
#
# @Copyright (c) 1997-1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### CompileCTcl
# Description of class.
#
# <p>
# Here is an example of how to use the Compile:
# <tcl><pre>
#    set compiler [::tycho::CompileCTcl [::tycho::autoName .editC]]
#    $compiler configure -view foo.c
#    $compiler compileAndLoad [list foo.c]
#    delete object $compiler
# </pre></tcl>
#
class ::tycho::CompileCTcl {
    inherit ::tycho::Compile

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                   protected methods                       ####

    # Check the source files for necessary features.
    protected method checkSourceFiles {}

    # Create a makefile.   Usually subclasses modify this method.
    protected method createMakefile {}

    # Run make and then load the result back into Tycho.
    protected method loadFiles {}
}

#######################################################################
#### constructor
#
body ::tycho::CompileCTcl::constructor {args} {
}


#######################################################################
#### destructor
#
body ::tycho::CompileCTcl::destructor {} {
}

    ###################################################################
    ###################################################################
    ####                      protected methods                    ####

#######################################################################
#### checkSourceFiles
# Check the source files for necessary features. Presently, this
# doesn't do anything.
#
body ::tycho::CompileCTcl::checkSourceFiles {} {
    # This used to check for the Tcl initialization function,
    # but that has been moved to EditC.itcl.
}

#######################################################################
#### createMakefile
# Create a makefile.   Usually subclasses modify this method.
# The makefile that is created is named by the *makefile* protected variable.
#
body ::tycho::CompileCTcl::createMakefile {} {
    global tycho env
    if ![file exists [file join $dirname $makefile]] {
	# Create a makefile by reading in from the template and 
	# substituting %basename% for the value of $basename
	# FIXME: templateMakefile should probably be a preference.
	# FIXME: this will fail if tycho.edit.textedit is not installed
	global env
	set templateMakefile \
		[file join $env(TEXTEDIT_LIBRARY) templates Cmakefile.mk]
	set fdin [open $templateMakefile r]
	set fdout [open [file join $dirname $makefile] w]
	while {[gets $fdin linein] >= 0} {
	    regsub -all {%basename%} $linein $basename lineout
	    puts $fdout $lineout
	}
	close $fdout
	close $fdin
    }
    if [info exists env(PTARCH)] {
	set PTARCH $env(PTARCH)
    } else {
	error "Sorry, the PTARCH environment variable is not set.\nIn csh,\
		you can exit Tycho, and run\nsetenv PTARCH `$TYCHO/bin/ptarch`"
    }
    if {![file exists [file join $tycho obj.$PTARCH tcl.mk]]} {
	putStatus "About to make tcl.mk, when complete, be\
		sure to close the Exec window to continue."
	::tycho::execModal "make config_tclexts" $tycho
	putStatus ""
    }
}

#######################################################################
#### loadFiles
# Run load the shared objects back into Tycho.
#
body ::tycho::CompileCTcl::loadFiles {} {
    foreach file $filenameList {
	set filebase [file rootname [file tail $firstFile]]
	if [catch {uplevel #0 \
		load [file join $dirname $filebase[info sharedlibextension]]} \
		errMsg] {
	    error "Failed to load\
		    [file join $dirname $filebase[info sharedlibextension]]:\n\
		    $errMsg"
	}
    }
}
