# Definition of a text editor with facilities for editing programs
# in various languages.
#
# @Author: Kevin Chang
#
# @Version: @(#)EditDiff.itcl	$Id$	03/18/97
#
# @Copyright (c) 1995-1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
#######################################################################

#######################################################################
# FIXME: Known bugs
#

#######################################################################
#### EditDiff
# This class defines a widget that provides an emacs-like editor
# specialized for diffing program files. It colorizes the code,
# identifying new and old file lines.
#

class ::tycho::EditDiff {
    inherit ::tycho::Edit

    constructor {args} {}
    destructor {}

    ##########################################################################
    ####                            options                               ####

    # The type of diff we want to perform
    itk_option define -difftype difftype Difftype 0


    ##########################################################################
    ####                         public methods                           ####

    # This insertString will add attribute to all of the test.
    # The attribute for each text could be either "common",
    # "new", or "old".
    method insertString {index str status} {}

    # Compare files
    method compareFile {{nothing {}}} {}

    # This will return the info line entry from the diff program
    # (ie. 12,32c53,3    3d5,6    etc)
    public method diffReport {} {}

    # Open a help window.  This should be redefined in derived classes.
    method help {}

    method test {} 

    ####################################################################
    ####           protected methods and variables                  ####

    # Keep track of the type of the diff
    private common difftypeName

    # Instance of the Exec which calls UNIX's diff utility
    private variable execDiff {}

    # Color for old and new text
    protected variable linecolor1 {{} {}}
    protected variable linecolor2 {{} {}}

    public variable filename1 {}
    public variable filename2 {}

    # This keeps a list of diffs
    public variable diffResult {}
    public variable diffResultLineCount 0
}



###################################################################
#
body ::tycho::EditDiff::constructor {args} {
    global filename1 filename2
   
    # FIXME: Currently, we'd like to change the default colors
    set linecolor1 [list blue {}]
    set linecolor2 [list red {}]

    set execDiff ""
    configure -readonly 1

    toolbar button compare {Read in both files, and start parsing} \
            -text Compare -command "$this compareFile"
    toolbar button addfile {Read in one more file to compare} \
            -text "Add File" -command {} -state disabled
    toolbar button remfile {Remove one more file entry} \
            -text "Remove File" -command {} -state disabled
           
    #toolbar button test {Kevin's test button} -text "Test" \
    #        -command "$this test"

    toolbar entry filename1 "File 1 name: " {} "puts " \
            -foreground [lindex $linecolor1 0] -command \
            {set filename1 [::tycho::queryfilename {File 1 to compare:}]} \
            -textvariable filename1
           
    toolbar entry filename2 "File 2 name: " {} "$this compareFile" \
            -foreground [lindex $linecolor2 0] -command \
            {set filename2 [::tycho::queryfilename {File 2 to compare:}]} \
            -textvariable filename2

    eval itk_initialize $args

    # Initialize the format menu
    array set difftypeList {{Unix diff} 0 {Smart diff} 1}
    if {$myMenubar != {}} {
        foreach i {{Unix diff} {Smart diff}} {
            $myMenubar add $i Format \
		    -type radiobutton \
                    -variable [scope difftypeName($this)] \
                    -command \
                    "$this configure -difftype $difftypeList($i); \
                    #::tycho::HTML::render $this"
        }
    }

    # initialize this variable to "small", since that has a zero
    # offset.
    set difftypeName($this) "Unix diff"
    configure -difftype $difftypeList($difftypeName($this))

    if {$myMenubar != {}} {
        $myMenubar disable {Undo/Redo}
        $myMenubar disable {Cut}
        $myMenubar disable {Paste}
        $myMenubar disable "Font..."
        # Delete all in Edit
        $myMenubar delete "Undo/Redo"
        $myMenubar delete "Cut"
        $myMenubar delete "Paste"
        # Delete all the formats
        $myMenubar delete "Fill Region"
        $myMenubar delete "Right Fill Column"
        $myMenubar delete "Set Fill Prefix"
        $myMenubar delete "Lower Case"
        $myMenubar delete "Upper Case"
        $myMenubar delete "Capitalize"

        $myMenubar delete "Insert..."
        $myMenubar delete "Save"
        $myMenubar delete "SaveAs..."
        $myMenubar delete "Evaluate"
        $myMenubar delete "Revision Control..."
        $myMenubar delete "Toggle Read-Only"
    }



    # Create the Special menu for file templates and so on

    
    # The default fill prefix works for Tcl and shell scripts.
    #set fillPrefix "#"
    
    # Bind S-C-l to recolorize the file. Note that C-L is the equivalent
    # since the effect of the shift key is to modify the keypress and 
    # it does not seem that I can intercept this any other way.
    bind $itk_component(text) <Control-L> "$this compareFile"

    # Configure text color
    set text $itk_component(text)
    # Tag the text to have different colors
    foreach i {1 2} {
        $text tag configure linecolor$i \
                -foreground [lindex [eval set linecolor$i] 0] \
                -background [lindex [eval set linecolor$i] 1]
    }
}

###################################################################
#
body ::tycho::EditDiff::insertString {index str {status {common}}} {
    set text $itk_component(text)
    
    if $readOnly {bell; return}
    #prepareInsert $index
    
    $text insert insert $str $status
    #parseRegion $start [$itk_component(text) index insert]
}




# TEST TEST TEST
body ::tycho::EditDiff::test {} {
    global filename1 filename2
    puts "Now entering test..."
    # Create an exec instance
    if {[info object $execDiff ]==""} {
        # Doesn't exist yet, create one
        set execDiff [::tycho::Exec [::tycho::autoName execDiff]]
    }
    $execDiff execProcess \
            "diff $filename1 $filename2 |& grep -v \"^<\" |& grep -v \"^>\""

    # Wait until execution is done
    $execDiff getStatusWait
    set diffResult [$execDiff getHistory]
    set diffResult [split $diffResult \n]
    puts "There are [llength $diffResult] lines"

    # Reset the line to read from beginning
    set diffResultLineCount 0

    while {[set tmp [diffReport]]!="done"} {
        puts "Current line is $tmp"
    }
}



###################################################################
#
# This is the entry point to comparing files. It first clears up the
# text buffer, read in UNIX's diff, and then compare.
body ::tycho::EditDiff::compareFile {{nothing {}}} {
    set text $itk_component(text)
    global filename1 filename2
    global linecolor1 linecolor2
    #set filename1 [safeEval ::tycho::queryfilename {File 1 to compare:}]
    #set filename2 [safeEval ::tycho::queryfilename {File 2 to compare:}]
    #set filename1 "/tmp_mnt/tarsky/tarsky1/kchang/tycho/3.cc"
    #set filename2 "/tmp_mnt/tarsky/tarsky1/kchang/tycho/4.cc"
    
    # Make sure that all the files are legal to begin with. Otherwise, exit.
    set flag 1
    foreach i {1 2} {
        if {[eval set filename$i]=="" || [eval set filename$i]=="NoName"} {
            safeEval ::tycho::warn "File name invalid: [eval set filename$i]"
            return
        }

        if {![file exists [eval set filename$i]]} {
            safeEval ::tycho::warn "File does not exist: [eval set filename$i]"
            return
        }
        
        if {![file readable $filename1]} {
            safeEval ::tycho::warn "File is not readable: $filename"
            return
        }
    }

    # Create an exec instance
    if {[info object $execDiff ]==""} {
        # Doesn't exist yet, create one
        set execDiff [::tycho::Exec [::tycho::autoName execDiff]]
    }
    $execDiff execProcess \
            "diff $filename1 $filename2 |& grep -v \"^<\" |& grep -v \"^<\""
    #$execDiff execProcess "diff $filename1 $filename2"
    # Wait until execution is done
    $execDiff getStatusWait
    set diffResult [$execDiff getHistory]

    puts "$diffResult"

    set diffResult [split $diffResult \n]
    # Reset the line to read from beginning
    set diffResultLineCount 0
    
    puts "There are [llength $diffResult] lines this time..."
    
    # Open up files 
    set fd1 [open $filename1 r]
    set fd2 [open $filename2 r]
    set fileLineCount1 1
    set fileLineCount2 1
    
    # Entry point to reading the actual files and outputting to text
    configure -readonly 0
    clear
    while {[set diffInfo [diffReport]] != "done"} {

        set info [lindex $diffInfo 0]
        set n1 [lindex $diffInfo 1]
        set n2 [lindex $diffInfo 2]
        set n3 [lindex $diffInfo 3]
        set n4 [lindex $diffInfo 4]
        
        # Output common lines. Also increment
        # file1 and file2 pointer
        while {$fileLineCount1 < $n1} {
            # Increment file1 until difference seen.
            insertString insert [gets $fd1]\n common
            incr fileLineCount1
        }
        while {$fileLineCount2 < $n3} {
            # Increment file2 until difference seen.
            gets $fd2
            incr fileLineCount2
        }
        
        # If changed (character c), delete (d), or added (a)
        if {$info=="c"} {
            # Output differences
            while {$fileLineCount1 <= $n2} {
                insertString insert [gets $fd1]\n linecolor1
                incr fileLineCount1
            }
            while {$fileLineCount2 <= $n4} {
                insertString insert [gets $fd2]\n linecolor2
                incr fileLineCount2
            }
            # Continue...
        } elseif {$info=="d"} {
            # Output the added lines
            while {$fileLineCount1 <= $n2} {
                insertString insert [gets $fd1]\n linecolor2
                incr fileLineCount1
            }
        } elseif {$info=="a"} {
            while {$fileLineCount2 <= $n4} {
                insertString insert [gets $fd2]\n linecolor1
                incr fileLineCount2
            }
        }
    }


    puts "Now done, reading the rest of the files"
    # Read and output the rest of the common lines until EOF
    while {![eof $fd1]} {
        insertString insert [gets $fd1]\n common
    }
    close $fd1
    close $fd2

    configure -readonly 1
    markUnmodified
    return

    #set data [read $fd]
    #markModified
}

#####################################################################
#### diffReport
# parse the output of the UNIX's diff utility
body ::tycho::EditDiff::diffReport {} {
    # This is here as an attempt to speed up responce time.
    ::tycho::safeUpdate $this

    #The normal output contains lines of these forms:
    #n1 a n3,n4
    #n1,n2 d n3
    #n1,n2 c n3,n4

    # Reinitialize n1 through n4 to 0
    foreach i {3 4} {
        set n$i 0
    }
    
    # Keep going until we hit the end of line
    while {$diffResultLineCount < [llength $diffResult]} {
        set line [lindex $diffResult $diffResultLineCount]
        # FIXME:
        # This is an expensive operation! Regex is the bottleneck if
        # there are many differences.
        if {[regexp \
                {(^[0-9]+)(,[0-9]+)?(c|a|d)([0-9]+)(,[0-9]+)?$} $line match \
                n1 n2 command n3 n4]} {
            # Get rid of leading comma for n2 and n4
            regexp {,([0-9]+)} $n2 match n2
            regexp {,([0-9]+)} $n4 match n4
            
            # If it's a single line, make sure the second line (now 0)
            # corresponds to the first line (with a value)
            if {$n2<$n1} {set n2 $n1}
            if {$n4<$n3} {set n4 $n3}
            
            incr diffResultLineCount
            return "$command $n1 $n2 $n3 $n4"
        }
	incr diffResultLineCount
    }
    return done
}



###################################################################
#### help
# Open a window with help on the current widget.
#
body ::tycho::EditDiff::help {} {
    global ::TYCHO

    ::tycho::File::openContext \
        [file join $TYCHO editors textedit doc usersGuides \
	    EditDiffHelp.html]
}



####################################################################
####################################################################
####                    public procedures                       ####



####################################################################
####################################################################
####                    protected methods                       ####

