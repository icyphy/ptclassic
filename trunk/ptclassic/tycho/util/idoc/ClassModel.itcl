##########################################################################
# @Version: $Id$
# @Author: John Reekie
#
# @Copyright (c) 1997 The Regents of the University of California.
# All rights reserved.
# 
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in all
# copies of this software.
# 
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
# 						PT_COPYRIGHT_VERSION_2
# 						COPYRIGHTENDKEY
##########################################################################


##########################################################################
#### ClassModel
#
# The _ClassModel_ class implements a model of a object-oriented class. It
# is general enough to represent classes in most OO languages, although
# there may be reason to subclass it to provide access methods 
# more suitable to particular languages. It is designed to be
# usable both for documenting classes and for use in 
# object models. The names of methods (including constructors and
# desctructors) should, in languages that support multiple
# methods per operation, contain the full signature. For example:
# <code>add(int,int):int</code> and <code>add(int,float):float</code>.
#
# The model has the following attributes:
#
# <dl>
# <dt><b>-exceptions</b>
# <dd>
# Exceptions thrown by this class. An attribute
# because exceptions don't have attributes. The default is null.
#
# <dt><b>-inherits</b>
# <dd>
# A list of classes from which this class inherits.
#
# <dt><b>-implements</b>
# <dd>
# A list of interfaces that this class implements.
#
# <dt><b>-interface</b>
# <dd>
# The file in which the class' interface resides.
#
# <dt><b>-language</b>
# <dd>
# The language in which the class was written.
# Default is a null string.
#
# <dt><b>-modifiers</b>
# <dd>
# Other class modifiers. Possible values depend
# on the languages. The default is null.
#
# <dt><b>-name</b>
# <dd>
# The class name of the class. (i.e. ::tycho::ClassModel)
#
# <dt><b>-package</b>
# <dd>
# The name of the package this class belongs to. 
# Default is null.
#
# <dt><b>-protection</b>
# <dd>
# The protection level of the class. Usually,
# this includes "public" and "package". The default is "public".
#
# <dt><b>-source</b>
# <dd>
# The file in which the class resides.
#
# </dl>
#
# The model has the following types:
# <p>
# <dl>
# <dt><b>constructor</b> _name_
# <dd>
# A constructor. Constructors typically contain nested
# _argument_ entitiers, which represent the arguments of the constructor.
# Constructors have the following attributes:
#   <dl>
#   <dt><b>-description</b>
#   <dd> A short description of the constructor, in plain text.
#   <dt><b>-exceptions</b>
#   <dd> Exceptions thrown by this constructor. Default
#        is null.
#   <dt><b>-explanation</b>
#   <dd> An explanatory description of the constructor, in HTML.
#   <dt><b>-modifiers</b>
#   <dd> Other modifiers. Possible values depend
#        on the languages. The default is null.
#   <dt><b>-protection</b>
#   <dd> The protection level of the method. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "public."
#   </dl>
#
# <dt><b>destructor</b> _name_
# <dd>
# A destructor. Destructors typically contain nested
# _argument_ entitiers, which represent the arguments of the destructor.
# Destructors have the following attributes:
#   <dl>
#   <dt><b>-description</b>
#   <dd> A short description of the destructor, in plain text.
#   <dt><b>-exceptions</b>
#   <dd> Exceptions thrown by this destructor. Default
#        is null.
#   <dt><b>-explanation</b>
#   <dd> An explanatory description of the destructor, in HTML.
#   <dt><b>-modifiers</b>
#   <dd> Other modifiers. Possible values depend
#        on the languages. The default is null.
#   <dt><b>-protection</b>
#   <dd> The protection level of the method. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "public."
#   </dl>
#
# <dt><b>method</b> _name_
# <dd>
# A method. Methods typically contain nested _argument_ entities, which 
# represent the arguments of the method. Methods have the following
# attributes:
#   <dl>
#   <dt><b>-description</b>
#   <dd> A short description of the method, in plain text.
#   <dt><b>-exceptions</b>
#   <dd> Exceptions thrown by this method. Default
#        is null.
#   <dt><b>-explanation</b>
#   <dd> An explanatory description of the method, in HTML.
#   <dt><b>-modifiers</b>
#   <dd> Other modifiers. Possible values depend
#        on the languages, but will include "virtual" for C++ and
#        "synchronized" for Java. The default is null.
#   <dt><b>-protection</b>
#   <dd> The protection level of the method. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "public."
#   <dt><b>-scope</b>
#   <dd> The scope of the method. This can be either
#        "instance," meaning that the method operates on an instance
#        of this class, or "class," meaning that the method operates
#        on the shared class data. (These are called "class methods"
#        in Smalltalk and "procs" in [Incr Tcl]). Default is
#        "instance."
#   <dt><b>-type</b>
#   <dd> The return type of the method. The default is null.
#   </dl>
#
# <dt><b>variable</b> _name_
# <dd>
# A variable of the class. Variables have the following attributes:
#   <dl>
#   <dt><b>-default</b>
#   <dd> The initial/default value of the variable. The defualt 
#        is null. This attribute does not apply to certain languages and
#        should then be ignored.
#   <dt><b>-description</b>
#   <dd> A short description of the variable, in plain text.
#   <dt><b>-explanation</b>
#   <dd> An explanatory description of the variable, in HTML.
#   <dt><b>-modifiers</b>
#   <dd> Other modifiers. Possible values depend
#        on the languages, but will include "static" for C++ and
#        "synchronized" for Java. The default is null.
#   <dt><b>-protection</b>
#   <dd> The protection level of the variable. Usually,
#        this includes at least "private", "protected", and "public".
#        The default is "protected."
#   <dt><b>-scope</b>
#   <dd> The scope of the variable. This can be either
#        "instance," meaning that the method operates on an instance
#        of this class, or "class," meaning that the method operates
#        on the shared class data. (These are called "class variables"
#        in Smalltalk and "common variables" in [Incr Tcl]). Default is
#        "instance."
#   <dt><b>-type</b>
#   <dd> The type of the variable. The default is null.
# </dl>
#
# <dt><b>argument</b> _name_
# <dd>
# An argument. At the top level, this is a class argument, which
# probably only makes sense if the language supports generics
# ("templates" in C++). Inside a method, it represents an argument
# to the method. It has the following attributes:
#   <dl>
#   <dt><b>-default</b>
#   <dd> The default value of the argument. This makes
#       sense only if the argument is optional. Default is a null string.
#   <dt><b>-description</b>
#   <dd> A short description of the argument, in plain text.
#   <dt><b>-explanation</b>
#   <dd> An explanatory description of the argument, in HTML.
#   <dt><b>-optional</b>
#   <dd> True is the argument is optional. Default
#       is zero (false).
#   <dt><b>-type</b>
#   <dd> The type of the argument. Default is null.
#   </dl>
# </dl>
#
# Here is an example of a class model. This creates
# a model and loads it with a string in TIM format -- usually,
# though, you would set the *-datafile* option and
# call load{} (see <a href="Model.idoc">Model</a>). After
# creating it, call the describe{} method to confirm its
# contents:
# <pre><tcl>
#     catch {delete object $class}
#     set class [::tycho::ClassModel [::tycho::autoName class]]
#     $class parse {
#        modelconfigure -language Itcl -name ::tycho::exampleclass
#        modelconfigure -description {An example class.}
#        modelconfigure -explanation {This is a <i>silly</i> class.}
#        modelconfigure -inherits ::tycho::Mommy
#        variable foo \
#            -protection public \
#            -explanation "This is a public variable."
#        method bar \
#            -explanation "This is a public method." {
#            argument x
#            argument y
#        }
#     }
#     $class describe
# </tcl></pre>
#
# Return the public methods of the class:
# <pre><tcl>
#     $class methods -protection public
# </tcl></pre>
#
# Return the explanation of a method:
# <pre><tcl>
#     $class get annotation bar.explanation method
# </tcl></pre>
#
# Return the arguments of a method:
# <pre><tcl>
#     $class arguments bar
# </tcl></pre>
#
class ::tycho::ClassModel {
    inherit ::tycho::DataModel

    constructor {args} {}
    destructor {}
    
    #################################################################
    ####                        options                          ####
    
    #################################################################
    ####                     public methods                      ####

    # Add an argument with attributes to the class
    method argument {method name args}

    # Get the arguments of a method
    method arguments {method}

    # Add a parent with attributes to the class
    method parent {name args}

    # Get the parents of the class with matching attributes
    method parents {args}
}

########################################################################
#### constructor
#
body ::tycho::ClassModel::constructor {args} {
    # Evaluate options
    eval configure $args

    # Define the attributes of this model. See the class
    # comment for information.
    modelconfigure \
            -interface "" \
            -name "" \
            -language "" \
            -package "" \
            -source "" \
            -protection "public" \
            -modifiers "" \
            -exceptions "" \
	    -inherits {} \
	    -implements {} \
	    -description "" \
	    -explanation ""

    # Define the "argument" entity
    type define argument \
	    -type "" \
	    -optional 0 \
	    -default "" \
	    -description "" \
	    -explanation ""

    # Define the "constructor" entity
    type define constructor \
	    -protection public \
	    -modifiers "" \
            -exceptions "" \
	    -description "" \
	    -explanation ""

    # Define the "destructor" entity
    type define destructor \
	    -protection public \
	    -modifiers "" \
            -exceptions "" \
	    -description "" \
	    -explanation ""

    # Define the "method" entity
    type define method \
	    -protection public \
	    -modifiers "" \
	    -type "" \
	    -scope instance \
            -exceptions "" \
	    -description "" \
	    -explanation ""

    # Define the "variable" entity
    type define variable \
	    -protection protected \
	    -modifiers "" \
	    -type "" \
	    -scope instance \
            -default "" \ \
	    -description "" \
	    -explanation ""
}


########################################################################
#### argument
#
# Add an argument to a method, Constructor, or Destructor. 
# This method is provided for convenience -- it is not used 
# by the TIM file parser. 
# Additional arguments are a flat attribute-value list for the
# argument. Flag an error if the argument already exists. 
#
body ::tycho::ClassModel::argument {method name args} {
    set fullmethod [fullName method $method]
    set fullname [fullName argument $name]

    # Create correct fullname if it's a Constructor or Destructor 
    if {![exists method $fullmethod]} {
        set fullmethod [fullName Constructor $method]
        if {![exists Constructor $fullmethod]} {
            set fullmethod [fullName Destructor $method]
        }
    }

    _verifynot argument $fullmethod $fullname $fullmethod$separator$fullname
    _addentity argument $fullmethod $fullname \
            $fullmethod$separator$fullname {} $args

    # no support for the interface other than toplevel
    list delete argument $fullmethod$separator$fullname
}

########################################################################
#### arguments
#
# Get the arguments of a method, Constructor, or Destructor. If they
# have the same name, returns the first it finds in order of method,
# Constructor, Destructor.
#
body ::tycho::ClassModel::arguments {method} {
    set fullmethod [fullName method $method]

    # Create correct fullname if it's a Constructor or Destructor 
    if {![exists method $fullmethod]} {
        set fullmethod [fullName Constructor $method]
        if {![exists Constructor $fullmethod]} {
            set fullmethod [fullName Destructor $method]
        }
    }

    set prms {}
    set prm_prms [_children argument $fullmethod]
    foreach prm $prm_prms {
        lappend prms [shortName argument $prm]
    }
    return $prms
}

########################################################################
#### parent
#
# Add a new parent and return the inverse command.
# Additional arguments are a flat attribute-value list for the
# parent. Flag an error if the parent already exists.
#
body ::tycho::ClassModel::parent {name args} {
    set fullname [fullName parent $name]

    _verifynot parent {} $fullname $fullname
    _addentity parent {} $fullname $fullname {} $args
    list delete parent $name
}

########################################################################
#### parents
#
# Get the parents of the class with attributes that match the given
# attributes and values. This can be used to get parents that the
# current class extends (-inheritance implementation) or implements
# (-inheritance interface)
#
body ::tycho::ClassModel::parents {args} {
    set result {}
    foreach parent [_children parent {}] {
        array set temp $_attrs($parent)
        set matching 1
        foreach {attr val} $args {
            if {$temp($attr) != $val} {
                set matching 0
                break
            }
        }
        if {$matching} {
            lappend result [shortName parent $parent]
        }
    }
    return $result
}
