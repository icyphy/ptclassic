# A viewer for the idocumentation.
#
# @Author: Cliff Cordeiro
#
# @Version: $Id$
#
# @Copyright (c) 1995-1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################

#######################################################################
#### IDoc
# This class defines a combination of an HTML widget and a text widget
# which will eventually be used for more efficient class browsing.
#  
# Data is stored in an array of lists. The array is indexed by type
# (Protected Variable, Private Method, etc.) and the lists are arranged in
# name/content pairs (link {click here} altlink {shift-click here} etc {and
# more}). 
#  
# Eventually I would like to somehow add the methods of parent classes into
# the text widget and ultimately I think a better design would inherit from
# the HTML widget and add on to it. In a perfect world, this functionality 
# could be implemented with frames. (Except for the shift-click, which is  
# not well defined anyway.)
#  
# John suggested something about right clicking on the methods to allow
# switching to the idoc for the parent class or something. I think a link to
# the parent class(es) would be useful, but I would like to first document  
# all the methods that are available to a user and to a maintainer of this  
# particular class, which includes public and protected methods from the   
# parent classes which are not redefined.
#
# Here's an example of how to use this class:
#
# <tcl><pre>
# catch {destroy .u}
# ::tycho::Displayer .u
# ::tycho::IDoc .u.i
# .u showView .u.i
# .u centerOnScreen
# .u.i configure -file  $TYCHO/lib/tydoc/test/IDoc.idoc
# .u.i reload
# </tcl></pre>
#
class ::tycho::IDoc {
    inherit ::tycho::File

    ##########################################################################
    ####                            options                               ####

    # The color of Itcl options.
    itk_option define -optioncolor optionColor OptionColor white {
    }
  
    # The color of public constructs.
    itk_option define -publiccolor publicColor PublicColor white {
    }
    
    # The color of protected constructs.
    itk_option define -protectedcolor protectedColor ProtectedColor white {
    }
    
    # The color of private constructs.
    itk_option define -privatecolor privateColor PrivateColor white {
    }

    # The default head font -- currently an X font, but should
    # be made symbolic in Tk 8.0
    itk_option define -headfont headFont Font [::tycho::font \
            {New Century Schoolbook} 18 Roman]

    # The default body font -- currently an X font, but should
    # be made symbolic in Tk 8.0
    itk_option define -bodyfont bodyFont Font [::tycho::font Hevetica 12 Bold]

    constructor {args} {}
    destructor {}

    ###################################################################
    ####                      public methods                       ####
    
    # Return a description of the current class.
    public method describe {}

    # Insert the specified data.
    public method insertData {data}
    
    # Insert HTML into myHtml(Top or Bottom) widget
    public method putHtml {data {top 1}}

    # Resize the appropriate frame.
    public method resizeFrame {horizontal pixels}

    ###################################################################
    ####                      protected variables                  ####
  
    # Current ::tycho::Class
    protected variable myClass
   
    # Internal contents widget
    protected variable myContents

    # Internal HTML widget for class-wide documentation
    protected variable myHtmlTop

    # Internal HTML widget for user-chosen documentation
    protected variable myHtmlBottom

    # Language of current myClass
    protected variable language

    # Location where mouse button was pressed.
    protected variable lastPress

    ###################################################################
    ####                      private methods                      ####

    # Bind a description to <enter>ing a label.
    private method binddesc {item label}
  
    # Bind an explanation to double clicking a label.
    private method bindexpl {item label}

    # Display the contents of myClass in contents widget.
    private method display {}

    # Display the proper methods/procedures in the contents widget.
    private method displaymeth {protection}

    # Display the proper variables in the contents widget.
    private method displayvar {protection}

    # Format the explanation of the given item in HTML.
    private method formatexpl {item}

    # Setup the resizing handles to behave properly.
    private method setupHandles {}
    
}

#########################################################################
#### -headfont configuration
# Parse the given X font to figure out what font family, size,
# and style to use for the display font
#
configbody ::tycho::IDoc::headfont {

    set f $itk_option(-headfont)
    foreach panel [$myContents panels] {
        $myContents subconfig $panel -font $f
    }
    # must be caught because class may not exist
    catch {$myContents subconfig class -font $f}
}

#########################################################################
#### -bodyfont configuration
# Parse the given X font to figure out what font family, size,
# and style to use for the display font
#
configbody ::tycho::IDoc::bodyfont {

    set f $itk_option(-bodyfont)
    foreach label [$myContents labels] {
        if {$label != "class"} {    
            $myContents subconfig $label -font $f
        }
    }
}

###################################################################
#### constructor
#
body ::tycho::IDoc::constructor {args} {

    # Setup a frame for the HTML widgets
    itk_component add htmlFrame {
        frame $itk_interior.htmlFrame
    } 
 
    itk_component add html1 {
        ::tycho::HTML $itk_interior.html1
    } {
        rename -textwidth -htmlwidth htmlWidth HtmlWidth
        rename -textheight -topheight topHeight TopHeight
    }

    set myHtmlTop $itk_component(html1)

    itk_component add html2 {
        ::tycho::HTML $itk_interior.html2
    } {
        rename -textwidth -htmlwidth htmlWidth HtmlWidth
        rename -textheight -bottomheight bottomHeight BottomHeight
    }

    set myHtmlBottom $itk_component(html2)

    itk_component add contents {
        ::tycho::MultiPanel $itk_interior.contents
    } {
       keep -height
       rename -width -contentswidth contentsWidth ContentsWidth
    }

    set myContents $itk_component(contents)

    # add handle to resize frames vertically
    itk_component add updown {
        frame $itk_interior.updown
    } {
        usual
    }
    
    # add handle to resize frames horizontally
    itk_component add leftright {
        frame $itk_interior.leftright
    } {
        usual
    }

    pack $itk_component(contents) -side left -anchor w -fill y \
            -in $itk_interior

    pack $itk_component(leftright) -side left -fill y \
            -in $itk_interior

    pack $itk_component(html1) -side top -expand 1 -fill both \
            -anchor n -in $itk_interior.htmlFrame

    pack $itk_component(updown) -side top -fill x \
            -in $itk_interior.htmlFrame

    pack $itk_component(html2) -side top -expand 1 -fill both \
            -anchor n -in $itk_interior.htmlFrame
    
    pack $itk_component(htmlFrame) -side left -expand 1 -fill both

    # Insert items in the menubar, if there is one.
    if {$myMenubar != {}} {
        $myMenubar disable {Undo/Redo}
        $myMenubar disable {Cut}
        $myMenubar disable {Paste}
        $myMenubar disable "Font..."
        $myMenubar delete "Fill Region"
        $myMenubar delete "Right Fill Column"
        $myMenubar delete "Set Fill Prefix"
        $myMenubar delete "Lower Case"
        $myMenubar delete "Upper Case"
        $myMenubar delete "Capitalize"
        $myMenubar delete "Insert..."
        $myMenubar delete "Save"
        $myMenubar delete "SaveAs..."
        $myMenubar delete "Evaluate"
        $myMenubar delete "Revision Control..."
    }

    eval itk_initialize $args

    # Subscribe to the preference set
    preference subscribeoptions $this \
            -headfont displayFont \
            -bodyfont entryFont \
            -height textHeight \
            -htmlwidth textWidth

    # Configure the handles
    setupHandles

    # Something annoying inherited insists on creating this thing
    pack forget $itk_interior.childsite
}

    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#####################################################################
#### describe 
# Return a description of the current class by calling myClass describe.
#
body ::tycho::IDoc::describe {} {
    return [$myClass describe]
}

#######################################################################
#### insertData
# Append the specified data to the existing display.
# The data should be a list of items of the form <i>methodname args</i>,
# where <i>methodname</i> is a method of this class (i.e. any class
# derived from <code>IDoc</code>), and <i>args</i> is the
# set of arguments appropriate for that method.
#
body ::tycho::IDoc::insertData {data} {
    if [getReadOnly] {bell; return}
    catch {delete object myClass}
    set myClass [::tycho::Class [::tycho::autoName class]]
    $myClass read string "$data"
    set language [$myClass modelcget -language]
    display
    putHtml [$myClass get annotation explanation]
}

#########################################################################
#### putHtml
# Load a portion of HTML into the $myHtml widget
#
body ::tycho::IDoc::putHtml {data {top 1}} {
    switch $top {
        1 {
            $myHtmlTop clear
            $myHtmlTop insertData $data

        }
        0 {
            $myHtmlBottom clear
            $myHtmlBottom insertData $data
        }
    }
}

#####################################################################
#### resizeFrame
# Resize the frame after a mouse event involving either handle.
#
body ::tycho::IDoc::resizeFrame {horizontal pixels} {
    if {$horizontal} {
        set cWidth [winfo pixels . [$this cget -contentswidth]]
        set hWidth [winfo width $itk_component(html1)]
        # get ratio of width/pixels because HTML is "special"
        set hRatio [expr $hWidth.0 / [$this cget -htmlwidth]]
        $this config -contentswidth [expr $cWidth - $pixels]
        $this config -htmlwidth [expr int(($hWidth + $pixels)/$hRatio)]
    } {
        set tHeight [winfo height $itk_component(html1)]
        set bHeight [winfo height $itk_component(html2)]
        if {$tHeight > $bHeight} {
            set ratio [expr $tHeight.0 / [$this cget -topheight]]
        } {
            set ratio [expr $bHeight.0 / [$this cget -bottomheight]]
        }
        $this config -topheight [expr int(($tHeight - $pixels)/$ratio)]
        $this config -bottomheight [expr int(($bHeight + $pixels)/$ratio)]
    }
}

    ###################################################################
    ###################################################################
    ####                      private methods                      ####

###########################################################################
#### binddesc
# bind to the enter and shift release events on the given label
# the display of the description of the given item in the statusbar
# if such a description exists
#
body ::tycho::IDoc::binddesc {item label} {
    if ![catch {set desc [$myClass get annotation $item.description]}] {
        $myContents bind $label <Enter> \
                [code "$this putStatus \{$desc\}"]
        $myContents bind $label <KeyRelease-Shift_L> \
                [code "$this putStatus \{$desc\}"]
        $myContents bind $label <KeyRelease-Shift_R> \
                [code "$this putStatus \{$desc\}"]
        $myContents bind $label <Leave> \
                [code "$this putStatus {}"]
    }   
}

###########################################################################
#### bindexpl
# bind to the double click event on the given label
# the display of the explanation of the given item in HTML
# the explanation includes extra information besides the
# actual explanation field of the item
#
body ::tycho::IDoc::bindexpl {item label} {
 
    # format explanation
    set expl [formatexpl $item]

    # bind explanation to double click
    $myContents bind $label <Double-Button-1> \
            [code "$this putHtml {$expl} {0}"]
}

###########################################################################
#### display
# display the contents of myClass in the myContents widget
#
body ::tycho::IDoc::display {} {
    
    # clear the contents widget
    $myContents clear

    # insert the class name
    $myContents appendlabel class \
            -text [$myClass modelcget -name] \
            -font [$this cget -headfont]

    $myContents bind class <Double-Button-1> \
            [code "$this putHtml \{[$myClass get annotation explanation]\}"]

    # Class description is optional
    if ![catch {$myClass get annotation description}] {
        $myContents bind class <Enter> [code \
                "$this putStatus \{[$myClass get annotation description]\}"]
        $myContents bind class <Leave> [code \
                "$this putStatus {}"]
    }

    # FIXME in general, insert class parameters here

    # insert each type (Protected Method, etc.) by protection order
    foreach protection {public protected private} {
        # Variables        
        displayvar $protection   
        # Methods
        displaymeth $protection   
    }
}

#####################################################################
#### displaymeth
# Display the methods/procedures of the given protection in the myContents
# widget in according to the $language variable.
#
body ::tycho::IDoc::displaymeth {protection} {

    switch $language {
        Itcl {
            # Itcl uses -scope instance to signify a method
            # and -scope class to signify a class
            
            # Methods
            set subnames {}
            foreach method [$myClass methods \
                    -protection $protection -scope instance] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <Double-Click>
                binddesc $method $method\m
                bindexpl $method $method\m
                lappend subnames $method\m
            }
            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\m "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont]
            }

            # Procs
            set subnames {}
            foreach method [$myClass methods \
                    -protection $protection -scope class] {
                # put label into contents widget
                $myContents appendlabel $method\p \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <Double-Click>
                binddesc $method $method\p
                bindexpl $method $method\p
                lappend subnames $method\p
            }
            # insert panel if any procs found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Procs" \
                        -font [$this cget -headfont]
            }   
        }
        default {
            set subnames {}
            foreach method [$myClass methods \
                    -protection $protection] {
                # put label into contents widget
                $myContents appendlabel $method\m \
                        -text $method \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <Double-Click>
                binddesc $method $method\p
                bindexpl $method $method\p
                lappend subnames $method\p
            }
            # insert panel if any methods found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\p "$subnames" \
                        -text "$temp Methods" \
                        -font [$this cget -headfont]
            }
        }   
    }
}

#####################################################################
#### displayvar
# Display the variables of the given protection in the myContents
# widget in according to the $language variable.
#
body ::tycho::IDoc::displayvar {protection} {

    switch $language {
        Itcl {
            # itcl uses -modifiers itk_option to signify an itk_option.
            # check for itk_options
            set subnames {}
            foreach variable [$myClass variables \
                    -protection $protection -modifiers itk_option] {
                # put label into contents widget
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -optioncolor]
                # setup bindings on <Enter> and <Double-Click>
                binddesc $variable $variable\v
                bindexpl $variable $variable\v
                lappend subnames $variable\v
            }
            # insert panel if any itk_options found
            if {$subnames != {}} {
                $myContents append $protection\i "$subnames" \
                        -text "Itk Options" \
                        -font [$this cget -headfont]
            }
            
            # do other variables
            set subnames {}
            foreach variable [$myClass variables \
                    -protection $protection -modifiers {}] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <Double-Click>
                binddesc $variable $variable\v
                bindexpl $variable $variable\v
                lappend subnames $variable\v
            }
            # insert panel if any variables found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont]
            }
        }
        default { 
            set subnames {}
            foreach variable [$myClass variables \
                    -protection $protection] {
                # put label into contents widget   
                $myContents appendlabel $variable\v \
                        -text $variable \
                        -font [$this cget -bodyfont] \
                        -fg [$this cget -$protection\color]
                # setup bindings on <Enter> and <Double-Click>
                binddesc $variable $variable\v
                bindexpl $variable $variable\v
                lappend subnames $variable\v
            }
            # insert panel if any variables found
            if {$subnames != {}} {
                set temp [::tycho::capitalize $protection]
                $myContents append $protection\v "$subnames" \
                        -text "$temp Variables" \
                        -font [$this cget -headfont]
            }
        }
    }
}

#####################################################################
#### formatexpl
# Format the explanation of the given item in HTML. This is usually
# bound to a double click on an item in the contents widget.
# An item may not have an explanation, but _must_ have a description.
#
body ::tycho::IDoc::formatexpl {item} {
    if [catch {set expl [$myClass get annotation $item.explanation]}] {
        set expl [$myClass get annotation $item.description]
    }
    set paramlist {}
    foreach parameter [$myClass parameters $item] {
        set default [$myClass itemcget parameter $item.$parameter -default]
        if {$default == {}} {
            lappend paramlist $parameter
        } else {
            lappend paramlist "$parameter $default"
        }
    }
    set html "$item $paramlist\n $expl"
}

#####################################################################
#### setupHandles
# Setup the resizing handles to behave properly: configure the cursor,
# bind the behaviours. Called by the constructor.
#
body ::tycho::IDoc::setupHandles {} {
    set updown $itk_component(updown)
    set leftright $itk_component(leftright)

    $updown config -cursor sb_v_double_arrow -height 3
    $leftright config -cursor sb_h_double_arrow -width 3
    
    bind $updown <1> {set lastPress "%y"}
    bind $updown <ButtonRelease-1> {%Q resizeFrame 0 [expr $lastPress - %y]}
    bind $leftright <1> {set lastPress "%x"}
    bind $leftright <ButtonRelease-1> {%Q resizeFrame 1 [expr $lastPress - %x]}



}
