# Mega-widget with a list of subpanel widgets.
#
# @Author: Cliff Cordeiro
#
# @Version: $Id$
#
# @Copyright (c) 1996 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### options
#

#######################################################################
#### MultiPanel
# A simple grouping of Subpanel widgets, MultiPanel allows addition and
# removal of Subpanel and label widgets in a megawidget FIXME: with 
# scrollbars. 
#
# Subpanels are added using the <code>append</code> command and can
# contain any number of optional arguments that a subpanel widget will
# accept.
#
# Labels are added using the <code>appendlabel</code> command and can
# contain any number of optional arguments that a label widget will accept.
#
# MultiPanel uses a circular list to keep track of nodes:
# either subpanels or labels. The actual widget names 
# are stored in an array indexed by the node names and are chosen
# and handled automatically.
#
# <p>
# Here is an example of how to use the MultiPanel:
# <tcl><pre>
# catch {destroy .y}
# ::tycho::Displayer .y
# set mp [::tycho::MultiPanel .y.m]
# pack $mp
# $mp appendlabel x -text Label
# $mp appendlabel z -text Child
# $mp append y {z} -text Panel
# $mp bind z &lt;Enter&gt; {puts Child!}
# pack forget .y.childsite
# .y centerOnScreen
# </pre></tcl>
#
class ::tycho::MultiPanel {
    inherit ::tycho::TWidget
 
    constructor {args} {}
    destructor {}
     
    ###################################################################
    ####                         public methods                    ####

    # Append a new subpanel 
    method append {element args}

    # Append a new label
    method appendlabel {element args}

    # Bind to a subpanel
    method bind {element args}

    # Reinitialize the multipanel
    method clear {}

    # Returns the subpanel/label names as a list
    method elements {}

    # Return the label names as a list
    method labels {}
 
    # Return the subpanel names as a list
    method panels {}

    # Remove a subpanel/label
    method remove {element}
  
    # cget for subpanels/labels
    method subcget {element args}
    
    # configure for subpanels/labels
    method subconfig {element args}

    ###################################################################
    ####                      private methods                      ####

    # Return info on element.
    private method elementinfo {args}

    ###################################################################
    ####                      private variables                    ####

    private variable myData
    private variable myCanvas
    private variable myList
}


#######################################################################
#### constructor
#
body ::tycho::MultiPanel::constructor {args} {

    itk_component add canvas {
        canvas $itk_interior.canvas
    } {
        keep -background
        keep -width
        keep -height
    }

    set myCanvas $itk_component(canvas)

    #FIXME: scrollbars are not packed and do not work

    itk_component add hsb {
        scrollbar $itk_interior.hsb \
                -orient horizontal \
                -command "$myCanvas xview"
    } {
        keep -background -cursor
    }  
      
    itk_component add vsb {
        scrollbar $itk_interior.vsb \
                -orient vertical \
                -command "$myCanvas yview"
    } {
        keep -background -cursor
    }        

    $myCanvas configure \
            -xscrollcommand "$itk_component(hsb) set" \
            -yscrollcommand "$itk_component(vsb) set"

    set myList [::tycho::CircularList [::tycho::autoName list]]

    pack $myCanvas -expand 1 -fill both -side left -anchor nw
    
    # let canvas set size, not internal widgets
    pack propagate $myCanvas 0

    eval itk_initialize $args
}


#######################################################################
#### destructor
#
body ::tycho::MultiPanel::destructor {} {
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

#######################################################################
#### append
# Add a subpanel to the bottom of the MultiPanel.
#
body ::tycho::MultiPanel::append {element {children} args} {

    # check children
    if {[llength $children] > 1} {
        # put multiple children in a frame
        set child $myCanvas[::tycho::autoName .cframe]
        frame $child
        foreach childel $children {
            set cname [elementinfo $childel]
            pack $cname -in $child -anchor nw
        }
    } else {
        # only one child, no frame necessary
        if {[llength $children] == 1} {
            set child [elementinfo $children]
        }
    }
        
    # do this here in case there's an error
    $myList append $element

    set newPanel $myCanvas[::tycho::autoName .panel]
    if {$children != ""} {
        eval "::tycho::Subpanel $newPanel -childwidget $child $args"
    } else {
        eval "::tycho::Subpanel $newPanel $args"
    }
    pack $newPanel -anchor nw -side top
    
    # raise to keep multiple children unhidden
    foreach childel $children {
        set cname [elementinfo $childel]
        raise $cname $newPanel
    }

    set myData($element) $newPanel
}

#####################################################################
#### appendlabel
# Add a label to the bottom of the MultiPanel.
#
body ::tycho::MultiPanel::appendlabel {element args} {

    # do this first in case there's an error
    $myList append $element

    set newLabel $myCanvas[::tycho::autoName .label]
    eval "label $newLabel $args"
    pack $newLabel -anchor nw -side top

    set myData($element) $newLabel
}

#####################################################################
#### bind
# Bind events to internal subpanel widgets. Identical to global bind.
#
body ::tycho::MultiPanel::bind {element args} {

    set elname [elementinfo $element]

    # bind the subpanel/label
    uplevel "bind $elname $args"
}


#####################################################################
#### clear
# Clear the internal list and remove subpanels from the multipanel widget.
#
body ::tycho::MultiPanel::clear {} {

    foreach element [$myList elements] {
        remove $element
    }
}

#####################################################################
#### elements
# Return the elements of the internal list of subpanels/labels.
#
body ::tycho::MultiPanel::elements {} {

    return [$myList elements]
}

#####################################################################
#### labels
# Return the elements of the internal list which are labels
#
body ::tycho::MultiPanel::labels {} {

    set labels {}
    foreach element [$myList elements] {
        if {[winfo class [elementinfo $element]] == "Label"} {
            lappend labels $element
        }
    }
    return "$labels"
}

#####################################################################
#### panels
# Return the elements of the internal list which are subpanels
#
body ::tycho::MultiPanel::panels {} {

    set panels {}
    foreach element [$myList elements] {
        if {[winfo class [elementinfo $element]] == "Subpanel"} {
            lappend panels $element
        }
    }
    return "$panels"
}

#####################################################################
#### remove 
# Remove an element. FIXME: Children of subpanels are not removed yet 
# will no longer be seen or useful.
#
body ::tycho::MultiPanel::remove {element} {

    set elname [elementinfo $element]
    unset myData($element)
    $myList remove $element
    destroy $elname    
}

#####################################################################
#### subcget 
# cget on an individual subpanel.
#
body ::tycho::MultiPanel::subcget {element args} {

    set elname [elementinfo $element]
    uplevel "$elname cget $args"
}

#####################################################################
#### subconfigure 
# configure on an individual subpanel.
#
body ::tycho::MultiPanel::subconfig {element args} {
    
    set elname [elementinfo $element]
    uplevel "$elname configure $args"
}
    ###################################################################
    ###################################################################
    ####                      private methods                      ####

#####################################################################
#### elementinfo
# Return the widget name of a subpanel or label.
#
body ::tycho::MultiPanel::elementinfo {args} {

    set temp ""
    foreach element $args {
        if {[catch {lappend temp $myData($element)}] == 1} {
            error "MultiPanel::elementinfo: Can't find element: $element"
        }
    }
    return "$temp"
}
