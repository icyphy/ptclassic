# Remote Procedure calls to a remote Tcl Blend process
#
# @Author:
#
# @Version: $Id$
#
# @Copyright (c) 1998 The Regents of the University of California.
# All rights reserved.
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the above
# copyright notice and the following two paragraphs appear in all copies
# of this software.
#
# IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
# FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
# THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
# PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
# CALIFORNIA HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
# ENHANCEMENTS, OR MODIFICATIONS.
# 
#                                        PT_COPYRIGHT_VERSION_2
#                                        COPYRIGHTENDKEY
#######################################################################


#######################################################################
#### options
#

#######################################################################
#### JRPC
# The procs in this file implement a simple interface between two
# Tcl interpreters running as separate processes on the same machine.
# We use this to communicate between Itcl2.2 and Tcl Blend.  We
# cannot run these in the same process, they require different versions
# of Tcl.
#
# The Tcl Blend child process sources $TYCHO/kernel/JRPCServer.tcl
#
# <p>FIXME: This client/server setup is very insecure.  If the server is
# running on a machine, then anyone on the local machine can connect
# to the server and run arbitrary commands as the user that is running
# the server.
#
# <p>
# Here is an example of how to use the JRPC:
# <tcl><pre>
#     set jprc ::tycho::JRPC  
#     set jprc ::tycho::JRPC  
# </pre></tcl>
#
class ::tycho::JRPC {
    constructor {args} {}
    destructor {}
    
    ###################################################################
    ####                         public methods                    ####

    # Send a tcl command to the remote process
    method send {args}

    ###################################################################
    ####                   private variables                       ####

    # Socket used to communicate with the Tcl Blend sub process
    private variable _clientSocket

    # Process ID of the Tcl Blend process
    private variable _subprocpid
}

#######################################################################
#### constructor
# Start up a Tcl Blend subprocess
#
body ::tycho::JRPC::constructor {args} {
    global tycho

    # FIXME: we can only have one Tcl Blend server running on a machine
    # because we hardwire the port number
    set port 19876
    # FIXME: this will probably only work under Unix right now.
    # FIXME: we need to save the output
    set _subprocpid [exec jtclsh [file join $tycho kernel JRPCServer.tcl] &]

    # FIXME: this is lame too.
    exec sleep 5

    set _clientSocket [socket localhost 19876]
    fconfigure $_clientSocket -blocking 0
}

#######################################################################
#### destructor
# Close the Tcl Blend subprocess
#
body ::tycho::JRPC::destructor {} {
    catch {send exit}
    catch {close $_clientSocket}
    catch {exec kill $_subprocpid}
}


    ###################################################################
    ###################################################################
    ####                      public methods                       ####

########################################################################
#### send
# Run a remote command on channel.  Wait for the results
#
body ::tycho::JRPC::send {args} {
    eval [puts $_clientSocket $args]
    flush $_clientSocket
    # FIXME: this is a busy loop, and it sucks.
    set rl {}
    while {[llength $rl] != 2} {
	append rl [read $_clientSocket]
    }
    if {[lindex $rl 0]} {
	global errorInfo
	set errorInfo [lindex $rl 0]
	error [lindex $rl 1]
    } else {
	return [lindex $rl 1]
    }
}
